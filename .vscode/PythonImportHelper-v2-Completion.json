[
    {
        "label": "MSG",
        "importPath": "vendored1",
        "description": "vendored1",
        "isExtraImport": true,
        "detail": "vendored1",
        "documentation": {}
    },
    {
        "label": "abc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "abc",
        "description": "abc",
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AwaitableGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ChainMap",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DefaultDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Deque",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "FrozenSet",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncIterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Pattern",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sized",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Collection",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sized",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Hashable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "runtime_checkable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "runtime_checkable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Coroutine",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "IO",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Mapping",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NoReturn",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sized",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "runtime_checkable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NamedTuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "final",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Set",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "MutableSequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "SupportsIndex",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeGuard",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ClassVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "runtime_checkable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Iterable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "NewType",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ContextManager",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "InitVar",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "KW_ONLY",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "InitVar",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "InitVar",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "InitVar",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "field",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "random",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pow",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pow",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pow",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "isnan",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Awaitable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Generator",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "assert_type",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "dataclass_transform",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "dataclass_transform",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "dataclass_transform",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "LiteralString",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Literal",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "LiteralString",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "LiteralString",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Never",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "overload",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "override",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeAlias",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Concatenate",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Protocol",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "NotRequired",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Required",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeGuard",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeGuard",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "StrictTypeGuard",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "StrictTypeGuard",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeGuard",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "ParamSpec",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "TypeVarTuple",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Unpack",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "Self",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "DirEntry",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "PathLike",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Counter",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "AsyncExitStack",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "ExitStack",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "suppress",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "coroutine",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "get_event_loop",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Task",
        "importPath": "asyncio",
        "description": "asyncio",
        "isExtraImport": true,
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "asyncio.futures",
        "description": "asyncio.futures",
        "isExtraImport": true,
        "detail": "asyncio.futures",
        "documentation": {}
    },
    {
        "label": "ensure_future",
        "importPath": "asyncio.tasks",
        "description": "asyncio.tasks",
        "isExtraImport": true,
        "detail": "asyncio.tasks",
        "documentation": {}
    },
    {
        "label": "TracebackType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "LambdaType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "IntEnum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "auto",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "wait",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "Future",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "ThreadPoolExecutor",
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "isExtraImport": true,
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "chain",
        "importPath": "itertools",
        "description": "itertools",
        "isExtraImport": true,
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "importPath": "queue",
        "description": "queue",
        "isExtraImport": true,
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "my_module",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "my_module",
        "description": "my_module",
        "detail": "my_module",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cache",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "partial",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "total_ordering",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Handler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "NOTSET",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "unresolved_import",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unresolved_import",
        "description": "unresolved_import",
        "detail": "unresolved_import",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Document",
        "importPath": "dummy",
        "description": "dummy",
        "isExtraImport": true,
        "detail": "dummy",
        "documentation": {}
    },
    {
        "label": "isfunction",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "futures",
        "importPath": "concurrent",
        "description": "concurrent",
        "isExtraImport": true,
        "detail": "concurrent",
        "documentation": {}
    },
    {
        "label": "HTTPStatus",
        "importPath": "http",
        "description": "http",
        "isExtraImport": true,
        "detail": "http",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "Array",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "c_uint64",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "import_module",
        "importPath": "importlib",
        "description": "importlib",
        "isExtraImport": true,
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "Fraction",
        "importPath": "fractions",
        "description": "fractions",
        "isExtraImport": true,
        "detail": "fractions",
        "documentation": {}
    },
    {
        "label": "RLock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "ClassUnknown",
        "importPath": "some_module",
        "description": "some_module",
        "isExtraImport": true,
        "detail": "some_module",
        "documentation": {}
    },
    {
        "label": "CustomClass1",
        "importPath": "unknown_import",
        "description": "unknown_import",
        "isExtraImport": true,
        "detail": "unknown_import",
        "documentation": {}
    },
    {
        "label": "TemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "psyche1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.package1.psyche.pysche",
        "description": "packages.pyright-internal.src.tests.samples.package1.psyche.pysche",
        "peekOfCode": "def psyche1() -> str:\n    return \"3\"",
        "detail": "packages.pyright-internal.src.tests.samples.package1.psyche.pysche",
        "documentation": {}
    },
    {
        "label": "psyche1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.package1.psyche",
        "description": "packages.pyright-internal.src.tests.samples.package1.psyche",
        "peekOfCode": "def psyche1() -> int:\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.package1.psyche",
        "documentation": {}
    },
    {
        "label": "subfoo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.package1.sub",
        "description": "packages.pyright-internal.src.tests.samples.package1.sub",
        "peekOfCode": "def subfoo() -> str:\n    return 'hello'",
        "detail": "packages.pyright-internal.src.tests.samples.package1.sub",
        "documentation": {}
    },
    {
        "label": "MSG",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.project_src_with_extra_paths.src._vendored.vendored1",
        "description": "packages.pyright-internal.src.tests.samples.project_src_with_extra_paths.src._vendored.vendored1",
        "peekOfCode": "MSG = 'hello'",
        "detail": "packages.pyright-internal.src.tests.samples.project_src_with_extra_paths.src._vendored.vendored1",
        "documentation": {}
    },
    {
        "label": "AbstractFoo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "peekOfCode": "class AbstractFoo(ABC):\n    @abstractmethod\n    def foo1(self):\n        pass\n    @abstractmethod\n    def foo2(self):\n        pass\n    def foo3(self):\n        return 3\n    @classmethod",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "documentation": {}
    },
    {
        "label": "AbstractBar1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "peekOfCode": "class AbstractBar1(AbstractFoo):\n    def foo1(self):\n        pass\n# This should generate an error because AbstractBar1\n# is an abstract class.\nb = AbstractBar1()\nclass AbstractBar2(AbstractBar1):\n    def foo2(self):\n        pass\n# This should not generate an error because AbstractBar2",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "documentation": {}
    },
    {
        "label": "AbstractBar2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "peekOfCode": "class AbstractBar2(AbstractBar1):\n    def foo2(self):\n        pass\n# This should not generate an error because AbstractBar2\n# overrides all of the abstract methods it inherits.\nc = AbstractBar2()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "peekOfCode": "a = AbstractFoo()\nclass AbstractBar1(AbstractFoo):\n    def foo1(self):\n        pass\n# This should generate an error because AbstractBar1\n# is an abstract class.\nb = AbstractBar1()\nclass AbstractBar2(AbstractBar1):\n    def foo2(self):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "peekOfCode": "b = AbstractBar1()\nclass AbstractBar2(AbstractBar1):\n    def foo2(self):\n        pass\n# This should not generate an error because AbstractBar2\n# overrides all of the abstract methods it inherits.\nc = AbstractBar2()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "peekOfCode": "c = AbstractBar2()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass1",
        "documentation": {}
    },
    {
        "label": "InterfaceA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "peekOfCode": "class InterfaceA(abc.ABC):\n\t@abc.abstractmethod\n\tdef a(self) -> None:\n\t\tprint('InterfaceA.a')\nclass MixinA(InterfaceA):\n  \tdef a(self) -> None:\n\t  \tprint('MixinA.a')\nclass InterfaceAB(InterfaceA):\n    @abc.abstractmethod\n    def b(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "documentation": {}
    },
    {
        "label": "MixinA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "peekOfCode": "class MixinA(InterfaceA):\n  \tdef a(self) -> None:\n\t  \tprint('MixinA.a')\nclass InterfaceAB(InterfaceA):\n    @abc.abstractmethod\n    def b(self) -> None:\n        print('InterfaceAB.b')\nclass ClassAB(InterfaceAB, MixinA):\n  \tdef b(self) -> None:\n\t  \tprint('ClassAB.b')",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "documentation": {}
    },
    {
        "label": "InterfaceAB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "peekOfCode": "class InterfaceAB(InterfaceA):\n    @abc.abstractmethod\n    def b(self) -> None:\n        print('InterfaceAB.b')\nclass ClassAB(InterfaceAB, MixinA):\n  \tdef b(self) -> None:\n\t  \tprint('ClassAB.b')\nab = ClassAB()\nab.a()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "documentation": {}
    },
    {
        "label": "ClassAB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "peekOfCode": "class ClassAB(InterfaceAB, MixinA):\n  \tdef b(self) -> None:\n\t  \tprint('ClassAB.b')\nab = ClassAB()\nab.a()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "documentation": {}
    },
    {
        "label": "ab",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "peekOfCode": "ab = ClassAB()\nab.a()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass2",
        "documentation": {}
    },
    {
        "label": "MixinA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "peekOfCode": "class MixinA(abc.ABC):\n    pass\nclass MixinB(abc.ABC):\n    def get_model(self):\n        print(\"MixinB.get_model\")\nclass MixinC(abc.ABC):\n    @abc.abstractmethod\n    def get_model(self):\n        pass\n    def use_model(self):",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "documentation": {}
    },
    {
        "label": "MixinB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "peekOfCode": "class MixinB(abc.ABC):\n    def get_model(self):\n        print(\"MixinB.get_model\")\nclass MixinC(abc.ABC):\n    @abc.abstractmethod\n    def get_model(self):\n        pass\n    def use_model(self):\n        print(\"MixinC.get_model\")\nclass Trainer_1a(MixinA, MixinB, MixinC):",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "documentation": {}
    },
    {
        "label": "MixinC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "peekOfCode": "class MixinC(abc.ABC):\n    @abc.abstractmethod\n    def get_model(self):\n        pass\n    def use_model(self):\n        print(\"MixinC.get_model\")\nclass Trainer_1a(MixinA, MixinB, MixinC):\n    pass\n# This should not generate an error\ntrainer = Trainer_1a()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "documentation": {}
    },
    {
        "label": "Trainer_1a",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "peekOfCode": "class Trainer_1a(MixinA, MixinB, MixinC):\n    pass\n# This should not generate an error\ntrainer = Trainer_1a()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "documentation": {}
    },
    {
        "label": "trainer",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "peekOfCode": "trainer = Trainer_1a()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass3",
        "documentation": {}
    },
    {
        "label": "MixinA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "peekOfCode": "class MixinA(abc.ABC):\n    pass\nclass MixinB(abc.ABC):\n    def get_model(self):\n        print(\"MixinB.get_model\")\nclass MixinC(abc.ABC):\n    @abc.abstractmethod\n    def get_model(self):\n        pass\n    def use_model(self):",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "documentation": {}
    },
    {
        "label": "MixinB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "peekOfCode": "class MixinB(abc.ABC):\n    def get_model(self):\n        print(\"MixinB.get_model\")\nclass MixinC(abc.ABC):\n    @abc.abstractmethod\n    def get_model(self):\n        pass\n    def use_model(self):\n        print(\"MixinC.get_model\")\nclass Trainer_1b(MixinA, MixinC, MixinB):",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "documentation": {}
    },
    {
        "label": "MixinC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "peekOfCode": "class MixinC(abc.ABC):\n    @abc.abstractmethod\n    def get_model(self):\n        pass\n    def use_model(self):\n        print(\"MixinC.get_model\")\nclass Trainer_1b(MixinA, MixinC, MixinB):\n    pass\n# This should generate an error\ntrainer = Trainer_1b()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "documentation": {}
    },
    {
        "label": "Trainer_1b",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "peekOfCode": "class Trainer_1b(MixinA, MixinC, MixinB):\n    pass\n# This should generate an error\ntrainer = Trainer_1b()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "documentation": {}
    },
    {
        "label": "trainer",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "peekOfCode": "trainer = Trainer_1b()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass5",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass5",
        "peekOfCode": "class Foo(ABC):\n    @overload\n    @abstractmethod\n    def func1(self, a: int) -> int:\n        pass\n    @overload\n    @abstractmethod\n    def func1(self, a: float) -> float:\n        pass\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass5",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "peekOfCode": "class Base(ABC):\n    @abstractmethod\n    def foo(self, x: int) -> int:\n        pass\ndef foo1(base_cls: Type[Base]):\n    base_cls()\ndef foo2():\n    # This should generate an error.\n    Base()\ndef foo3(base_cls: type[Base]):",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "peekOfCode": "def foo1(base_cls: Type[Base]):\n    base_cls()\ndef foo2():\n    # This should generate an error.\n    Base()\ndef foo3(base_cls: type[Base]):\n    base_cls()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "peekOfCode": "def foo2():\n    # This should generate an error.\n    Base()\ndef foo3(base_cls: type[Base]):\n    base_cls()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "peekOfCode": "def foo3(base_cls: type[Base]):\n    base_cls()",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass6",
        "documentation": {}
    },
    {
        "label": "RGB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "peekOfCode": "class RGB(Protocol):\n    rgb: Tuple[int, int, int]\n    @abstractmethod\n    def intensity(self) -> int:\n        return 0\nclass Point(RGB):\n    def __init__(self, red: int, green: int, blue: int) -> None:\n        self.rgb = red, green, blue\n# This should generate an error because \"intensity\" is not implemented.\np = Point(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "peekOfCode": "class Point(RGB):\n    def __init__(self, red: int, green: int, blue: int) -> None:\n        self.rgb = red, green, blue\n# This should generate an error because \"intensity\" is not implemented.\np = Point(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "peekOfCode": "p = Point(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass7",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "peekOfCode": "class Foo(ABC):\n    @abstractmethod\n    def foo(self):\n        pass\nclass Bar(Foo):\n    @abstractmethod\n    def bar(self):\n        pass\n    @abstractmethod\n    def bar2(self):",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "peekOfCode": "class Bar(Foo):\n    @abstractmethod\n    def bar(self):\n        pass\n    @abstractmethod\n    def bar2(self):\n        pass\n@final\n# This should generate an error because Foo.foo, Bar.bar, and Bar.bar1\n# are abstract.",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "peekOfCode": "class Baz(Bar):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass8",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "peekOfCode": "class ClassA(ABC):\n    @property\n    @abstractmethod\n    def myproperty(self) -> str:\n        ...\nMixinB = NamedTuple(\"MixinB\", [(\"myproperty\", str)])\nclass ClassB(MixinB, ClassA):\n    pass\nClassB(myproperty=\"myproperty\")",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "peekOfCode": "class ClassB(MixinB, ClassA):\n    pass\nClassB(myproperty=\"myproperty\")",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "documentation": {}
    },
    {
        "label": "MixinB",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "description": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "peekOfCode": "MixinB = NamedTuple(\"MixinB\", [(\"myproperty\", str)])\nclass ClassB(MixinB, ClassA):\n    pass\nClassB(myproperty=\"myproperty\")",
        "detail": "packages.pyright-internal.src.tests.samples.abstractClass9",
        "documentation": {}
    },
    {
        "label": "struct2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "class struct2:\n    @staticmethod\n    def ctype(a: str):\n        pass\n    class Packed:\n        pass\nUnsignedShort = Annotated[int, struct2.ctype(\"H\")]\nSignedChar = Annotated[int, struct2.ctype(\"b\")]\nclass Student(struct2.Packed):\n    name: Annotated[str, struct2.ctype(\"<10s\")]",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "class Student(struct2.Packed):\n    name: Annotated[str, struct2.ctype(\"<10s\")]\n    serial_num: UnsignedShort\n    school: SignedChar\ndef ValueRange(a: int, b: int):\n    pass\nT1 = Annotated[int, ValueRange(-10, 5)]\nT2 = Annotated[T1, ValueRange(-20, 3)]\na: Annotated[Annotated[int, \"hi\"], \"hi\"] = 3\nb: T2 = 5",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "class A:\n    classvar: Annotated[ClassVar[int], (2, 5)] = 4\n    const: Annotated[Final[int], \"metadata\"] = 4\n@dataclass\nclass B:\n    x: Annotated[InitVar[int], \"metadata\"]\nd1 = B(x=4)\n# This should generate an error because x is not an actual member.\nd1.x\nAlias1 = Annotated[_T, \"\"]",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "class B:\n    x: Annotated[InitVar[int], \"metadata\"]\nd1 = B(x=4)\n# This should generate an error because x is not an actual member.\nd1.x\nAlias1 = Annotated[_T, \"\"]\nAlias2 = str\nAlias3 = Alias1[Alias2]\nreveal_type(Alias3, expected_text=\"Type[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "ValueRange",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "def ValueRange(a: int, b: int):\n    pass\nT1 = Annotated[int, ValueRange(-10, 5)]\nT2 = Annotated[T1, ValueRange(-20, 3)]\na: Annotated[Annotated[int, \"hi\"], \"hi\"] = 3\nb: T2 = 5\nTypeWithStringArg = Annotated[\"int\", \"this string should not be parsed\"]\ndef func2(a: TypeWithStringArg):\n    return 3\n# This should generate an error because the first type argument",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "def func2(a: TypeWithStringArg):\n    return 3\n# This should generate an error because the first type argument\n# is not a valid type.\nc: Annotated[\"this\", \"should generate an error\"]\n# This should generate an error because all Annotated types should\n# include at least two type arguments.\nd: Annotated[int]\n# Verify that generic type aliases can be defined using Annotated.\n_T = TypeVar(\"_T\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "UnsignedShort",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "UnsignedShort = Annotated[int, struct2.ctype(\"H\")]\nSignedChar = Annotated[int, struct2.ctype(\"b\")]\nclass Student(struct2.Packed):\n    name: Annotated[str, struct2.ctype(\"<10s\")]\n    serial_num: UnsignedShort\n    school: SignedChar\ndef ValueRange(a: int, b: int):\n    pass\nT1 = Annotated[int, ValueRange(-10, 5)]\nT2 = Annotated[T1, ValueRange(-20, 3)]",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "SignedChar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "SignedChar = Annotated[int, struct2.ctype(\"b\")]\nclass Student(struct2.Packed):\n    name: Annotated[str, struct2.ctype(\"<10s\")]\n    serial_num: UnsignedShort\n    school: SignedChar\ndef ValueRange(a: int, b: int):\n    pass\nT1 = Annotated[int, ValueRange(-10, 5)]\nT2 = Annotated[T1, ValueRange(-20, 3)]\na: Annotated[Annotated[int, \"hi\"], \"hi\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "T1 = Annotated[int, ValueRange(-10, 5)]\nT2 = Annotated[T1, ValueRange(-20, 3)]\na: Annotated[Annotated[int, \"hi\"], \"hi\"] = 3\nb: T2 = 5\nTypeWithStringArg = Annotated[\"int\", \"this string should not be parsed\"]\ndef func2(a: TypeWithStringArg):\n    return 3\n# This should generate an error because the first type argument\n# is not a valid type.\nc: Annotated[\"this\", \"should generate an error\"]",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "T2 = Annotated[T1, ValueRange(-20, 3)]\na: Annotated[Annotated[int, \"hi\"], \"hi\"] = 3\nb: T2 = 5\nTypeWithStringArg = Annotated[\"int\", \"this string should not be parsed\"]\ndef func2(a: TypeWithStringArg):\n    return 3\n# This should generate an error because the first type argument\n# is not a valid type.\nc: Annotated[\"this\", \"should generate an error\"]\n# This should generate an error because all Annotated types should",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "TypeWithStringArg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "TypeWithStringArg = Annotated[\"int\", \"this string should not be parsed\"]\ndef func2(a: TypeWithStringArg):\n    return 3\n# This should generate an error because the first type argument\n# is not a valid type.\nc: Annotated[\"this\", \"should generate an error\"]\n# This should generate an error because all Annotated types should\n# include at least two type arguments.\nd: Annotated[int]\n# Verify that generic type aliases can be defined using Annotated.",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "_T = TypeVar(\"_T\")\nParam = Annotated[_T, \"x\"]\nx: Param[int] = 3\nclass A:\n    classvar: Annotated[ClassVar[int], (2, 5)] = 4\n    const: Annotated[Final[int], \"metadata\"] = 4\n@dataclass\nclass B:\n    x: Annotated[InitVar[int], \"metadata\"]\nd1 = B(x=4)",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "Param",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "Param = Annotated[_T, \"x\"]\nx: Param[int] = 3\nclass A:\n    classvar: Annotated[ClassVar[int], (2, 5)] = 4\n    const: Annotated[Final[int], \"metadata\"] = 4\n@dataclass\nclass B:\n    x: Annotated[InitVar[int], \"metadata\"]\nd1 = B(x=4)\n# This should generate an error because x is not an actual member.",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "d1 = B(x=4)\n# This should generate an error because x is not an actual member.\nd1.x\nAlias1 = Annotated[_T, \"\"]\nAlias2 = str\nAlias3 = Alias1[Alias2]\nreveal_type(Alias3, expected_text=\"Type[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "Alias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "Alias1 = Annotated[_T, \"\"]\nAlias2 = str\nAlias3 = Alias1[Alias2]\nreveal_type(Alias3, expected_text=\"Type[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "Alias2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "Alias2 = str\nAlias3 = Alias1[Alias2]\nreveal_type(Alias3, expected_text=\"Type[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "Alias3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotated1",
        "description": "packages.pyright-internal.src.tests.samples.annotated1",
        "peekOfCode": "Alias3 = Alias1[Alias2]\nreveal_type(Alias3, expected_text=\"Type[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotated1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "peekOfCode": "def foo():\n    a: int = 3\n    b: float = 4.5\n    c: str = \"\"\n    d: int = yield 42",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "documentation": {}
    },
    {
        "label": "array1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "peekOfCode": "array1 = [1, 2, 3]\n# This should generate an error because the LHS can't\n# have a declared type.\narray1[2] = 4  # type: int\ndict1 = {}\n# This should generate an error because the LHS can't\n# have a declared type.\ndict1[\"hello\"] = 4  # type: int\ndef foo():\n    a: int = 3",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "documentation": {}
    },
    {
        "label": "array1[2]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "peekOfCode": "array1[2] = 4  # type: int\ndict1 = {}\n# This should generate an error because the LHS can't\n# have a declared type.\ndict1[\"hello\"] = 4  # type: int\ndef foo():\n    a: int = 3\n    b: float = 4.5\n    c: str = \"\"\n    d: int = yield 42",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "documentation": {}
    },
    {
        "label": "dict1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "peekOfCode": "dict1 = {}\n# This should generate an error because the LHS can't\n# have a declared type.\ndict1[\"hello\"] = 4  # type: int\ndef foo():\n    a: int = 3\n    b: float = 4.5\n    c: str = \"\"\n    d: int = yield 42",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "documentation": {}
    },
    {
        "label": "dict1[\"hello\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "peekOfCode": "dict1[\"hello\"] = 4  # type: int\ndef foo():\n    a: int = 3\n    b: float = 4.5\n    c: str = \"\"\n    d: int = yield 42",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "peekOfCode": "def func1():\n    global glob_var1\n    global glob_var2\n    # This should generate an error.\n    glob_var1 = 3\n    glob_var2 = \"hello\"  # type: str",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "documentation": {}
    },
    {
        "label": "glob_var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "peekOfCode": "glob_var1 = 4\n# This should generate an error because the declared\n# type doesn't match the later declared type.\nglob_var1 = Exception()  # type: str\nglob_var1 = Exception()  # type: Exception\n# This should generate an error because the assigned\n# type doesn't match the declared type.\nglob_var1 = \"hello\"  # type: Exception\n# This should generate an error.\nglob_var2 = 5",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "documentation": {}
    },
    {
        "label": "glob_var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "peekOfCode": "glob_var1 = Exception()  # type: str\nglob_var1 = Exception()  # type: Exception\n# This should generate an error because the assigned\n# type doesn't match the declared type.\nglob_var1 = \"hello\"  # type: Exception\n# This should generate an error.\nglob_var2 = 5\ndef func1():\n    global glob_var1\n    global glob_var2",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "documentation": {}
    },
    {
        "label": "glob_var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "peekOfCode": "glob_var1 = Exception()  # type: Exception\n# This should generate an error because the assigned\n# type doesn't match the declared type.\nglob_var1 = \"hello\"  # type: Exception\n# This should generate an error.\nglob_var2 = 5\ndef func1():\n    global glob_var1\n    global glob_var2\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "documentation": {}
    },
    {
        "label": "glob_var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "peekOfCode": "glob_var1 = \"hello\"  # type: Exception\n# This should generate an error.\nglob_var2 = 5\ndef func1():\n    global glob_var1\n    global glob_var2\n    # This should generate an error.\n    glob_var1 = 3\n    glob_var2 = \"hello\"  # type: str",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "documentation": {}
    },
    {
        "label": "glob_var2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "peekOfCode": "glob_var2 = 5\ndef func1():\n    global glob_var1\n    global glob_var2\n    # This should generate an error.\n    glob_var1 = 3\n    glob_var2 = \"hello\"  # type: str",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar2",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar3",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar3",
        "peekOfCode": "class ClassB(object):\n    def __enter__(self) -> bytes:\n        return b\"hello\"\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar3",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar3",
        "peekOfCode": "def func2():\n    local_var = 3  # type: Union[int, str]\n    local_var = \"hello\"\n    # This should generate an error because the assigned\n    # type doesn't match the declared type.\n    local_var = b\"hello\"\n    local_var2 = 3  # type: int\n    if local_var:\n        # This should generate an error because the\n        # assigned type doesn't match.",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar3",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar4",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar4",
        "peekOfCode": "class ClassA(object):\n    # This should generate an error because the declared\n    # type doesn't match the latter declared type.\n    class_var1 = 4  # type: str\n    # This should generate an error because the assigned\n    # value doesn't match the declared type.\n    class_var1 = \"hello\"  # type: int\n    class_var1 = 3  # type: int\n    # This should generate an error because the declared\n    # type doesn't match the latter declared type.",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar4",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar5",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar5",
        "peekOfCode": "class ClassC(object):\n    def __init__(self):\n        self.inst_var1 = 3\n    @property\n    def prop1(self):\n        return 1\n    @prop1.setter\n    def prop1(self, val):\n        pass\n    def foo(self):",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar5",
        "documentation": {}
    },
    {
        "label": "ClassE",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar5",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar5",
        "peekOfCode": "class ClassE(ClassC):\n    def __init__(self):\n        # This should generate an error.\n        self.inst_var1 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "peekOfCode": "class Foo:\n    f: Callable[[int], int]\n    def m(self):\n        print(self.f(1))\nfoo = Foo()\nfoo.f = add1\nfoo.m()",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "documentation": {}
    },
    {
        "label": "add1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "peekOfCode": "def add1(n: int):\n    return n + 1\nclass Foo:\n    f: Callable[[int], int]\n    def m(self):\n        print(self.f(1))\nfoo = Foo()\nfoo.f = add1\nfoo.m()",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "peekOfCode": "foo = Foo()\nfoo.f = add1\nfoo.m()",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "documentation": {}
    },
    {
        "label": "foo.f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "peekOfCode": "foo.f = add1\nfoo.m()",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar7",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar7",
        "peekOfCode": "class Foo:\n    # This should generate an error if reportTypeCommentUsage is enabled.\n    y = 0  # type: int\n    def __init__(self):\n        # This should generate an error if reportTypeCommentUsage is enabled.\n        self.x = 2  # type: int",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar7",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotatedVar7",
        "description": "packages.pyright-internal.src.tests.samples.annotatedVar7",
        "peekOfCode": "x = 3  # type: int\nclass Foo:\n    # This should generate an error if reportTypeCommentUsage is enabled.\n    y = 0  # type: int\n    def __init__(self):\n        # This should generate an error if reportTypeCommentUsage is enabled.\n        self.x = 2  # type: int",
        "detail": "packages.pyright-internal.src.tests.samples.annotatedVar7",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassA:\n    # This should generate an error because ClassA\n    # is not yet defined at the time it's used.\n    def func0(self) -> Optional[ClassA]:\n        return None\nclass ClassB(ClassA):\n    def func1(self) -> ClassA:\n        return ClassA()\n    # This should generate an error because ClassC\n    # is a forward reference, which is not allowed",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassB(ClassA):\n    def func1(self) -> ClassA:\n        return ClassA()\n    # This should generate an error because ClassC\n    # is a forward reference, which is not allowed\n    # in a python source file.\n    def func2(self) -> Optional[ClassC]:\n        return None\n    def func3(self) -> \"Optional[ClassC]\":\n        return None",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassC:\n    pass\ndef func10():\n    pass\n# This should generate an error because function calls\n# are not allowed within a type annotation.\nx: func10()\ny: \"\"\"\n    Union[\n        int,",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassD:\n    ClassA: \"ClassA\"\n    # This should generate an error because ClassF refers\n    # to itself, and there is no ClassF declared at the module\n    # level.\n    ClassF: \"ClassF\"\n    str: \"str\"\n    def int(self):\n        ...\n    foo: \"int\"",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "ClassG",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassG:\n    uuid = uuid.uuid4()\nclass ClassH:\n    # This should generate an error because uuid refers to the local\n    # symbol in this case, which is a circular reference.\n    uuid: uuid.UUID = uuid.uuid4()\ndef func11():\n    for t in [str, float]:\n        # This should generate an error because t is not a valid annotation.\n        def f(x: str) -> t:",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "ClassH",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassH:\n    # This should generate an error because uuid refers to the local\n    # symbol in this case, which is a circular reference.\n    uuid: uuid.UUID = uuid.uuid4()\ndef func11():\n    for t in [str, float]:\n        # This should generate an error because t is not a valid annotation.\n        def f(x: str) -> t:\n            return t(x) + 1\n        f(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "ClassJ",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "class ClassJ:\n    datetime: datetime",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "def func10():\n    pass\n# This should generate an error because function calls\n# are not allowed within a type annotation.\nx: func10()\ny: \"\"\"\n    Union[\n        int,\n        str\n    ]",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "def func11():\n    for t in [str, float]:\n        # This should generate an error because t is not a valid annotation.\n        def f(x: str) -> t:\n            return t(x) + 1\n        f(\"\")\ndef func12(x: Type[int]):\n    # These should not generate an error because they are used\n    # in a location that is not considered a type annotation, so the\n    # normal annotation limitations do not apply here.",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations1",
        "description": "packages.pyright-internal.src.tests.samples.annotations1",
        "peekOfCode": "def func12(x: Type[int]):\n    # These should not generate an error because they are used\n    # in a location that is not considered a type annotation, so the\n    # normal annotation limitations do not apply here.\n    print(Union[x, x])\n    print(Optional[x])\n# This should generate an error because foo isn't defined.\nfoo: int = foo\nclass ClassJ:\n    datetime: datetime",
        "detail": "packages.pyright-internal.src.tests.samples.annotations1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "a = 3  # type: int\nb = \"3\"  # type: str\nc = [1, 2, 3]  # type: Optional[List[int]]\n# A type on the next line shouldn't be honored\nd = \"hello\"\n# type: int\n# A type comment with a space between the type and\n# the colon is also not honored.\ne = \"hello\"  # type : int\n# Neither is a capital \"Type\"",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "b = \"3\"  # type: str\nc = [1, 2, 3]  # type: Optional[List[int]]\n# A type on the next line shouldn't be honored\nd = \"hello\"\n# type: int\n# A type comment with a space between the type and\n# the colon is also not honored.\ne = \"hello\"  # type : int\n# Neither is a capital \"Type\"\nf = \"hello\"  # Type: int",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "c = [1, 2, 3]  # type: Optional[List[int]]\n# A type on the next line shouldn't be honored\nd = \"hello\"\n# type: int\n# A type comment with a space between the type and\n# the colon is also not honored.\ne = \"hello\"  # type : int\n# Neither is a capital \"Type\"\nf = \"hello\"  # Type: int\n# This should generate an error because the type doesn't match",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "d = \"hello\"\n# type: int\n# A type comment with a space between the type and\n# the colon is also not honored.\ne = \"hello\"  # type : int\n# Neither is a capital \"Type\"\nf = \"hello\"  # Type: int\n# This should generate an error because the type doesn't match\ng = \"hello\"  # type: int\n# This should generate an error because the last entry",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "e = \"hello\"  # type : int\n# Neither is a capital \"Type\"\nf = \"hello\"  # Type: int\n# This should generate an error because the type doesn't match\ng = \"hello\"  # type: int\n# This should generate an error because the last entry\n# of the tuple is the wrong type.\nh = (1, \"hello\", (5,))  # type: Tuple[int, str, Tuple[str]]",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "f = \"hello\"  # Type: int\n# This should generate an error because the type doesn't match\ng = \"hello\"  # type: int\n# This should generate an error because the last entry\n# of the tuple is the wrong type.\nh = (1, \"hello\", (5,))  # type: Tuple[int, str, Tuple[str]]",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "g = \"hello\"  # type: int\n# This should generate an error because the last entry\n# of the tuple is the wrong type.\nh = (1, \"hello\", (5,))  # type: Tuple[int, str, Tuple[str]]",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations2",
        "description": "packages.pyright-internal.src.tests.samples.annotations2",
        "peekOfCode": "h = (1, \"hello\", (5,))  # type: Tuple[int, str, Tuple[str]]",
        "detail": "packages.pyright-internal.src.tests.samples.annotations2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations3",
        "description": "packages.pyright-internal.src.tests.samples.annotations3",
        "peekOfCode": "class ClassA:\n    # This should generate an error because ClassA\n    # is not yet defined at the time it's used.\n    def func0(self) -> Optional[ClassA]:\n        return None\nclass ClassB(ClassA):\n    def func1(self) -> ClassA:\n        return ClassA()\n    # This should generate an error because ClassC\n    # is a forward reference, which is not allowed",
        "detail": "packages.pyright-internal.src.tests.samples.annotations3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations3",
        "description": "packages.pyright-internal.src.tests.samples.annotations3",
        "peekOfCode": "class ClassB(ClassA):\n    def func1(self) -> ClassA:\n        return ClassA()\n    # This should generate an error because ClassC\n    # is a forward reference, which is not allowed\n    # in a python source file.\n    def func2(self) -> Optional[ClassC]:\n        return None\n    def func3(self) -> \"Optional[ClassC]\":\n        return None",
        "detail": "packages.pyright-internal.src.tests.samples.annotations3",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations3",
        "description": "packages.pyright-internal.src.tests.samples.annotations3",
        "peekOfCode": "class ClassC:\n    my_int: int",
        "detail": "packages.pyright-internal.src.tests.samples.annotations3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "class Foo:\n    # This should generate an error because aa is redeclared.\n    aa: int\n    def aa(self):\n        return 3\n# This should generate two errors, one for each param.\ndef my_func(param1: int, param2):\n    param1: int = 3\n    param2: int = 4\n# This should be fine because both declarations of 'e'",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "def a():\n    pass\n# This should generate an error for an incompatible assignment.\na = 1\n# This should generate an error for an obscured type.\ndef b():\n    pass\nb: int = 1\n# This should generate an error for an obscured type.\nc: int = 1",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "def b():\n    pass\nb: int = 1\n# This should generate an error for an obscured type.\nc: int = 1\nc: float = 1.1\n# This should generate two errors - one for an\n# obscured type, the second for an incompatible assignment.\nd: int = 2\ndef d():",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "def d():\n    pass\nclass Foo:\n    # This should generate an error because aa is redeclared.\n    aa: int\n    def aa(self):\n        return 3\n# This should generate two errors, one for each param.\ndef my_func(param1: int, param2):\n    param1: int = 3",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "my_func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "def my_func(param1: int, param2):\n    param1: int = 3\n    param2: int = 4\n# This should be fine because both declarations of 'e'\n# use the same type.\ne: List[int]\ne = [3]\ne: List[int]\ndef register(fn: Callable[[], None]) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "def register(fn: Callable[[], None]) -> None:\n    ...\n# These should be be fine because they use the \"_\" name.\n@register\ndef _():\n    print(\"Callback 1 called\")\n@register\ndef _():\n    print(\"Callback 2 called\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "a = 1\n# This should generate an error for an obscured type.\ndef b():\n    pass\nb: int = 1\n# This should generate an error for an obscured type.\nc: int = 1\nc: float = 1.1\n# This should generate two errors - one for an\n# obscured type, the second for an incompatible assignment.",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations4",
        "description": "packages.pyright-internal.src.tests.samples.annotations4",
        "peekOfCode": "e = [3]\ne: List[int]\ndef register(fn: Callable[[], None]) -> None:\n    ...\n# These should be be fine because they use the \"_\" name.\n@register\ndef _():\n    print(\"Callback 1 called\")\n@register\ndef _():",
        "detail": "packages.pyright-internal.src.tests.samples.annotations4",
        "documentation": {}
    },
    {
        "label": "is_type1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations6",
        "description": "packages.pyright-internal.src.tests.samples.annotations6",
        "peekOfCode": "def is_type1(x: object, y: Type[Any]) -> bool:\n    return isinstance(x, y)\nis_type1(1, int)\n# This should generate an error.\nis_type1(1, 1)\ndef is_type2(x: object, y: type[Any]) -> bool:\n    return isinstance(x, y)\nis_type2(1, int)\n# This should generate an error.\nis_type2(1, 1)",
        "detail": "packages.pyright-internal.src.tests.samples.annotations6",
        "documentation": {}
    },
    {
        "label": "is_type2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations6",
        "description": "packages.pyright-internal.src.tests.samples.annotations6",
        "peekOfCode": "def is_type2(x: object, y: type[Any]) -> bool:\n    return isinstance(x, y)\nis_type2(1, int)\n# This should generate an error.\nis_type2(1, 1)\ndef func1(v1: Type[Any], v2: type[Any]):\n    reveal_type(v1, expected_text=\"type\")\n    reveal_type(v2, expected_text=\"type\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotations6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.annotations6",
        "description": "packages.pyright-internal.src.tests.samples.annotations6",
        "peekOfCode": "def func1(v1: Type[Any], v2: type[Any]):\n    reveal_type(v1, expected_text=\"type\")\n    reveal_type(v2, expected_text=\"type\")",
        "detail": "packages.pyright-internal.src.tests.samples.annotations6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assert1",
        "description": "packages.pyright-internal.src.tests.samples.assert1",
        "peekOfCode": "def foo(a: Tuple[int, ...]):\n    assert a\nb = ()\nassert b\nc = (2, 3)\n# This should generate a warning.\nassert c",
        "detail": "packages.pyright-internal.src.tests.samples.assert1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assert1",
        "description": "packages.pyright-internal.src.tests.samples.assert1",
        "peekOfCode": "b = ()\nassert b\nc = (2, 3)\n# This should generate a warning.\nassert c",
        "detail": "packages.pyright-internal.src.tests.samples.assert1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assert1",
        "description": "packages.pyright-internal.src.tests.samples.assert1",
        "peekOfCode": "c = (2, 3)\n# This should generate a warning.\nassert c",
        "detail": "packages.pyright-internal.src.tests.samples.assert1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assertType1",
        "description": "packages.pyright-internal.src.tests.samples.assertType1",
        "peekOfCode": "def func1():\n    # This should generate an error.\n    assert_type()\n    # This should generate an error.\n    assert_type(1)\n    # This should generate an error.\n    assert_type(1, 2, 3)\n    # This should generate an error.\n    assert_type(*[])\ndef func2(x: int, y: int | str, z: list):",
        "detail": "packages.pyright-internal.src.tests.samples.assertType1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assertType1",
        "description": "packages.pyright-internal.src.tests.samples.assertType1",
        "peekOfCode": "def func2(x: int, y: int | str, z: list):\n    assert_type(x, int)\n    # This should generate an error.\n    assert_type(x, str)\n    # This should generate an error.\n    assert_type(x, Any)\n    x = 3\n    assert_type(x, Literal[3])\n    # This should generate an error.\n    assert_type(x, int)",
        "detail": "packages.pyright-internal.src.tests.samples.assertType1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "class Foo:\n    def __init__(self):\n        self.string_list: list[str] = []\n    def do_something(self, num: int) -> str:\n        return \"\"\na = Foo()\na.string_list = [\"yep\"]\n# This should generate an error because of a type mismatch.\na.string_list = \"bbb\"\n# This should generate an error because of a type mismatch.",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "class Class1:\n    # This should generate an error because assignment expressions\n    # can't be used within a class.\n    [(j := i) for i in range(5)]",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "patch1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "def patch1(num: int) -> str:\n    return \"\"\ndef patch2(self, num: int) -> str:\n    return \"\"\na.do_something = lambda num: \"hello\"\na.do_something = patch1\n# This should generate an error because of a param count mismatch\na.do_something = lambda: \"hello\"\n# This should generate an error because of a return type mismatch\na.do_something = lambda x: 1",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "patch2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "def patch2(self, num: int) -> str:\n    return \"\"\na.do_something = lambda num: \"hello\"\na.do_something = patch1\n# This should generate an error because of a param count mismatch\na.do_something = lambda: \"hello\"\n# This should generate an error because of a return type mismatch\na.do_something = lambda x: 1\nFoo.do_something = patch2\n# This should generate an error because of a param count mismatch",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a = Foo()\na.string_list = [\"yep\"]\n# This should generate an error because of a type mismatch.\na.string_list = \"bbb\"\n# This should generate an error because of a type mismatch.\na.string_list = {}\n# This should generate an error because of a type mismatch.\na.string_list = [1]\n# This should generate an error because there is no member\n# called string_list2 defined.",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.string_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.string_list = [\"yep\"]\n# This should generate an error because of a type mismatch.\na.string_list = \"bbb\"\n# This should generate an error because of a type mismatch.\na.string_list = {}\n# This should generate an error because of a type mismatch.\na.string_list = [1]\n# This should generate an error because there is no member\n# called string_list2 defined.\na.string_list2 = 4",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.string_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.string_list = \"bbb\"\n# This should generate an error because of a type mismatch.\na.string_list = {}\n# This should generate an error because of a type mismatch.\na.string_list = [1]\n# This should generate an error because there is no member\n# called string_list2 defined.\na.string_list2 = 4\ndef patch1(num: int) -> str:\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.string_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.string_list = {}\n# This should generate an error because of a type mismatch.\na.string_list = [1]\n# This should generate an error because there is no member\n# called string_list2 defined.\na.string_list2 = 4\ndef patch1(num: int) -> str:\n    return \"\"\ndef patch2(self, num: int) -> str:\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.string_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.string_list = [1]\n# This should generate an error because there is no member\n# called string_list2 defined.\na.string_list2 = 4\ndef patch1(num: int) -> str:\n    return \"\"\ndef patch2(self, num: int) -> str:\n    return \"\"\na.do_something = lambda num: \"hello\"\na.do_something = patch1",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.string_list2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.string_list2 = 4\ndef patch1(num: int) -> str:\n    return \"\"\ndef patch2(self, num: int) -> str:\n    return \"\"\na.do_something = lambda num: \"hello\"\na.do_something = patch1\n# This should generate an error because of a param count mismatch\na.do_something = lambda: \"hello\"\n# This should generate an error because of a return type mismatch",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.do_something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.do_something = lambda num: \"hello\"\na.do_something = patch1\n# This should generate an error because of a param count mismatch\na.do_something = lambda: \"hello\"\n# This should generate an error because of a return type mismatch\na.do_something = lambda x: 1\nFoo.do_something = patch2\n# This should generate an error because of a param count mismatch\nFoo.do_something = patch1\nclass Class1:",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.do_something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.do_something = patch1\n# This should generate an error because of a param count mismatch\na.do_something = lambda: \"hello\"\n# This should generate an error because of a return type mismatch\na.do_something = lambda x: 1\nFoo.do_something = patch2\n# This should generate an error because of a param count mismatch\nFoo.do_something = patch1\nclass Class1:\n    # This should generate an error because assignment expressions",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.do_something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.do_something = lambda: \"hello\"\n# This should generate an error because of a return type mismatch\na.do_something = lambda x: 1\nFoo.do_something = patch2\n# This should generate an error because of a param count mismatch\nFoo.do_something = patch1\nclass Class1:\n    # This should generate an error because assignment expressions\n    # can't be used within a class.\n    [(j := i) for i in range(5)]",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "a.do_something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "a.do_something = lambda x: 1\nFoo.do_something = patch2\n# This should generate an error because of a param count mismatch\nFoo.do_something = patch1\nclass Class1:\n    # This should generate an error because assignment expressions\n    # can't be used within a class.\n    [(j := i) for i in range(5)]",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "Foo.do_something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "Foo.do_something = patch2\n# This should generate an error because of a param count mismatch\nFoo.do_something = patch1\nclass Class1:\n    # This should generate an error because assignment expressions\n    # can't be used within a class.\n    [(j := i) for i in range(5)]",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "Foo.do_something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment1",
        "description": "packages.pyright-internal.src.tests.samples.assignment1",
        "peekOfCode": "Foo.do_something = patch1\nclass Class1:\n    # This should generate an error because assignment expressions\n    # can't be used within a class.\n    [(j := i) for i in range(5)]",
        "detail": "packages.pyright-internal.src.tests.samples.assignment1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment10",
        "description": "packages.pyright-internal.src.tests.samples.assignment10",
        "peekOfCode": "class A:\n    instance: \"A\" | None\n    def __init__(self) -> None:\n        self.foo: bool\n    @classmethod\n    def method1(cls) -> bool:\n        if cls.instance is None:\n            cls.instance = cls()\n        return cls.instance.foo",
        "detail": "packages.pyright-internal.src.tests.samples.assignment10",
        "documentation": {}
    },
    {
        "label": "Asymmetric",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "class Asymmetric:\n    def __setitem__(self, i: int, value: object) -> None:\n        ...\n    def __getitem__(self, i: int) -> int:\n        ...\nv5 = Asymmetric()\nv5[0] = 3\nreveal_type(v5[0], expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v1[0]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v1[0] = \"a\"\nv2: Dict[int, str] = {1: \"str\"}\n# This should generate an error because\n# the assigned type is wrong.\nv2[1] = 123\nv3: List[Union[int, str]] = [\"a\"]\nv3[0] = 3\nreveal_type(v3[0], expected_text=\"Literal[3]\")\nv4: Dict[str, Union[int, str]] = {}\nv4[\"aaa\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v2[1]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v2[1] = 123\nv3: List[Union[int, str]] = [\"a\"]\nv3[0] = 3\nreveal_type(v3[0], expected_text=\"Literal[3]\")\nv4: Dict[str, Union[int, str]] = {}\nv4[\"aaa\"] = 3\nv4[\"bbb\"] = \"bbb\"\nreveal_type(v4[\"aaa\"], expected_text=\"Literal[3]\")\nreveal_type(v4[\"bbb\"], expected_text=\"Literal['bbb']\")\nreveal_type(v4[\"ccc\"], expected_text=\"int | str\")",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v3[0]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v3[0] = 3\nreveal_type(v3[0], expected_text=\"Literal[3]\")\nv4: Dict[str, Union[int, str]] = {}\nv4[\"aaa\"] = 3\nv4[\"bbb\"] = \"bbb\"\nreveal_type(v4[\"aaa\"], expected_text=\"Literal[3]\")\nreveal_type(v4[\"bbb\"], expected_text=\"Literal['bbb']\")\nreveal_type(v4[\"ccc\"], expected_text=\"int | str\")\nclass Asymmetric:\n    def __setitem__(self, i: int, value: object) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v4[\"aaa\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v4[\"aaa\"] = 3\nv4[\"bbb\"] = \"bbb\"\nreveal_type(v4[\"aaa\"], expected_text=\"Literal[3]\")\nreveal_type(v4[\"bbb\"], expected_text=\"Literal['bbb']\")\nreveal_type(v4[\"ccc\"], expected_text=\"int | str\")\nclass Asymmetric:\n    def __setitem__(self, i: int, value: object) -> None:\n        ...\n    def __getitem__(self, i: int) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v4[\"bbb\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v4[\"bbb\"] = \"bbb\"\nreveal_type(v4[\"aaa\"], expected_text=\"Literal[3]\")\nreveal_type(v4[\"bbb\"], expected_text=\"Literal['bbb']\")\nreveal_type(v4[\"ccc\"], expected_text=\"int | str\")\nclass Asymmetric:\n    def __setitem__(self, i: int, value: object) -> None:\n        ...\n    def __getitem__(self, i: int) -> int:\n        ...\nv5 = Asymmetric()",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v5 = Asymmetric()\nv5[0] = 3\nreveal_type(v5[0], expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "v5[0]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment2",
        "description": "packages.pyright-internal.src.tests.samples.assignment2",
        "peekOfCode": "v5[0] = 3\nreveal_type(v5[0], expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.assignment2",
        "documentation": {}
    },
    {
        "label": "Adder",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment3",
        "description": "packages.pyright-internal.src.tests.samples.assignment3",
        "peekOfCode": "class Adder(Protocol):\n    def __call__(self, x: int, y: Dict[str, int]) -> int:\n        ...\nv1: Adder = lambda x, y: x + y[\"hi\"]\nreveal_type(v1, expected_text=\"(x: int, y: Dict[str, int]) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.assignment3",
        "documentation": {}
    },
    {
        "label": "must_be_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment3",
        "description": "packages.pyright-internal.src.tests.samples.assignment3",
        "peekOfCode": "def must_be_int(val: int):\n    return val\nd1: Dict[str, Tuple[int, Callable[[int], int]]] = {\n    \"hello\": (3, lambda x: must_be_int(x))\n}\nd2: Dict[str, Tuple[int, Callable[[int], int]]] = {\n    # This should generate an error because the key is not a str.\n    3: (3, lambda x: must_be_int(x))\n}\nd3: Dict[str, Tuple[int, Callable[[int], int]]] = {",
        "detail": "packages.pyright-internal.src.tests.samples.assignment3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment4",
        "description": "packages.pyright-internal.src.tests.samples.assignment4",
        "peekOfCode": "def foo():\n    var1: Dict[str, Tuple[AAA, BBB, CCC, DDD]] = {}\n    var2: Dict[str, AAATuple] = {}\n    for k, (var3, var4, _, _) in var1.items():\n        var2[k] = (var3, var4, lambda var5, var6: [v * var6 for v in var5])",
        "detail": "packages.pyright-internal.src.tests.samples.assignment4",
        "documentation": {}
    },
    {
        "label": "AAA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment4",
        "description": "packages.pyright-internal.src.tests.samples.assignment4",
        "peekOfCode": "AAA = float\nBBB = int\nCCC = str\nDDD = str\nAAATuple = Tuple[AAA, BBB, Callable[[Sequence[int], AAA], Sequence[float]]]\ndef foo():\n    var1: Dict[str, Tuple[AAA, BBB, CCC, DDD]] = {}\n    var2: Dict[str, AAATuple] = {}\n    for k, (var3, var4, _, _) in var1.items():\n        var2[k] = (var3, var4, lambda var5, var6: [v * var6 for v in var5])",
        "detail": "packages.pyright-internal.src.tests.samples.assignment4",
        "documentation": {}
    },
    {
        "label": "BBB",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment4",
        "description": "packages.pyright-internal.src.tests.samples.assignment4",
        "peekOfCode": "BBB = int\nCCC = str\nDDD = str\nAAATuple = Tuple[AAA, BBB, Callable[[Sequence[int], AAA], Sequence[float]]]\ndef foo():\n    var1: Dict[str, Tuple[AAA, BBB, CCC, DDD]] = {}\n    var2: Dict[str, AAATuple] = {}\n    for k, (var3, var4, _, _) in var1.items():\n        var2[k] = (var3, var4, lambda var5, var6: [v * var6 for v in var5])",
        "detail": "packages.pyright-internal.src.tests.samples.assignment4",
        "documentation": {}
    },
    {
        "label": "CCC",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment4",
        "description": "packages.pyright-internal.src.tests.samples.assignment4",
        "peekOfCode": "CCC = str\nDDD = str\nAAATuple = Tuple[AAA, BBB, Callable[[Sequence[int], AAA], Sequence[float]]]\ndef foo():\n    var1: Dict[str, Tuple[AAA, BBB, CCC, DDD]] = {}\n    var2: Dict[str, AAATuple] = {}\n    for k, (var3, var4, _, _) in var1.items():\n        var2[k] = (var3, var4, lambda var5, var6: [v * var6 for v in var5])",
        "detail": "packages.pyright-internal.src.tests.samples.assignment4",
        "documentation": {}
    },
    {
        "label": "DDD",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment4",
        "description": "packages.pyright-internal.src.tests.samples.assignment4",
        "peekOfCode": "DDD = str\nAAATuple = Tuple[AAA, BBB, Callable[[Sequence[int], AAA], Sequence[float]]]\ndef foo():\n    var1: Dict[str, Tuple[AAA, BBB, CCC, DDD]] = {}\n    var2: Dict[str, AAATuple] = {}\n    for k, (var3, var4, _, _) in var1.items():\n        var2[k] = (var3, var4, lambda var5, var6: [v * var6 for v in var5])",
        "detail": "packages.pyright-internal.src.tests.samples.assignment4",
        "documentation": {}
    },
    {
        "label": "AAATuple",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment4",
        "description": "packages.pyright-internal.src.tests.samples.assignment4",
        "peekOfCode": "AAATuple = Tuple[AAA, BBB, Callable[[Sequence[int], AAA], Sequence[float]]]\ndef foo():\n    var1: Dict[str, Tuple[AAA, BBB, CCC, DDD]] = {}\n    var2: Dict[str, AAATuple] = {}\n    for k, (var3, var4, _, _) in var1.items():\n        var2[k] = (var3, var4, lambda var5, var6: [v * var6 for v in var5])",
        "detail": "packages.pyright-internal.src.tests.samples.assignment4",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment5",
        "description": "packages.pyright-internal.src.tests.samples.assignment5",
        "peekOfCode": "class Node:\n    key: str\n    next: Optional[\"Node\"] = None\nnode = Node()\n# This should analyze fine because node.next should be assigned\n# None before node is assigned None.\nnode.next, node = None, None",
        "detail": "packages.pyright-internal.src.tests.samples.assignment5",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment5",
        "description": "packages.pyright-internal.src.tests.samples.assignment5",
        "peekOfCode": "node = Node()\n# This should analyze fine because node.next should be assigned\n# None before node is assigned None.\nnode.next, node = None, None",
        "detail": "packages.pyright-internal.src.tests.samples.assignment5",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment6",
        "description": "packages.pyright-internal.src.tests.samples.assignment6",
        "peekOfCode": "class MyClass:\n    # This should not generate an error because\n    # the RHS of the assignment refers to a different\n    # \"a\", declared in an outer scope.\n    a = a\n    # Same with \"b\" here.\n    (b, a) = (b, 3)\n    # Same with \"c\" here.\n    [c] = [c]\n    # This should generate an error because \"d\" is",
        "detail": "packages.pyright-internal.src.tests.samples.assignment6",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment6",
        "description": "packages.pyright-internal.src.tests.samples.assignment6",
        "peekOfCode": "a = 0\nb = 1\nc = 4\nclass MyClass:\n    # This should not generate an error because\n    # the RHS of the assignment refers to a different\n    # \"a\", declared in an outer scope.\n    a = a\n    # Same with \"b\" here.\n    (b, a) = (b, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.assignment6",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment6",
        "description": "packages.pyright-internal.src.tests.samples.assignment6",
        "peekOfCode": "b = 1\nc = 4\nclass MyClass:\n    # This should not generate an error because\n    # the RHS of the assignment refers to a different\n    # \"a\", declared in an outer scope.\n    a = a\n    # Same with \"b\" here.\n    (b, a) = (b, 3)\n    # Same with \"c\" here.",
        "detail": "packages.pyright-internal.src.tests.samples.assignment6",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment6",
        "description": "packages.pyright-internal.src.tests.samples.assignment6",
        "peekOfCode": "c = 4\nclass MyClass:\n    # This should not generate an error because\n    # the RHS of the assignment refers to a different\n    # \"a\", declared in an outer scope.\n    a = a\n    # Same with \"b\" here.\n    (b, a) = (b, 3)\n    # Same with \"c\" here.\n    [c] = [c]",
        "detail": "packages.pyright-internal.src.tests.samples.assignment6",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment7",
        "description": "packages.pyright-internal.src.tests.samples.assignment7",
        "peekOfCode": "v1 = \"\"\nv3 = \"\"\nv2, _ = v1, v3\nv4 = v2\nfor _ in range(1):\n    v1 = v4\n    v2, v3 = v1, \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.assignment7",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment7",
        "description": "packages.pyright-internal.src.tests.samples.assignment7",
        "peekOfCode": "v3 = \"\"\nv2, _ = v1, v3\nv4 = v2\nfor _ in range(1):\n    v1 = v4\n    v2, v3 = v1, \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.assignment7",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment7",
        "description": "packages.pyright-internal.src.tests.samples.assignment7",
        "peekOfCode": "v4 = v2\nfor _ in range(1):\n    v1 = v4\n    v2, v3 = v1, \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.assignment7",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "class Foo:\n    @overload\n    def bar(self, obj: None) -> object:\n        ...\n    @overload\n    def bar(self, obj: object) -> Any:\n        ...\n    def bar(self, obj: Optional[object]) -> Any:\n        pass\n    @staticmethod",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "_T = TypeVar(\"_T\")\nmy_obj: object\nmy_obj = None\nmy_obj = os\nmy_obj = Foo\nmy_obj = Foo()\nmy_obj = Foo.bar\nmy_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = None\nmy_obj = os\nmy_obj = Foo\nmy_obj = Foo()\nmy_obj = Foo.bar\nmy_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = os\nmy_obj = Foo\nmy_obj = Foo()\nmy_obj = Foo.bar\nmy_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = Foo\nmy_obj = Foo()\nmy_obj = Foo.bar\nmy_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = Foo()\nmy_obj = Foo.bar\nmy_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = Foo.bar\nmy_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = Foo.baz\nmy_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = ()\nmy_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = lambda x: x\nmy_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = _T\n# This should generate an error because a is unbound.\nmy_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "my_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment8",
        "description": "packages.pyright-internal.src.tests.samples.assignment8",
        "peekOfCode": "my_obj = a",
        "detail": "packages.pyright-internal.src.tests.samples.assignment8",
        "documentation": {}
    },
    {
        "label": "FloatSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignment9",
        "description": "packages.pyright-internal.src.tests.samples.assignment9",
        "peekOfCode": "class FloatSubclass(float):\n    pass\nfloat_list: List[float] = [1.0, 2.0]\nv1: List[Union[float, FloatSubclass]] = float_list\nv2: List[Union[int, float]] = float_list\n# This should generate an error.\nv3: List[Union[int, float, datetime]] = float_list\nv4: List[FloatSubclass | float] = []\nv5: List[float] = v4",
        "detail": "packages.pyright-internal.src.tests.samples.assignment9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr1",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr1",
        "peekOfCode": "def func1():\n    b = 'a'\n    d = 'b'\n    a = (b := 3)\n    # This should generate an error because the\n    # item to the left of an assignment expression\n    # must be a name.\n    a + 3 := 3\n    # This should generate an error because parens\n    # are required in this case.",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr2",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr2",
        "peekOfCode": "def foo(x: float):\n    ...\ndef pep572_examples():\n    if (match := re.search('123', '252')) is not None:\n        print(match)\n    print(match)\n    file = open('hello')\n    while chunk := file.read(8192):\n        print(chunk)\n    print(chunk)",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr2",
        "documentation": {}
    },
    {
        "label": "pep572_examples",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr2",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr2",
        "peekOfCode": "def pep572_examples():\n    if (match := re.search('123', '252')) is not None:\n        print(match)\n    print(match)\n    file = open('hello')\n    while chunk := file.read(8192):\n        print(chunk)\n    print(chunk)\n    def f(x: float):\n        return x",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr2",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "peekOfCode": "def foo1(x: float):\n    ...\np = 3\n# This should generate an error.\ndef foo2(answer = p := 42):  # INVALID\n    ...\ndef foo3(answer=(p := 42)):  # Valid, though not great style\n    ...\ndefault_value: int = 3\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "peekOfCode": "def foo2(answer = p := 42):  # INVALID\n    ...\ndef foo3(answer=(p := 42)):  # Valid, though not great style\n    ...\ndefault_value: int = 3\n# This should generate an error.\ndef foo4(answer: p := default_value = 5):  # INVALID\n    ...\n# This should generate an error.\n(lambda: x := 1) # INVALID",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "peekOfCode": "def foo3(answer=(p := 42)):  # Valid, though not great style\n    ...\ndefault_value: int = 3\n# This should generate an error.\ndef foo4(answer: p := default_value = 5):  # INVALID\n    ...\n# This should generate an error.\n(lambda: x := 1) # INVALID\nlambda: (x := 1) # Valid, but unlikely to be useful\n(x := lambda: 1) # Valid",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "documentation": {}
    },
    {
        "label": "foo4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "peekOfCode": "def foo4(answer: p := default_value = 5):  # INVALID\n    ...\n# This should generate an error.\n(lambda: x := 1) # INVALID\nlambda: (x := 1) # Valid, but unlikely to be useful\n(x := lambda: 1) # Valid\nlambda line: (m := re.match('pattern', 'line')) and m.group(1) # Valid",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "peekOfCode": "p = 3\n# This should generate an error.\ndef foo2(answer = p := 42):  # INVALID\n    ...\ndef foo3(answer=(p := 42)):  # Valid, though not great style\n    ...\ndefault_value: int = 3\n# This should generate an error.\ndef foo4(answer: p := default_value = 5):  # INVALID\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr3",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "peekOfCode": "class Example:\n    # This should generate an error because the containing\n    # scope for the list comprehension is a class.\n    [(j := i) for i in range(5)]\n    x = ((y := 1), (z := 2))\nExample.x\nExample.y\nExample.z\n# This should generate an error because 'j' is used as a\n# \"for target\" and the target of an assignment expression.",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "peekOfCode": "pairs = []\nstuff = []\n# These should generate an error because assignment\n# expressions aren't allowed within an iterator expression\n# in a \"for\" clause of a list comprehension.\n[x for x, y in (pairs2 := pairs) if x % 2 == 0]\n[x for x, y in ([1, 2, 3, pairs2 := pairs]) if x % 2 == 0]\n{x: y for x, y in (pairs2 := pairs) if x % 2 == 0}\n{x for x, y in (pairs2 := pairs) if x % 2 == 0}\nfoo = (x for x, y in ([1, 2, 3, pairs2 := pairs]) if x % 2 == 0)",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "documentation": {}
    },
    {
        "label": "stuff",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "peekOfCode": "stuff = []\n# These should generate an error because assignment\n# expressions aren't allowed within an iterator expression\n# in a \"for\" clause of a list comprehension.\n[x for x, y in (pairs2 := pairs) if x % 2 == 0]\n[x for x, y in ([1, 2, 3, pairs2 := pairs]) if x % 2 == 0]\n{x: y for x, y in (pairs2 := pairs) if x % 2 == 0}\n{x for x, y in (pairs2 := pairs) if x % 2 == 0}\nfoo = (x for x, y in ([1, 2, 3, pairs2 := pairs]) if x % 2 == 0)\n# This should generate an error because 'j' is used as a",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "peekOfCode": "foo = (x for x, y in ([1, 2, 3, pairs2 := pairs]) if x % 2 == 0)\n# This should generate an error because 'j' is used as a\n# \"for target\" and the target of an assignment expression.\n[[(j := j) for i in range(5)] for j in range(5)]\n[i := 0 for i, j in stuff]\n[i + 1 for i in (i := stuff)]\n[False and (i := 0) for i, j in stuff]\n[i for i, j in stuff if True or (j := 1)]\n# These should generate an error because assignment\n# expressions aren't allowed within an iterator expression",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr4",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr5",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr5",
        "peekOfCode": "def foo() -> Tuple[str, int]:\n    a = 3\n    y = 4\n    b = [(a := x) for x in [\"1\", \"2\"] for y in [\"1\", \"2\"]]\n    # The type of \"y\" should be int because the \"y\" within\n    # the list comprehension doesn't leak outside. On the\n    # other hand, \"a\" does leak outside the list comprehension.\n    return (a, y)",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr5",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr6",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr6",
        "peekOfCode": "def foo(s: str) -> str:\n    if m := re.fullmatch(\"(test).+\", s):\n        return m.group(1)\n    return \"oops\"",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr6",
        "documentation": {}
    },
    {
        "label": "NearestKeyDict",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr7",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr7",
        "peekOfCode": "class NearestKeyDict(collections.UserDict):\n    def _keytransform(self, key):\n        a = len(candidate_keys := [k for k in sorted(self.data) if k >= key])\n        # This should generate an error because walrus operators\n        # are not allowed with named arguments.\n        b = list(iterable = candidate_keys := [k for k in sorted(self.data) if k >= key])",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr7",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr8",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr8",
        "peekOfCode": "result = None\nif items := 3 if result else None:\n    pass\nprint(items)",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr8",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "peekOfCode": "def decorator(*args: Any, **kwargs: Any) -> Callable[[_T], _T]:\n    ...\n@decorator(\n    [\n        walrus_target_1\n        for combination in [[1]]\n        if None not in (walrus_target_1 := set(combination))\n    ],\n)\ndef decorated(",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "documentation": {}
    },
    {
        "label": "decorated",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "peekOfCode": "def decorated(\n    x: List[str] = [x for x in [\"a\", \"b\"] if x in (walrus_target_2 := [\"a\", \"b\"])]\n):\n    pass\nreveal_type(walrus_target_1, expected_text=\"set[int]\")\nreveal_type(walrus_target_2, expected_text=\"list[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "description": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef decorator(*args: Any, **kwargs: Any) -> Callable[[_T], _T]:\n    ...\n@decorator(\n    [\n        walrus_target_1\n        for combination in [[1]]\n        if None not in (walrus_target_1 := set(combination))\n    ],\n)",
        "detail": "packages.pyright-internal.src.tests.samples.assignmentExpr9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.async1",
        "description": "packages.pyright-internal.src.tests.samples.async1",
        "peekOfCode": "def func1():\n    # This should generate an error because\n    # \"async\" cannot be used in a non-async function.\n    async for x in b():\n        print(\"\")\n    # This is allowed because it's in a generator.\n    y = (x async for x in b())\n    # This should generate an error because\n    # \"async\" cannot be used in a non-async function.\n    async with cm:",
        "detail": "packages.pyright-internal.src.tests.samples.async1",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.async1",
        "description": "packages.pyright-internal.src.tests.samples.async1",
        "peekOfCode": "cm = AsyncExitStack()\ndef func1():\n    # This should generate an error because\n    # \"async\" cannot be used in a non-async function.\n    async for x in b():\n        print(\"\")\n    # This is allowed because it's in a generator.\n    y = (x async for x in b())\n    # This should generate an error because\n    # \"async\" cannot be used in a non-async function.",
        "detail": "packages.pyright-internal.src.tests.samples.async1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.async1",
        "description": "packages.pyright-internal.src.tests.samples.async1",
        "peekOfCode": "y = (x async for x in b())\n# This should generate an error because\n# \"async\" cannot be used in a non-async function.\nasync with cm:\n    pass\n# This should generate an error because\n# \"async\" cannot be used in a non-async function.\n[x async for x in b()]",
        "detail": "packages.pyright-internal.src.tests.samples.async1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "a = 1\nb = 3.4\na += b\nreveal_type(a, expected_text=\"float\")\na -= b\nreveal_type(a, expected_text=\"float\")\na *= b\nreveal_type(a, expected_text=\"float\")\na /= b\nreveal_type(a, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "b = 3.4\na += b\nreveal_type(a, expected_text=\"float\")\na -= b\nreveal_type(a, expected_text=\"float\")\na *= b\nreveal_type(a, expected_text=\"float\")\na /= b\nreveal_type(a, expected_text=\"float\")\na //= b",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "a = 1\n# This should generate an error because\n# matrix multiply isn't supported by int.\na @= b\na |= b\na &= b\na ^= b\na <<= b\na >>= b\nlist1 = [1, 2, 3]",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "list1 = [1, 2, 3]\nlist1 += [4]\n# This should generate an error\nlist1 += 4\n# This should generate an error\nlist2 = [1]\nlist2 *= 4\n# This should generate an error\nlist2 *= [4]\n# Test __iadd__ override in list class, which accepts",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "list2 = [1]\nlist2 *= 4\n# This should generate an error\nlist2 *= [4]\n# Test __iadd__ override in list class, which accepts\n# any iterator as an argument.\nbar = (\"d\",)\nfoo = [\"a\", \"b\"]\nfoo += [\"c\"]\nfoo += bar",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "bar = (\"d\",)\nfoo = [\"a\", \"b\"]\nfoo += [\"c\"]\nfoo += bar",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "peekOfCode": "foo = [\"a\", \"b\"]\nfoo += [\"c\"]\nfoo += bar",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment1",
        "documentation": {}
    },
    {
        "label": "add_values",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment2",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment2",
        "peekOfCode": "def add_values(\n    values1: List[float] = [], values2: Optional[List[float]] = None\n) -> None:\n    values3 = None\n    # This should generate an error\n    values1 += values2\n    if values2 is not None:\n        values1 += values2\n    # This should generate an error\n    values1 -= values2",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.augmentedAssignment3",
        "description": "packages.pyright-internal.src.tests.samples.augmentedAssignment3",
        "peekOfCode": "class ClassA:\n    def a(self):\n        # This should generate an error.\n        self.val1 += 3",
        "detail": "packages.pyright-internal.src.tests.samples.augmentedAssignment3",
        "documentation": {}
    },
    {
        "label": "ShouldBeCovariant1[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "peekOfCode": "class ShouldBeCovariant1[T]:\n    def __getitem__(self, index: int) -> T: ...\n    def __iter__(self) -> Iterator[T]: ...\nvco1_1: ShouldBeCovariant1[float] = ShouldBeCovariant1[int]()\n# This should generate an error based on variance\nvco1_2: ShouldBeCovariant1[int] = ShouldBeCovariant1[float]()\nclass ShouldBeCovariant2[T](Sequence[T]):\n    pass\nvco2_1: ShouldBeCovariant2[float] = ShouldBeCovariant2[int]()\n# This should generate an error based on variance",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "documentation": {}
    },
    {
        "label": "ShouldBeCovariant2[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "peekOfCode": "class ShouldBeCovariant2[T](Sequence[T]):\n    pass\nvco2_1: ShouldBeCovariant2[float] = ShouldBeCovariant2[int]()\n# This should generate an error based on variance\nvco2_2: ShouldBeCovariant2[int] = ShouldBeCovariant2[float]()\nclass ShouldBeInvariant1[T]:\n    def __init__(self, value: T) -> None:\n        self._value = value\n    @property\n    def value(self):",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "documentation": {}
    },
    {
        "label": "ShouldBeInvariant1[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "peekOfCode": "class ShouldBeInvariant1[T]:\n    def __init__(self, value: T) -> None:\n        self._value = value\n    @property\n    def value(self):\n        return self._value\n# This should generate an error based on variance\nvinv1_1: ShouldBeInvariant1[float] = ShouldBeInvariant1[int](1)\n# This should generate an error based on variance\nvinv1_2: ShouldBeInvariant1[int] = ShouldBeInvariant1[float](1.1)",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "documentation": {}
    },
    {
        "label": "ShouldBeInvariant2[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "peekOfCode": "class ShouldBeInvariant2[T]:\n    def __init__(self, value: T) -> None:\n        self._value = value\n    def get_value(self) ->T:\n        return self._value\n# This should generate an error based on variance\nvinv2_1: ShouldBeInvariant2[float] = ShouldBeInvariant2[int](1)\n# This should generate an error based on variance\nvinv2_2: ShouldBeInvariant2[int] = ShouldBeInvariant2[float](1.1)\nclass ShouldBeInvariant3[K, V](dict[K, V]):",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "documentation": {}
    },
    {
        "label": "ShouldBeInvariant3[K",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "peekOfCode": "class ShouldBeInvariant3[K, V](dict[K, V]):\n    pass\n# This should generate an error based on variance\nvinv3_1: ShouldBeInvariant3[float, str] = ShouldBeInvariant3[int, str]()\n# This should generate an error based on variance\nvinv3_2: ShouldBeInvariant3[int, str] = ShouldBeInvariant3[float, str]()\n# This should generate an error based on variance\nvinv3_3: ShouldBeInvariant3[str, float] = ShouldBeInvariant3[str, int]()\n# This should generate an error based on variance\nvinv3_4: ShouldBeInvariant3[str, int] = ShouldBeInvariant3[str, float]()",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "documentation": {}
    },
    {
        "label": "ShouldBeContravariant1[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "peekOfCode": "class ShouldBeContravariant1[T]:\n    def __init__(self, value: T) -> None:\n        self._value = value\n# This should generate an error based on variance\nvcontra1_1: ShouldBeContravariant1[float] = ShouldBeContravariant1[int](1)\nvcontra1_2: ShouldBeContravariant1[int] = ShouldBeContravariant1[float](1.2)",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance1",
        "documentation": {}
    },
    {
        "label": "Node[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "peekOfCode": "class Node[T]:\n    left: Node[T]\n    right: Node[T]\n    value: T\nclass MyPartial[**P, R]:\n    def __init__(self, first: int, func: Callable[Concatenate[int, P], R]) -> None:\n        self.first = first\n        self.func = func\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "documentation": {}
    },
    {
        "label": "MyPartial[**P",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "peekOfCode": "class MyPartial[**P, R]:\n    def __init__(self, first: int, func: Callable[Concatenate[int, P], R]) -> None:\n        self.first = first\n        self.func = func\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\nclass CallbackKeyed[*Ts](Protocol):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[*Ts]:\n        ...\ndef invoke_keyed[*Ts](fn: CallbackKeyed[*Ts], *args: *Ts) -> tuple[*Ts]:",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "documentation": {}
    },
    {
        "label": "CallbackKeyed[*Ts]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "peekOfCode": "class CallbackKeyed[*Ts](Protocol):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[*Ts]:\n        ...\ndef invoke_keyed[*Ts](fn: CallbackKeyed[*Ts], *args: *Ts) -> tuple[*Ts]:\n    return fn(*args, keyed=True)",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "documentation": {}
    },
    {
        "label": "invoke_keyed[*Ts]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "peekOfCode": "def invoke_keyed[*Ts](fn: CallbackKeyed[*Ts], *args: *Ts) -> tuple[*Ts]:\n    return fn(*args, keyed=True)",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance2",
        "documentation": {}
    },
    {
        "label": "ShouldBeCovariant1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "class ShouldBeCovariant1(Generic[T]):\n    def __getitem__(self, index: int) -> T: ...\n    def __iter__(self) -> Iterator[T]: ...\nvco1_1: ShouldBeCovariant1[float] = ShouldBeCovariant1[int]()\n# This should generate an error based on variance\nvco1_2: ShouldBeCovariant1[int] = ShouldBeCovariant1[float]()\nclass ShouldBeCovariant2(Sequence[T]):\n    pass\nvco2_1: ShouldBeCovariant2[float] = ShouldBeCovariant2[int]()\n# This should generate an error based on variance",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "ShouldBeCovariant2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "class ShouldBeCovariant2(Sequence[T]):\n    pass\nvco2_1: ShouldBeCovariant2[float] = ShouldBeCovariant2[int]()\n# This should generate an error based on variance\nvco2_2: ShouldBeCovariant2[int] = ShouldBeCovariant2[float]()\nclass ShouldBeInvariant1(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value = value\n    @property\n    def value(self):",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "ShouldBeInvariant1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "class ShouldBeInvariant1(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value = value\n    @property\n    def value(self):\n        return self._value\n# This should generate an error based on variance\nvinv1_1: ShouldBeInvariant1[float] = ShouldBeInvariant1[int](1)\n# This should generate an error based on variance\nvinv1_2: ShouldBeInvariant1[int] = ShouldBeInvariant1[float](1.1)",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "ShouldBeInvariant2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "class ShouldBeInvariant2(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value = value\n    def get_value(self) ->T:\n        return self._value\n# This should generate an error based on variance\nvinv2_1: ShouldBeInvariant2[float] = ShouldBeInvariant2[int](1)\n# This should generate an error based on variance\nvinv2_2: ShouldBeInvariant2[int] = ShouldBeInvariant2[float](1.1)\nclass ShouldBeInvariant3(dict[K, V]):",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "ShouldBeInvariant3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "class ShouldBeInvariant3(dict[K, V]):\n    pass\n# This should generate an error based on variance\nvinv3_1: ShouldBeInvariant3[float, str] = ShouldBeInvariant3[int, str]()\n# This should generate an error based on variance\nvinv3_2: ShouldBeInvariant3[int, str] = ShouldBeInvariant3[float, str]()\n# This should generate an error based on variance\nvinv3_3: ShouldBeInvariant3[str, float] = ShouldBeInvariant3[str, int]()\n# This should generate an error based on variance\nvinv3_4: ShouldBeInvariant3[str, int] = ShouldBeInvariant3[str, float]()",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "ShouldBeContravariant1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "class ShouldBeContravariant1(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value = value\n# This should generate an error based on variance\nvcontra1_1: ShouldBeContravariant1[float] = ShouldBeContravariant1[int](1)\nvcontra1_2: ShouldBeContravariant1[int] = ShouldBeContravariant1[float](1.2)",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "T = TypeVar(\"T\", infer_variance=True)\nK = TypeVar(\"K\", infer_variance=True)\nV = TypeVar(\"V\", infer_variance=True)\n# This should generate an error because covariant cannot be used\n# with infer_variance.\nS1 = TypeVar(\"S1\", covariant=True, infer_variance=True)\n# This should generate an error because contravariant cannot be used\n# with infer_variance.\nS2 = TypeVar(\"S2\", contravariant=True, infer_variance=True)\nclass ShouldBeCovariant1(Generic[T]):",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "K = TypeVar(\"K\", infer_variance=True)\nV = TypeVar(\"V\", infer_variance=True)\n# This should generate an error because covariant cannot be used\n# with infer_variance.\nS1 = TypeVar(\"S1\", covariant=True, infer_variance=True)\n# This should generate an error because contravariant cannot be used\n# with infer_variance.\nS2 = TypeVar(\"S2\", contravariant=True, infer_variance=True)\nclass ShouldBeCovariant1(Generic[T]):\n    def __getitem__(self, index: int) -> T: ...",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "V = TypeVar(\"V\", infer_variance=True)\n# This should generate an error because covariant cannot be used\n# with infer_variance.\nS1 = TypeVar(\"S1\", covariant=True, infer_variance=True)\n# This should generate an error because contravariant cannot be used\n# with infer_variance.\nS2 = TypeVar(\"S2\", contravariant=True, infer_variance=True)\nclass ShouldBeCovariant1(Generic[T]):\n    def __getitem__(self, index: int) -> T: ...\n    def __iter__(self) -> Iterator[T]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "S1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "S1 = TypeVar(\"S1\", covariant=True, infer_variance=True)\n# This should generate an error because contravariant cannot be used\n# with infer_variance.\nS2 = TypeVar(\"S2\", contravariant=True, infer_variance=True)\nclass ShouldBeCovariant1(Generic[T]):\n    def __getitem__(self, index: int) -> T: ...\n    def __iter__(self) -> Iterator[T]: ...\nvco1_1: ShouldBeCovariant1[float] = ShouldBeCovariant1[int]()\n# This should generate an error based on variance\nvco1_2: ShouldBeCovariant1[int] = ShouldBeCovariant1[float]()",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "S2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "description": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "peekOfCode": "S2 = TypeVar(\"S2\", contravariant=True, infer_variance=True)\nclass ShouldBeCovariant1(Generic[T]):\n    def __getitem__(self, index: int) -> T: ...\n    def __iter__(self) -> Iterator[T]: ...\nvco1_1: ShouldBeCovariant1[float] = ShouldBeCovariant1[int]()\n# This should generate an error based on variance\nvco1_2: ShouldBeCovariant1[int] = ShouldBeCovariant1[float]()\nclass ShouldBeCovariant2(Sequence[T]):\n    pass\nvco2_1: ShouldBeCovariant2[float] = ShouldBeCovariant2[int]()",
        "detail": "packages.pyright-internal.src.tests.samples.autoVariance3",
        "documentation": {}
    },
    {
        "label": "Msg",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.await1",
        "description": "packages.pyright-internal.src.tests.samples.await1",
        "peekOfCode": "class Msg(Generic[T]):\n    body: T\nclass Request:\n    id: int\nasync def func1(check: \"Callable[[AnyMsg], bool]\") -> AnyMsg:\n    ...\nasync def main():\n    _: Msg[Request] = await func1(check=lambda msg: (msg.body.id == 12345))",
        "detail": "packages.pyright-internal.src.tests.samples.await1",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.await1",
        "description": "packages.pyright-internal.src.tests.samples.await1",
        "peekOfCode": "class Request:\n    id: int\nasync def func1(check: \"Callable[[AnyMsg], bool]\") -> AnyMsg:\n    ...\nasync def main():\n    _: Msg[Request] = await func1(check=lambda msg: (msg.body.id == 12345))",
        "detail": "packages.pyright-internal.src.tests.samples.await1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.await1",
        "description": "packages.pyright-internal.src.tests.samples.await1",
        "peekOfCode": "T = TypeVar(\"T\")\nAnyMsg = TypeVar(\"AnyMsg\", bound=\"Msg\")\nclass Msg(Generic[T]):\n    body: T\nclass Request:\n    id: int\nasync def func1(check: \"Callable[[AnyMsg], bool]\") -> AnyMsg:\n    ...\nasync def main():\n    _: Msg[Request] = await func1(check=lambda msg: (msg.body.id == 12345))",
        "detail": "packages.pyright-internal.src.tests.samples.await1",
        "documentation": {}
    },
    {
        "label": "AnyMsg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.await1",
        "description": "packages.pyright-internal.src.tests.samples.await1",
        "peekOfCode": "AnyMsg = TypeVar(\"AnyMsg\", bound=\"Msg\")\nclass Msg(Generic[T]):\n    body: T\nclass Request:\n    id: int\nasync def func1(check: \"Callable[[AnyMsg], bool]\") -> AnyMsg:\n    ...\nasync def main():\n    _: Msg[Request] = await func1(check=lambda msg: (msg.body.id == 12345))",
        "detail": "packages.pyright-internal.src.tests.samples.await1",
        "documentation": {}
    },
    {
        "label": "MyAwaitable",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.await2",
        "description": "packages.pyright-internal.src.tests.samples.await2",
        "peekOfCode": "class MyAwaitable:\n    def __await__(self) -> Generator[Any, None, int]:\n        async def foo() -> int:\n            return 1\n        return foo().__await__()\n    async def foo(self) -> int:\n        return await self\nasync def main() -> None:\n    p = MyAwaitable()\n    print(await p.foo())",
        "detail": "packages.pyright-internal.src.tests.samples.await2",
        "documentation": {}
    },
    {
        "label": "FooBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "class FooBase:\n    pass\nclass Foo(FooBase):\n    pass\nclass Bar(Foo):\n    pass\ndef needs_function1(callback: Callable[[Foo], Foo]):\n    pass\ndef callback1():\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "class Foo(FooBase):\n    pass\nclass Bar(Foo):\n    pass\ndef needs_function1(callback: Callable[[Foo], Foo]):\n    pass\ndef callback1():\n    pass\ndef callback2(a: Foo) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "class Bar(Foo):\n    pass\ndef needs_function1(callback: Callable[[Foo], Foo]):\n    pass\ndef callback1():\n    pass\ndef callback2(a: Foo) -> Foo:\n    return Foo()\ndef callback3(a: Foo) -> str:\n    return \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "needs_function1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def needs_function1(callback: Callable[[Foo], Foo]):\n    pass\ndef callback1():\n    pass\ndef callback2(a: Foo) -> Foo:\n    return Foo()\ndef callback3(a: Foo) -> str:\n    return \"1\"\ndef callback4(a: Foo, b: Foo) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback1():\n    pass\ndef callback2(a: Foo) -> Foo:\n    return Foo()\ndef callback3(a: Foo) -> str:\n    return \"1\"\ndef callback4(a: Foo, b: Foo) -> Foo:\n    return Foo()\ndef callback5(a: Foo, b: int = 3) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback2(a: Foo) -> Foo:\n    return Foo()\ndef callback3(a: Foo) -> str:\n    return \"1\"\ndef callback4(a: Foo, b: Foo) -> Foo:\n    return Foo()\ndef callback5(a: Foo, b: int = 3) -> Foo:\n    return Foo()\ndef callback6(*a) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback3(a: Foo) -> str:\n    return \"1\"\ndef callback4(a: Foo, b: Foo) -> Foo:\n    return Foo()\ndef callback5(a: Foo, b: int = 3) -> Foo:\n    return Foo()\ndef callback6(*a) -> Foo:\n    return Foo()\ndef callback7(a: str) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback4(a: Foo, b: Foo) -> Foo:\n    return Foo()\ndef callback5(a: Foo, b: int = 3) -> Foo:\n    return Foo()\ndef callback6(*a) -> Foo:\n    return Foo()\ndef callback7(a: str) -> Foo:\n    return Foo()\ndef callback8(a: Bar) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback5(a: Foo, b: int = 3) -> Foo:\n    return Foo()\ndef callback6(*a) -> Foo:\n    return Foo()\ndef callback7(a: str) -> Foo:\n    return Foo()\ndef callback8(a: Bar) -> Foo:\n    return Foo()\ndef callback9(a: FooBase) -> Foo:\n    return Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback6(*a) -> Foo:\n    return Foo()\ndef callback7(a: str) -> Foo:\n    return Foo()\ndef callback8(a: Bar) -> Foo:\n    return Foo()\ndef callback9(a: FooBase) -> Foo:\n    return Foo()\n# This should generate an error because callback1\n# takes no parameters.",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback7(a: str) -> Foo:\n    return Foo()\ndef callback8(a: Bar) -> Foo:\n    return Foo()\ndef callback9(a: FooBase) -> Foo:\n    return Foo()\n# This should generate an error because callback1\n# takes no parameters.\nneeds_function1(callback1)\nneeds_function1(callback2)",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback8(a: Bar) -> Foo:\n    return Foo()\ndef callback9(a: FooBase) -> Foo:\n    return Foo()\n# This should generate an error because callback1\n# takes no parameters.\nneeds_function1(callback1)\nneeds_function1(callback2)\n# This should generate an error because the return\n# type of callback3 doesn't match.",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "callback9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call1",
        "description": "packages.pyright-internal.src.tests.samples.call1",
        "peekOfCode": "def callback9(a: FooBase) -> Foo:\n    return Foo()\n# This should generate an error because callback1\n# takes no parameters.\nneeds_function1(callback1)\nneeds_function1(callback2)\n# This should generate an error because the return\n# type of callback3 doesn't match.\nneeds_function1(callback3)\n# This should generate an error because callback4",
        "detail": "packages.pyright-internal.src.tests.samples.call1",
        "documentation": {}
    },
    {
        "label": "MyStr",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "class MyStr(str):\n    ...\nkwargs2: Dict[MyStr, MyStr] = {}\nfunc8(z=False, **kwargs2)\ndef func9(\n    x: int,\n    y: str,\n    *,\n    a: str = ...,\n    b: str,",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func1(a: int, *b: int):\n    pass\nfunc1(3)\nfunc1(3, 4)\nfunc1(3, *[1, 2, 3])\n# This should generate an error\nfunc1(3, \"hello\")\n# This should generate an error\nfunc1(3, 5, 2, \"str\")\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func2(a: str, **b: int):\n    pass\nfunc2(\"hi\")\nfunc2(\"hi\", b=3, c=4, d=5)\nstr_dict = {\"a\": \"3\", \"b\": \"2\"}\nfunc2(\"hi\", **str_dict)\n# This should generate a type error\nfunc2(\"hi\", 3)\n# This should generate a type error\nfunc2(\"hi\", b=\"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func4(*args: int):\n    pass\ndef func5(a: int, *args):\n    pass\ntuple1 = (2, 3)\nfunc4(*tuple1)\nfunc5(*tuple1)\n# This should generate an error because a is assigned twice.\nfunc2(a=\"\", a=\"\")\n# This should generate an error because c is assigned twice.",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func5(a: int, *args):\n    pass\ntuple1 = (2, 3)\nfunc4(*tuple1)\nfunc5(*tuple1)\n# This should generate an error because a is assigned twice.\nfunc2(a=\"\", a=\"\")\n# This should generate an error because c is assigned twice.\nfunc2(\"\", c=4, d=5, c=5)\ndef func6(param1: int, param2: str):",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func6(param1: int, param2: str):\n    pass\ndef func7(*args: Any, param0: int, param1: int, param2: str):\n    func6(*args, param1=param1, param2=param2)\n    func6(param0, param2=param2)\n    # This should generate two errors because param0 has no match\n    # and param2 is missing.\n    func6(param0, param1=param1)\ndef func8(\n    y: str,",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func7(*args: Any, param0: int, param1: int, param2: str):\n    func6(*args, param1=param1, param2=param2)\n    func6(param0, param2=param2)\n    # This should generate two errors because param0 has no match\n    # and param2 is missing.\n    func6(param0, param1=param1)\ndef func8(\n    y: str,\n    z: bool = ...,\n) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func8(\n    y: str,\n    z: bool = ...,\n) -> None:\n    ...\nkwargs1: Dict[str, int] = {}\n# This should generate an error because int is not compatible with str.\nfunc8(z=False, **kwargs1)\nclass MyStr(str):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func9(\n    x: int,\n    y: str,\n    *,\n    a: str = ...,\n    b: str,\n    c: str,\n) -> None:\n    ...\nkwargs3: Dict[str, str] = {}",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func10(x: int): ...\nfunc10(1, *())\n# This should generate an error.\nfunc10(1, *(1, ))\ndef func11(y: tuple[int, ...]):\n    func10(1, *y)",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "def func11(y: tuple[int, ...]):\n    func10(1, *y)",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "str_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "str_list = [\"he\", \"2\", \"3\"]\n# This should generate an error\nfunc1(3, *str_list)\ndef func2(a: str, **b: int):\n    pass\nfunc2(\"hi\")\nfunc2(\"hi\", b=3, c=4, d=5)\nstr_dict = {\"a\": \"3\", \"b\": \"2\"}\nfunc2(\"hi\", **str_dict)\n# This should generate a type error",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "str_dict",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "str_dict = {\"a\": \"3\", \"b\": \"2\"}\nfunc2(\"hi\", **str_dict)\n# This should generate a type error\nfunc2(\"hi\", 3)\n# This should generate a type error\nfunc2(\"hi\", b=\"hi\")\ndef func4(*args: int):\n    pass\ndef func5(a: int, *args):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "tuple1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call2",
        "description": "packages.pyright-internal.src.tests.samples.call2",
        "peekOfCode": "tuple1 = (2, 3)\nfunc4(*tuple1)\nfunc5(*tuple1)\n# This should generate an error because a is assigned twice.\nfunc2(a=\"\", a=\"\")\n# This should generate an error because c is assigned twice.\nfunc2(\"\", c=4, d=5, c=5)\ndef func6(param1: int, param2: str):\n    pass\ndef func7(*args: Any, param0: int, param1: int, param2: str):",
        "detail": "packages.pyright-internal.src.tests.samples.call2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "class A:\n    def f(self, g: bool = False, /, **kwargs) -> None:\n        ...\na = A()\na.f(hello=\"world\")\ndef f7(name: str, /, **kwargs: Any):\n    return 3\nf7(\"hi\", name=3)\n# This should generate an error\nf7(\"hi\", name=3, name=4)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "class P1(Protocol):\n    def f(self, x: Any, /):\n        ...\nclass C1:\n    def f(\n        self,\n        y: Any,\n    ):\n        ...\nc1: P1 = C1()",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "class C1:\n    def f(\n        self,\n        y: Any,\n    ):\n        ...\nc1: P1 = C1()\nclass P2(Protocol):\n    def f(self, x: Any):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "class P2(Protocol):\n    def f(self, x: Any):\n        ...\nclass C2:\n    def f(self, y: Any, /):\n        ...\n# This should generate an error\nc2: P2 = C2()\ndef f8(a: int, b: int = 3, /):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "C2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "class C2:\n    def f(self, y: Any, /):\n        ...\n# This should generate an error\nc2: P2 = C2()\ndef f8(a: int, b: int = 3, /):\n    ...\nkwargs: Dict[str, Any] = {}\n# This should generate an error\nf8()",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f0",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f0(a: int, b: int):\n    return 3\ndef f1(a: int, b: int, /):\n    return 3\n# This should generate an error because only one\n# '/' parameter is allowed.\ndef f2(a: int, /, b: int, /):\n    return 3\ndef f3(a: int, /, b: int):\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f1(a: int, b: int, /):\n    return 3\n# This should generate an error because only one\n# '/' parameter is allowed.\ndef f2(a: int, /, b: int, /):\n    return 3\ndef f3(a: int, /, b: int):\n    return 3\ndef f4(a: int, /, b: int, *, c: int):\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f2(a: int, /, b: int, /):\n    return 3\ndef f3(a: int, /, b: int):\n    return 3\ndef f4(a: int, /, b: int, *, c: int):\n    return 3\n# This should generate an error because a '/'\n# parameter shouldn't appear after '*'.\ndef f5(a: int, *, b: int, /, c: int):\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f3(a: int, /, b: int):\n    return 3\ndef f4(a: int, /, b: int, *, c: int):\n    return 3\n# This should generate an error because a '/'\n# parameter shouldn't appear after '*'.\ndef f5(a: int, *, b: int, /, c: int):\n    return 3\n# This should generate an error because a '/'\n# parameter cannot be the first in a param list.",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f4(a: int, /, b: int, *, c: int):\n    return 3\n# This should generate an error because a '/'\n# parameter shouldn't appear after '*'.\ndef f5(a: int, *, b: int, /, c: int):\n    return 3\n# This should generate an error because a '/'\n# parameter cannot be the first in a param list.\ndef f6(/, a: int, *, b: int):\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f5(a: int, *, b: int, /, c: int):\n    return 3\n# This should generate an error because a '/'\n# parameter cannot be the first in a param list.\ndef f6(/, a: int, *, b: int):\n    return 3\nf0(2, 3)\nf1(2, 3)\n# This should generate an error because b\n# is a position-only parameter.",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f6(/, a: int, *, b: int):\n    return 3\nf0(2, 3)\nf1(2, 3)\n# This should generate an error because b\n# is a position-only parameter.\nf1(2, b=3)\n# This should generate an error because a and b\n# are position-only parameters.\nf1(a=2, b=3)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f7(name: str, /, **kwargs: Any):\n    return 3\nf7(\"hi\", name=3)\n# This should generate an error\nf7(\"hi\", name=3, name=4)\nclass P1(Protocol):\n    def f(self, x: Any, /):\n        ...\nclass C1:\n    def f(",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f8(a: int, b: int = 3, /):\n    ...\nkwargs: Dict[str, Any] = {}\n# This should generate an error\nf8()\n# This should generate an error\nf8(**kwargs)\nf8(0, **kwargs)\ndef f9(*, c: int):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f9(*, c: int):\n    pass\n# This should generate an error because it is missing a keyword\n# argument for keyword parameter \"c\".\nf9(*[1, 2, 3])\n# This should generate an error because \"/\" cannot be used after \"*args\"\ndef f10(x, *args, /, y):\n    pass\n# This should generate an error because \"*\" cannot be used after \"*args\"\ndef f11(x, *args, *, y):",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f10(x, *args, /, y):\n    pass\n# This should generate an error because \"*\" cannot be used after \"*args\"\ndef f11(x, *args, *, y):\n    pass\ndef f15(x, /, *args):\n    pass\n# This should generate an error because x\n# is a position-only parameter.\nf15(x=1)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f11(x, *args, *, y):\n    pass\ndef f15(x, /, *args):\n    pass\n# This should generate an error because x\n# is a position-only parameter.\nf15(x=1)\ndef f16(x, /, *args, **kw):\n    pass\n# This should generate an error because x",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f15(x, /, *args):\n    pass\n# This should generate an error because x\n# is a position-only parameter.\nf15(x=1)\ndef f16(x, /, *args, **kw):\n    pass\n# This should generate an error because x\n# is a position-only parameter.\nf16(x=1)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f16(x, /, *args, **kw):\n    pass\n# This should generate an error because x\n# is a position-only parameter.\nf16(x=1)\ndef f12(a: int, b: str, /):\n    ...\ndef f13(v: Tuple[int, str]):\n    f12(*v)\ndef f14(v: Tuple[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f12(a: int, b: str, /):\n    ...\ndef f13(v: Tuple[int, str]):\n    f12(*v)\ndef f14(v: Tuple[int]):\n    # This should generate an error because parameter \"b\" has\n    # no corresponding argument.\n    f12(*v)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f13(v: Tuple[int, str]):\n    f12(*v)\ndef f14(v: Tuple[int]):\n    # This should generate an error because parameter \"b\" has\n    # no corresponding argument.\n    f12(*v)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "f14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "def f14(v: Tuple[int]):\n    # This should generate an error because parameter \"b\" has\n    # no corresponding argument.\n    f12(*v)",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call3",
        "description": "packages.pyright-internal.src.tests.samples.call3",
        "peekOfCode": "a = A()\na.f(hello=\"world\")\ndef f7(name: str, /, **kwargs: Any):\n    return 3\nf7(\"hi\", name=3)\n# This should generate an error\nf7(\"hi\", name=3, name=4)\nclass P1(Protocol):\n    def f(self, x: Any, /):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.call3",
        "documentation": {}
    },
    {
        "label": "Z",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "class Z(NamedTuple):\n    a: list[str]\n    b: list[int]\nq6 = Z([\"1\"], [3])\nfor a, b in zip(*q6):\n    reveal_type(a, expected_text=\"str\")\n    reveal_type(b, expected_text=\"int\")\ndef func1(a: list[str], c: list[int]):\n    ...\nfunc1(*q6)",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "ABC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "class ABC(NamedTuple):\n    a: float\n    b: float\n    c: float\n    def to_rgba(self) -> \"ABC\":\n        return ABC(*self)\nclass AB(NamedTuple):\n    a: float\n    b: float\n    def to_abc(self) -> ABC:",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "AB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "class AB(NamedTuple):\n    a: float\n    b: float\n    def to_abc(self) -> ABC:\n        return ABC(*self, 1)",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "def func1(a: list[str], c: list[int]):\n    ...\nfunc1(*q6)\nclass ABC(NamedTuple):\n    a: float\n    b: float\n    c: float\n    def to_rgba(self) -> \"ABC\":\n        return ABC(*self)\nclass AB(NamedTuple):",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "X = NamedTuple(\"X\", [(\"a\", int), (\"b\", str), (\"c\", str)])\nq0: List[Tuple[int, str, str]] = [(1, \"\", \"\"), (2, \"\", \"\")]\n[X(*item) for item in q0]\nq1: List[Tuple[int, str, float]] = [(1, \"a\", 3), (2, \"b\", 4), (3, \"c\", 5)]\n# This should generate an error because the items in q1 are not the\n# right type for the X constructor.\n[X(*item) for item in q1]\nq2: List[Tuple[int, str]] = [(1, \"1\"), (2, \"2\"), (3, \"3\")]\n# This should generate an error because the items in q2 contain only\n# two elements, and we need three to populate all three parameters",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "Y = NamedTuple(\"Y\", [(\"a\", str), (\"b\", str), (\"c\", str)])\nq5: List[Tuple[str, ...]] = [\n    (\"a\", \"b\"),\n    (\"a\", \"b\"),\n]\n[Y(*item) for item in q5]\nclass Z(NamedTuple):\n    a: list[str]\n    b: list[int]\nq6 = Z([\"1\"], [3])",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "q6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call5",
        "description": "packages.pyright-internal.src.tests.samples.call5",
        "peekOfCode": "q6 = Z([\"1\"], [3])\nfor a, b in zip(*q6):\n    reveal_type(a, expected_text=\"str\")\n    reveal_type(b, expected_text=\"int\")\ndef func1(a: list[str], c: list[int]):\n    ...\nfunc1(*q6)\nclass ABC(NamedTuple):\n    a: float\n    b: float",
        "detail": "packages.pyright-internal.src.tests.samples.call5",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call6",
        "description": "packages.pyright-internal.src.tests.samples.call6",
        "peekOfCode": "def foo1(a: int, b: int):\n    pass\ndef foo2(*args: int):\n    pass\nfixed_tuple_0 = ()\nfoo1(*fixed_tuple_0, 2, 3)\nfoo2(*fixed_tuple_0, 2)\nfixed_tuple_1 = (1,)\n# This should generate an error because there\n# are too many parameters.",
        "detail": "packages.pyright-internal.src.tests.samples.call6",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call6",
        "description": "packages.pyright-internal.src.tests.samples.call6",
        "peekOfCode": "def foo2(*args: int):\n    pass\nfixed_tuple_0 = ()\nfoo1(*fixed_tuple_0, 2, 3)\nfoo2(*fixed_tuple_0, 2)\nfixed_tuple_1 = (1,)\n# This should generate an error because there\n# are too many parameters.\nfoo1(*fixed_tuple_1, 2, 3)\nfoo2(*fixed_tuple_1, 2, *fixed_tuple_0)",
        "detail": "packages.pyright-internal.src.tests.samples.call6",
        "documentation": {}
    },
    {
        "label": "fixed_tuple_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call6",
        "description": "packages.pyright-internal.src.tests.samples.call6",
        "peekOfCode": "fixed_tuple_0 = ()\nfoo1(*fixed_tuple_0, 2, 3)\nfoo2(*fixed_tuple_0, 2)\nfixed_tuple_1 = (1,)\n# This should generate an error because there\n# are too many parameters.\nfoo1(*fixed_tuple_1, 2, 3)\nfoo2(*fixed_tuple_1, 2, *fixed_tuple_0)\nfixed_tuple_3 = (1, 3, 5)\n# This should generate an error because there",
        "detail": "packages.pyright-internal.src.tests.samples.call6",
        "documentation": {}
    },
    {
        "label": "fixed_tuple_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call6",
        "description": "packages.pyright-internal.src.tests.samples.call6",
        "peekOfCode": "fixed_tuple_1 = (1,)\n# This should generate an error because there\n# are too many parameters.\nfoo1(*fixed_tuple_1, 2, 3)\nfoo2(*fixed_tuple_1, 2, *fixed_tuple_0)\nfixed_tuple_3 = (1, 3, 5)\n# This should generate an error because there\n# are too many parameters.\nfoo1(*fixed_tuple_3, 2)\nfoo2(*fixed_tuple_3, 2, *fixed_tuple_0)",
        "detail": "packages.pyright-internal.src.tests.samples.call6",
        "documentation": {}
    },
    {
        "label": "fixed_tuple_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.call6",
        "description": "packages.pyright-internal.src.tests.samples.call6",
        "peekOfCode": "fixed_tuple_3 = (1, 3, 5)\n# This should generate an error because there\n# are too many parameters.\nfoo1(*fixed_tuple_3, 2)\nfoo2(*fixed_tuple_3, 2, *fixed_tuple_0)\nhomogen_tuple: tuple[int, ...] = (1, 5, 3)\nfoo2(*homogen_tuple)\nfoo2(*homogen_tuple, 2)",
        "detail": "packages.pyright-internal.src.tests.samples.call6",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call7",
        "description": "packages.pyright-internal.src.tests.samples.call7",
        "peekOfCode": "class TD1(TypedDict):\n    arg1: int\n    arg2: str\nclass TD2(TD1):\n    arg3: float\ndef func1(arg1: int, arg2: str):\n    pass\ndef func2(arg1: int, arg2: str, arg3: float):\n    pass\ndef func3(arg1: int, arg2: str, **kwargs: float):",
        "detail": "packages.pyright-internal.src.tests.samples.call7",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.call7",
        "description": "packages.pyright-internal.src.tests.samples.call7",
        "peekOfCode": "class TD2(TD1):\n    arg3: float\ndef func1(arg1: int, arg2: str):\n    pass\ndef func2(arg1: int, arg2: str, arg3: float):\n    pass\ndef func3(arg1: int, arg2: str, **kwargs: float):\n    pass\ndef func4(arg1: int, arg2: str, **kwargs: int):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.call7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call7",
        "description": "packages.pyright-internal.src.tests.samples.call7",
        "peekOfCode": "def func1(arg1: int, arg2: str):\n    pass\ndef func2(arg1: int, arg2: str, arg3: float):\n    pass\ndef func3(arg1: int, arg2: str, **kwargs: float):\n    pass\ndef func4(arg1: int, arg2: str, **kwargs: int):\n    pass\ntd1: TD1 = {\"arg1\": 10, \"arg2\": \"something\"}\ntd2: TD2 = {\"arg1\": 10, \"arg2\": \"something\", \"arg3\": 3.4}",
        "detail": "packages.pyright-internal.src.tests.samples.call7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call7",
        "description": "packages.pyright-internal.src.tests.samples.call7",
        "peekOfCode": "def func2(arg1: int, arg2: str, arg3: float):\n    pass\ndef func3(arg1: int, arg2: str, **kwargs: float):\n    pass\ndef func4(arg1: int, arg2: str, **kwargs: int):\n    pass\ntd1: TD1 = {\"arg1\": 10, \"arg2\": \"something\"}\ntd2: TD2 = {\"arg1\": 10, \"arg2\": \"something\", \"arg3\": 3.4}\nfunc1(**td1)\n# This should generate an error because \"arg1\" is already assigned",
        "detail": "packages.pyright-internal.src.tests.samples.call7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call7",
        "description": "packages.pyright-internal.src.tests.samples.call7",
        "peekOfCode": "def func3(arg1: int, arg2: str, **kwargs: float):\n    pass\ndef func4(arg1: int, arg2: str, **kwargs: int):\n    pass\ntd1: TD1 = {\"arg1\": 10, \"arg2\": \"something\"}\ntd2: TD2 = {\"arg1\": 10, \"arg2\": \"something\", \"arg3\": 3.4}\nfunc1(**td1)\n# This should generate an error because \"arg1\" is already assigned\nfunc1(arg1=3, **td1)\n# This should generate an error because \"arg3\" isn't provided",
        "detail": "packages.pyright-internal.src.tests.samples.call7",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.call7",
        "description": "packages.pyright-internal.src.tests.samples.call7",
        "peekOfCode": "def func4(arg1: int, arg2: str, **kwargs: int):\n    pass\ntd1: TD1 = {\"arg1\": 10, \"arg2\": \"something\"}\ntd2: TD2 = {\"arg1\": 10, \"arg2\": \"something\", \"arg3\": 3.4}\nfunc1(**td1)\n# This should generate an error because \"arg1\" is already assigned\nfunc1(arg1=3, **td1)\n# This should generate an error because \"arg3\" isn't provided\nfunc1(**td2)\n# This should generate an error because \"arg3\" isn't matched",
        "detail": "packages.pyright-internal.src.tests.samples.call7",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "class A:\n    pass\nCallable2 = Callable[[A], None]\ndef func1(a: Callable1):\n    a(A())\ndef func2(a: Callable2):\n    a(A())\n# Test Callable with ...\nCallable3 = Callable[..., int]\ndef func3(a: Callable3) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "def func1(a: Callable1):\n    a(A())\ndef func2(a: Callable2):\n    a(A())\n# Test Callable with ...\nCallable3 = Callable[..., int]\ndef func3(a: Callable3) -> int:\n    return a(1, 2, 3) + a() + a(\"hello\") + a([])\n# This should generate an error (... not allowed in param list)\nCallable4 = Callable[[...], int]",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "def func2(a: Callable2):\n    a(A())\n# Test Callable with ...\nCallable3 = Callable[..., int]\ndef func3(a: Callable3) -> int:\n    return a(1, 2, 3) + a() + a(\"hello\") + a([])\n# This should generate an error (... not allowed in param list)\nCallable4 = Callable[[...], int]\n# This should generate an error (too many arguments)\nCallable5 = Callable[..., int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "def func3(a: Callable3) -> int:\n    return a(1, 2, 3) + a() + a(\"hello\") + a([])\n# This should generate an error (... not allowed in param list)\nCallable4 = Callable[[...], int]\n# This should generate an error (too many arguments)\nCallable5 = Callable[..., int, int]\n# Test Callable with no parameters\nCallable6 = Callable[[], str]\ndef func6(a: Callable6):\n    a()",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "def func6(a: Callable6):\n    a()\n    # This should generate an error\n    a(1)\ndef func7(a: Callable):\n    reveal_type(a, expected_text=\"(...) -> Unknown\")\n    b = a(3, 4, 5)\n    reveal_type(b, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "def func7(a: Callable):\n    reveal_type(a, expected_text=\"(...) -> Unknown\")\n    b = a(3, 4, 5)\n    reveal_type(b, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "Callable1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "Callable1 = Callable[[\"A\"], None]\nclass A:\n    pass\nCallable2 = Callable[[A], None]\ndef func1(a: Callable1):\n    a(A())\ndef func2(a: Callable2):\n    a(A())\n# Test Callable with ...\nCallable3 = Callable[..., int]",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "Callable2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "Callable2 = Callable[[A], None]\ndef func1(a: Callable1):\n    a(A())\ndef func2(a: Callable2):\n    a(A())\n# Test Callable with ...\nCallable3 = Callable[..., int]\ndef func3(a: Callable3) -> int:\n    return a(1, 2, 3) + a() + a(\"hello\") + a([])\n# This should generate an error (... not allowed in param list)",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "Callable3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "Callable3 = Callable[..., int]\ndef func3(a: Callable3) -> int:\n    return a(1, 2, 3) + a() + a(\"hello\") + a([])\n# This should generate an error (... not allowed in param list)\nCallable4 = Callable[[...], int]\n# This should generate an error (too many arguments)\nCallable5 = Callable[..., int, int]\n# Test Callable with no parameters\nCallable6 = Callable[[], str]\ndef func6(a: Callable6):",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "Callable4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "Callable4 = Callable[[...], int]\n# This should generate an error (too many arguments)\nCallable5 = Callable[..., int, int]\n# Test Callable with no parameters\nCallable6 = Callable[[], str]\ndef func6(a: Callable6):\n    a()\n    # This should generate an error\n    a(1)\ndef func7(a: Callable):",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "Callable5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "Callable5 = Callable[..., int, int]\n# Test Callable with no parameters\nCallable6 = Callable[[], str]\ndef func6(a: Callable6):\n    a()\n    # This should generate an error\n    a(1)\ndef func7(a: Callable):\n    reveal_type(a, expected_text=\"(...) -> Unknown\")\n    b = a(3, 4, 5)",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "Callable6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable1",
        "description": "packages.pyright-internal.src.tests.samples.callable1",
        "peekOfCode": "Callable6 = Callable[[], str]\ndef func6(a: Callable6):\n    a()\n    # This should generate an error\n    a(1)\ndef func7(a: Callable):\n    reveal_type(a, expected_text=\"(...) -> Unknown\")\n    b = a(3, 4, 5)\n    reveal_type(b, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable1",
        "documentation": {}
    },
    {
        "label": "my_min",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "def my_min(__iterable: Iterable[_T1]) -> _T1:\n    ...\na: Callable[[Sequence[float]], float] = my_min\nb: Callable[[Sequence[Any]], Any] = my_min\ndef my_min2(__iterable: Sequence[_T1]) -> _T1:\n    ...\n# This should generate an error because an Iterable parameter\n# is not assignable to a Sequence parameter.\nc: Callable[[Iterable[float]], float] = my_min2\n_T2 = TypeVar(\"_T2\", bound=float)",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "my_min2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "def my_min2(__iterable: Sequence[_T1]) -> _T1:\n    ...\n# This should generate an error because an Iterable parameter\n# is not assignable to a Sequence parameter.\nc: Callable[[Iterable[float]], float] = my_min2\n_T2 = TypeVar(\"_T2\", bound=float)\ndef my_max(__iterable: Iterable[_T2]) -> _T2:\n    ...\nd: Callable[[Sequence[int]], int] = my_max\n# This should generate an error because Sequence[str]",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "my_max",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "def my_max(__iterable: Iterable[_T2]) -> _T2:\n    ...\nd: Callable[[Sequence[int]], int] = my_max\n# This should generate an error because Sequence[str]\n# is not compatible with the bound TypeVar _T2.\ne: Callable[[Sequence[str]], Any] = my_max\n_T3 = TypeVar(\"_T3\")\nContinuation = Callable[[_T3], None]\nCallback = Callable[[Continuation[_T3]], None]\ndef from_continuation(callback: Callback[_T3]) -> Awaitable[_T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "from_continuation",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "def from_continuation(callback: Callback[_T3]) -> Awaitable[_T3]:\n    future: Future[_T3] = Future()\n    return ensure_future(future)\ndef callback(done: Continuation[int]) -> None:\n    pass\nreveal_type(from_continuation(callback), expected_text=\"Awaitable[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "def callback(done: Continuation[int]) -> None:\n    pass\nreveal_type(from_continuation(callback), expected_text=\"Awaitable[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\ndef my_min(__iterable: Iterable[_T1]) -> _T1:\n    ...\na: Callable[[Sequence[float]], float] = my_min\nb: Callable[[Sequence[Any]], Any] = my_min\ndef my_min2(__iterable: Sequence[_T1]) -> _T1:\n    ...\n# This should generate an error because an Iterable parameter\n# is not assignable to a Sequence parameter.\nc: Callable[[Iterable[float]], float] = my_min2",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=float)\ndef my_max(__iterable: Iterable[_T2]) -> _T2:\n    ...\nd: Callable[[Sequence[int]], int] = my_max\n# This should generate an error because Sequence[str]\n# is not compatible with the bound TypeVar _T2.\ne: Callable[[Sequence[str]], Any] = my_max\n_T3 = TypeVar(\"_T3\")\nContinuation = Callable[[_T3], None]\nCallback = Callable[[Continuation[_T3]], None]",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\nContinuation = Callable[[_T3], None]\nCallback = Callable[[Continuation[_T3]], None]\ndef from_continuation(callback: Callback[_T3]) -> Awaitable[_T3]:\n    future: Future[_T3] = Future()\n    return ensure_future(future)\ndef callback(done: Continuation[int]) -> None:\n    pass\nreveal_type(from_continuation(callback), expected_text=\"Awaitable[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "Continuation",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "Continuation = Callable[[_T3], None]\nCallback = Callable[[Continuation[_T3]], None]\ndef from_continuation(callback: Callback[_T3]) -> Awaitable[_T3]:\n    future: Future[_T3] = Future()\n    return ensure_future(future)\ndef callback(done: Continuation[int]) -> None:\n    pass\nreveal_type(from_continuation(callback), expected_text=\"Awaitable[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "Callback",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable2",
        "description": "packages.pyright-internal.src.tests.samples.callable2",
        "peekOfCode": "Callback = Callable[[Continuation[_T3]], None]\ndef from_continuation(callback: Callback[_T3]) -> Awaitable[_T3]:\n    future: Future[_T3] = Future()\n    return ensure_future(future)\ndef callback(done: Continuation[int]) -> None:\n    pass\nreveal_type(from_continuation(callback), expected_text=\"Awaitable[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable2",
        "documentation": {}
    },
    {
        "label": "AsyncReplyChannel",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callable3",
        "description": "packages.pyright-internal.src.tests.samples.callable3",
        "peekOfCode": "class AsyncReplyChannel(Generic[Reply]):\n    ...\nclass MailboxProcessor(Generic[Msg]):\n    def post_and_async_reply(\n        self, build_message: Callable[[AsyncReplyChannel[Reply]], Msg]\n    ) -> Optional[Reply]:\n        return None\nagent: MailboxProcessor[Tuple[int, AsyncReplyChannel[str]]] = MailboxProcessor()\nbuild_message: Callable[\n    [AsyncReplyChannel[str]], Tuple[int, AsyncReplyChannel[str]]",
        "detail": "packages.pyright-internal.src.tests.samples.callable3",
        "documentation": {}
    },
    {
        "label": "MailboxProcessor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callable3",
        "description": "packages.pyright-internal.src.tests.samples.callable3",
        "peekOfCode": "class MailboxProcessor(Generic[Msg]):\n    def post_and_async_reply(\n        self, build_message: Callable[[AsyncReplyChannel[Reply]], Msg]\n    ) -> Optional[Reply]:\n        return None\nagent: MailboxProcessor[Tuple[int, AsyncReplyChannel[str]]] = MailboxProcessor()\nbuild_message: Callable[\n    [AsyncReplyChannel[str]], Tuple[int, AsyncReplyChannel[str]]\n] = lambda r: (42, r)\nret = agent.post_and_async_reply(build_message)",
        "detail": "packages.pyright-internal.src.tests.samples.callable3",
        "documentation": {}
    },
    {
        "label": "Msg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable3",
        "description": "packages.pyright-internal.src.tests.samples.callable3",
        "peekOfCode": "Msg = TypeVar(\"Msg\")\nReply = TypeVar(\"Reply\")\nclass AsyncReplyChannel(Generic[Reply]):\n    ...\nclass MailboxProcessor(Generic[Msg]):\n    def post_and_async_reply(\n        self, build_message: Callable[[AsyncReplyChannel[Reply]], Msg]\n    ) -> Optional[Reply]:\n        return None\nagent: MailboxProcessor[Tuple[int, AsyncReplyChannel[str]]] = MailboxProcessor()",
        "detail": "packages.pyright-internal.src.tests.samples.callable3",
        "documentation": {}
    },
    {
        "label": "Reply",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable3",
        "description": "packages.pyright-internal.src.tests.samples.callable3",
        "peekOfCode": "Reply = TypeVar(\"Reply\")\nclass AsyncReplyChannel(Generic[Reply]):\n    ...\nclass MailboxProcessor(Generic[Msg]):\n    def post_and_async_reply(\n        self, build_message: Callable[[AsyncReplyChannel[Reply]], Msg]\n    ) -> Optional[Reply]:\n        return None\nagent: MailboxProcessor[Tuple[int, AsyncReplyChannel[str]]] = MailboxProcessor()\nbuild_message: Callable[",
        "detail": "packages.pyright-internal.src.tests.samples.callable3",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable3",
        "description": "packages.pyright-internal.src.tests.samples.callable3",
        "peekOfCode": "] = lambda r: (42, r)\nret = agent.post_and_async_reply(build_message)\nreveal_type(ret, expected_text=\"str | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable3",
        "documentation": {}
    },
    {
        "label": "ret",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable3",
        "description": "packages.pyright-internal.src.tests.samples.callable3",
        "peekOfCode": "ret = agent.post_and_async_reply(build_message)\nreveal_type(ret, expected_text=\"str | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable3",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable4",
        "description": "packages.pyright-internal.src.tests.samples.callable4",
        "peekOfCode": "def g(f: Callable[[T], Optional[U]], x: T) -> U:\n    y = f(x)\n    reveal_type(y, expected_text=\"U@g | None\")\n    if y is not None:\n        reveal_type(y, expected_text=\"U@g\")\n        return y\n    raise ValueError()\ndef h(x: T, f: Callable[[T], Optional[U]]) -> U:\n    def g() -> U:\n        y = f(x)",
        "detail": "packages.pyright-internal.src.tests.samples.callable4",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable4",
        "description": "packages.pyright-internal.src.tests.samples.callable4",
        "peekOfCode": "def h(x: T, f: Callable[[T], Optional[U]]) -> U:\n    def g() -> U:\n        y = f(x)\n        if y is not None:\n            return y\n        raise ValueError()\n    return g()",
        "detail": "packages.pyright-internal.src.tests.samples.callable4",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable4",
        "description": "packages.pyright-internal.src.tests.samples.callable4",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\ndef g(f: Callable[[T], Optional[U]], x: T) -> U:\n    y = f(x)\n    reveal_type(y, expected_text=\"U@g | None\")\n    if y is not None:\n        reveal_type(y, expected_text=\"U@g\")\n        return y\n    raise ValueError()\ndef h(x: T, f: Callable[[T], Optional[U]]) -> U:",
        "detail": "packages.pyright-internal.src.tests.samples.callable4",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable4",
        "description": "packages.pyright-internal.src.tests.samples.callable4",
        "peekOfCode": "U = TypeVar(\"U\")\ndef g(f: Callable[[T], Optional[U]], x: T) -> U:\n    y = f(x)\n    reveal_type(y, expected_text=\"U@g | None\")\n    if y is not None:\n        reveal_type(y, expected_text=\"U@g\")\n        return y\n    raise ValueError()\ndef h(x: T, f: Callable[[T], Optional[U]]) -> U:\n    def g() -> U:",
        "detail": "packages.pyright-internal.src.tests.samples.callable4",
        "documentation": {}
    },
    {
        "label": "ff1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable5",
        "description": "packages.pyright-internal.src.tests.samples.callable5",
        "peekOfCode": "def ff1(real: float):\n    ...\n@overload\ndef ff1(real: str):\n    ...\ndef ff1(real: Union[float, str]) -> None:\n    ...\ndef fun(f: Callable[[T], Any], p: T):\n    return f(p)\nfun(ff1, 4)",
        "detail": "packages.pyright-internal.src.tests.samples.callable5",
        "documentation": {}
    },
    {
        "label": "ff1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable5",
        "description": "packages.pyright-internal.src.tests.samples.callable5",
        "peekOfCode": "def ff1(real: str):\n    ...\ndef ff1(real: Union[float, str]) -> None:\n    ...\ndef fun(f: Callable[[T], Any], p: T):\n    return f(p)\nfun(ff1, 4)\nfun(ff1, \"4\")\n# This should generate an error because a \"bytes\" argument\n# doesn't match any of the overloads.",
        "detail": "packages.pyright-internal.src.tests.samples.callable5",
        "documentation": {}
    },
    {
        "label": "ff1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable5",
        "description": "packages.pyright-internal.src.tests.samples.callable5",
        "peekOfCode": "def ff1(real: Union[float, str]) -> None:\n    ...\ndef fun(f: Callable[[T], Any], p: T):\n    return f(p)\nfun(ff1, 4)\nfun(ff1, \"4\")\n# This should generate an error because a \"bytes\" argument\n# doesn't match any of the overloads.\nfun(ff1, b\"\")\nmap(complex, [\"3j\", \"4\"])",
        "detail": "packages.pyright-internal.src.tests.samples.callable5",
        "documentation": {}
    },
    {
        "label": "fun",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable5",
        "description": "packages.pyright-internal.src.tests.samples.callable5",
        "peekOfCode": "def fun(f: Callable[[T], Any], p: T):\n    return f(p)\nfun(ff1, 4)\nfun(ff1, \"4\")\n# This should generate an error because a \"bytes\" argument\n# doesn't match any of the overloads.\nfun(ff1, b\"\")\nmap(complex, [\"3j\", \"4\"])\n# This should generate an error because a \"bytes\" argument\n# doesn't match any of the overloads in the \"complex\" constructor.",
        "detail": "packages.pyright-internal.src.tests.samples.callable5",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable5",
        "description": "packages.pyright-internal.src.tests.samples.callable5",
        "peekOfCode": "T = TypeVar(\"T\")\n@overload\ndef ff1(real: float):\n    ...\n@overload\ndef ff1(real: str):\n    ...\ndef ff1(real: Union[float, str]) -> None:\n    ...\ndef fun(f: Callable[[T], Any], p: T):",
        "detail": "packages.pyright-internal.src.tests.samples.callable5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "def func1(x: TA1[int]):\n    r1 = x(3, 4, 5, (1, 2, \"hi\"), \"hi\")\n    reveal_type(r1, expected_text=\"int\")\n    x(3, (1, 2, \"hi\"), \"hi\")\n    # This should generate an error because the first argument is not an int.\n    x(None, (1, 2, \"hi\"), \"hi\")\n    y = [1, 2, 3]\n    x(1, *y, (1, 2, \"hi\"), \"hi\")\ndef func2(x: TA3):\n    x(3, 4, 5, \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "def func2(x: TA3):\n    x(3, 4, 5, \"hi\")\n    # This should generate an error.\n    x(3, 4, \"hi\")\n    # This should generate an error.\n    x(3, 4, \"hi\", \"hi\")\ndef func6(x: TA4):\n    x()\nTs = TypeVarTuple(\"Ts\")\ndef func3(",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "def func6(x: TA4):\n    x()\nTs = TypeVarTuple(\"Ts\")\ndef func3(\n    path: str, *args: Unpack[Tuple[Unpack[Ts], str]]\n) -> Union[Unpack[Tuple[Unpack[Ts], int]]]:\n    ...\nv3 = func3(\"\", 1, \"2\", 3.3, None, \"\")\nreveal_type(v3, expected_text=\"int | str | float | None\")\nfunc3(\"\", \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "def func3(\n    path: str, *args: Unpack[Tuple[Unpack[Ts], str]]\n) -> Union[Unpack[Tuple[Unpack[Ts], int]]]:\n    ...\nv3 = func3(\"\", 1, \"2\", 3.3, None, \"\")\nreveal_type(v3, expected_text=\"int | str | float | None\")\nfunc3(\"\", \"\")\n# This should generate an error because the type of the first arg is wrong.\nfunc3(1, \"\")\n# This should generate an error because the type of the last arg is wrong.",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "def func4(\n    path: str, *args: Unpack[Tuple[Unpack[Ts], str]]\n) -> Tuple[Unpack[Ts], complex]:\n    ...\nv4 = func4(\"\", 1, \"2\", 3.3, None, \"\")\nreveal_type(v4, expected_text=\"Tuple[int, str, float, None, complex]\")\ndef func5(path: str, *args: Unpack[Tuple[str, ...]]) -> None:\n    ...\n# This should generate an errors.\nfunc5(\"\", 1, \"2\", \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "def func5(path: str, *args: Unpack[Tuple[str, ...]]) -> None:\n    ...\n# This should generate an errors.\nfunc5(\"\", 1, \"2\", \"\")\nfunc5(\"\", \"1\", \"2\", \"3.3\", \"None\", \"\")\n# This should generate one error.\nfunc5(\"\", \"1\", \"2\", \"3.3\", \"None\", 3)",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=int)\nTA1 = Callable[[_T, Unpack[Tuple[int, ...]], Tuple[int, int, str], str], _T]\n# This should generate an error\nTA2 = Callable[[int, Unpack[Tuple[int, ...]], Unpack[Tuple[int, int, str]], str], int]\nTA3 = Callable[[int, Unpack[Tuple[int, int]], str], int]\nTA4 = Callable[[Unpack[Tuple[int, ...]]], _T]\ndef func1(x: TA1[int]):\n    r1 = x(3, 4, 5, (1, 2, \"hi\"), \"hi\")\n    reveal_type(r1, expected_text=\"int\")\n    x(3, (1, 2, \"hi\"), \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "TA1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "TA1 = Callable[[_T, Unpack[Tuple[int, ...]], Tuple[int, int, str], str], _T]\n# This should generate an error\nTA2 = Callable[[int, Unpack[Tuple[int, ...]], Unpack[Tuple[int, int, str]], str], int]\nTA3 = Callable[[int, Unpack[Tuple[int, int]], str], int]\nTA4 = Callable[[Unpack[Tuple[int, ...]]], _T]\ndef func1(x: TA1[int]):\n    r1 = x(3, 4, 5, (1, 2, \"hi\"), \"hi\")\n    reveal_type(r1, expected_text=\"int\")\n    x(3, (1, 2, \"hi\"), \"hi\")\n    # This should generate an error because the first argument is not an int.",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "TA2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "TA2 = Callable[[int, Unpack[Tuple[int, ...]], Unpack[Tuple[int, int, str]], str], int]\nTA3 = Callable[[int, Unpack[Tuple[int, int]], str], int]\nTA4 = Callable[[Unpack[Tuple[int, ...]]], _T]\ndef func1(x: TA1[int]):\n    r1 = x(3, 4, 5, (1, 2, \"hi\"), \"hi\")\n    reveal_type(r1, expected_text=\"int\")\n    x(3, (1, 2, \"hi\"), \"hi\")\n    # This should generate an error because the first argument is not an int.\n    x(None, (1, 2, \"hi\"), \"hi\")\n    y = [1, 2, 3]",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "TA3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "TA3 = Callable[[int, Unpack[Tuple[int, int]], str], int]\nTA4 = Callable[[Unpack[Tuple[int, ...]]], _T]\ndef func1(x: TA1[int]):\n    r1 = x(3, 4, 5, (1, 2, \"hi\"), \"hi\")\n    reveal_type(r1, expected_text=\"int\")\n    x(3, (1, 2, \"hi\"), \"hi\")\n    # This should generate an error because the first argument is not an int.\n    x(None, (1, 2, \"hi\"), \"hi\")\n    y = [1, 2, 3]\n    x(1, *y, (1, 2, \"hi\"), \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "TA4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "TA4 = Callable[[Unpack[Tuple[int, ...]]], _T]\ndef func1(x: TA1[int]):\n    r1 = x(3, 4, 5, (1, 2, \"hi\"), \"hi\")\n    reveal_type(r1, expected_text=\"int\")\n    x(3, (1, 2, \"hi\"), \"hi\")\n    # This should generate an error because the first argument is not an int.\n    x(None, (1, 2, \"hi\"), \"hi\")\n    y = [1, 2, 3]\n    x(1, *y, (1, 2, \"hi\"), \"hi\")\ndef func2(x: TA3):",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "Ts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "Ts = TypeVarTuple(\"Ts\")\ndef func3(\n    path: str, *args: Unpack[Tuple[Unpack[Ts], str]]\n) -> Union[Unpack[Tuple[Unpack[Ts], int]]]:\n    ...\nv3 = func3(\"\", 1, \"2\", 3.3, None, \"\")\nreveal_type(v3, expected_text=\"int | str | float | None\")\nfunc3(\"\", \"\")\n# This should generate an error because the type of the first arg is wrong.\nfunc3(1, \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "v3 = func3(\"\", 1, \"2\", 3.3, None, \"\")\nreveal_type(v3, expected_text=\"int | str | float | None\")\nfunc3(\"\", \"\")\n# This should generate an error because the type of the first arg is wrong.\nfunc3(1, \"\")\n# This should generate an error because the type of the last arg is wrong.\nfunc3(\"\", 1)\n# This should generate an error because the type of the last arg is wrong.\nfunc3(\"\", 1, 2, 3, \"hi\", 1)\ndef func4(",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callable6",
        "description": "packages.pyright-internal.src.tests.samples.callable6",
        "peekOfCode": "v4 = func4(\"\", 1, \"2\", 3.3, None, \"\")\nreveal_type(v4, expected_text=\"Tuple[int, str, float, None, complex]\")\ndef func5(path: str, *args: Unpack[Tuple[str, ...]]) -> None:\n    ...\n# This should generate an errors.\nfunc5(\"\", 1, \"2\", \"\")\nfunc5(\"\", \"1\", \"2\", \"3.3\", \"None\", \"\")\n# This should generate one error.\nfunc5(\"\", \"1\", \"2\", \"3.3\", \"None\", 3)",
        "detail": "packages.pyright-internal.src.tests.samples.callable6",
        "documentation": {}
    },
    {
        "label": "TestClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "class TestClass1(Protocol):\n    def __call__(self, *vals: bytes, maxlen: Optional[int] = None) -> List[bytes]:\n        return []\ndef good_cb(*vals: bytes, maxlen: Optional[int] = None) -> List[bytes]:\n    return []\ndef bad_cb1(\n    *vals: bytes, maxlen: Optional[int], maxitems: Optional[int]\n) -> List[bytes]:\n    return []\ndef bad_cb2(*vals: bytes) -> List[bytes]:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "TestClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "class TestClass2(Protocol):\n    def __call__(self, *vals: bytes, **kwargs: str) -> None:\n        pass\ndef func1(*a: bytes, **b: str):\n    pass\ndef func2(*a: bytes):\n    pass\ndef func3(*a: str, **b: str):\n    pass\ndef func4(*a: bytes, **b: bytes):",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "TestClass3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "class TestClass3(Protocol):\n    def __call__(self) -> None:\n        pass\nvar3: TestClass3 = func1\nvar3 = func2\nvar3 = func3\nvar3 = func4\nclass TestClass4(Protocol):\n    foo: int\n    def __call__(self, x: int) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "TestClass4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "class TestClass4(Protocol):\n    foo: int\n    def __call__(self, x: int) -> None:\n        pass\ndef func5(x: int) -> None:\n    pass\n# This should generate an error.\nvar4: TestClass4 = func5\nclass TestClass5(Protocol):\n    def __call__(self, *, a: int, b: str) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "TestClass5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "class TestClass5(Protocol):\n    def __call__(self, *, a: int, b: str) -> int:\n        ...\ndef func6(a: int, b: str) -> int:\n    return 123\nf: TestClass5 = func6\nclass TestClass6:\n    def __call__(self, *vals: bytes, maxlen: Optional[int] = None) -> List[bytes]:\n        return []\n# This should generate an error because TestClass6 is not a protocol class.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "TestClass6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "class TestClass6:\n    def __call__(self, *vals: bytes, maxlen: Optional[int] = None) -> List[bytes]:\n        return []\n# This should generate an error because TestClass6 is not a protocol class.\nvar6: TestClass6 = good_cb",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "good_cb",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def good_cb(*vals: bytes, maxlen: Optional[int] = None) -> List[bytes]:\n    return []\ndef bad_cb1(\n    *vals: bytes, maxlen: Optional[int], maxitems: Optional[int]\n) -> List[bytes]:\n    return []\ndef bad_cb2(*vals: bytes) -> List[bytes]:\n    return []\ndef bad_cb3(*vals: bytes, maxlen: Optional[str]) -> List[bytes]:\n    return []",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "bad_cb1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def bad_cb1(\n    *vals: bytes, maxlen: Optional[int], maxitems: Optional[int]\n) -> List[bytes]:\n    return []\ndef bad_cb2(*vals: bytes) -> List[bytes]:\n    return []\ndef bad_cb3(*vals: bytes, maxlen: Optional[str]) -> List[bytes]:\n    return []\nvar1: TestClass1 = good_cb\n# This should generate an error because maxitems is unmatched.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "bad_cb2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def bad_cb2(*vals: bytes) -> List[bytes]:\n    return []\ndef bad_cb3(*vals: bytes, maxlen: Optional[str]) -> List[bytes]:\n    return []\nvar1: TestClass1 = good_cb\n# This should generate an error because maxitems is unmatched.\nvar1 = bad_cb1\n# This should generate an error because maxlen is unmatched.\nvar1 = bad_cb2\n# This should generate an error because maxlen is the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "bad_cb3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def bad_cb3(*vals: bytes, maxlen: Optional[str]) -> List[bytes]:\n    return []\nvar1: TestClass1 = good_cb\n# This should generate an error because maxitems is unmatched.\nvar1 = bad_cb1\n# This should generate an error because maxlen is unmatched.\nvar1 = bad_cb2\n# This should generate an error because maxlen is the wrong type.\nvar1 = bad_cb3\nclass TestClass2(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def func1(*a: bytes, **b: str):\n    pass\ndef func2(*a: bytes):\n    pass\ndef func3(*a: str, **b: str):\n    pass\ndef func4(*a: bytes, **b: bytes):\n    pass\nvar2: TestClass2 = func1\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def func2(*a: bytes):\n    pass\ndef func3(*a: str, **b: str):\n    pass\ndef func4(*a: bytes, **b: bytes):\n    pass\nvar2: TestClass2 = func1\n# This should generate an error.\nvar2 = func2\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def func3(*a: str, **b: str):\n    pass\ndef func4(*a: bytes, **b: bytes):\n    pass\nvar2: TestClass2 = func1\n# This should generate an error.\nvar2 = func2\n# This should generate an error.\nvar2 = func3\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def func4(*a: bytes, **b: bytes):\n    pass\nvar2: TestClass2 = func1\n# This should generate an error.\nvar2 = func2\n# This should generate an error.\nvar2 = func3\n# This should generate an error.\nvar2 = func4\nclass TestClass3(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def func5(x: int) -> None:\n    pass\n# This should generate an error.\nvar4: TestClass4 = func5\nclass TestClass5(Protocol):\n    def __call__(self, *, a: int, b: str) -> int:\n        ...\ndef func6(a: int, b: str) -> int:\n    return 123\nf: TestClass5 = func6",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "def func6(a: int, b: str) -> int:\n    return 123\nf: TestClass5 = func6\nclass TestClass6:\n    def __call__(self, *vals: bytes, maxlen: Optional[int] = None) -> List[bytes]:\n        return []\n# This should generate an error because TestClass6 is not a protocol class.\nvar6: TestClass6 = good_cb",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var1 = bad_cb1\n# This should generate an error because maxlen is unmatched.\nvar1 = bad_cb2\n# This should generate an error because maxlen is the wrong type.\nvar1 = bad_cb3\nclass TestClass2(Protocol):\n    def __call__(self, *vals: bytes, **kwargs: str) -> None:\n        pass\ndef func1(*a: bytes, **b: str):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var1 = bad_cb2\n# This should generate an error because maxlen is the wrong type.\nvar1 = bad_cb3\nclass TestClass2(Protocol):\n    def __call__(self, *vals: bytes, **kwargs: str) -> None:\n        pass\ndef func1(*a: bytes, **b: str):\n    pass\ndef func2(*a: bytes):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var1 = bad_cb3\nclass TestClass2(Protocol):\n    def __call__(self, *vals: bytes, **kwargs: str) -> None:\n        pass\ndef func1(*a: bytes, **b: str):\n    pass\ndef func2(*a: bytes):\n    pass\ndef func3(*a: str, **b: str):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var2 = func2\n# This should generate an error.\nvar2 = func3\n# This should generate an error.\nvar2 = func4\nclass TestClass3(Protocol):\n    def __call__(self) -> None:\n        pass\nvar3: TestClass3 = func1\nvar3 = func2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var2 = func3\n# This should generate an error.\nvar2 = func4\nclass TestClass3(Protocol):\n    def __call__(self) -> None:\n        pass\nvar3: TestClass3 = func1\nvar3 = func2\nvar3 = func3\nvar3 = func4",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var2 = func4\nclass TestClass3(Protocol):\n    def __call__(self) -> None:\n        pass\nvar3: TestClass3 = func1\nvar3 = func2\nvar3 = func3\nvar3 = func4\nclass TestClass4(Protocol):\n    foo: int",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var3 = func2\nvar3 = func3\nvar3 = func4\nclass TestClass4(Protocol):\n    foo: int\n    def __call__(self, x: int) -> None:\n        pass\ndef func5(x: int) -> None:\n    pass\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var3 = func3\nvar3 = func4\nclass TestClass4(Protocol):\n    foo: int\n    def __call__(self, x: int) -> None:\n        pass\ndef func5(x: int) -> None:\n    pass\n# This should generate an error.\nvar4: TestClass4 = func5",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "var3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "peekOfCode": "var3 = func4\nclass TestClass4(Protocol):\n    foo: int\n    def __call__(self, x: int) -> None:\n        pass\ndef func5(x: int) -> None:\n    pass\n# This should generate an error.\nvar4: TestClass4 = func5\nclass TestClass5(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol1",
        "documentation": {}
    },
    {
        "label": "MyCallable",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "peekOfCode": "class MyCallable(Protocol[InputT, OutputT]):\n    def __call__(self, inputs: InputT) -> OutputT:\n        ...\nclass Class1:\n    def __call__(self, inputs) -> int:\n        return 5\ng1: MyCallable[int, int] = Class1()\nclass Class2:\n    def __call__(self, inputs: Any) -> int:\n        return 5",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "peekOfCode": "class Class1:\n    def __call__(self, inputs) -> int:\n        return 5\ng1: MyCallable[int, int] = Class1()\nclass Class2:\n    def __call__(self, inputs: Any) -> int:\n        return 5\ng2: MyCallable[int, int] = Class2()",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "peekOfCode": "class Class2:\n    def __call__(self, inputs: Any) -> int:\n        return 5\ng2: MyCallable[int, int] = Class2()",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "documentation": {}
    },
    {
        "label": "InputT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "peekOfCode": "InputT = TypeVar(\"InputT\", contravariant=True)\nOutputT = TypeVar(\"OutputT\", covariant=True)\nclass MyCallable(Protocol[InputT, OutputT]):\n    def __call__(self, inputs: InputT) -> OutputT:\n        ...\nclass Class1:\n    def __call__(self, inputs) -> int:\n        return 5\ng1: MyCallable[int, int] = Class1()\nclass Class2:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "documentation": {}
    },
    {
        "label": "OutputT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "peekOfCode": "OutputT = TypeVar(\"OutputT\", covariant=True)\nclass MyCallable(Protocol[InputT, OutputT]):\n    def __call__(self, inputs: InputT) -> OutputT:\n        ...\nclass Class1:\n    def __call__(self, inputs) -> int:\n        return 5\ng1: MyCallable[int, int] = Class1()\nclass Class2:\n    def __call__(self, inputs: Any) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol2",
        "documentation": {}
    },
    {
        "label": "CallbackProtocol1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "peekOfCode": "class CallbackProtocol1(Protocol[TE]):\n    def __call__(self, s_exc: Exception, t_exc_class: Type[TE]) -> TE:\n        ...\ndef func1(s_exc: Exception, t_exc_class: Type[TE]) -> TE:\n    ...\ndef func2(\n    s_exc_class: Exception,\n    t_exc_class: Type[TE],\n    mapper: CallbackProtocol1[TE] = func1,\n):",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "peekOfCode": "def func1(s_exc: Exception, t_exc_class: Type[TE]) -> TE:\n    ...\ndef func2(\n    s_exc_class: Exception,\n    t_exc_class: Type[TE],\n    mapper: CallbackProtocol1[TE] = func1,\n):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "peekOfCode": "def func2(\n    s_exc_class: Exception,\n    t_exc_class: Type[TE],\n    mapper: CallbackProtocol1[TE] = func1,\n):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "documentation": {}
    },
    {
        "label": "TE",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "peekOfCode": "TE = TypeVar(\"TE\", bound=Exception)\nclass CallbackProtocol1(Protocol[TE]):\n    def __call__(self, s_exc: Exception, t_exc_class: Type[TE]) -> TE:\n        ...\ndef func1(s_exc: Exception, t_exc_class: Type[TE]) -> TE:\n    ...\ndef func2(\n    s_exc_class: Exception,\n    t_exc_class: Type[TE],\n    mapper: CallbackProtocol1[TE] = func1,",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol3",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "class P1(Protocol):\n    @overload\n    def __call__(self, x: int) -> int:\n        ...\n    @overload\n    def __call__(self, x: str) -> str:\n        ...\n    def __call__(self, x: Any) -> Any:\n        ...\ndef func0(x: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "class P2(Protocol):\n    def __call__(self, *args: int) -> Any:\n        ...\na: P2 = lambda *args: map(lambda arg: arg + 0, args)",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "func0",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def func0(x: Any) -> Any:\n    return x\ndef func1(x: int) -> Any:\n    return x\na0: P1 = func0\n# This should generate an error\na1: P1 = func1\n@overload\ndef of1(x: int) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def func1(x: int) -> Any:\n    return x\na0: P1 = func0\n# This should generate an error\na1: P1 = func1\n@overload\ndef of1(x: int) -> int:\n    ...\n@overload\ndef of1(x: str) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "of1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def of1(x: int) -> int:\n    ...\n@overload\ndef of1(x: str) -> str:\n    ...\ndef of1(x: Any) -> Any:\n    return x\n@overload\ndef of2(x: int) -> complex:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "of1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def of1(x: str) -> str:\n    ...\ndef of1(x: Any) -> Any:\n    return x\n@overload\ndef of2(x: int) -> complex:\n    ...\n@overload\ndef of2(x: str) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "of1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def of1(x: Any) -> Any:\n    return x\n@overload\ndef of2(x: int) -> complex:\n    ...\n@overload\ndef of2(x: str) -> str:\n    ...\ndef of2(x: Any) -> Any:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "of2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def of2(x: int) -> complex:\n    ...\n@overload\ndef of2(x: str) -> str:\n    ...\ndef of2(x: Any) -> Any:\n    return x\nb0: P1 = of1\n# This should generate an error\nb1: P1 = of2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "of2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def of2(x: str) -> str:\n    ...\ndef of2(x: Any) -> Any:\n    return x\nb0: P1 = of1\n# This should generate an error\nb1: P1 = of2\nclass P2(Protocol):\n    def __call__(self, *args: int) -> Any:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "of2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "peekOfCode": "def of2(x: Any) -> Any:\n    return x\nb0: P1 = of1\n# This should generate an error\nb1: P1 = of2\nclass P2(Protocol):\n    def __call__(self, *args: int) -> Any:\n        ...\na: P2 = lambda *args: map(lambda arg: arg + 0, args)",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol4",
        "documentation": {}
    },
    {
        "label": "SomeFunc1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "class SomeFunc1(Protocol[P, R]):\n    __name__: str\n    other_attribute: int\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\ndef other_func1(f: Callable[P, R]) -> SomeFunc1[P, R]:\n    converted = cast(SomeFunc1, f)\n    print(converted.__name__)\n    converted.other_attribute = 1\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "SomeFunc2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "class SomeFunc2(Protocol):\n    __name__: str\n    __module__: str\n    __qualname__: str\n    __annotations__: dict[str, Any]\n    def __call__(self) -> None:\n        ...\ndef some_func2() -> None:\n    ...\nv: SomeFunc2 = some_func2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "other_func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "def other_func1(f: Callable[P, R]) -> SomeFunc1[P, R]:\n    converted = cast(SomeFunc1, f)\n    print(converted.__name__)\n    converted.other_attribute = 1\n    # This should generate an error\n    converted.other_attribute = \"str\"\n    # This should generate an error\n    converted.xxx = 3\n    return converted\n@other_func1",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "some_func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "def some_func1(x: int) -> str:\n    ...\nreveal_type(some_func1, expected_text=\"SomeFunc1[(x: int), str]\")\nsome_func1.other_attribute\n# This should generate an error\nsome_func1.other_attribute2\nsome_func1(x=3)\nclass SomeFunc2(Protocol):\n    __name__: str\n    __module__: str",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "some_func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "def some_func2() -> None:\n    ...\nv: SomeFunc2 = some_func2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\", covariant=True)\nclass SomeFunc1(Protocol[P, R]):\n    __name__: str\n    other_attribute: int\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\ndef other_func1(f: Callable[P, R]) -> SomeFunc1[P, R]:\n    converted = cast(SomeFunc1, f)\n    print(converted.__name__)",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "peekOfCode": "R = TypeVar(\"R\", covariant=True)\nclass SomeFunc1(Protocol[P, R]):\n    __name__: str\n    other_attribute: int\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\ndef other_func1(f: Callable[P, R]) -> SomeFunc1[P, R]:\n    converted = cast(SomeFunc1, f)\n    print(converted.__name__)\n    converted.other_attribute = 1",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol5",
        "documentation": {}
    },
    {
        "label": "Callback1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "class Callback1(Protocol):\n    def __call__(self, path: str = ...) -> str:\n        ...\n# Callback with positional parameter without default arg value.\nclass Callback2(Protocol):\n    def __call__(self, path: str) -> str:\n        ...\ndef func1_1(path: str = \"\") -> str:\n    ...\ndef func1_2(path: str) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "Callback2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "class Callback2(Protocol):\n    def __call__(self, path: str) -> str:\n        ...\ndef func1_1(path: str = \"\") -> str:\n    ...\ndef func1_2(path: str) -> str:\n    ...\nval1_1: Callback1 = func1_1\n# This should generate an error.\nval1_2: Callback1 = func1_2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "Callback3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "class Callback3(Protocol):\n    def __call__(self, *, path: str = ...) -> str:\n        ...\n# Callback with keyword parameter without default arg value.\nclass Callback4(Protocol):\n    def __call__(self, *, path: str) -> str:\n        ...\ndef func3_1(*, path: str = \"\") -> str:\n    ...\ndef func3_2(*, path: str) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "Callback4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "class Callback4(Protocol):\n    def __call__(self, *, path: str) -> str:\n        ...\ndef func3_1(*, path: str = \"\") -> str:\n    ...\ndef func3_2(*, path: str) -> str:\n    ...\nval3_1: Callback3 = func3_1\n# This should generate an error.\nval3_2: Callback3 = func3_2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "func1_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "def func1_1(path: str = \"\") -> str:\n    ...\ndef func1_2(path: str) -> str:\n    ...\nval1_1: Callback1 = func1_1\n# This should generate an error.\nval1_2: Callback1 = func1_2\n# This should generate an error.\nval2_1: Callback2 = func1_1\nval2_2: Callback2 = func1_2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "func1_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "def func1_2(path: str) -> str:\n    ...\nval1_1: Callback1 = func1_1\n# This should generate an error.\nval1_2: Callback1 = func1_2\n# This should generate an error.\nval2_1: Callback2 = func1_1\nval2_2: Callback2 = func1_2\n# Callback with keyword parameter with default arg value.\nclass Callback3(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "func3_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "def func3_1(*, path: str = \"\") -> str:\n    ...\ndef func3_2(*, path: str) -> str:\n    ...\nval3_1: Callback3 = func3_1\n# This should generate an error.\nval3_2: Callback3 = func3_2\n# This should generate an error.\nval4_1: Callback4 = func3_1\nval4_2: Callback4 = func3_2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "func3_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "peekOfCode": "def func3_2(*, path: str) -> str:\n    ...\nval3_1: Callback3 = func3_1\n# This should generate an error.\nval3_2: Callback3 = func3_2\n# This should generate an error.\nval4_1: Callback4 = func3_1\nval4_2: Callback4 = func3_2",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol6",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol7",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol7",
        "peekOfCode": "class X(Protocol):\n    def __call__(self, x: int, /, y: str) -> Any:\n        ...\nx: X = f1",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol7",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol7",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol7",
        "peekOfCode": "def f1(x: int, /, y: str, z: None = None) -> Any:\n    ...\nclass X(Protocol):\n    def __call__(self, x: int, /, y: str) -> Any:\n        ...\nx: X = f1",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol7",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol8",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol8",
        "peekOfCode": "class P(Protocol):\n    def __call__(self, *args: Any, kwarg0: Any, kwarg1: Any) -> None:\n        ...\ndef f(*args: Any, kwarg0: Any, kwarg1: Any) -> None:\n    ...\np: P = f",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol8",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol8",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol8",
        "peekOfCode": "def f(*args: Any, kwarg0: Any, kwarg1: Any) -> None:\n    ...\np: P = f",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol8",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "peekOfCode": "class A:\n    def __call__(self, v: int):\n        print(\"Received\", v)\nclass B:\n    __call__ = A()\nclass C:\n    __call__ = B()\nclass D:\n    __call__ = C()\nd = D()",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "peekOfCode": "class B:\n    __call__ = A()\nclass C:\n    __call__ = B()\nclass D:\n    __call__ = C()\nd = D()\nd(1)\n# This should generate an error because of the incompatible argument type.\nd(\"1\")",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "peekOfCode": "class C:\n    __call__ = B()\nclass D:\n    __call__ = C()\nd = D()\nd(1)\n# This should generate an error because of the incompatible argument type.\nd(\"1\")\n# This should generate an error because of the wrong argument count.\nd(1, 1)",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "peekOfCode": "class D:\n    __call__ = C()\nd = D()\nd(1)\n# This should generate an error because of the incompatible argument type.\nd(\"1\")\n# This should generate an error because of the wrong argument count.\nd(1, 1)",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "description": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "peekOfCode": "d = D()\nd(1)\n# This should generate an error because of the incompatible argument type.\nd(\"1\")\n# This should generate an error because of the wrong argument count.\nd(1, 1)",
        "detail": "packages.pyright-internal.src.tests.samples.callbackProtocol9",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.callSite1",
        "description": "packages.pyright-internal.src.tests.samples.callSite1",
        "peekOfCode": "def add(a, b):\n    return a + b",
        "detail": "packages.pyright-internal.src.tests.samples.callSite1",
        "documentation": {}
    },
    {
        "label": "must_be_int",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callSite2",
        "description": "packages.pyright-internal.src.tests.samples.callSite2",
        "peekOfCode": "must_be_int = add(1, 2)\nresult1: int = must_be_int\nmust_be_str = add(\"hi\", \"there\")\nresult2: str = must_be_str",
        "detail": "packages.pyright-internal.src.tests.samples.callSite2",
        "documentation": {}
    },
    {
        "label": "must_be_str",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.callSite2",
        "description": "packages.pyright-internal.src.tests.samples.callSite2",
        "peekOfCode": "must_be_str = add(\"hi\", \"there\")\nresult2: str = must_be_str",
        "detail": "packages.pyright-internal.src.tests.samples.callSite2",
        "documentation": {}
    },
    {
        "label": "get_optional_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def get_optional_int() -> Optional[int]:\n    ...\nv1 = get_optional_int()\nif v1 is not None:\n    lambda: v1 + 5\nv2 = get_optional_int()\nif v2 is not None:\n    # This should generate an error because v2\n    # is reassigned after capture.\n    lambda: v2 + 5",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func1(v1: Optional[int]):\n    if v1 is not None:\n        lambda: v1 + 5\ndef func2(v1: Optional[int]):\n    if v1 is not None:\n        def func2_inner1():\n            x = v1 + 5\n            def func2_inner2():\n                lambda: v1 + 5\n            func2_inner2()",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func2(v1: Optional[int]):\n    if v1 is not None:\n        def func2_inner1():\n            x = v1 + 5\n            def func2_inner2():\n                lambda: v1 + 5\n            func2_inner2()\n        func2_inner1()\ndef func3():\n    v1: Optional[int] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func3():\n    v1: Optional[int] = 3\n    lambda: v1 + 5\ndef func4():\n    v1: Optional[int] = 3\n    # This should generate an error because v1\n    # is reassigned after capture.\n    lambda: v1 + 5\n    v1 = None\ndef func5():",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func4():\n    v1: Optional[int] = 3\n    # This should generate an error because v1\n    # is reassigned after capture.\n    lambda: v1 + 5\n    v1 = None\ndef func5():\n    v1: Optional[int] = 3\n    while True:\n        lambda: v1 + 5",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func5():\n    v1: Optional[int] = 3\n    while True:\n        lambda: v1 + 5\ndef func6():\n    v1: Optional[int] = 3\n    while True:\n        if v1 is not None:\n            # This should generate an error because\n            # v1 is reassigned on a code path that is",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func6():\n    v1: Optional[int] = 3\n    while True:\n        if v1 is not None:\n            # This should generate an error because\n            # v1 is reassigned on a code path that is\n            # reachable from the lambda.\n            lambda: v1 + 5\n        else:\n            v1 = None",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func7():\n    while True:\n        # This should generate an error because v1 is\n        # potentially unbound prior to capture.\n        lambda: v1 + 5\n        v1: Optional[int] = 3\ndef func8() -> NoReturn:\n    ...\ndef func9(x: str | None):\n    if not x:",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func8() -> NoReturn:\n    ...\ndef func9(x: str | None):\n    if not x:\n        func8()\n    def foo() -> str:\n        return x.upper()\n    return x.upper()",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "def func9(x: str | None):\n    if not x:\n        func8()\n    def foo() -> str:\n        return x.upper()\n    return x.upper()",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "v1 = get_optional_int()\nif v1 is not None:\n    lambda: v1 + 5\nv2 = get_optional_int()\nif v2 is not None:\n    # This should generate an error because v2\n    # is reassigned after capture.\n    lambda: v2 + 5\nv2 = None\nv3 = get_optional_int()",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "v2 = get_optional_int()\nif v2 is not None:\n    # This should generate an error because v2\n    # is reassigned after capture.\n    lambda: v2 + 5\nv2 = None\nv3 = get_optional_int()\nif v3 is not None:\n    lambda: v3 + 5\nelse:",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "v2 = None\nv3 = get_optional_int()\nif v3 is not None:\n    lambda: v3 + 5\nelse:\n    v3 = None\n# This should generate an error because v4 is\n# not bound prior to the capture.\nlambda: v4 + 5\nv4 = get_optional_int()",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "v3 = get_optional_int()\nif v3 is not None:\n    lambda: v3 + 5\nelse:\n    v3 = None\n# This should generate an error because v4 is\n# not bound prior to the capture.\nlambda: v4 + 5\nv4 = get_optional_int()\ndef func1(v1: Optional[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "peekOfCode": "v4 = get_optional_int()\ndef func1(v1: Optional[int]):\n    if v1 is not None:\n        lambda: v1 + 5\ndef func2(v1: Optional[int]):\n    if v1 is not None:\n        def func2_inner1():\n            x = v1 + 5\n            def func2_inner2():\n                lambda: v1 + 5",
        "detail": "packages.pyright-internal.src.tests.samples.capturedVariable1",
        "documentation": {}
    },
    {
        "label": "Example1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular1",
        "description": "packages.pyright-internal.src.tests.samples.circular1",
        "peekOfCode": "class Example1:\n    str: str = \"\"\n    int = int\n    test: int\nclass Example2:\n    int: \"int\" = 4",
        "detail": "packages.pyright-internal.src.tests.samples.circular1",
        "documentation": {}
    },
    {
        "label": "Example2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular1",
        "description": "packages.pyright-internal.src.tests.samples.circular1",
        "peekOfCode": "class Example2:\n    int: \"int\" = 4",
        "detail": "packages.pyright-internal.src.tests.samples.circular1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "class A:\n    a_attr: object\n_T = TypeVar(\"_T\", bound=A)\nclass B(Generic[_T]):\n    ...\nclass C(A):\n    template = B[\"E\"]()\nclass D(A):\n    pass\nclass E(D):",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "class B(Generic[_T]):\n    ...\nclass C(A):\n    template = B[\"E\"]()\nclass D(A):\n    pass\nclass E(D):\n    pass\nclass F(D):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "class C(A):\n    template = B[\"E\"]()\nclass D(A):\n    pass\nclass E(D):\n    pass\nclass F(D):\n    pass\nE.a_attr",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "class D(A):\n    pass\nclass E(D):\n    pass\nclass F(D):\n    pass\nE.a_attr",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "class E(D):\n    pass\nclass F(D):\n    pass\nE.a_attr",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "class F(D):\n    pass\nE.a_attr",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.circular2",
        "description": "packages.pyright-internal.src.tests.samples.circular2",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=A)\nclass B(Generic[_T]):\n    ...\nclass C(A):\n    template = B[\"E\"]()\nclass D(A):\n    pass\nclass E(D):\n    pass\nclass F(D):",
        "detail": "packages.pyright-internal.src.tests.samples.circular2",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "description": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "peekOfCode": "class Bar(Bar):\n    pass\n# This should generate an error\n# 'ClassB' is not bound\nclass ClassA(ClassB):\n    pass\nclass ClassB(ClassA):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "description": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "peekOfCode": "class ClassA(ClassB):\n    pass\nclass ClassB(ClassA):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "description": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "peekOfCode": "class ClassB(ClassA):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.circularBaseClass",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class A:\n    ...\nclass B:\n    C: Type[A]\napp = B()\nclass D(app.C):\n    ...\nclass E:\n    pass\nclass F(E):",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class B:\n    C: Type[A]\napp = B()\nclass D(app.C):\n    ...\nclass E:\n    pass\nclass F(E):\n    pass\nclass G(E, metaclass=type):",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class D(app.C):\n    ...\nclass E:\n    pass\nclass F(E):\n    pass\nclass G(E, metaclass=type):\n    def my_method(self):\n        print(__class__)\n# This should generate an error because only one metaclass is supported.",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class E:\n    pass\nclass F(E):\n    pass\nclass G(E, metaclass=type):\n    def my_method(self):\n        print(__class__)\n# This should generate an error because only one metaclass is supported.\nclass H(E, metaclass=type, metaclass=type):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class F(E):\n    pass\nclass G(E, metaclass=type):\n    def my_method(self):\n        print(__class__)\n# This should generate an error because only one metaclass is supported.\nclass H(E, metaclass=type, metaclass=type):\n    pass\nclass I(E, other_keyword=2):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class G(E, metaclass=type):\n    def my_method(self):\n        print(__class__)\n# This should generate an error because only one metaclass is supported.\nclass H(E, metaclass=type, metaclass=type):\n    pass\nclass I(E, other_keyword=2):\n    pass\nargs = [1, 2, 3]\nkwargs = {\"foo\": 5}",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class H(E, metaclass=type, metaclass=type):\n    pass\nclass I(E, other_keyword=2):\n    pass\nargs = [1, 2, 3]\nkwargs = {\"foo\": 5}\nclass J(*args, **kwargs):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class I(E, other_keyword=2):\n    pass\nargs = [1, 2, 3]\nkwargs = {\"foo\": 5}\nclass J(*args, **kwargs):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "J",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "class J(*args, **kwargs):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "app = B()\nclass D(app.C):\n    ...\nclass E:\n    pass\nclass F(E):\n    pass\nclass G(E, metaclass=type):\n    def my_method(self):\n        print(__class__)",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "args = [1, 2, 3]\nkwargs = {\"foo\": 5}\nclass J(*args, **kwargs):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "kwargs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes1",
        "description": "packages.pyright-internal.src.tests.samples.classes1",
        "peekOfCode": "kwargs = {\"foo\": 5}\nclass J(*args, **kwargs):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes1",
        "documentation": {}
    },
    {
        "label": "TestClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "class TestClass:\n    # These should be accessible within the class body\n    print(__doc__)\n    print(__module__)\n    print(__name__)\n    print(__qualname__)\nbase = TestClass.__base__\nbasic_size = TestClass.__basicsize__\ndict = TestClass.__dict__\ndict_offset = TestClass.__dictoffset__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "Meta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "class Meta(type):\n    def method1(self) -> str:\n        return self.__name__\nclass NonMeta:\n    def method1(self) -> str:\n        # This should generate an error\n        return self.__name__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "NonMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "class NonMeta:\n    def method1(self) -> str:\n        # This should generate an error\n        return self.__name__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "base = TestClass.__base__\nbasic_size = TestClass.__basicsize__\ndict = TestClass.__dict__\ndict_offset = TestClass.__dictoffset__\nflags = TestClass.__flags__\nitem_size = TestClass.__itemsize__\nmodule = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "basic_size",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "basic_size = TestClass.__basicsize__\ndict = TestClass.__dict__\ndict_offset = TestClass.__dictoffset__\nflags = TestClass.__flags__\nitem_size = TestClass.__itemsize__\nmodule = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "dict",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "dict = TestClass.__dict__\ndict_offset = TestClass.__dictoffset__\nflags = TestClass.__flags__\nitem_size = TestClass.__itemsize__\nmodule = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "dict_offset",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "dict_offset = TestClass.__dictoffset__\nflags = TestClass.__flags__\nitem_size = TestClass.__itemsize__\nmodule = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "flags",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "flags = TestClass.__flags__\nitem_size = TestClass.__itemsize__\nmodule = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "item_size",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "item_size = TestClass.__itemsize__\nmodule = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "module",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "module = TestClass.__module__\nmro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "mro",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "mro = TestClass.__mro__\nname = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__\ninstance.__module__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "name = TestClass.__name__\nqualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__\ninstance.__module__\n# These should generate an error because they are not visible to instances.",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "qualname",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "qualname = TestClass.__qualname__\ntext_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__\ninstance.__module__\n# These should generate an error because they are not visible to instances.\ninstance.__name__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "text_signature",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "text_signature = TestClass.__text_signature__\nsubclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__\ninstance.__module__\n# These should generate an error because they are not visible to instances.\ninstance.__name__\ninstance.__qualname__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "subclasses",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "subclasses = TestClass.__subclasses__\n# This should generate an error\ndummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__\ninstance.__module__\n# These should generate an error because they are not visible to instances.\ninstance.__name__\ninstance.__qualname__\nclass Meta(type):",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "dummy",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "dummy = TestClass.__dummy__\ninstance = TestClass()\ninstance.__doc__\ninstance.__module__\n# These should generate an error because they are not visible to instances.\ninstance.__name__\ninstance.__qualname__\nclass Meta(type):\n    def method1(self) -> str:\n        return self.__name__",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "instance",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes3",
        "description": "packages.pyright-internal.src.tests.samples.classes3",
        "peekOfCode": "instance = TestClass()\ninstance.__doc__\ninstance.__module__\n# These should generate an error because they are not visible to instances.\ninstance.__name__\ninstance.__qualname__\nclass Meta(type):\n    def method1(self) -> str:\n        return self.__name__\nclass NonMeta:",
        "detail": "packages.pyright-internal.src.tests.samples.classes3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes4",
        "description": "packages.pyright-internal.src.tests.samples.classes4",
        "peekOfCode": "class Foo:\n    bar: str = \"hi\"\n    def __init__(self, baz: str) -> None:\n        self.str = baz\n    @classmethod\n    def from_baz(cls, baz: str) -> None:\n        cls.str = baz",
        "detail": "packages.pyright-internal.src.tests.samples.classes4",
        "documentation": {}
    },
    {
        "label": "ParentClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ParentClass1:\n    cv1: ClassVar[int] = 0\n    cv2: ClassVar[int] = 0\n    cv3: ClassVar[int] = 0\n    cv4: ClassVar[int] = 0\n    var1: int\n    var2: str\n    var3: Union[int, str]\n    var4: int\n    var5: int",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "Subclass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class Subclass1(ParentClass1):\n    # This should generate an error.\n    cv1 = \"\"\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled.\n    cv2: int = 3\n    cv3 = 3\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled because it's overriding a non-final with a final.\n    cv4: Final = 3",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "ParentClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ParentClass2:\n    cv_decl_1: float\n    cv_decl_2: float\n    cv_decl_3: float\n    cv_decl_4: float\n    cv_decl_5: float\n    cv_decl_6: float\n    cv_infer_1 = 1.0\n    cv_infer_2 = 1.0\n    cv_infer_3 = 1.0",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "SubclassDeclared2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class SubclassDeclared2(ParentClass2):\n    cv_decl_1: int\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled.\n    cv_decl_2: str\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled.\n    cv_decl_3: Optional[float]\n    cv_infer_1: int\n    cv_infer_2: str",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "SubclassInferred2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class SubclassInferred2(ParentClass2):\n    cv_decl_1 = 1\n    # This should generate an error.\n    cv_decl_2 = \"\"\n    # This should generate an error.\n    cv_decl_3 = None\n    cv_infer_1 = 3\n    cv_infer_2 = \"\"\n    cv_infer_3 = None\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "SubclassTuple1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class SubclassTuple1(ParentClass2):\n    cv_decl_1, cv_decl_2, cv_decl_3 = (3, 4.5, 6.0)\nclass SubclassTuple2(ParentClass2):\n    # This should generate an error.\n    cv_decl_1, cv_decl_2, cv_decl_3 = (3, 4.5, None)\nclass ConfigBase:\n    ...\nclass ParentClass3(Protocol):\n    Config1: ClassVar[Type[ConfigBase]]\n    Config2: ClassVar[Type[ConfigBase]]",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "SubclassTuple2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class SubclassTuple2(ParentClass2):\n    # This should generate an error.\n    cv_decl_1, cv_decl_2, cv_decl_3 = (3, 4.5, None)\nclass ConfigBase:\n    ...\nclass ParentClass3(Protocol):\n    Config1: ClassVar[Type[ConfigBase]]\n    Config2: ClassVar[Type[ConfigBase]]\nclass ChildClass3(ParentClass3):\n    class Config1(ConfigBase):",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "ConfigBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ConfigBase:\n    ...\nclass ParentClass3(Protocol):\n    Config1: ClassVar[Type[ConfigBase]]\n    Config2: ClassVar[Type[ConfigBase]]\nclass ChildClass3(ParentClass3):\n    class Config1(ConfigBase):\n        ...\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled.",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "ParentClass3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ParentClass3(Protocol):\n    Config1: ClassVar[Type[ConfigBase]]\n    Config2: ClassVar[Type[ConfigBase]]\nclass ChildClass3(ParentClass3):\n    class Config1(ConfigBase):\n        ...\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled.\n    class Config2:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "ChildClass3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ChildClass3(ParentClass3):\n    class Config1(ConfigBase):\n        ...\n    # This should generate an error if reportIncompatibleVariableOverride\n    # is enabled.\n    class Config2:\n        ...\nclass PeerClass1:\n    test1: str = \"a\"\n    test2: str | None = None",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "PeerClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class PeerClass1:\n    test1: str = \"a\"\n    test2: str | None = None\n    @property\n    def test3(self) -> int:\n        return 3\n    test4: int\n    test5: Any\n    test6: float\nclass PeerClass2:",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "PeerClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class PeerClass2:\n    test1: int = 1\n    test2: int | None = None\n    test3: int\n    @property\n    def test4(self) -> int:\n        return 3\n    test5: int\n    test6: Any\n# This should generate 3 errors if reportIncompatibleVariableOverride",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "MultipleInheritance1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class MultipleInheritance1(PeerClass1, PeerClass2):\n    pass\nclass ParentClass4(Protocol):\n    x: ClassVar[int]\n    y: int\nclass ChildClass4(ParentClass4):\n    # This should generate 2 errors if reportIncompatibleVariableOverride\n    # is enabled, one for overriding a classvar with an instance var, the\n    # other for overriding a non-final with a final.\n    x: Final = 0",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "ParentClass4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ParentClass4(Protocol):\n    x: ClassVar[int]\n    y: int\nclass ChildClass4(ParentClass4):\n    # This should generate 2 errors if reportIncompatibleVariableOverride\n    # is enabled, one for overriding a classvar with an instance var, the\n    # other for overriding a non-final with a final.\n    x: Final = 0\n    # This should generate 1 error if reportIncompatibleVariableOverride\n    # is enabled because it is overriding a non-final with a final.",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "ChildClass4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes5",
        "description": "packages.pyright-internal.src.tests.samples.classes5",
        "peekOfCode": "class ChildClass4(ParentClass4):\n    # This should generate 2 errors if reportIncompatibleVariableOverride\n    # is enabled, one for overriding a classvar with an instance var, the\n    # other for overriding a non-final with a final.\n    x: Final = 0\n    # This should generate 1 error if reportIncompatibleVariableOverride\n    # is enabled because it is overriding a non-final with a final.\n    y: Final = 0",
        "detail": "packages.pyright-internal.src.tests.samples.classes5",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes6",
        "description": "packages.pyright-internal.src.tests.samples.classes6",
        "peekOfCode": "class A:\n    a = 5\n    class B:\n        # This should generate an error\n        b = a\n        class C:\n            # This should generate an error\n            c = a\n            # This should generate an error\n            d = b",
        "detail": "packages.pyright-internal.src.tests.samples.classes6",
        "documentation": {}
    },
    {
        "label": "BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes7",
        "description": "packages.pyright-internal.src.tests.samples.classes7",
        "peekOfCode": "class BaseClass(Generic[T]):\n    pass\nIntBaseClass = BaseClass[int]\n# This should generate an error because the same\n# base class is used twice.\nclass SubClass(BaseClass[float], IntBaseClass):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes7",
        "documentation": {}
    },
    {
        "label": "SubClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes7",
        "description": "packages.pyright-internal.src.tests.samples.classes7",
        "peekOfCode": "class SubClass(BaseClass[float], IntBaseClass):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes7",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes7",
        "description": "packages.pyright-internal.src.tests.samples.classes7",
        "peekOfCode": "T = TypeVar(\"T\")\nclass BaseClass(Generic[T]):\n    pass\nIntBaseClass = BaseClass[int]\n# This should generate an error because the same\n# base class is used twice.\nclass SubClass(BaseClass[float], IntBaseClass):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes7",
        "documentation": {}
    },
    {
        "label": "IntBaseClass",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classes7",
        "description": "packages.pyright-internal.src.tests.samples.classes7",
        "peekOfCode": "IntBaseClass = BaseClass[int]\n# This should generate an error because the same\n# base class is used twice.\nclass SubClass(BaseClass[float], IntBaseClass):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.classes7",
        "documentation": {}
    },
    {
        "label": "_ScandirIterator",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classes8",
        "description": "packages.pyright-internal.src.tests.samples.classes8",
        "peekOfCode": "class _ScandirIterator(\n    Iterator[DirEntry[AnyStr]], ContextManager[\"_ScandirIterator[AnyStr]\"]\n):\n    def __iter__(self) -> Self:\n        ...\n    def __next__(self) -> DirEntry[AnyStr]:\n        ...\n    def close(self) -> None:\n        ...\n    def __enter__(self) -> Self:",
        "detail": "packages.pyright-internal.src.tests.samples.classes8",
        "documentation": {}
    },
    {
        "label": "scandir",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.classes8",
        "description": "packages.pyright-internal.src.tests.samples.classes8",
        "peekOfCode": "def scandir(path: AnyStr) -> _ScandirIterator[AnyStr]:\n    ...\ndef thing(value: AnyStr):\n    with scandir(value) as it:\n        for file in it:\n            if isinstance(file.name, str):\n                if file.name.endswith(\".xml\"):\n                    ...\n            else:\n                if file.name.endswith(b\".xml\"):",
        "detail": "packages.pyright-internal.src.tests.samples.classes8",
        "documentation": {}
    },
    {
        "label": "thing",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.classes8",
        "description": "packages.pyright-internal.src.tests.samples.classes8",
        "peekOfCode": "def thing(value: AnyStr):\n    with scandir(value) as it:\n        for file in it:\n            if isinstance(file.name, str):\n                if file.name.endswith(\".xml\"):\n                    ...\n            else:\n                if file.name.endswith(b\".xml\"):\n                    ...",
        "detail": "packages.pyright-internal.src.tests.samples.classes8",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "description": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "peekOfCode": "class Foo:\n    # This should generate a warning because __class_getitem__\n    # is implicitly a classmethod and should use cls rather than\n    # self.\n    def __class_getitem__(self, args: tuple[int, ...]) -> None:\n        ...\nreveal_type(Foo[10, 63], expected_text=\"Type[Foo]\")\n_T = TypeVar(\"_T\")\n_S = TypeVar(\"_S\")\nclass Bar(Generic[_T, _S]):",
        "detail": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "description": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "peekOfCode": "class Bar(Generic[_T, _S]):\n    # Even though this class has a __class_getitem__ method,\n    # it will be assumed to follow normal generic class semantics.\n    def __class_getitem__(cls, args: tuple[int, ...]) -> None:\n        ...\nreveal_type(Bar[int, str], expected_text=\"Type[Bar[int, str]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "description": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_S = TypeVar(\"_S\")\nclass Bar(Generic[_T, _S]):\n    # Even though this class has a __class_getitem__ method,\n    # it will be assumed to follow normal generic class semantics.\n    def __class_getitem__(cls, args: tuple[int, ...]) -> None:\n        ...\nreveal_type(Bar[int, str], expected_text=\"Type[Bar[int, str]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "documentation": {}
    },
    {
        "label": "_S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "description": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "peekOfCode": "_S = TypeVar(\"_S\")\nclass Bar(Generic[_T, _S]):\n    # Even though this class has a __class_getitem__ method,\n    # it will be assumed to follow normal generic class semantics.\n    def __class_getitem__(cls, args: tuple[int, ...]) -> None:\n        ...\nreveal_type(Bar[int, str], expected_text=\"Type[Bar[int, str]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.classGetItem1",
        "documentation": {}
    },
    {
        "label": "MyDescriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "class MyDescriptor:\n    def __get__(self, *args: Any) -> str:\n        return \"\"\n    def __set__(self, obj: Any, value: str):\n        pass\nclass Starship:\n    captain: str = \"Picard\"\n    damage: int\n    stats: \"ClassVar[Dict[str, int]]\" = {}\n    desc: ClassVar[MyDescriptor] = MyDescriptor()",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "Starship",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "class Starship:\n    captain: str = \"Picard\"\n    damage: int\n    stats: \"ClassVar[Dict[str, int]]\" = {}\n    desc: ClassVar[MyDescriptor] = MyDescriptor()\n    def __init__(self, damage: int, captain: Optional[str] = None):\n        self.damage = damage\n        if captain:\n            self.captain = captain  # Else keep the default\n    def hit(self):",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "enterprise_d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "enterprise_d = Starship(3000)\nStarship.stats = {}\na = enterprise_d.stats\n# This should be flagged as an error because stats cannot\n# be set via a class instance because it's a ClassVar.\nenterprise_d.stats = {}\n# This should not generate an error because \"desc\" is a\n# descriptor instance on the class.\nenterprise_d.desc = \"OK\"",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "Starship.stats",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "Starship.stats = {}\na = enterprise_d.stats\n# This should be flagged as an error because stats cannot\n# be set via a class instance because it's a ClassVar.\nenterprise_d.stats = {}\n# This should not generate an error because \"desc\" is a\n# descriptor instance on the class.\nenterprise_d.desc = \"OK\"",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "a = enterprise_d.stats\n# This should be flagged as an error because stats cannot\n# be set via a class instance because it's a ClassVar.\nenterprise_d.stats = {}\n# This should not generate an error because \"desc\" is a\n# descriptor instance on the class.\nenterprise_d.desc = \"OK\"",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "enterprise_d.stats",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "enterprise_d.stats = {}\n# This should not generate an error because \"desc\" is a\n# descriptor instance on the class.\nenterprise_d.desc = \"OK\"",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "enterprise_d.desc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar1",
        "description": "packages.pyright-internal.src.tests.samples.classVar1",
        "peekOfCode": "enterprise_d.desc = \"OK\"",
        "detail": "packages.pyright-internal.src.tests.samples.classVar1",
        "documentation": {}
    },
    {
        "label": "Proto",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar2",
        "description": "packages.pyright-internal.src.tests.samples.classVar2",
        "peekOfCode": "class Proto(t.Protocol):\n    var1: t.ClassVar[str]\n    var2: t.ClassVar[str]\n    var3: _ClassVar = [\"hi\"]\nclass ProtoImpl:\n    var1 = \"\"\n    def __init__(self) -> None:\n        self.var2 = \"\"\n# This should generate an error because var2\n# is not a class variable.",
        "detail": "packages.pyright-internal.src.tests.samples.classVar2",
        "documentation": {}
    },
    {
        "label": "ProtoImpl",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar2",
        "description": "packages.pyright-internal.src.tests.samples.classVar2",
        "peekOfCode": "class ProtoImpl:\n    var1 = \"\"\n    def __init__(self) -> None:\n        self.var2 = \"\"\n# This should generate an error because var2\n# is not a class variable.\na: Proto = ProtoImpl()\ndef func1(x: Proto):\n    reveal_type(x.var1, expected_text=\"str\")\n    reveal_type(x.var2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.classVar2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar2",
        "description": "packages.pyright-internal.src.tests.samples.classVar2",
        "peekOfCode": "def func1(x: Proto):\n    reveal_type(x.var1, expected_text=\"str\")\n    reveal_type(x.var2, expected_text=\"str\")\n    reveal_type(x.var3, expected_text=\"list[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.classVar2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar3",
        "description": "packages.pyright-internal.src.tests.samples.classVar3",
        "peekOfCode": "class Foo(Generic[T]):\n    x: ClassVar[int] = 3\n    # This should generate an error.\n    y: Final[ClassVar[int]] = 3\n    # This should generate an error.\n    z: List[ClassVar[int]] = []\n    # This should generate an error because TypeVars cannot\n    # be used in a ClassVar.\n    illegal1: ClassVar[List[T]]\n    # This should generate an error because TypeVars cannot",
        "detail": "packages.pyright-internal.src.tests.samples.classVar3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar3",
        "description": "packages.pyright-internal.src.tests.samples.classVar3",
        "peekOfCode": "T = TypeVar(\"T\")\n# This should generate an error.\nTA1: TypeAlias = ClassVar[str]\nclass Foo(Generic[T]):\n    x: ClassVar[int] = 3\n    # This should generate an error.\n    y: Final[ClassVar[int]] = 3\n    # This should generate an error.\n    z: List[ClassVar[int]] = []\n    # This should generate an error because TypeVars cannot",
        "detail": "packages.pyright-internal.src.tests.samples.classVar3",
        "documentation": {}
    },
    {
        "label": "SomeProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar4",
        "description": "packages.pyright-internal.src.tests.samples.classVar4",
        "peekOfCode": "class SomeProtocol(Protocol):\n    x: int = 3\n    y: int\n    z: ClassVar[int]\n    @classmethod\n    def meth1(cls) -> None:\n        return None\n    @staticmethod\n    def meth2() -> None:\n        return None",
        "detail": "packages.pyright-internal.src.tests.samples.classVar4",
        "documentation": {}
    },
    {
        "label": "Class",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar4",
        "description": "packages.pyright-internal.src.tests.samples.classVar4",
        "peekOfCode": "class Class(SomeProtocol):\n    y = 0\n    z = 0\ndef func1() -> None:\n    # This should generate an error because y is not a ClassVar.\n    x: int = Class.x\n    # This should generate an error because y is not a ClassVar.\n    y: int = Class.y\n    z: int = Class.z\n    Class.meth1",
        "detail": "packages.pyright-internal.src.tests.samples.classVar4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.classVar4",
        "description": "packages.pyright-internal.src.tests.samples.classVar4",
        "peekOfCode": "def func1() -> None:\n    # This should generate an error because y is not a ClassVar.\n    x: int = Class.x\n    # This should generate an error because y is not a ClassVar.\n    y: int = Class.y\n    z: int = Class.z\n    Class.meth1\n    Class.meth2",
        "detail": "packages.pyright-internal.src.tests.samples.classVar4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "peekOfCode": "def func1(length: int) -> int:\n    n = 0\n    while True:\n        if n >= length:\n            return n\n        n += 3\n    else:\n        # This should not be flagged as an error\n        # because we should never get here.\n        return \"hello\"",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "peekOfCode": "def func2() -> int:\n    while None:\n        # This should not be flagged as an error\n        # because we should never get here.\n        return \"hello\"\n    else:\n        # This should be an error because the return\n        # type doesn't match.\n        return \"hello\"\n    # This should not be an error because we",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "peekOfCode": "def func3() -> str:\n    if True:\n        return \"hello\"\n    else:\n        # This should not be flagged as an error\n        # because we should never get here.\n        return 21\n    raise BaseException()\n    # This should not be flagged as an error\n    # because we should never get here.",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "peekOfCode": "def func4(length: int) -> int:\n    n = 0\n    while True:\n        if n >= length:\n            return n\n        n += 3\n        break\n    else:\n        return \"hello\"\n    # This should be flagged as an error because",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow1",
        "documentation": {}
    },
    {
        "label": "FakeOsModule",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow2",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow2",
        "peekOfCode": "class FakeOsModule(object):\n    # The symbol \"stat\" is a module even though\n    # it is redeclared below in this scope as\n    # a method.\n    _stat_mode: int = stat.S_IFDIR\n    def stat(self):\n        return None\ndef outer():\n    a = 1\n    def inner():",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow2",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow2",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow2",
        "peekOfCode": "def outer():\n    a = 1\n    def inner():\n        # This should generate an error\n        a += 1\n    inner()\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow3",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow3",
        "peekOfCode": "def foo():\n    message = \"\"\n    if False and message:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow3",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "class Color(Enum):\n    RED = 1\n    BLUE = 2\n    GREEN = 3\n    PERIWINKLE = 4\ndef func4(x: Color):\n    if x == Color.RED:\n        return\n    if x == Color.GREEN or (Color.PERIWINKLE == x and True):\n        y = 2",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\ndef func11(val: A | B):\n    if not (isinstance(val, A) or isinstance(val, B)):\n        raise Exception\nreveal_type(func11(A()), expected_text=\"None\")\ndef func12(val: A | B):\n    if isinstance(val, A) or isinstance(val, B):",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "class B(A):\n    pass\ndef func11(val: A | B):\n    if not (isinstance(val, A) or isinstance(val, B)):\n        raise Exception\nreveal_type(func11(A()), expected_text=\"None\")\ndef func12(val: A | B):\n    if isinstance(val, A) or isinstance(val, B):\n        raise Exception\nreveal_type(func12(A()), expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func1(x: Union[int, str]):\n    if isinstance(x, int):\n        y = 0\n    elif isinstance(x, str):\n        y = 1\n    print(y)\ndef func2(x: Literal[1, 2, 3, 4]):\n    if x == 1 or x == 2:\n        y = 0\n    elif x == 3 or not x == 3:",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func2(x: Literal[1, 2, 3, 4]):\n    if x == 1 or x == 2:\n        y = 0\n    elif x == 3 or not x == 3:\n        y = 1\n    print(y)\ndef func3(x: Literal[1, 2], y: Literal[\"one\", \"two\"]):\n    if x == 1 or y != \"two\":\n        z = 0\n    elif x == 2 or y != \"one\":",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func3(x: Literal[1, 2], y: Literal[\"one\", \"two\"]):\n    if x == 1 or y != \"two\":\n        z = 0\n    elif x == 2 or y != \"one\":\n        z = 1\n    print(z)\nclass Color(Enum):\n    RED = 1\n    BLUE = 2\n    GREEN = 3",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func4(x: Color):\n    if x == Color.RED:\n        return\n    if x == Color.GREEN or (Color.PERIWINKLE == x and True):\n        y = 2\n    else:\n        if Color.BLUE == x:\n            y = 3\n    print(y)\ndef func5():",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func5():\n    if True:\n        y = 2\n    print(y)\ndef func6():\n    if not None:\n        y = 2\n    print(y)\ndef func7(color: Color) -> str:\n    if color == Color.RED or color == Color.BLUE:",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func6():\n    if not None:\n        y = 2\n    print(y)\ndef func7(color: Color) -> str:\n    if color == Color.RED or color == Color.BLUE:\n        return \"yes\"\n    elif color == Color.GREEN or color == Color.PERIWINKLE:\n        return \"no\"\ndef func8(color: Color) -> bool:",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func7(color: Color) -> str:\n    if color == Color.RED or color == Color.BLUE:\n        return \"yes\"\n    elif color == Color.GREEN or color == Color.PERIWINKLE:\n        return \"no\"\ndef func8(color: Color) -> bool:\n    if color == Color.RED or color == Color.BLUE:\n        return True\n    elif color == Color.GREEN or color == Color.PERIWINKLE:\n        return False",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func8(color: Color) -> bool:\n    if color == Color.RED or color == Color.BLUE:\n        return True\n    elif color == Color.GREEN or color == Color.PERIWINKLE:\n        return False\nreveal_type(func8(Color.RED), expected_text=\"bool\")\ndef func9(a: Union[str, int], b: Union[str, int]) -> bool:\n    if isinstance(a, str):\n        return True\n    elif isinstance(a, int):",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func9(a: Union[str, int], b: Union[str, int]) -> bool:\n    if isinstance(a, str):\n        return True\n    elif isinstance(a, int):\n        if isinstance(b, str):\n            return False\n        elif isinstance(b, int):\n            return False\ndef func10(foo: list[str]) -> bool:\n    i = 0",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func10(foo: list[str]) -> bool:\n    i = 0\n    x: int | None = None\n    while i < 5:\n        foo[i]\n        if x is None:\n            return False\n        reveal_type(x, expected_text=\"Never\")\n        i = x\n    return True",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func11(val: A | B):\n    if not (isinstance(val, A) or isinstance(val, B)):\n        raise Exception\nreveal_type(func11(A()), expected_text=\"None\")\ndef func12(val: A | B):\n    if isinstance(val, A) or isinstance(val, B):\n        raise Exception\nreveal_type(func12(A()), expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "peekOfCode": "def func12(val: A | B):\n    if isinstance(val, A) or isinstance(val, B):\n        raise Exception\nreveal_type(func12(A()), expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow4",
        "documentation": {}
    },
    {
        "label": "int_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "peekOfCode": "int_ = int\nint = 3\nmax_ = max\nmax = lambda a, b: a if a > b else b",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "documentation": {}
    },
    {
        "label": "int",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "peekOfCode": "int = 3\nmax_ = max\nmax = lambda a, b: a if a > b else b",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "documentation": {}
    },
    {
        "label": "max_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "peekOfCode": "max_ = max\nmax = lambda a, b: a if a > b else b",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "peekOfCode": "max = lambda a, b: a if a > b else b",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow5",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "class C:\n    ...\n@overload\ndef func(v: Callable[[], int]) -> int:\n    ...\n@overload\ndef func(v: Callable[[], list[C]]) -> list[C]:\n    ...\ndef func(v: Any) -> Any:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "def func(v: Callable[[], int]) -> int:\n    ...\n@overload\ndef func(v: Callable[[], list[C]]) -> list[C]:\n    ...\ndef func(v: Any) -> Any:\n    ...\ndef f(v: list[C]):\n    ...\nt = func(lambda: second_func())",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "def func(v: Callable[[], list[C]]) -> list[C]:\n    ...\ndef func(v: Any) -> Any:\n    ...\ndef f(v: list[C]):\n    ...\nt = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "def func(v: Any) -> Any:\n    ...\ndef f(v: list[C]):\n    ...\nt = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "def f(v: list[C]):\n    ...\nt = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "second_func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "def second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "peekOfCode": "t = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow6",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "class C:\n    ...\n@overload\ndef func(v: Callable[[], int]) -> int:\n    ...\n@overload\ndef func(v: Callable[[], list[C]]) -> list[C]:\n    ...\ndef func(v: Any) -> Any:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "def func(v: Callable[[], int]) -> int:\n    ...\n@overload\ndef func(v: Callable[[], list[C]]) -> list[C]:\n    ...\ndef func(v: Any) -> Any:\n    ...\ndef f(v: list[C]):\n    ...\nt = func(lambda: second_func())",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "def func(v: Callable[[], list[C]]) -> list[C]:\n    ...\ndef func(v: Any) -> Any:\n    ...\ndef f(v: list[C]):\n    ...\nt = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "def func(v: Any) -> Any:\n    ...\ndef f(v: list[C]):\n    ...\nt = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "def f(v: list[C]):\n    ...\nt = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "second_func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "def second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "description": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "peekOfCode": "t = func(lambda: second_func())\nt.append(C())\ndef second_func() -> list[C]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.codeFlow7",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "class ClassA:\n    ...\nclass ClassB:\n    ...\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=ClassB)\ndef func2(\n    a: ClassA, b: ClassB, c: _T1, d: _T2, e: Union[ClassA, ClassB]\n) -> Union[None, _T1, _T2]:\n    # This should generate an error because there is no overlap in types.",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "class ClassB:\n    ...\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=ClassB)\ndef func2(\n    a: ClassA, b: ClassB, c: _T1, d: _T2, e: Union[ClassA, ClassB]\n) -> Union[None, _T1, _T2]:\n    # This should generate an error because there is no overlap in types.\n    if a == b:\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "def func1(os: OS, val: Literal[1, \"linux\"]):\n    if os == \"Linux\":\n        return True\n    # This should generate an error because this expression will always\n    # evaluate to False.\n    if os == \"darwin\":\n        return False\n    # This should generate an error because this expression will always\n    # evaluate to True.\n    if os != val:",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "def func2(\n    a: ClassA, b: ClassB, c: _T1, d: _T2, e: Union[ClassA, ClassB]\n) -> Union[None, _T1, _T2]:\n    # This should generate an error because there is no overlap in types.\n    if a == b:\n        return\n    # This should generate an error because there is no overlap in types.\n    if a != b:\n        return\n    if a != c:",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "def func3(base: type) -> None:\n    if base == ClassA:\n        ...\n    if ClassA == base:\n        ...\ndef func4(val: Optional[str]):\n    # This should generate an error because there is no overlap in types.\n    if val == 42:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "def func4(val: Optional[str]):\n    # This should generate an error because there is no overlap in types.\n    if val == 42:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "OS",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "OS = Literal[\"Linux\", \"Darwin\", \"Windows\"]\ndef func1(os: OS, val: Literal[1, \"linux\"]):\n    if os == \"Linux\":\n        return True\n    # This should generate an error because this expression will always\n    # evaluate to False.\n    if os == \"darwin\":\n        return False\n    # This should generate an error because this expression will always\n    # evaluate to True.",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=ClassB)\ndef func2(\n    a: ClassA, b: ClassB, c: _T1, d: _T2, e: Union[ClassA, ClassB]\n) -> Union[None, _T1, _T2]:\n    # This should generate an error because there is no overlap in types.\n    if a == b:\n        return\n    # This should generate an error because there is no overlap in types.\n    if a != b:",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison1",
        "description": "packages.pyright-internal.src.tests.samples.comparison1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=ClassB)\ndef func2(\n    a: ClassA, b: ClassB, c: _T1, d: _T2, e: Union[ClassA, ClassB]\n) -> Union[None, _T1, _T2]:\n    # This should generate an error because there is no overlap in types.\n    if a == b:\n        return\n    # This should generate an error because there is no overlap in types.\n    if a != b:\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.comparison1",
        "documentation": {}
    },
    {
        "label": "cond",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison2",
        "description": "packages.pyright-internal.src.tests.samples.comparison2",
        "peekOfCode": "def cond() -> bool:\n    ...\n# This should generate a diagnostic when reportUnnecessaryComparison is enabled.\nif cond:\n    pass\n# This should generate a diagnostic when reportUnnecessaryComparison is enabled.\nif 0 or cond:\n    pass\n# This should generate a diagnostic when reportUnnecessaryComparison is enabled.\nif 1 and cond:",
        "detail": "packages.pyright-internal.src.tests.samples.comparison2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison2",
        "description": "packages.pyright-internal.src.tests.samples.comparison2",
        "peekOfCode": "def func1():\n    while cond:\n        pass\n# This should generate a diagnostic when reportUnnecessaryComparison is enabled.\na = [x for x in range(20) if cond]\n# This should generate a diagnostic when reportUnnecessaryComparison is enabled.\na = 1 if cond else 2\nb = \"1\" == \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.comparison2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison2",
        "description": "packages.pyright-internal.src.tests.samples.comparison2",
        "peekOfCode": "a = [x for x in range(20) if cond]\n# This should generate a diagnostic when reportUnnecessaryComparison is enabled.\na = 1 if cond else 2\nb = \"1\" == \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.comparison2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison2",
        "description": "packages.pyright-internal.src.tests.samples.comparison2",
        "peekOfCode": "a = 1 if cond else 2\nb = \"1\" == \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.comparison2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.comparison2",
        "description": "packages.pyright-internal.src.tests.samples.comparison2",
        "peekOfCode": "b = \"1\" == \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.comparison2",
        "documentation": {}
    },
    {
        "label": "requires_complex",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.complex1",
        "description": "packages.pyright-internal.src.tests.samples.complex1",
        "peekOfCode": "def requires_complex(val: complex):\n    ...\nrequires_complex(a)\nrequires_complex(b)\nrequires_complex(c)",
        "detail": "packages.pyright-internal.src.tests.samples.complex1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.complex1",
        "description": "packages.pyright-internal.src.tests.samples.complex1",
        "peekOfCode": "a = 3.2j\nb = a + 4\nc = 1.2 * a\ndef requires_complex(val: complex):\n    ...\nrequires_complex(a)\nrequires_complex(b)\nrequires_complex(c)",
        "detail": "packages.pyright-internal.src.tests.samples.complex1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.complex1",
        "description": "packages.pyright-internal.src.tests.samples.complex1",
        "peekOfCode": "b = a + 4\nc = 1.2 * a\ndef requires_complex(val: complex):\n    ...\nrequires_complex(a)\nrequires_complex(b)\nrequires_complex(c)",
        "detail": "packages.pyright-internal.src.tests.samples.complex1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.complex1",
        "description": "packages.pyright-internal.src.tests.samples.complex1",
        "peekOfCode": "c = 1.2 * a\ndef requires_complex(val: complex):\n    ...\nrequires_complex(a)\nrequires_complex(b)\nrequires_complex(c)",
        "detail": "packages.pyright-internal.src.tests.samples.complex1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "class Foo(object):\n    CONST_VAR = 3\n    # This should generate an error if the feature is enabled.\n    CONST_VAR = 4\n    def __init__(self):\n        self.HELLO = \"3\"\n    def foo(self):\n        # This should generate an error if the feature is enabled.\n        self.HELLO = \"324\"",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "def foo():\n    LOCALVAR = 3\n    if a:\n        # This should generate an error if the feature is enabled.\n        LOCALVAR = 23\nfrom typing import TYPE_CHECKING\n# This should generate an error if the feature is enabled.\nTYPE_CHECKING = True\nclass Foo(object):\n    CONST_VAR = 3",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "ALL_CAPS_123_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "ALL_CAPS_123_ = 234\n# This should generate an error if the feature is enabled.\nALL_CAPS_123_ = 233\n_ = 234\n# This should not be considered a constant\n_ = 234\na = True\ndef foo():\n    LOCALVAR = 3\n    if a:",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "ALL_CAPS_123_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "ALL_CAPS_123_ = 233\n_ = 234\n# This should not be considered a constant\n_ = 234\na = True\ndef foo():\n    LOCALVAR = 3\n    if a:\n        # This should generate an error if the feature is enabled.\n        LOCALVAR = 23",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "_ = 234\n# This should not be considered a constant\n_ = 234\na = True\ndef foo():\n    LOCALVAR = 3\n    if a:\n        # This should generate an error if the feature is enabled.\n        LOCALVAR = 23\nfrom typing import TYPE_CHECKING",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "_ = 234\na = True\ndef foo():\n    LOCALVAR = 3\n    if a:\n        # This should generate an error if the feature is enabled.\n        LOCALVAR = 23\nfrom typing import TYPE_CHECKING\n# This should generate an error if the feature is enabled.\nTYPE_CHECKING = True",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "a = True\ndef foo():\n    LOCALVAR = 3\n    if a:\n        # This should generate an error if the feature is enabled.\n        LOCALVAR = 23\nfrom typing import TYPE_CHECKING\n# This should generate an error if the feature is enabled.\nTYPE_CHECKING = True\nclass Foo(object):",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constant1",
        "description": "packages.pyright-internal.src.tests.samples.constant1",
        "peekOfCode": "TYPE_CHECKING = True\nclass Foo(object):\n    CONST_VAR = 3\n    # This should generate an error if the feature is enabled.\n    CONST_VAR = 4\n    def __init__(self):\n        self.HELLO = \"3\"\n    def foo(self):\n        # This should generate an error if the feature is enabled.\n        self.HELLO = \"324\"",
        "detail": "packages.pyright-internal.src.tests.samples.constant1",
        "documentation": {}
    },
    {
        "label": "True",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "True = 3\n# This should generate an error\nFalse = 4\n# This should generate an error\nNone = True\n# This should generate an error\n__debug__ = 4\n# This should generate an error\ndel True\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "False",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "False = 4\n# This should generate an error\nNone = True\n# This should generate an error\n__debug__ = 4\n# This should generate an error\ndel True\n# This should generate an error\ndel None\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "None",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "None = True\n# This should generate an error\n__debug__ = 4\n# This should generate an error\ndel True\n# This should generate an error\ndel None\n# This should generate an error\n-3 = 2\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "__debug__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "__debug__ = 4\n# This should generate an error\ndel True\n# This should generate an error\ndel None\n# This should generate an error\n-3 = 2\n# This should generate an error\n[4] = [2]\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "-3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "-3 = 2\n# This should generate an error\n[4] = [2]\n# This should generate an error\n[True] = [3]\n# This should generate an error\n(True) = 3\n# This should generate an error\ndel -3\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "[4]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "[4] = [2]\n# This should generate an error\n[True] = [3]\n# This should generate an error\n(True) = 3\n# This should generate an error\ndel -3\n# This should generate an error\n3 + 4 = 2\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "[True]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "[True] = [3]\n# This should generate an error\n(True) = 3\n# This should generate an error\ndel -3\n# This should generate an error\n3 + 4 = 2\n# This should generate an error\ndel 3 + 4\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "(True)",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "(True) = 3\n# This should generate an error\ndel -3\n# This should generate an error\n3 + 4 = 2\n# This should generate an error\ndel 3 + 4\n# This should generate an error\ndel -(4)\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "...",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "... = 3\n# This should generate an error\ndel ...\n# This should generate an error\n(...) = 3\n# This should generate an error\ndel ...",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "(...)",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constants1",
        "description": "packages.pyright-internal.src.tests.samples.constants1",
        "peekOfCode": "(...) = 3\n# This should generate an error\ndel ...",
        "detail": "packages.pyright-internal.src.tests.samples.constants1",
        "documentation": {}
    },
    {
        "label": "Ok",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "class Ok(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: Final = value\nclass Err(Generic[E]):\n    def __init__(self, value: E) -> None:\n        self._value: Final = value\nResult = Union[Ok[T], Err[E]]\ndef return_ok_none() -> Result[Optional[int], Exception]:\n    return Ok(None)\ndef return_ok_one() -> Result[Optional[int], Exception]:",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "Err",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "class Err(Generic[E]):\n    def __init__(self, value: E) -> None:\n        self._value: Final = value\nResult = Union[Ok[T], Err[E]]\ndef return_ok_none() -> Result[Optional[int], Exception]:\n    return Ok(None)\ndef return_ok_one() -> Result[Optional[int], Exception]:\n    return Ok(1)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "return_ok_none",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "def return_ok_none() -> Result[Optional[int], Exception]:\n    return Ok(None)\ndef return_ok_one() -> Result[Optional[int], Exception]:\n    return Ok(1)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "return_ok_one",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "def return_ok_one() -> Result[Optional[int], Exception]:\n    return Ok(1)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "T = TypeVar(\"T\")\nE = TypeVar(\"E\")\nclass Ok(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: Final = value\nclass Err(Generic[E]):\n    def __init__(self, value: E) -> None:\n        self._value: Final = value\nResult = Union[Ok[T], Err[E]]\ndef return_ok_none() -> Result[Optional[int], Exception]:",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "E = TypeVar(\"E\")\nclass Ok(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: Final = value\nclass Err(Generic[E]):\n    def __init__(self, value: E) -> None:\n        self._value: Final = value\nResult = Union[Ok[T], Err[E]]\ndef return_ok_none() -> Result[Optional[int], Exception]:\n    return Ok(None)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor1",
        "description": "packages.pyright-internal.src.tests.samples.constructor1",
        "peekOfCode": "Result = Union[Ok[T], Err[E]]\ndef return_ok_none() -> Result[Optional[int], Exception]:\n    return Ok(None)\ndef return_ok_one() -> Result[Optional[int], Exception]:\n    return Ok(1)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor1",
        "documentation": {}
    },
    {
        "label": "pairwise",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor10",
        "description": "packages.pyright-internal.src.tests.samples.constructor10",
        "peekOfCode": "class pairwise(Iterator[_T_co]):\n    def __new__(cls, __iterable: Iterable[_T]) -> \"pairwise[tuple[_T, _T]]\":\n        ...\ndef triplewise(iterable: Iterable[_T]) -> Iterator[tuple[_T, _T, _T]]:\n    for (a, _), (b, c) in pairwise(pairwise(iterable)):\n        yield a, b, c",
        "detail": "packages.pyright-internal.src.tests.samples.constructor10",
        "documentation": {}
    },
    {
        "label": "triplewise",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor10",
        "description": "packages.pyright-internal.src.tests.samples.constructor10",
        "peekOfCode": "def triplewise(iterable: Iterable[_T]) -> Iterator[tuple[_T, _T, _T]]:\n    for (a, _), (b, c) in pairwise(pairwise(iterable)):\n        yield a, b, c",
        "detail": "packages.pyright-internal.src.tests.samples.constructor10",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor10",
        "description": "packages.pyright-internal.src.tests.samples.constructor10",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\n_T = TypeVar(\"_T\")\nclass pairwise(Iterator[_T_co]):\n    def __new__(cls, __iterable: Iterable[_T]) -> \"pairwise[tuple[_T, _T]]\":\n        ...\ndef triplewise(iterable: Iterable[_T]) -> Iterator[tuple[_T, _T, _T]]:\n    for (a, _), (b, c) in pairwise(pairwise(iterable)):\n        yield a, b, c",
        "detail": "packages.pyright-internal.src.tests.samples.constructor10",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor10",
        "description": "packages.pyright-internal.src.tests.samples.constructor10",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass pairwise(Iterator[_T_co]):\n    def __new__(cls, __iterable: Iterable[_T]) -> \"pairwise[tuple[_T, _T]]\":\n        ...\ndef triplewise(iterable: Iterable[_T]) -> Iterator[tuple[_T, _T, _T]]:\n    for (a, _), (b, c) in pairwise(pairwise(iterable)):\n        yield a, b, c",
        "detail": "packages.pyright-internal.src.tests.samples.constructor10",
        "documentation": {}
    },
    {
        "label": "MyFunc",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor11",
        "description": "packages.pyright-internal.src.tests.samples.constructor11",
        "peekOfCode": "class MyFunc(Generic[K, V]):\n    def __init__(self, g: MyFuncType[K, V]) -> None:\n        self.g = g\nMyFuncMapping = Mapping[K, Optional[MyFunc[K, V]]]\nmy_func_defaultdict: MyFuncMapping[str, int] = defaultdict(\n    lambda: None, {\"x\": MyFunc(lambda f: f(\"a\"))}\n)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor11",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor11",
        "description": "packages.pyright-internal.src.tests.samples.constructor11",
        "peekOfCode": "c1 = Counter({0, 1})\nreveal_type(c1, expected_text=\"Counter[int]\")\nfor i in range(256):\n    c1 = Counter({0: c1[1]})\n    reveal_type(c1, expected_text=\"Counter[int]\")\nreveal_type(c1, expected_text=\"Counter[int]\")\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nMyFuncType = Callable[[Callable[[K], V]], V]\nclass MyFunc(Generic[K, V]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor11",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor11",
        "description": "packages.pyright-internal.src.tests.samples.constructor11",
        "peekOfCode": "K = TypeVar(\"K\")\nV = TypeVar(\"V\")\nMyFuncType = Callable[[Callable[[K], V]], V]\nclass MyFunc(Generic[K, V]):\n    def __init__(self, g: MyFuncType[K, V]) -> None:\n        self.g = g\nMyFuncMapping = Mapping[K, Optional[MyFunc[K, V]]]\nmy_func_defaultdict: MyFuncMapping[str, int] = defaultdict(\n    lambda: None, {\"x\": MyFunc(lambda f: f(\"a\"))}\n)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor11",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor11",
        "description": "packages.pyright-internal.src.tests.samples.constructor11",
        "peekOfCode": "V = TypeVar(\"V\")\nMyFuncType = Callable[[Callable[[K], V]], V]\nclass MyFunc(Generic[K, V]):\n    def __init__(self, g: MyFuncType[K, V]) -> None:\n        self.g = g\nMyFuncMapping = Mapping[K, Optional[MyFunc[K, V]]]\nmy_func_defaultdict: MyFuncMapping[str, int] = defaultdict(\n    lambda: None, {\"x\": MyFunc(lambda f: f(\"a\"))}\n)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor11",
        "documentation": {}
    },
    {
        "label": "MyFuncType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor11",
        "description": "packages.pyright-internal.src.tests.samples.constructor11",
        "peekOfCode": "MyFuncType = Callable[[Callable[[K], V]], V]\nclass MyFunc(Generic[K, V]):\n    def __init__(self, g: MyFuncType[K, V]) -> None:\n        self.g = g\nMyFuncMapping = Mapping[K, Optional[MyFunc[K, V]]]\nmy_func_defaultdict: MyFuncMapping[str, int] = defaultdict(\n    lambda: None, {\"x\": MyFunc(lambda f: f(\"a\"))}\n)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor11",
        "documentation": {}
    },
    {
        "label": "MyFuncMapping",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor11",
        "description": "packages.pyright-internal.src.tests.samples.constructor11",
        "peekOfCode": "MyFuncMapping = Mapping[K, Optional[MyFunc[K, V]]]\nmy_func_defaultdict: MyFuncMapping[str, int] = defaultdict(\n    lambda: None, {\"x\": MyFunc(lambda f: f(\"a\"))}\n)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor11",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor12",
        "description": "packages.pyright-internal.src.tests.samples.constructor12",
        "peekOfCode": "class Foo(Generic[T]):\n    def return_from_variable(self) -> \"Foo[T]\":\n        value = Foo[T]()\n        reveal_type(value, expected_text=\"Foo[T@Foo]\")\n        return value\nx = Foo[int]()\nreturned_from_variable = x.return_from_variable()\nreveal_type(returned_from_variable, expected_text=\"Foo[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor12",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor12",
        "description": "packages.pyright-internal.src.tests.samples.constructor12",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Foo(Generic[T]):\n    def return_from_variable(self) -> \"Foo[T]\":\n        value = Foo[T]()\n        reveal_type(value, expected_text=\"Foo[T@Foo]\")\n        return value\nx = Foo[int]()\nreturned_from_variable = x.return_from_variable()\nreveal_type(returned_from_variable, expected_text=\"Foo[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor12",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor12",
        "description": "packages.pyright-internal.src.tests.samples.constructor12",
        "peekOfCode": "x = Foo[int]()\nreturned_from_variable = x.return_from_variable()\nreveal_type(returned_from_variable, expected_text=\"Foo[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor12",
        "documentation": {}
    },
    {
        "label": "returned_from_variable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor12",
        "description": "packages.pyright-internal.src.tests.samples.constructor12",
        "peekOfCode": "returned_from_variable = x.return_from_variable()\nreveal_type(returned_from_variable, expected_text=\"Foo[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor12",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor13",
        "description": "packages.pyright-internal.src.tests.samples.constructor13",
        "peekOfCode": "class Foo(Generic[T]):\n    def __init__(self) -> None:\n        message_t = self.message_type()\n        reveal_type(message_t(), expected_text=\"T@Foo\")\n    def message_type(self) -> type[T]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor13",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor13",
        "description": "packages.pyright-internal.src.tests.samples.constructor13",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Foo(Generic[T]):\n    def __init__(self) -> None:\n        message_t = self.message_type()\n        reveal_type(message_t(), expected_text=\"T@Foo\")\n    def message_type(self) -> type[T]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor13",
        "documentation": {}
    },
    {
        "label": "Callback",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor14",
        "description": "packages.pyright-internal.src.tests.samples.constructor14",
        "peekOfCode": "class Callback(Protocol[T_contra]):\n    def __call__(self, message: T_contra, /) -> Any:\n        ...\nclass Thing(Generic[T_contra]):\n    def __init__(self, callback: Callback[T_contra]) -> None:\n        self._callback: Callback[T_contra] = callback\n    def copy(self) -> Self:\n        return Thing(self._callback)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor14",
        "documentation": {}
    },
    {
        "label": "Thing",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor14",
        "description": "packages.pyright-internal.src.tests.samples.constructor14",
        "peekOfCode": "class Thing(Generic[T_contra]):\n    def __init__(self, callback: Callback[T_contra]) -> None:\n        self._callback: Callback[T_contra] = callback\n    def copy(self) -> Self:\n        return Thing(self._callback)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor14",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor14",
        "description": "packages.pyright-internal.src.tests.samples.constructor14",
        "peekOfCode": "T_contra = TypeVar(\"T_contra\", contravariant=True)\nThingT = TypeVar(\"ThingT\", bound=\"Thing[Any]\")\nclass Callback(Protocol[T_contra]):\n    def __call__(self, message: T_contra, /) -> Any:\n        ...\nclass Thing(Generic[T_contra]):\n    def __init__(self, callback: Callback[T_contra]) -> None:\n        self._callback: Callback[T_contra] = callback\n    def copy(self) -> Self:\n        return Thing(self._callback)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor14",
        "documentation": {}
    },
    {
        "label": "ThingT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor14",
        "description": "packages.pyright-internal.src.tests.samples.constructor14",
        "peekOfCode": "ThingT = TypeVar(\"ThingT\", bound=\"Thing[Any]\")\nclass Callback(Protocol[T_contra]):\n    def __call__(self, message: T_contra, /) -> Any:\n        ...\nclass Thing(Generic[T_contra]):\n    def __init__(self, callback: Callback[T_contra]) -> None:\n        self._callback: Callback[T_contra] = callback\n    def copy(self) -> Self:\n        return Thing(self._callback)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor14",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "class Animal(Generic[_T1, _T2]):\n    pass\nclass Bear(Animal[_T3, int]):\n    def __init__(self, p1: Optional[_T3] = None):\n        pass\nclass Donkey(Animal[int, int], Generic[_T3]):\n    pass\nclass Flyer(Protocol[_T1_contra]):\n    def get_wingspan(self, p1: _T1_contra) -> float:\n        raise NotImplemented",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "Bear",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "class Bear(Animal[_T3, int]):\n    def __init__(self, p1: Optional[_T3] = None):\n        pass\nclass Donkey(Animal[int, int], Generic[_T3]):\n    pass\nclass Flyer(Protocol[_T1_contra]):\n    def get_wingspan(self, p1: _T1_contra) -> float:\n        raise NotImplemented\nclass CaveDweller(Generic[_T1]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "Donkey",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "class Donkey(Animal[int, int], Generic[_T3]):\n    pass\nclass Flyer(Protocol[_T1_contra]):\n    def get_wingspan(self, p1: _T1_contra) -> float:\n        raise NotImplemented\nclass CaveDweller(Generic[_T1]):\n    pass\nclass Bat(Animal[int, int], CaveDweller[int]):\n    def get_wingspan(self, p1: int) -> float:\n        raise NotImplemented",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "Flyer",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "class Flyer(Protocol[_T1_contra]):\n    def get_wingspan(self, p1: _T1_contra) -> float:\n        raise NotImplemented\nclass CaveDweller(Generic[_T1]):\n    pass\nclass Bat(Animal[int, int], CaveDweller[int]):\n    def get_wingspan(self, p1: int) -> float:\n        raise NotImplemented\ndef s1():\n    b: Bear[str] = Bear()",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "CaveDweller",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "class CaveDweller(Generic[_T1]):\n    pass\nclass Bat(Animal[int, int], CaveDweller[int]):\n    def get_wingspan(self, p1: int) -> float:\n        raise NotImplemented\ndef s1():\n    b: Bear[str] = Bear()\n    a: Animal[str, int] = b\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s2():",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "Bat",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "class Bat(Animal[int, int], CaveDweller[int]):\n    def get_wingspan(self, p1: int) -> float:\n        raise NotImplemented\ndef s1():\n    b: Bear[str] = Bear()\n    a: Animal[str, int] = b\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s2():\n    a: Animal[str, int] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s1():\n    b: Bear[str] = Bear()\n    a: Animal[str, int] = b\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s2():\n    a: Animal[str, int] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s3():\n    a: Animal[str, int] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s2():\n    a: Animal[str, int] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s3():\n    a: Animal[str, int] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s4():\n    a: Bear[Any] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s5():",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s3():\n    a: Animal[str, int] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s4():\n    a: Bear[Any] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s5():\n    a: Animal[Any, Any] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s6():",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s4():\n    a: Bear[Any] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s5():\n    a: Animal[Any, Any] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s6():\n    a: Union[Bat, Bear[str]] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s7(p: Union[Bat, Bear[int]]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s5():\n    a: Animal[Any, Any] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s6():\n    a: Union[Bat, Bear[str]] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s7(p: Union[Bat, Bear[int]]):\n    a: Animal[int, int] = p\n    reveal_type(a, expected_text=\"Bat | Bear[int]\")\ndef s8():",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s6():\n    a: Union[Bat, Bear[str]] = Bear()\n    reveal_type(a, expected_text=\"Bear[str]\")\ndef s7(p: Union[Bat, Bear[int]]):\n    a: Animal[int, int] = p\n    reveal_type(a, expected_text=\"Bat | Bear[int]\")\ndef s8():\n    a: Animal[int, int] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[int]\")\ndef s9(p: Dict[str, str]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s7(p: Union[Bat, Bear[int]]):\n    a: Animal[int, int] = p\n    reveal_type(a, expected_text=\"Bat | Bear[int]\")\ndef s8():\n    a: Animal[int, int] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[int]\")\ndef s9(p: Dict[str, str]):\n    a: Dict[str, Any] = p\n    reveal_type(a, expected_text=\"Dict[str, Any]\")\ndef s10(p: List[str]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s8():\n    a: Animal[int, int] = Bear[int]()\n    reveal_type(a, expected_text=\"Bear[int]\")\ndef s9(p: Dict[str, str]):\n    a: Dict[str, Any] = p\n    reveal_type(a, expected_text=\"Dict[str, Any]\")\ndef s10(p: List[str]):\n    a: Iterable[Any] = p\n    reveal_type(a, expected_text=\"List[Any]\")\n    b: Iterable[str] = []",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s9(p: Dict[str, str]):\n    a: Dict[str, Any] = p\n    reveal_type(a, expected_text=\"Dict[str, Any]\")\ndef s10(p: List[str]):\n    a: Iterable[Any] = p\n    reveal_type(a, expected_text=\"List[Any]\")\n    b: Iterable[str] = []\n    reveal_type(b, expected_text=\"list[str]\")\n    c: Iterable[str] = list()\n    reveal_type(c, expected_text=\"list[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s10(p: List[str]):\n    a: Iterable[Any] = p\n    reveal_type(a, expected_text=\"List[Any]\")\n    b: Iterable[str] = []\n    reveal_type(b, expected_text=\"list[str]\")\n    c: Iterable[str] = list()\n    reveal_type(c, expected_text=\"list[str]\")\ndef s11():\n    a: Animal[Any, Any] = Donkey[int]()\n    reveal_type(a, expected_text=\"Donkey[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s11():\n    a: Animal[Any, Any] = Donkey[int]()\n    reveal_type(a, expected_text=\"Donkey[int]\")\ndef s12(p: Bear[_T1], b: _T1):\n    a: Animal[Any, int] = p\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s13(p: Bat):\n    a: Flyer[int] = p\n    reveal_type(a, expected_text=\"Bat\")\ndef s14(p: Bat):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s12(p: Bear[_T1], b: _T1):\n    a: Animal[Any, int] = p\n    reveal_type(a, expected_text=\"Bear[Any]\")\ndef s13(p: Bat):\n    a: Flyer[int] = p\n    reveal_type(a, expected_text=\"Bat\")\ndef s14(p: Bat):\n    a: CaveDweller[int] = p\n    reveal_type(a, expected_text=\"Bat\")\ndef s15():",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s13(p: Bat):\n    a: Flyer[int] = p\n    reveal_type(a, expected_text=\"Bat\")\ndef s14(p: Bat):\n    a: CaveDweller[int] = p\n    reveal_type(a, expected_text=\"Bat\")\ndef s15():\n    a = Bear(1)\n    reveal_type(a, expected_text=\"Bear[int]\")\n    b = Bear[int](1)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s14(p: Bat):\n    a: CaveDweller[int] = p\n    reveal_type(a, expected_text=\"Bat\")\ndef s15():\n    a = Bear(1)\n    reveal_type(a, expected_text=\"Bear[int]\")\n    b = Bear[int](1)\n    reveal_type(b, expected_text=\"Bear[int]\")\n    c = Bear[float](1)\n    reveal_type(c, expected_text=\"Bear[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s15():\n    a = Bear(1)\n    reveal_type(a, expected_text=\"Bear[int]\")\n    b = Bear[int](1)\n    reveal_type(b, expected_text=\"Bear[int]\")\n    c = Bear[float](1)\n    reveal_type(c, expected_text=\"Bear[float]\")\n    d = Bear[Union[str, int]](1)\n    reveal_type(d, expected_text=\"Bear[str | int]\")\ndef s16():",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s16():\n    a: Any = Bear(1)\n    reveal_type(a, expected_text=\"Any\")\ndef s17():\n    a1: Iterable[object] = [2, 3, 4]\n    reveal_type(a1, expected_text=\"list[int]\")\n    a2: List[object] = [2, 3, 4]\n    reveal_type(a2, expected_text=\"list[object]\")\n    b1: Iterable[float] = [2, 3, 4]\n    reveal_type(b1, expected_text=\"list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s17",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s17():\n    a1: Iterable[object] = [2, 3, 4]\n    reveal_type(a1, expected_text=\"list[int]\")\n    a2: List[object] = [2, 3, 4]\n    reveal_type(a2, expected_text=\"list[object]\")\n    b1: Iterable[float] = [2, 3, 4]\n    reveal_type(b1, expected_text=\"list[int]\")\n    b2: List[float] = [2, 3, 4]\n    reveal_type(b2, expected_text=\"list[float]\")\n    c1: Iterable[Literal[\"A\", \"B\", \"C\"]] = [\"A\", \"B\"]",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "s18",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "def s18():\n    a1: Mapping[object, object] = {\"a\": 3, \"b\": 5.6}\n    reveal_type(a1, expected_text=\"dict[object, float]\")\n    a2: Dict[object, object] = {\"a\": 3, \"b\": 5.6}\n    reveal_type(a2, expected_text=\"dict[object, object]\")\n    b1: Mapping[str, float] = {\"a\": 3, \"b\": 5}\n    reveal_type(b1, expected_text=\"dict[str, int]\")\n    b2: Dict[str, float] = {\"a\": 3, \"b\": 5}\n    reveal_type(b2, expected_text=\"dict[str, float]\")\n    c1: Mapping[Literal[\"A\", \"B\"], Literal[3, 4]] = {\"A\": 3}",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\n_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Animal(Generic[_T1, _T2]):\n    pass\nclass Bear(Animal[_T3, int]):\n    def __init__(self, p1: Optional[_T3] = None):\n        pass\nclass Donkey(Animal[int, int], Generic[_T3]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "_T1_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\n_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Animal(Generic[_T1, _T2]):\n    pass\nclass Bear(Animal[_T3, int]):\n    def __init__(self, p1: Optional[_T3] = None):\n        pass\nclass Donkey(Animal[int, int], Generic[_T3]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Animal(Generic[_T1, _T2]):\n    pass\nclass Bear(Animal[_T3, int]):\n    def __init__(self, p1: Optional[_T3] = None):\n        pass\nclass Donkey(Animal[int, int], Generic[_T3]):\n    pass\nclass Flyer(Protocol[_T1_contra]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor2",
        "description": "packages.pyright-internal.src.tests.samples.constructor2",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\nclass Animal(Generic[_T1, _T2]):\n    pass\nclass Bear(Animal[_T3, int]):\n    def __init__(self, p1: Optional[_T3] = None):\n        pass\nclass Donkey(Animal[int, int], Generic[_T3]):\n    pass\nclass Flyer(Protocol[_T1_contra]):\n    def get_wingspan(self, p1: _T1_contra) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.constructor2",
        "documentation": {}
    },
    {
        "label": "my_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor3",
        "description": "packages.pyright-internal.src.tests.samples.constructor3",
        "peekOfCode": "my_list = list(chain([0]))\nreveal_type(my_list, expected_text=\"list[int]\")\npending: Dict[Future[Any], Any] = {}\ndone_tasks = wait(list(pending.keys())).done\nreveal_type(done_tasks, expected_text=\"set[Future[Any]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor3",
        "documentation": {}
    },
    {
        "label": "done_tasks",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor3",
        "description": "packages.pyright-internal.src.tests.samples.constructor3",
        "peekOfCode": "done_tasks = wait(list(pending.keys())).done\nreveal_type(done_tasks, expected_text=\"set[Future[Any]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor4",
        "description": "packages.pyright-internal.src.tests.samples.constructor4",
        "peekOfCode": "def foo(value: Type[_T], b: _T) -> None:\n    val1: \"DefaultDict[str, list[_T]]\" = defaultdict(list)\n    reveal_type(val1, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    val2: \"DefaultDict[str, list[_T]]\" = defaultdict(List[_T])\n    reveal_type(val2, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    # This should generate an error because the type is incompatible.\n    val3: \"DefaultDict[str, list[_T]]\" = defaultdict(list[int])",
        "detail": "packages.pyright-internal.src.tests.samples.constructor4",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor4",
        "description": "packages.pyright-internal.src.tests.samples.constructor4",
        "peekOfCode": "val1 = Queue()\nreveal_type(val1, expected_text=\"Queue[Unknown]\")\nval2 = list()\nreveal_type(val2, expected_text=\"list[Unknown]\")\n_T = TypeVar(\"_T\")\ndef foo(value: Type[_T], b: _T) -> None:\n    val1: \"DefaultDict[str, list[_T]]\" = defaultdict(list)\n    reveal_type(val1, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    val2: \"DefaultDict[str, list[_T]]\" = defaultdict(List[_T])\n    reveal_type(val2, expected_text=\"defaultdict[str, list[_T@foo]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor4",
        "documentation": {}
    },
    {
        "label": "val2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor4",
        "description": "packages.pyright-internal.src.tests.samples.constructor4",
        "peekOfCode": "val2 = list()\nreveal_type(val2, expected_text=\"list[Unknown]\")\n_T = TypeVar(\"_T\")\ndef foo(value: Type[_T], b: _T) -> None:\n    val1: \"DefaultDict[str, list[_T]]\" = defaultdict(list)\n    reveal_type(val1, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    val2: \"DefaultDict[str, list[_T]]\" = defaultdict(List[_T])\n    reveal_type(val2, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    # This should generate an error because the type is incompatible.\n    val3: \"DefaultDict[str, list[_T]]\" = defaultdict(list[int])",
        "detail": "packages.pyright-internal.src.tests.samples.constructor4",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor4",
        "description": "packages.pyright-internal.src.tests.samples.constructor4",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef foo(value: Type[_T], b: _T) -> None:\n    val1: \"DefaultDict[str, list[_T]]\" = defaultdict(list)\n    reveal_type(val1, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    val2: \"DefaultDict[str, list[_T]]\" = defaultdict(List[_T])\n    reveal_type(val2, expected_text=\"defaultdict[str, list[_T@foo]]\")\n    # This should generate an error because the type is incompatible.\n    val3: \"DefaultDict[str, list[_T]]\" = defaultdict(list[int])",
        "detail": "packages.pyright-internal.src.tests.samples.constructor4",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor5",
        "description": "packages.pyright-internal.src.tests.samples.constructor5",
        "peekOfCode": "val1 = {\n    \"a\": 1,\n    \"b\": 0,\n}\nreveal_type(val1, expected_text=\"dict[str, int]\")\nval2 = OrderedDict(val1)\nreveal_type(val2, expected_text=\"OrderedDict[str, int]\")\nval3 = OrderedDict(\n    {\n        \"a\": 1,",
        "detail": "packages.pyright-internal.src.tests.samples.constructor5",
        "documentation": {}
    },
    {
        "label": "val2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor5",
        "description": "packages.pyright-internal.src.tests.samples.constructor5",
        "peekOfCode": "val2 = OrderedDict(val1)\nreveal_type(val2, expected_text=\"OrderedDict[str, int]\")\nval3 = OrderedDict(\n    {\n        \"a\": 1,\n        \"b\": 0,\n    }\n)\nreveal_type(val3, expected_text=\"OrderedDict[str, int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor5",
        "documentation": {}
    },
    {
        "label": "val3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor5",
        "description": "packages.pyright-internal.src.tests.samples.constructor5",
        "peekOfCode": "val3 = OrderedDict(\n    {\n        \"a\": 1,\n        \"b\": 0,\n    }\n)\nreveal_type(val3, expected_text=\"OrderedDict[str, int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor5",
        "documentation": {}
    },
    {
        "label": "TextField",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "class TextField(Generic[_T]):\n    @overload\n    def __init__(self: \"TextField[str]\", *, null: Literal[False] = ...) -> None:\n        ...\n    @overload\n    def __init__(\n        self: \"TextField[Optional[str]]\",\n        *,\n        null: Literal[True] = ...,\n    ) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "class Model:\n    ...\n_T1 = TypeVar(\"_T1\", bound=\"Optional[Model]\")\n_T2 = TypeVar(\"_T2\", bound=\"Optional[Model]\")\nclass ForeignKey(Generic[_T1]):\n    @overload\n    def __init__(\n        self: \"ForeignKey[_T2]\", to: Type[_T2], *, null: Literal[False] = ...\n    ) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "class ForeignKey(Generic[_T1]):\n    @overload\n    def __init__(\n        self: \"ForeignKey[_T2]\", to: Type[_T2], *, null: Literal[False] = ...\n    ) -> None:\n        ...\n    @overload\n    def __init__(\n        self: \"ForeignKey[Optional[_T2]]\", to: Type[_T2], *, null: Literal[True]\n    ) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "class Author(Model):\n    pass\nreveal_type(ForeignKey(Author, null=False), expected_text=\"ForeignKey[Author]\")\nreveal_type(ForeignKey(Author, null=True), expected_text=\"ForeignKey[Author | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "def foo(a: bool):\n    reveal_type(TextField(), expected_text=\"TextField[str]\")\n    reveal_type(TextField(null=True), expected_text=\"TextField[str | None]\")\n    reveal_type(TextField(null=a), expected_text=\"TextField[Unknown]\")\nclass Model:\n    ...\n_T1 = TypeVar(\"_T1\", bound=\"Optional[Model]\")\n_T2 = TypeVar(\"_T2\", bound=\"Optional[Model]\")\nclass ForeignKey(Generic[_T1]):\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=Optional[str])\nclass TextField(Generic[_T]):\n    @overload\n    def __init__(self: \"TextField[str]\", *, null: Literal[False] = ...) -> None:\n        ...\n    @overload\n    def __init__(\n        self: \"TextField[Optional[str]]\",\n        *,\n        null: Literal[True] = ...,",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=\"Optional[Model]\")\n_T2 = TypeVar(\"_T2\", bound=\"Optional[Model]\")\nclass ForeignKey(Generic[_T1]):\n    @overload\n    def __init__(\n        self: \"ForeignKey[_T2]\", to: Type[_T2], *, null: Literal[False] = ...\n    ) -> None:\n        ...\n    @overload\n    def __init__(",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor6",
        "description": "packages.pyright-internal.src.tests.samples.constructor6",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=\"Optional[Model]\")\nclass ForeignKey(Generic[_T1]):\n    @overload\n    def __init__(\n        self: \"ForeignKey[_T2]\", to: Type[_T2], *, null: Literal[False] = ...\n    ) -> None:\n        ...\n    @overload\n    def __init__(\n        self: \"ForeignKey[Optional[_T2]]\", to: Type[_T2], *, null: Literal[True]",
        "detail": "packages.pyright-internal.src.tests.samples.constructor6",
        "documentation": {}
    },
    {
        "label": "HelloWorld",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor7",
        "description": "packages.pyright-internal.src.tests.samples.constructor7",
        "peekOfCode": "class HelloWorld:\n    def __new__(cls) -> str:\n        return \"Hello World\"\nv1 = HelloWorld()\nreveal_type(v1, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor7",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor7",
        "description": "packages.pyright-internal.src.tests.samples.constructor7",
        "peekOfCode": "v1 = HelloWorld()\nreveal_type(v1, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor7",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "class A(Generic[_T1]):\n    def __new__(cls, x: _T1) -> \"A[_T1]\":\n        ...\na1 = func1(A[float], 3.4)\nreveal_type(a1, expected_text=\"A[float]\")\n# This should generate an error.\na2 = func1(A[int], 3.4)\na3 = func1(A[int], 3)\nreveal_type(a3, expected_text=\"A[int]\")\nclass B(Generic[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "class B(Generic[_T1]):\n    @overload\n    def __new__(cls, x: int, y: Literal[True]) -> \"B[None]\":\n        ...\n    @overload\n    def __new__(cls, x: _T1, y: bool = ...) -> \"B[_T1]\":\n        ...\n    def __new__(cls, x: Union[_T1, int], y: bool = False) -> \"B[Any]\":\n        ...\nb1 = func1(B[int], 3)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "class C(Generic[_T1]):\n    def __init__(self: \"C[_T1]\", x: _T1) -> None:\n        ...\nc1 = func1(C[float], 3.4)\nreveal_type(c1, expected_text=\"C[float]\")\n# This should generate an error.\nc2 = func1(C[int], 3.4)\nc3 = func1(C[int], 3)\nreveal_type(c3, expected_text=\"C[int]\")\nclass D(Generic[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "class D(Generic[_T1]):\n    @overload\n    def __init__(self: \"D[None]\", x: int, y: Literal[True]) -> None:\n        ...\n    @overload\n    def __init__(self: \"D[_T1]\", x: _T1, y: bool = ...) -> None:\n        ...\n    def __init__(self, x: Any, y: bool = False) -> None:\n        ...\nd1 = func1(D[int], 3)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "def func1(callback: Callable[[_T1], _S], val: _T1) -> _S:\n    ...\nclass A(Generic[_T1]):\n    def __new__(cls, x: _T1) -> \"A[_T1]\":\n        ...\na1 = func1(A[float], 3.4)\nreveal_type(a1, expected_text=\"A[float]\")\n# This should generate an error.\na2 = func1(A[int], 3.4)\na3 = func1(A[int], 3)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_S = TypeVar(\"_S\")\ndef func1(callback: Callable[[_T1], _S], val: _T1) -> _S:\n    ...\nclass A(Generic[_T1]):\n    def __new__(cls, x: _T1) -> \"A[_T1]\":\n        ...\na1 = func1(A[float], 3.4)\nreveal_type(a1, expected_text=\"A[float]\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "_S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "_S = TypeVar(\"_S\")\ndef func1(callback: Callable[[_T1], _S], val: _T1) -> _S:\n    ...\nclass A(Generic[_T1]):\n    def __new__(cls, x: _T1) -> \"A[_T1]\":\n        ...\na1 = func1(A[float], 3.4)\nreveal_type(a1, expected_text=\"A[float]\")\n# This should generate an error.\na2 = func1(A[int], 3.4)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "a1 = func1(A[float], 3.4)\nreveal_type(a1, expected_text=\"A[float]\")\n# This should generate an error.\na2 = func1(A[int], 3.4)\na3 = func1(A[int], 3)\nreveal_type(a3, expected_text=\"A[int]\")\nclass B(Generic[_T1]):\n    @overload\n    def __new__(cls, x: int, y: Literal[True]) -> \"B[None]\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "a2 = func1(A[int], 3.4)\na3 = func1(A[int], 3)\nreveal_type(a3, expected_text=\"A[int]\")\nclass B(Generic[_T1]):\n    @overload\n    def __new__(cls, x: int, y: Literal[True]) -> \"B[None]\":\n        ...\n    @overload\n    def __new__(cls, x: _T1, y: bool = ...) -> \"B[_T1]\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "a3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "a3 = func1(A[int], 3)\nreveal_type(a3, expected_text=\"A[int]\")\nclass B(Generic[_T1]):\n    @overload\n    def __new__(cls, x: int, y: Literal[True]) -> \"B[None]\":\n        ...\n    @overload\n    def __new__(cls, x: _T1, y: bool = ...) -> \"B[_T1]\":\n        ...\n    def __new__(cls, x: Union[_T1, int], y: bool = False) -> \"B[Any]\":",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "b1 = func1(B[int], 3)\nreveal_type(b1, expected_text=\"B[int]\")\n# This should generate an error.\nb2 = func1(B[None], 3.5)\nb3 = func1(B[float], 3.5)\nreveal_type(b3, expected_text=\"B[float]\")\nb4 = func1(B[Union[int, str]], 3)\nreveal_type(b4, expected_text=\"B[int | str]\")\nb5 = func1(B[Union[int, str]], \"3\")\nreveal_type(b5, expected_text=\"B[int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "b2 = func1(B[None], 3.5)\nb3 = func1(B[float], 3.5)\nreveal_type(b3, expected_text=\"B[float]\")\nb4 = func1(B[Union[int, str]], 3)\nreveal_type(b4, expected_text=\"B[int | str]\")\nb5 = func1(B[Union[int, str]], \"3\")\nreveal_type(b5, expected_text=\"B[int | str]\")\nclass C(Generic[_T1]):\n    def __init__(self: \"C[_T1]\", x: _T1) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "b3 = func1(B[float], 3.5)\nreveal_type(b3, expected_text=\"B[float]\")\nb4 = func1(B[Union[int, str]], 3)\nreveal_type(b4, expected_text=\"B[int | str]\")\nb5 = func1(B[Union[int, str]], \"3\")\nreveal_type(b5, expected_text=\"B[int | str]\")\nclass C(Generic[_T1]):\n    def __init__(self: \"C[_T1]\", x: _T1) -> None:\n        ...\nc1 = func1(C[float], 3.4)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "b4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "b4 = func1(B[Union[int, str]], 3)\nreveal_type(b4, expected_text=\"B[int | str]\")\nb5 = func1(B[Union[int, str]], \"3\")\nreveal_type(b5, expected_text=\"B[int | str]\")\nclass C(Generic[_T1]):\n    def __init__(self: \"C[_T1]\", x: _T1) -> None:\n        ...\nc1 = func1(C[float], 3.4)\nreveal_type(c1, expected_text=\"C[float]\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "b5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "b5 = func1(B[Union[int, str]], \"3\")\nreveal_type(b5, expected_text=\"B[int | str]\")\nclass C(Generic[_T1]):\n    def __init__(self: \"C[_T1]\", x: _T1) -> None:\n        ...\nc1 = func1(C[float], 3.4)\nreveal_type(c1, expected_text=\"C[float]\")\n# This should generate an error.\nc2 = func1(C[int], 3.4)\nc3 = func1(C[int], 3)",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "c1 = func1(C[float], 3.4)\nreveal_type(c1, expected_text=\"C[float]\")\n# This should generate an error.\nc2 = func1(C[int], 3.4)\nc3 = func1(C[int], 3)\nreveal_type(c3, expected_text=\"C[int]\")\nclass D(Generic[_T1]):\n    @overload\n    def __init__(self: \"D[None]\", x: int, y: Literal[True]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "c2 = func1(C[int], 3.4)\nc3 = func1(C[int], 3)\nreveal_type(c3, expected_text=\"C[int]\")\nclass D(Generic[_T1]):\n    @overload\n    def __init__(self: \"D[None]\", x: int, y: Literal[True]) -> None:\n        ...\n    @overload\n    def __init__(self: \"D[_T1]\", x: _T1, y: bool = ...) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "c3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "c3 = func1(C[int], 3)\nreveal_type(c3, expected_text=\"C[int]\")\nclass D(Generic[_T1]):\n    @overload\n    def __init__(self: \"D[None]\", x: int, y: Literal[True]) -> None:\n        ...\n    @overload\n    def __init__(self: \"D[_T1]\", x: _T1, y: bool = ...) -> None:\n        ...\n    def __init__(self, x: Any, y: bool = False) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "d1 = func1(D[int], 3)\nreveal_type(d1, expected_text=\"D[int]\")\n# This should generate an error.\nd2 = func1(D[None], 3.5)\nd3 = func1(D[float], 3.5)\nreveal_type(d3, expected_text=\"D[float]\")\nd4 = func1(D[Union[int, str]], 3)\nreveal_type(d4, expected_text=\"D[int | str]\")\nd5 = func1(D[Union[int, str]], \"3\")\nreveal_type(d5, expected_text=\"D[int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "d2 = func1(D[None], 3.5)\nd3 = func1(D[float], 3.5)\nreveal_type(d3, expected_text=\"D[float]\")\nd4 = func1(D[Union[int, str]], 3)\nreveal_type(d4, expected_text=\"D[int | str]\")\nd5 = func1(D[Union[int, str]], \"3\")\nreveal_type(d5, expected_text=\"D[int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "d3 = func1(D[float], 3.5)\nreveal_type(d3, expected_text=\"D[float]\")\nd4 = func1(D[Union[int, str]], 3)\nreveal_type(d4, expected_text=\"D[int | str]\")\nd5 = func1(D[Union[int, str]], \"3\")\nreveal_type(d5, expected_text=\"D[int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "d4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "d4 = func1(D[Union[int, str]], 3)\nreveal_type(d4, expected_text=\"D[int | str]\")\nd5 = func1(D[Union[int, str]], \"3\")\nreveal_type(d5, expected_text=\"D[int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "d5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor8",
        "description": "packages.pyright-internal.src.tests.samples.constructor8",
        "peekOfCode": "d5 = func1(D[Union[int, str]], \"3\")\nreveal_type(d5, expected_text=\"D[int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.constructor8",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor9",
        "description": "packages.pyright-internal.src.tests.samples.constructor9",
        "peekOfCode": "class A(ABC):\n    @abstractmethod\n    def some_method(self) -> str:\n        ...\n    def some_factory_method_1(self):\n        return type(self)()\n    def some_factory_method_2(self: _ASub) -> _ASub:\n        return type(self)()",
        "detail": "packages.pyright-internal.src.tests.samples.constructor9",
        "documentation": {}
    },
    {
        "label": "_ASub",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.constructor9",
        "description": "packages.pyright-internal.src.tests.samples.constructor9",
        "peekOfCode": "_ASub = TypeVar(\"_ASub\", bound=\"A\")\nclass A(ABC):\n    @abstractmethod\n    def some_method(self) -> str:\n        ...\n    def some_factory_method_1(self):\n        return type(self)()\n    def some_factory_method_2(self: _ASub) -> _ASub:\n        return type(self)()",
        "detail": "packages.pyright-internal.src.tests.samples.constructor9",
        "documentation": {}
    },
    {
        "label": "ScopedClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.coroutines1",
        "description": "packages.pyright-internal.src.tests.samples.coroutines1",
        "peekOfCode": "class ScopedClass1:\n    def __aenter__(self):\n        return self\n    @coroutine\n    def __await__(self) -> Generator[Any, None, int]:\n        yield 3\n        return 3\n    def __aexit__(\n        self,\n        t: Optional[type] = None,",
        "detail": "packages.pyright-internal.src.tests.samples.coroutines1",
        "documentation": {}
    },
    {
        "label": "needs_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.coroutines1",
        "description": "packages.pyright-internal.src.tests.samples.coroutines1",
        "peekOfCode": "def needs_int(val: int):\n    pass\nasync def consumer1():\n    # This should generate an error because\n    # a is not an int\n    needs_int(a)\n    needs_int(await a)\n    needs_int(await coroutine1())\nclass ScopedClass1:\n    def __aenter__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.coroutines1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.coroutines1",
        "description": "packages.pyright-internal.src.tests.samples.coroutines1",
        "peekOfCode": "a = coroutine1()\n# This should generate an error because 'await'\n# can't be used outside of an async function.\nawait a\ndef needs_int(val: int):\n    pass\nasync def consumer1():\n    # This should generate an error because\n    # a is not an int\n    needs_int(a)",
        "detail": "packages.pyright-internal.src.tests.samples.coroutines1",
        "documentation": {}
    },
    {
        "label": "old_style_coroutine1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.coroutines3",
        "description": "packages.pyright-internal.src.tests.samples.coroutines3",
        "peekOfCode": "def old_style_coroutine1():\n    yield from asyncio.sleep(1)\nasync def func1() -> None:\n    x = await old_style_coroutine1()\n    reveal_type(x, expected_text=\"None\")\n    return x\nreveal_type(\n    old_style_coroutine1,\n    expected_text=\"() -> AwaitableGenerator[Any, None, None, None]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.coroutines3",
        "documentation": {}
    },
    {
        "label": "old_style_coroutine2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.coroutines3",
        "description": "packages.pyright-internal.src.tests.samples.coroutines3",
        "peekOfCode": "def old_style_coroutine2() -> AwaitableGenerator[Any, None, None, None]:\n    yield from asyncio.sleep(1)\nasync def func2() -> None:\n    x = await old_style_coroutine2()\n    return x\nreveal_type(\n    old_style_coroutine2,\n    expected_text=\"() -> AwaitableGenerator[Any, None, None, None]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.coroutines3",
        "documentation": {}
    },
    {
        "label": "Other",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "class Other:\n    pass\nclass DataTuple(NamedTuple):\n    def _m(self):\n        pass\n    # ClassVar variables should not be included.\n    class_var: ClassVar[int] = 4\n    id: int\n    aid: Other\n    value: str = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "DataTuple",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "class DataTuple(NamedTuple):\n    def _m(self):\n        pass\n    # ClassVar variables should not be included.\n    class_var: ClassVar[int] = 4\n    id: int\n    aid: Other\n    value: str = \"\"\n    # Unannotated variables should not be included.\n    not_annotated = 5",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "d1 = DataTuple(id=1, aid=Other(), name2=\"hi\")\nd2 = DataTuple(id=1, aid=Other(), value=\"v\")\nd3 = DataTuple(id=1, aid=Other(), name=\"hello\")\nd4 = DataTuple(id=1, aid=Other(), name=None)\nid = d1.id\nh4: Hashable = d4\nv = d3 == d4\n# This should generate an error because the name argument\n# is the incorrect type.\nd5 = DataTuple(id=1, aid=Other(), name=3)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "d2 = DataTuple(id=1, aid=Other(), value=\"v\")\nd3 = DataTuple(id=1, aid=Other(), name=\"hello\")\nd4 = DataTuple(id=1, aid=Other(), name=None)\nid = d1.id\nh4: Hashable = d4\nv = d3 == d4\n# This should generate an error because the name argument\n# is the incorrect type.\nd5 = DataTuple(id=1, aid=Other(), name=3)\n# This should generate an error because aid is a required",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "d3 = DataTuple(id=1, aid=Other(), name=\"hello\")\nd4 = DataTuple(id=1, aid=Other(), name=None)\nid = d1.id\nh4: Hashable = d4\nv = d3 == d4\n# This should generate an error because the name argument\n# is the incorrect type.\nd5 = DataTuple(id=1, aid=Other(), name=3)\n# This should generate an error because aid is a required\n# parameter and is missing an argument here.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "d4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "d4 = DataTuple(id=1, aid=Other(), name=None)\nid = d1.id\nh4: Hashable = d4\nv = d3 == d4\n# This should generate an error because the name argument\n# is the incorrect type.\nd5 = DataTuple(id=1, aid=Other(), name=3)\n# This should generate an error because aid is a required\n# parameter and is missing an argument here.\nd6 = DataTuple(id=1, name=None)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "id",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "id = d1.id\nh4: Hashable = d4\nv = d3 == d4\n# This should generate an error because the name argument\n# is the incorrect type.\nd5 = DataTuple(id=1, aid=Other(), name=3)\n# This should generate an error because aid is a required\n# parameter and is missing an argument here.\nd6 = DataTuple(id=1, name=None)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "v",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "v = d3 == d4\n# This should generate an error because the name argument\n# is the incorrect type.\nd5 = DataTuple(id=1, aid=Other(), name=3)\n# This should generate an error because aid is a required\n# parameter and is missing an argument here.\nd6 = DataTuple(id=1, name=None)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "d5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "d5 = DataTuple(id=1, aid=Other(), name=3)\n# This should generate an error because aid is a required\n# parameter and is missing an argument here.\nd6 = DataTuple(id=1, name=None)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "d6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass1",
        "description": "packages.pyright-internal.src.tests.samples.dataclass1",
        "peekOfCode": "d6 = DataTuple(id=1, name=None)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass1",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass10",
        "description": "packages.pyright-internal.src.tests.samples.dataclass10",
        "peekOfCode": "class Parent:\n    prop_1: str = field(init=False)\n    prop_2: str = field(default=\"hello\")\n    prop_3: str = field(default_factory=lambda: \"hello\")\n    # This should generate an error because it appears after\n    # a property with a default value.\n    prop_4: str = field()\n    def __post_init__(self):\n        self.prop_1 = \"test\"\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass10",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass10",
        "description": "packages.pyright-internal.src.tests.samples.dataclass10",
        "peekOfCode": "class Child(Parent):\n    prop_2: str\ntest = Child(prop_2=\"test\", prop_4=\"hi\")\nassert test.prop_1 == \"test\"\nassert test.prop_2 == \"test\"\n@dataclass\nclass HandshakeMessage:\n    reset_reason_hex: str\n    reset_data_hex: str\n    device_id: str = field(default=\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass10",
        "documentation": {}
    },
    {
        "label": "HandshakeMessage",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass10",
        "description": "packages.pyright-internal.src.tests.samples.dataclass10",
        "peekOfCode": "class HandshakeMessage:\n    reset_reason_hex: str\n    reset_data_hex: str\n    device_id: str = field(default=\"\")\n    reset_reason: str = field(init=False)\n    reset_data: str = field(init=False)\n    def __post_init__(self):\n        reset_reason = \"calculated value\"\n        reset_data = \"calculated value\"",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass10",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass10",
        "description": "packages.pyright-internal.src.tests.samples.dataclass10",
        "peekOfCode": "test = Child(prop_2=\"test\", prop_4=\"hi\")\nassert test.prop_1 == \"test\"\nassert test.prop_2 == \"test\"\n@dataclass\nclass HandshakeMessage:\n    reset_reason_hex: str\n    reset_data_hex: str\n    device_id: str = field(default=\"\")\n    reset_reason: str = field(init=False)\n    reset_data: str = field(init=False)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass10",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass11",
        "description": "packages.pyright-internal.src.tests.samples.dataclass11",
        "peekOfCode": "class DC1:\n    a: str\n    b: int\n@dataclass(order=True)\nclass DC2:\n    a: str\n    b: int\ndc1_1 = DC1(\"hi\", 2)\ndc1_2 = DC1(\"hi\", 2)\nif dc1_1 < dc1_2:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass11",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass11",
        "description": "packages.pyright-internal.src.tests.samples.dataclass11",
        "peekOfCode": "class DC2:\n    a: str\n    b: int\ndc1_1 = DC1(\"hi\", 2)\ndc1_2 = DC1(\"hi\", 2)\nif dc1_1 < dc1_2:\n    print(\"\")\nif dc1_1 <= dc1_2:\n    print(\"\")\nif dc1_1 > dc1_2:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass11",
        "documentation": {}
    },
    {
        "label": "dc1_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass11",
        "description": "packages.pyright-internal.src.tests.samples.dataclass11",
        "peekOfCode": "dc1_1 = DC1(\"hi\", 2)\ndc1_2 = DC1(\"hi\", 2)\nif dc1_1 < dc1_2:\n    print(\"\")\nif dc1_1 <= dc1_2:\n    print(\"\")\nif dc1_1 > dc1_2:\n    print(\"\")\nif dc1_1 >= dc1_2:\n    print(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass11",
        "documentation": {}
    },
    {
        "label": "dc1_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass11",
        "description": "packages.pyright-internal.src.tests.samples.dataclass11",
        "peekOfCode": "dc1_2 = DC1(\"hi\", 2)\nif dc1_1 < dc1_2:\n    print(\"\")\nif dc1_1 <= dc1_2:\n    print(\"\")\nif dc1_1 > dc1_2:\n    print(\"\")\nif dc1_1 >= dc1_2:\n    print(\"\")\nif dc1_1 == dc1_2:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass11",
        "documentation": {}
    },
    {
        "label": "dc2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass11",
        "description": "packages.pyright-internal.src.tests.samples.dataclass11",
        "peekOfCode": "dc2_1 = DC2(\"hi\", 2)\n# This should generate an error because the types are\n# incompatible.\nif dc1_1 < dc2_1:\n    print(\"\")\nif dc1_1 != dc2_1:\n    print(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass11",
        "documentation": {}
    },
    {
        "label": "MapTreeLeaf",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "class MapTreeLeaf(Generic[Key0, Value]):\n    key: Key0\n    value: Value\n@dataclass\nclass MapTreeNode(MapTreeLeaf[Key1, Value]):\n    pass\nclass Foo(Generic[Key2, Value]):\n    def add(self, key: Key2, value: Value):\n        return MapTreeNode(key=key, value=value)\n    def test1(self, a: Key2, b: Value):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "MapTreeNode",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "class MapTreeNode(MapTreeLeaf[Key1, Value]):\n    pass\nclass Foo(Generic[Key2, Value]):\n    def add(self, key: Key2, value: Value):\n        return MapTreeNode(key=key, value=value)\n    def test1(self, a: Key2, b: Value):\n        v1 = self.add(a, b)\n        reveal_type(v1, expected_text=\"MapTreeNode[Key2@Foo, Value@Foo]\")\n        reveal_type(v1.key, expected_text=\"Key2@Foo\")\n        reveal_type(v1.value, expected_text=\"Value@Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "class Foo(Generic[Key2, Value]):\n    def add(self, key: Key2, value: Value):\n        return MapTreeNode(key=key, value=value)\n    def test1(self, a: Key2, b: Value):\n        v1 = self.add(a, b)\n        reveal_type(v1, expected_text=\"MapTreeNode[Key2@Foo, Value@Foo]\")\n        reveal_type(v1.key, expected_text=\"Key2@Foo\")\n        reveal_type(v1.value, expected_text=\"Value@Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "Key0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "Key0 = TypeVar(\"Key0\")\nKey1 = TypeVar(\"Key1\")\nKey2 = TypeVar(\"Key2\")\nValue = TypeVar(\"Value\")\n@dataclass\nclass MapTreeLeaf(Generic[Key0, Value]):\n    key: Key0\n    value: Value\n@dataclass\nclass MapTreeNode(MapTreeLeaf[Key1, Value]):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "Key1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "Key1 = TypeVar(\"Key1\")\nKey2 = TypeVar(\"Key2\")\nValue = TypeVar(\"Value\")\n@dataclass\nclass MapTreeLeaf(Generic[Key0, Value]):\n    key: Key0\n    value: Value\n@dataclass\nclass MapTreeNode(MapTreeLeaf[Key1, Value]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "Key2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "Key2 = TypeVar(\"Key2\")\nValue = TypeVar(\"Value\")\n@dataclass\nclass MapTreeLeaf(Generic[Key0, Value]):\n    key: Key0\n    value: Value\n@dataclass\nclass MapTreeNode(MapTreeLeaf[Key1, Value]):\n    pass\nclass Foo(Generic[Key2, Value]):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "Value",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass12",
        "description": "packages.pyright-internal.src.tests.samples.dataclass12",
        "peekOfCode": "Value = TypeVar(\"Value\")\n@dataclass\nclass MapTreeLeaf(Generic[Key0, Value]):\n    key: Key0\n    value: Value\n@dataclass\nclass MapTreeNode(MapTreeLeaf[Key1, Value]):\n    pass\nclass Foo(Generic[Key2, Value]):\n    def add(self, key: Key2, value: Value):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass12",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "class DC1:\n    val1: int = 6\n@dataclass(frozen=True)\nclass DC2:\n    val2: int = 4\n# This should generate an error because a frozen dataclass\n# cannot inherit from a non-frozen dataclass.\n@dataclass(frozen=True)\nclass DC3(DC1):\n    val3: int = 4",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "class DC2:\n    val2: int = 4\n# This should generate an error because a frozen dataclass\n# cannot inherit from a non-frozen dataclass.\n@dataclass(frozen=True)\nclass DC3(DC1):\n    val3: int = 4\n@dataclass(frozen=True)\nclass DC4(DC2):\n    val4: int = 4",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "DC3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "class DC3(DC1):\n    val3: int = 4\n@dataclass(frozen=True)\nclass DC4(DC2):\n    val4: int = 4\n    val5: ClassVar[int]\na = DC1(val1=3)\na.val1 = 3\nb = DC4(val2=3, val4=5)\nDC4.val5 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "DC4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "class DC4(DC2):\n    val4: int = 4\n    val5: ClassVar[int]\na = DC1(val1=3)\na.val1 = 3\nb = DC4(val2=3, val4=5)\nDC4.val5 = 3\n# This should generate an error because the dataclass is frozen.\nb.val2 = 3\n# This should generate an error because the dataclass is frozen.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "a = DC1(val1=3)\na.val1 = 3\nb = DC4(val2=3, val4=5)\nDC4.val5 = 3\n# This should generate an error because the dataclass is frozen.\nb.val2 = 3\n# This should generate an error because the dataclass is frozen.\nb.val4 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "a.val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "a.val1 = 3\nb = DC4(val2=3, val4=5)\nDC4.val5 = 3\n# This should generate an error because the dataclass is frozen.\nb.val2 = 3\n# This should generate an error because the dataclass is frozen.\nb.val4 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "b = DC4(val2=3, val4=5)\nDC4.val5 = 3\n# This should generate an error because the dataclass is frozen.\nb.val2 = 3\n# This should generate an error because the dataclass is frozen.\nb.val4 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "DC4.val5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "DC4.val5 = 3\n# This should generate an error because the dataclass is frozen.\nb.val2 = 3\n# This should generate an error because the dataclass is frozen.\nb.val4 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "b.val2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "b.val2 = 3\n# This should generate an error because the dataclass is frozen.\nb.val4 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "b.val4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass13",
        "description": "packages.pyright-internal.src.tests.samples.dataclass13",
        "peekOfCode": "b.val4 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass13",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass14",
        "description": "packages.pyright-internal.src.tests.samples.dataclass14",
        "peekOfCode": "class Base:\n    x: int\n    y: int\n@dataclass\nclass Special(Base):\n    x: ClassVar[int] = 1\n    z: int\n@dataclass\nclass VerySpecial(Special):\n    y: ClassVar[int] = 2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass14",
        "documentation": {}
    },
    {
        "label": "Special",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass14",
        "description": "packages.pyright-internal.src.tests.samples.dataclass14",
        "peekOfCode": "class Special(Base):\n    x: ClassVar[int] = 1\n    z: int\n@dataclass\nclass VerySpecial(Special):\n    y: ClassVar[int] = 2\nBase(x=1, y=2)\nSpecial(y=2, z=3)\nSpecial(2, 3)\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass14",
        "documentation": {}
    },
    {
        "label": "VerySpecial",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass14",
        "description": "packages.pyright-internal.src.tests.samples.dataclass14",
        "peekOfCode": "class VerySpecial(Special):\n    y: ClassVar[int] = 2\nBase(x=1, y=2)\nSpecial(y=2, z=3)\nSpecial(2, 3)\n# This should generate an error\nSpecial(x=1, y=2, z=3)\n# This should generate an error\nSpecial(1, 2, 3)\nVerySpecial(z=3)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass14",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass15",
        "description": "packages.pyright-internal.src.tests.samples.dataclass15",
        "peekOfCode": "class DC1:\n    a: str\n    _: KW_ONLY\n    b: int = 0\nDC1(\"hi\")\nDC1(a=\"hi\")\nDC1(a=\"hi\", b=1)\nDC1(\"hi\", b=1)\n# This should generate an error because \"b\" is keyword-only.\nDC1(\"hi\", 1)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass15",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass15",
        "description": "packages.pyright-internal.src.tests.samples.dataclass15",
        "peekOfCode": "class DC2:\n    b: int = field(kw_only=True, default=3)\n    a: str\nDC2(\"hi\")\nDC2(a=\"hi\")\nDC2(a=\"hi\", b=1)\nDC2(\"hi\", b=1)\n# This should generate an error because \"b\" is keyword-only.\nDC2(\"hi\", 1)\n@dataclass(kw_only=True)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass15",
        "documentation": {}
    },
    {
        "label": "DC3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass15",
        "description": "packages.pyright-internal.src.tests.samples.dataclass15",
        "peekOfCode": "class DC3:\n    a: str = field(kw_only=False)\n    b: int = 0\nDC3(\"hi\")\nDC3(a=\"hi\")\nDC3(a=\"hi\", b=1)\nDC3(\"hi\", b=1)\n# This should generate an error because \"b\" is keyword-only.\nDC3(\"hi\", 1)\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass15",
        "documentation": {}
    },
    {
        "label": "DC4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass15",
        "description": "packages.pyright-internal.src.tests.samples.dataclass15",
        "peekOfCode": "class DC4(DC3):\n    c: float\nDC4(\"\", 0.2, b=3)\nDC4(a=\"\", b=3, c=0.2)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass15",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass16",
        "description": "packages.pyright-internal.src.tests.samples.dataclass16",
        "peekOfCode": "class Foo(Generic[T]):\n    value: Union[str, T]\nreveal_type(Foo(\"\"), expected_text=\"Foo[Unknown]\")\nclass Bar(Foo[int]):\n    pass\nreveal_type(Bar(123), expected_text=\"Bar\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass16",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass16",
        "description": "packages.pyright-internal.src.tests.samples.dataclass16",
        "peekOfCode": "class Bar(Foo[int]):\n    pass\nreveal_type(Bar(123), expected_text=\"Bar\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass16",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass16",
        "description": "packages.pyright-internal.src.tests.samples.dataclass16",
        "peekOfCode": "T = TypeVar(\"T\")\n@dataclass\nclass Foo(Generic[T]):\n    value: Union[str, T]\nreveal_type(Foo(\"\"), expected_text=\"Foo[Unknown]\")\nclass Bar(Foo[int]):\n    pass\nreveal_type(Bar(123), expected_text=\"Bar\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass16",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass17",
        "description": "packages.pyright-internal.src.tests.samples.dataclass17",
        "peekOfCode": "class A:\n    x: int\n    __slots__ = ()\n@dataclass(slots=True)\nclass B:\n    x: int\n    def __init__(self):\n        self.x = 3\n        # This should generate an error because \"y\" is not in slots.\n        self.y = 3",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass17",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass17",
        "description": "packages.pyright-internal.src.tests.samples.dataclass17",
        "peekOfCode": "class B:\n    x: int\n    def __init__(self):\n        self.x = 3\n        # This should generate an error because \"y\" is not in slots.\n        self.y = 3\n@dataclass(slots=False)\nclass C:\n    x: int\n    __slots__ = (\"x\",)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass17",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass17",
        "description": "packages.pyright-internal.src.tests.samples.dataclass17",
        "peekOfCode": "class C:\n    x: int\n    __slots__ = (\"x\",)\n    def __init__(self):\n        self.x = 3\n        # This should generate an error because \"y\" is not in slots.\n        self.y = 3\n@dataclass\nclass D:\n    __slots__ = (\"y\", \"x\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass17",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass17",
        "description": "packages.pyright-internal.src.tests.samples.dataclass17",
        "peekOfCode": "class D:\n    __slots__ = (\"y\", \"x\")\n    x: int\n    y: str\nD(1, \"bar\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass17",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass18",
        "description": "packages.pyright-internal.src.tests.samples.dataclass18",
        "peekOfCode": "class DC1:\n    a: int\n# This should generate an error.\nv1: Hashable = DC1(0)\n@dataclass(eq=True, frozen=True)\nclass DC2:\n    a: int\nv2: Hashable = DC2(0)\n@dataclass(eq=True)\nclass DC3:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass18",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass18",
        "description": "packages.pyright-internal.src.tests.samples.dataclass18",
        "peekOfCode": "class DC2:\n    a: int\nv2: Hashable = DC2(0)\n@dataclass(eq=True)\nclass DC3:\n    a: int\n# This should generate an error.\nv3: Hashable = DC3(0)\n@dataclass(frozen=True)\nclass DC4:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass18",
        "documentation": {}
    },
    {
        "label": "DC3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass18",
        "description": "packages.pyright-internal.src.tests.samples.dataclass18",
        "peekOfCode": "class DC3:\n    a: int\n# This should generate an error.\nv3: Hashable = DC3(0)\n@dataclass(frozen=True)\nclass DC4:\n    a: int\nv4: Hashable = DC4(0)\n@dataclass(eq=True, unsafe_hash=True)\nclass DC5:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass18",
        "documentation": {}
    },
    {
        "label": "DC4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass18",
        "description": "packages.pyright-internal.src.tests.samples.dataclass18",
        "peekOfCode": "class DC4:\n    a: int\nv4: Hashable = DC4(0)\n@dataclass(eq=True, unsafe_hash=True)\nclass DC5:\n    a: int\nv5: Hashable = DC5(0)\n@dataclass(eq=True)\nclass DC6:\n    a: int",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass18",
        "documentation": {}
    },
    {
        "label": "DC5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass18",
        "description": "packages.pyright-internal.src.tests.samples.dataclass18",
        "peekOfCode": "class DC5:\n    a: int\nv5: Hashable = DC5(0)\n@dataclass(eq=True)\nclass DC6:\n    a: int\n    def __hash__(self) -> int:\n        return 0\nv6: Hashable = DC6(0)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass18",
        "documentation": {}
    },
    {
        "label": "DC6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass18",
        "description": "packages.pyright-internal.src.tests.samples.dataclass18",
        "peekOfCode": "class DC6:\n    a: int\n    def __hash__(self) -> int:\n        return 0\nv6: Hashable = DC6(0)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass18",
        "documentation": {}
    },
    {
        "label": "MyDescriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass19",
        "description": "packages.pyright-internal.src.tests.samples.dataclass19",
        "peekOfCode": "class MyDescriptor:\n    @overload\n    def __get__(self, __obj: None, __owner: Any) -> \"MyDescriptor\":\n        ...\n    @overload\n    def __get__(self, __obj: object, __owner: Any) -> int:\n        ...\n    def __get__(self, __obj: object | None, __owner: Any) -> \"int | MyDescriptor\":\n        if __obj is None:\n            return self",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass19",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass19",
        "description": "packages.pyright-internal.src.tests.samples.dataclass19",
        "peekOfCode": "class Foo:\n    y: MyDescriptor = MyDescriptor()\nf1 = Foo(3)\nreveal_type(f1.y, expected_text=\"int\")\nreveal_type(Foo.y, expected_text=\"MyDescriptor\")\n# This should generate an error.\nf2 = Foo(\"hi\")\nf3 = Foo()\nreveal_type(f3.y, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass19",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass19",
        "description": "packages.pyright-internal.src.tests.samples.dataclass19",
        "peekOfCode": "f1 = Foo(3)\nreveal_type(f1.y, expected_text=\"int\")\nreveal_type(Foo.y, expected_text=\"MyDescriptor\")\n# This should generate an error.\nf2 = Foo(\"hi\")\nf3 = Foo()\nreveal_type(f3.y, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass19",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass19",
        "description": "packages.pyright-internal.src.tests.samples.dataclass19",
        "peekOfCode": "f2 = Foo(\"hi\")\nf3 = Foo()\nreveal_type(f3.y, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass19",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass19",
        "description": "packages.pyright-internal.src.tests.samples.dataclass19",
        "peekOfCode": "f3 = Foo()\nreveal_type(f3.y, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass19",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass2",
        "description": "packages.pyright-internal.src.tests.samples.dataclass2",
        "peekOfCode": "class C:\n    str_to_int: Callable[[str], int] = f\nc = C()\nreveal_type(c.str_to_int, expected_text=\"(str) -> int\")\nc.str_to_int = decorate(f)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass2",
        "documentation": {}
    },
    {
        "label": "decorate",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass2",
        "description": "packages.pyright-internal.src.tests.samples.dataclass2",
        "peekOfCode": "def decorate(arg: CallableT) -> CallableT:\n    return arg\ndef f(s: str) -> int:\n    return int(s)\n@dataclass\nclass C:\n    str_to_int: Callable[[str], int] = f\nc = C()\nreveal_type(c.str_to_int, expected_text=\"(str) -> int\")\nc.str_to_int = decorate(f)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass2",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass2",
        "description": "packages.pyright-internal.src.tests.samples.dataclass2",
        "peekOfCode": "def f(s: str) -> int:\n    return int(s)\n@dataclass\nclass C:\n    str_to_int: Callable[[str], int] = f\nc = C()\nreveal_type(c.str_to_int, expected_text=\"(str) -> int\")\nc.str_to_int = decorate(f)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass2",
        "documentation": {}
    },
    {
        "label": "CallableT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass2",
        "description": "packages.pyright-internal.src.tests.samples.dataclass2",
        "peekOfCode": "CallableT = TypeVar(\"CallableT\", bound=Callable[..., Any])\ndef decorate(arg: CallableT) -> CallableT:\n    return arg\ndef f(s: str) -> int:\n    return int(s)\n@dataclass\nclass C:\n    str_to_int: Callable[[str], int] = f\nc = C()\nreveal_type(c.str_to_int, expected_text=\"(str) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass2",
        "description": "packages.pyright-internal.src.tests.samples.dataclass2",
        "peekOfCode": "c = C()\nreveal_type(c.str_to_int, expected_text=\"(str) -> int\")\nc.str_to_int = decorate(f)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass2",
        "documentation": {}
    },
    {
        "label": "c.str_to_int",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass2",
        "description": "packages.pyright-internal.src.tests.samples.dataclass2",
        "peekOfCode": "c.str_to_int = decorate(f)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "class A(Generic[_T]):\n    ...\nclass Desc(Generic[_T]):\n    @overload\n    def __get__(self, instance: None, owner: Any) -> A[_T]:\n        ...\n    @overload\n    def __get__(self, instance: object, owner: Any) -> _T:\n        ...\n    def __get__(self, instance: Optional[object], owner: Any) -> Union[A[_T], _T]:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "Desc",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "class Desc(Generic[_T]):\n    @overload\n    def __get__(self, instance: None, owner: Any) -> A[_T]:\n        ...\n    @overload\n    def __get__(self, instance: object, owner: Any) -> _T:\n        ...\n    def __get__(self, instance: Optional[object], owner: Any) -> Union[A[_T], _T]:\n        ...\n@dataclass_transform(field_specifiers=(Desc[Any],))",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "class B:\n    x: Desc[int]\n    y: Desc[str]\n    z: Desc[str] = Desc()\n@dataclass\nclass C:\n    x: Desc[int]\n    y: Desc[str]\n    z: Desc[str] = Desc()\nreveal_type(B.x, expected_text=\"A[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "class C:\n    x: Desc[int]\n    y: Desc[str]\n    z: Desc[str] = Desc()\nreveal_type(B.x, expected_text=\"A[int]\")\nreveal_type(B.y, expected_text=\"A[str]\")\nreveal_type(B.z, expected_text=\"A[str]\")\nreveal_type(C.x, expected_text=\"A[int]\")\nreveal_type(C.y, expected_text=\"A[str]\")\nreveal_type(C.z, expected_text=\"A[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "dataclass_like",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "def dataclass_like(\n    *,\n    init: bool = True,\n    repr: bool = True,  # noqa: A002\n    eq: bool = True,\n    order: bool = False,\n    unsafe_hash: bool = False,\n) -> Callable[[Type[_T]], Type[_T]]:\n    ...\n@dataclass_like()",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass A(Generic[_T]):\n    ...\nclass Desc(Generic[_T]):\n    @overload\n    def __get__(self, instance: None, owner: Any) -> A[_T]:\n        ...\n    @overload\n    def __get__(self, instance: object, owner: Any) -> _T:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "b = B(Desc(), Desc(), Desc())\nreveal_type(b.x, expected_text=\"int\")\nreveal_type(b.y, expected_text=\"str\")\nreveal_type(b.z, expected_text=\"str\")\nc = C(Desc(), Desc(), Desc())\nreveal_type(c.x, expected_text=\"int\")\nreveal_type(c.y, expected_text=\"str\")\nreveal_type(c.z, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass20",
        "description": "packages.pyright-internal.src.tests.samples.dataclass20",
        "peekOfCode": "c = C(Desc(), Desc(), Desc())\nreveal_type(c.x, expected_text=\"int\")\nreveal_type(c.y, expected_text=\"str\")\nreveal_type(c.z, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass20",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass21",
        "description": "packages.pyright-internal.src.tests.samples.dataclass21",
        "peekOfCode": "class MyClass:\n    id: int\n    x: int = field()\n    # This should generate an error because it will result in a runtime exception\n    y = field()",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass21",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass22",
        "description": "packages.pyright-internal.src.tests.samples.dataclass22",
        "peekOfCode": "class ClassA:\n    a: int\n    b: str\n    def foo(self):\n        self.b: str = \"\"\nClassA(1, \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass22",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass23",
        "description": "packages.pyright-internal.src.tests.samples.dataclass23",
        "peekOfCode": "class ClassA:\n    test: \"C\"\n@dataclass\nclass ClassB:\n    children: \"C\"\n    def test(self):\n        for child in self.children:\n            reveal_type(child, expected_text=\"ClassB\")\nC = List[ClassB]",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass23",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass23",
        "description": "packages.pyright-internal.src.tests.samples.dataclass23",
        "peekOfCode": "class ClassB:\n    children: \"C\"\n    def test(self):\n        for child in self.children:\n            reveal_type(child, expected_text=\"ClassB\")\nC = List[ClassB]",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass23",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass23",
        "description": "packages.pyright-internal.src.tests.samples.dataclass23",
        "peekOfCode": "C = List[ClassB]",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass23",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass24",
        "description": "packages.pyright-internal.src.tests.samples.dataclass24",
        "peekOfCode": "class B(C):\n    def __init__(self, x: int):\n        pass\n@dataclass\nclass A(B):\n    color: str\nreveal_type(A.__init__, expected_text=\"(self: A, *args: Any, **kwargs: Any) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass24",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass24",
        "description": "packages.pyright-internal.src.tests.samples.dataclass24",
        "peekOfCode": "class A(B):\n    color: str\nreveal_type(A.__init__, expected_text=\"(self: A, *args: Any, **kwargs: Any) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass24",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass24",
        "description": "packages.pyright-internal.src.tests.samples.dataclass24",
        "peekOfCode": "C = abc.ABC if random() else object\nclass B(C):\n    def __init__(self, x: int):\n        pass\n@dataclass\nclass A(B):\n    color: str\nreveal_type(A.__init__, expected_text=\"(self: A, *args: Any, **kwargs: Any) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass24",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass3",
        "description": "packages.pyright-internal.src.tests.samples.dataclass3",
        "peekOfCode": "class Parent(NamedTuple):\n    pass\nclass DataTuple2(Parent):\n    id: int\n# This should generate an error because DataTuple2 isn't considered\n# a data class and won't have the associated __new__ or __init__\n# method defined.\ndata = DataTuple2(id=1)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass3",
        "documentation": {}
    },
    {
        "label": "DataTuple2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass3",
        "description": "packages.pyright-internal.src.tests.samples.dataclass3",
        "peekOfCode": "class DataTuple2(Parent):\n    id: int\n# This should generate an error because DataTuple2 isn't considered\n# a data class and won't have the associated __new__ or __init__\n# method defined.\ndata = DataTuple2(id=1)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass3",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass3",
        "description": "packages.pyright-internal.src.tests.samples.dataclass3",
        "peekOfCode": "data = DataTuple2(id=1)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass3",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "class Bar:\n    bbb: int\n    ccc: str\n    aaa: str = \"string\"\nbar1 = Bar(bbb=5, ccc=\"hello\")\nbar2 = Bar(5, \"hello\")\nbar3 = Bar(5, \"hello\", \"hello2\")\nprint(bar3.bbb)\nprint(bar3.ccc)\nprint(bar3.aaa)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "Baz1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "class Baz1:\n    bbb: int\n    aaa: str = \"string\"\n    # This should generate an error because variables\n    # with no default cannot come after those with\n    # defaults.\n    ccc: str\n    def __init__(self) -> None:\n        pass\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "Baz2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "class Baz2:\n    aaa: str\n    ddd: InitVar[int] = 3\n@dataclass(init=False)\nclass Baz3:\n    bbb: int\n    aaa: str = \"string\"\n    # This should not generate an error because\n    # the ordering requirement is not enforced when\n    # init=False.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "Baz3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "class Baz3:\n    bbb: int\n    aaa: str = \"string\"\n    # This should not generate an error because\n    # the ordering requirement is not enforced when\n    # init=False.\n    ccc: str",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar1 = Bar(bbb=5, ccc=\"hello\")\nbar2 = Bar(5, \"hello\")\nbar3 = Bar(5, \"hello\", \"hello2\")\nprint(bar3.bbb)\nprint(bar3.ccc)\nprint(bar3.aaa)\n# This should generate an error because ddd\n# isn't a declared value.\nbar = Bar(bbb=5, ddd=5, ccc=\"hello\")\n# This should generate an error because the",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar2 = Bar(5, \"hello\")\nbar3 = Bar(5, \"hello\", \"hello2\")\nprint(bar3.bbb)\nprint(bar3.ccc)\nprint(bar3.aaa)\n# This should generate an error because ddd\n# isn't a declared value.\nbar = Bar(bbb=5, ddd=5, ccc=\"hello\")\n# This should generate an error because the\n# parameter types don't match.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar3 = Bar(5, \"hello\", \"hello2\")\nprint(bar3.bbb)\nprint(bar3.ccc)\nprint(bar3.aaa)\n# This should generate an error because ddd\n# isn't a declared value.\nbar = Bar(bbb=5, ddd=5, ccc=\"hello\")\n# This should generate an error because the\n# parameter types don't match.\nbar = Bar(\"hello\", \"goodbye\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar = Bar(bbb=5, ddd=5, ccc=\"hello\")\n# This should generate an error because the\n# parameter types don't match.\nbar = Bar(\"hello\", \"goodbye\")\n# This should generate an error because a parameter\n# is missing.\nbar = [Bar(2)]\n# This should generate an error because there are\n# too many parameters.\nbar = Bar(2, \"hello\", \"hello\", 4)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar = Bar(\"hello\", \"goodbye\")\n# This should generate an error because a parameter\n# is missing.\nbar = [Bar(2)]\n# This should generate an error because there are\n# too many parameters.\nbar = Bar(2, \"hello\", \"hello\", 4)\n@dataclass\nclass Baz1:\n    bbb: int",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar = [Bar(2)]\n# This should generate an error because there are\n# too many parameters.\nbar = Bar(2, \"hello\", \"hello\", 4)\n@dataclass\nclass Baz1:\n    bbb: int\n    aaa: str = \"string\"\n    # This should generate an error because variables\n    # with no default cannot come after those with",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass4",
        "description": "packages.pyright-internal.src.tests.samples.dataclass4",
        "peekOfCode": "bar = Bar(2, \"hello\", \"hello\", 4)\n@dataclass\nclass Baz1:\n    bbb: int\n    aaa: str = \"string\"\n    # This should generate an error because variables\n    # with no default cannot come after those with\n    # defaults.\n    ccc: str\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "class A:\n    x: int\n    x_squared: int\n    def __init__(self, x: int):\n        self.x = x\n        self.x_squared = x ** 2\na = A(3)\n@dataclass(init=True)\nclass B:\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "class B:\n    x: int\n    x_squared: int\n    def __init__(self, x: int):\n        self.x = x\n        self.x_squared = x ** 2\nb = B(3)\n@dataclass()\nclass C:\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "class C:\n    x: int\n    x_squared: int\n    def __init__(self, x: int):\n        self.x = x\n        self.x_squared = x ** 2\nc = C(3)\n@dataclass(init=False)\nclass D:\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "class D:\n    x: int\n    x_squared: int\n# This should generate an error because there is no\n# override __init__ method and no synthesized __init__.\nd = D(3)\n@dataclass(eq=False)\nclass E:\n    x: int\n    def __eq__(self, x: \"E\") -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "class E:\n    x: int\n    def __eq__(self, x: \"E\") -> float:\n        return 1.23\n    def __lt__(self, x: \"E\") -> str:\n        return \"\"\nfoo1 = E(3) == E(3)\nreveal_type(foo1, expected_text=\"float\")\nfoo2 = E(3) < E(3)\nreveal_type(foo2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "class F:\n    x: int\nfoo3 = F(3) < F(3)\nreveal_type(foo3, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "a = A(3)\n@dataclass(init=True)\nclass B:\n    x: int\n    x_squared: int\n    def __init__(self, x: int):\n        self.x = x\n        self.x_squared = x ** 2\nb = B(3)\n@dataclass()",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "b = B(3)\n@dataclass()\nclass C:\n    x: int\n    x_squared: int\n    def __init__(self, x: int):\n        self.x = x\n        self.x_squared = x ** 2\nc = C(3)\n@dataclass(init=False)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "c = C(3)\n@dataclass(init=False)\nclass D:\n    x: int\n    x_squared: int\n# This should generate an error because there is no\n# override __init__ method and no synthesized __init__.\nd = D(3)\n@dataclass(eq=False)\nclass E:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "d = D(3)\n@dataclass(eq=False)\nclass E:\n    x: int\n    def __eq__(self, x: \"E\") -> float:\n        return 1.23\n    def __lt__(self, x: \"E\") -> str:\n        return \"\"\nfoo1 = E(3) == E(3)\nreveal_type(foo1, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "foo1 = E(3) == E(3)\nreveal_type(foo1, expected_text=\"float\")\nfoo2 = E(3) < E(3)\nreveal_type(foo2, expected_text=\"str\")\n@dataclass(order=True)\nclass F:\n    x: int\nfoo3 = F(3) < F(3)\nreveal_type(foo3, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "foo2 = E(3) < E(3)\nreveal_type(foo2, expected_text=\"str\")\n@dataclass(order=True)\nclass F:\n    x: int\nfoo3 = F(3) < F(3)\nreveal_type(foo3, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass5",
        "description": "packages.pyright-internal.src.tests.samples.dataclass5",
        "peekOfCode": "foo3 = F(3) < F(3)\nreveal_type(foo3, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass5",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass6",
        "description": "packages.pyright-internal.src.tests.samples.dataclass6",
        "peekOfCode": "class A:\n    x: int\n@dataclass(init=False)\nclass B(A):\n    y: int\n    def __init__(self, a: A, y: int):\n        self.__dict__ = a.__dict__\na = A(3)\nb = B(a, 5)\n# This should generate an error because there is an extra parameter",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass6",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass6",
        "description": "packages.pyright-internal.src.tests.samples.dataclass6",
        "peekOfCode": "class B(A):\n    y: int\n    def __init__(self, a: A, y: int):\n        self.__dict__ = a.__dict__\na = A(3)\nb = B(a, 5)\n# This should generate an error because there is an extra parameter\na = A(3, 4)\n# This should generate an error because there is one too few parameters\nb = B(a)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass6",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass6",
        "description": "packages.pyright-internal.src.tests.samples.dataclass6",
        "peekOfCode": "a = A(3)\nb = B(a, 5)\n# This should generate an error because there is an extra parameter\na = A(3, 4)\n# This should generate an error because there is one too few parameters\nb = B(a)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass6",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass6",
        "description": "packages.pyright-internal.src.tests.samples.dataclass6",
        "peekOfCode": "b = B(a, 5)\n# This should generate an error because there is an extra parameter\na = A(3, 4)\n# This should generate an error because there is one too few parameters\nb = B(a)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass6",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass6",
        "description": "packages.pyright-internal.src.tests.samples.dataclass6",
        "peekOfCode": "a = A(3, 4)\n# This should generate an error because there is one too few parameters\nb = B(a)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass6",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass6",
        "description": "packages.pyright-internal.src.tests.samples.dataclass6",
        "peekOfCode": "b = B(a)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass6",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class C1:\n    ...\nclass C2:\n    ...\nclass C3:\n    ...\n@dataclass\nclass DC1:\n    aa: C1\n    bb: C2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "C2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class C2:\n    ...\nclass C3:\n    ...\n@dataclass\nclass DC1:\n    aa: C1\n    bb: C2\n    cc: C3\nclass NonDC2:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "C3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class C3:\n    ...\n@dataclass\nclass DC1:\n    aa: C1\n    bb: C2\n    cc: C3\nclass NonDC2:\n    ff: int\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC1:\n    aa: C1\n    bb: C2\n    cc: C3\nclass NonDC2:\n    ff: int\n@dataclass\nclass DC2(NonDC2, DC1):\n    ee: C2\n    aa: C2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "NonDC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class NonDC2:\n    ff: int\n@dataclass\nclass DC2(NonDC2, DC1):\n    ee: C2\n    aa: C2\n    dd: C2\ndc2_1 = DC2(C2(), C2(), C3(), C2(), C2())\n# This should generate an error because the type\n# of parameter aa has been replaced with type C1.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC2(NonDC2, DC1):\n    ee: C2\n    aa: C2\n    dd: C2\ndc2_1 = DC2(C2(), C2(), C3(), C2(), C2())\n# This should generate an error because the type\n# of parameter aa has been replaced with type C1.\ndc2_2 = DC2(C1(), C2(), C3(), C2(), C2())\ndc2_3 = DC2(ee=C2(), dd=C2(), aa=C2(), bb=C2(), cc=C3())\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC3:\n    aa: C1\n    bb: C2 = C2()\n    cc: C3 = C3()\n@dataclass\nclass DC4(DC3):\n    # This should generate an error because\n    # previous parameters have default values.\n    dd: C1\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC4(DC3):\n    # This should generate an error because\n    # previous parameters have default values.\n    dd: C1\n@dataclass\nclass DC5(DC3):\n    # This should not generate an error because\n    # aa replaces aa in DC3, and it's ordered\n    # before the params with default values.\n    aa: C2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC5(DC3):\n    # This should not generate an error because\n    # aa replaces aa in DC3, and it's ordered\n    # before the params with default values.\n    aa: C2\n@dataclass\nclass DC6:\n    a: int = 0\n@dataclass\nclass DC7(DC6):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC6:\n    a: int = 0\n@dataclass\nclass DC7(DC6):\n    a: int\n    # This should generate an error because the default\n    # value for \"a\" is inherited from the base class.\n    b: str\n@dataclass\nclass DC8:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC7",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC7(DC6):\n    a: int\n    # This should generate an error because the default\n    # value for \"a\" is inherited from the base class.\n    b: str\n@dataclass\nclass DC8:\n    a: int = field(default=0)\n@dataclass\nclass DC9(DC8):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC8",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC8:\n    a: int = field(default=0)\n@dataclass\nclass DC9(DC8):\n    a: int\n    # This should generate an error because the default\n    # value for \"a\" is inherited from the base class.\n    b: str",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "DC9",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "class DC9(DC8):\n    a: int\n    # This should generate an error because the default\n    # value for \"a\" is inherited from the base class.\n    b: str",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "dc2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "dc2_1 = DC2(C2(), C2(), C3(), C2(), C2())\n# This should generate an error because the type\n# of parameter aa has been replaced with type C1.\ndc2_2 = DC2(C1(), C2(), C3(), C2(), C2())\ndc2_3 = DC2(ee=C2(), dd=C2(), aa=C2(), bb=C2(), cc=C3())\n@dataclass\nclass DC3:\n    aa: C1\n    bb: C2 = C2()\n    cc: C3 = C3()",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "dc2_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "dc2_2 = DC2(C1(), C2(), C3(), C2(), C2())\ndc2_3 = DC2(ee=C2(), dd=C2(), aa=C2(), bb=C2(), cc=C3())\n@dataclass\nclass DC3:\n    aa: C1\n    bb: C2 = C2()\n    cc: C3 = C3()\n@dataclass\nclass DC4(DC3):\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "dc2_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass7",
        "description": "packages.pyright-internal.src.tests.samples.dataclass7",
        "peekOfCode": "dc2_3 = DC2(ee=C2(), dd=C2(), aa=C2(), bb=C2(), cc=C3())\n@dataclass\nclass DC3:\n    aa: C1\n    bb: C2 = C2()\n    cc: C3 = C3()\n@dataclass\nclass DC4(DC3):\n    # This should generate an error because\n    # previous parameters have default values.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass7",
        "documentation": {}
    },
    {
        "label": "BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass8",
        "description": "packages.pyright-internal.src.tests.samples.dataclass8",
        "peekOfCode": "class BaseClass:\n    my_ref: \"ReferredClass\"\n@dataclass\nclass SubClass(BaseClass):\n    pass\n@dataclass\nclass ReferredClass:\n    sub_class: SubClass\n    def trigger_bug(self):\n        SubClass(my_ref=self)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass8",
        "documentation": {}
    },
    {
        "label": "SubClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass8",
        "description": "packages.pyright-internal.src.tests.samples.dataclass8",
        "peekOfCode": "class SubClass(BaseClass):\n    pass\n@dataclass\nclass ReferredClass:\n    sub_class: SubClass\n    def trigger_bug(self):\n        SubClass(my_ref=self)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass8",
        "documentation": {}
    },
    {
        "label": "ReferredClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass8",
        "description": "packages.pyright-internal.src.tests.samples.dataclass8",
        "peekOfCode": "class ReferredClass:\n    sub_class: SubClass\n    def trigger_bug(self):\n        SubClass(my_ref=self)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass8",
        "documentation": {}
    },
    {
        "label": "IsDataclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass9",
        "description": "packages.pyright-internal.src.tests.samples.dataclass9",
        "peekOfCode": "class IsDataclass(Protocol):\n    # checking for this attribute seems to currently be\n    # the most reliable way to ascertain that something is a dataclass\n    __dataclass_fields__: Dict[str, Any]\ndef dataclass_only(x: IsDataclass):\n    ...  # do something that only makes sense with a dataclass\n@dataclass\nclass A:\n    pass\ndataclass_only(A())",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass9",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass9",
        "description": "packages.pyright-internal.src.tests.samples.dataclass9",
        "peekOfCode": "class A:\n    pass\ndataclass_only(A())",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass9",
        "documentation": {}
    },
    {
        "label": "dataclass_only",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclass9",
        "description": "packages.pyright-internal.src.tests.samples.dataclass9",
        "peekOfCode": "def dataclass_only(x: IsDataclass):\n    ...  # do something that only makes sense with a dataclass\n@dataclass\nclass A:\n    pass\ndataclass_only(A())",
        "detail": "packages.pyright-internal.src.tests.samples.dataclass9",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "peekOfCode": "class A:\n    a: InitVar[int]\n    b: InitVar[str]\n    c: InitVar[bool]\n    def __post_init__(self, x: float, y: str, z: int, xx: int = 3) -> None:\n        ...\n@dataclass\nclass B:\n    items: list[int]\n    # This should generate an error because the number of InitVars is zero.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "peekOfCode": "class B:\n    items: list[int]\n    # This should generate an error because the number of InitVars is zero.\n    def __post_init__(self, x: list[int]) -> None:\n        ...\n@dataclass\nclass C:\n    iterable: InitVar[Iterable[int]]\n    items: list[int] = field(init=False)\n    # This should generate an error because the number of InitVars is 1.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "peekOfCode": "class C:\n    iterable: InitVar[Iterable[int]]\n    items: list[int] = field(init=False)\n    # This should generate an error because the number of InitVars is 1.\n    def __post_init__(self) -> None:\n        ...\n@dataclass\nclass D:\n    iterable: InitVar[Iterable[int]]\n    # This should generate an error because the type is incompatible.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "peekOfCode": "class D:\n    iterable: InitVar[Iterable[int]]\n    # This should generate an error because the type is incompatible.\n    def __post_init__(self, iterable: Iterable[str]) -> None:\n        ...\n@dataclass\nclass E:\n    _name: InitVar[str] = field()\n    name: str = field(init=False)\n    def __post_init__(self, _name: str):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "peekOfCode": "class E:\n    _name: InitVar[str] = field()\n    name: str = field(init=False)\n    def __post_init__(self, _name: str):\n        ...\n@dataclass\nclass F(E):\n    _age: InitVar[int] = field()\n    age: int = field(init=False)\n    def __post_init__(self, _name: str, _age: int):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "peekOfCode": "class F(E):\n    _age: InitVar[int] = field()\n    age: int = field(init=False)\n    def __post_init__(self, _name: str, _age: int):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassPostInit1",
        "documentation": {}
    },
    {
        "label": "Customer1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "class Customer1:\n    id: int\n    name: str\n@create_model\nclass Customer2:\n    id: int\n    name: str\n@create_model\nclass Customer2Subclass(Customer2, frozen=True):\n    salary: float",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "Customer2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "class Customer2:\n    id: int\n    name: str\n@create_model\nclass Customer2Subclass(Customer2, frozen=True):\n    salary: float\nc1_1 = Customer1(id=3, name=\"Sue\")\nc1_1.id = 4\nc1_2 = Customer1(3, \"Sue\")\nc1_2.name = \"Susan\"",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "Customer2Subclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "class Customer2Subclass(Customer2, frozen=True):\n    salary: float\nc1_1 = Customer1(id=3, name=\"Sue\")\nc1_1.id = 4\nc1_2 = Customer1(3, \"Sue\")\nc1_2.name = \"Susan\"\n# This should generate an error because of a type mismatch.\nc1_2.name = 3\n# This should generate an error because comparison methods are\n# not synthesized.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "create_model",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "def create_model(cls: _T) -> _T:\n    ...\n@overload\n@dataclass_transform(kw_only_default=True, order_default=True)\ndef create_model(\n    *,\n    frozen: bool = False,\n    kw_only: bool = True,\n    order: bool = True,\n) -> Callable[[_T], _T]:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "create_model",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "def create_model(\n    *,\n    frozen: bool = False,\n    kw_only: bool = True,\n    order: bool = True,\n) -> Callable[[_T], _T]:\n    ...\ndef create_model(*args: Any, **kwargs: Any) -> Any:\n    ...\n@create_model(kw_only=False, order=False)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "create_model",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "def create_model(*args: Any, **kwargs: Any) -> Any:\n    ...\n@create_model(kw_only=False, order=False)\nclass Customer1:\n    id: int\n    name: str\n@create_model\nclass Customer2:\n    id: int\n    name: str",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "_T = TypeVar(\"_T\")\n@overload\n@dataclass_transform(kw_only_default=True, order_default=True)\ndef create_model(cls: _T) -> _T:\n    ...\n@overload\n@dataclass_transform(kw_only_default=True, order_default=True)\ndef create_model(\n    *,\n    frozen: bool = False,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c1_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c1_1 = Customer1(id=3, name=\"Sue\")\nc1_1.id = 4\nc1_2 = Customer1(3, \"Sue\")\nc1_2.name = \"Susan\"\n# This should generate an error because of a type mismatch.\nc1_2.name = 3\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\n# This should generate an error because salary is not",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c1_1.id",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c1_1.id = 4\nc1_2 = Customer1(3, \"Sue\")\nc1_2.name = \"Susan\"\n# This should generate an error because of a type mismatch.\nc1_2.name = 3\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\n# This should generate an error because salary is not\n# a defined field.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c1_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c1_2 = Customer1(3, \"Sue\")\nc1_2.name = \"Susan\"\n# This should generate an error because of a type mismatch.\nc1_2.name = 3\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\n# This should generate an error because salary is not\n# a defined field.\nc1_3 = Customer1(id=3, name=\"Sue\", salary=40000)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c1_2.name",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c1_2.name = \"Susan\"\n# This should generate an error because of a type mismatch.\nc1_2.name = 3\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\n# This should generate an error because salary is not\n# a defined field.\nc1_3 = Customer1(id=3, name=\"Sue\", salary=40000)\nc2_1 = Customer2(id=0, name=\"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c1_2.name",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c1_2.name = 3\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\n# This should generate an error because salary is not\n# a defined field.\nc1_3 = Customer1(id=3, name=\"Sue\", salary=40000)\nc2_1 = Customer2(id=0, name=\"John\")\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "v1 = c1_1 < c1_2\n# This should generate an error because salary is not\n# a defined field.\nc1_3 = Customer1(id=3, name=\"Sue\", salary=40000)\nc2_1 = Customer2(id=0, name=\"John\")\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_2 = Customer2(0, \"John\")\nv2 = c2_1 < c2_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c1_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c1_3 = Customer1(id=3, name=\"Sue\", salary=40000)\nc2_1 = Customer2(id=0, name=\"John\")\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_2 = Customer2(0, \"John\")\nv2 = c2_1 < c2_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c2_1 = Customer2(id=0, name=\"John\")\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_2 = Customer2(0, \"John\")\nv2 = c2_1 < c2_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "c2_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "c2_2 = Customer2(0, \"John\")\nv2 = c2_1 < c2_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "peekOfCode": "v2 = c2_1 < c2_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform1",
        "documentation": {}
    },
    {
        "label": "ModelField",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "class ModelField:\n    def __init__(self, *, init: bool = True, default: Optional[Any] = None) -> None:\n        ...\ndef model_field(\n    *, init: bool = True, default: Optional[Any] = None, alias: Optional[str] = None\n) -> Any:\n    ...\n@dataclass_transform(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "ModelMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "class ModelMeta(type):\n    not_a_field: str\n    def __init_subclass__(\n        cls,\n        *,\n        frozen: bool = False,\n        kw_only: bool = True,\n        order: bool = True,\n    ) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "class ModelBase(metaclass=ModelMeta):\n    ...\nclass Customer1(ModelBase, frozen=True):\n    id: int = model_field()\n    name: str = model_field()\n    name2: str = model_field(alias=\"other_name\", default=\"None\")\nclass Customer1Subclass(Customer1, frozen=False):\n    salary: float = model_field()\nclass Customer2(ModelBase, order=True):\n    id: int",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "Customer1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "class Customer1(ModelBase, frozen=True):\n    id: int = model_field()\n    name: str = model_field()\n    name2: str = model_field(alias=\"other_name\", default=\"None\")\nclass Customer1Subclass(Customer1, frozen=False):\n    salary: float = model_field()\nclass Customer2(ModelBase, order=True):\n    id: int\n    name: str = model_field(default=\"None\")\nc1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "Customer1Subclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "class Customer1Subclass(Customer1, frozen=False):\n    salary: float = model_field()\nclass Customer2(ModelBase, order=True):\n    id: int\n    name: str = model_field(default=\"None\")\nc1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")\n# This should generate an error because the class is frozen.\nc1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "Customer2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "class Customer2(ModelBase, order=True):\n    id: int\n    name: str = model_field(default=\"None\")\nc1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")\n# This should generate an error because the class is frozen.\nc1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "model_field",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "def model_field(\n    *, init: bool = True, default: Optional[Any] = None, alias: Optional[str] = None\n) -> Any:\n    ...\n@dataclass_transform(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),\n)\nclass ModelMeta(type):\n    not_a_field: str",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass ModelField:\n    def __init__(self, *, init: bool = True, default: Optional[Any] = None) -> None:\n        ...\ndef model_field(\n    *, init: bool = True, default: Optional[Any] = None, alias: Optional[str] = None\n) -> Any:\n    ...\n@dataclass_transform(\n    kw_only_default=True,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c1_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")\n# This should generate an error because the class is frozen.\nc1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c1_1.id",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c1_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c1_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "v1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c2_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "v2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "c2_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "peekOfCode": "c2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform2",
        "documentation": {}
    },
    {
        "label": "ModelField",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class ModelField:\n    def __init__(self, *, init: bool = True, default: Optional[Any] = None) -> None:\n        ...\ndef model_field(\n    *, init: bool = True, default: Optional[Any] = None, alias: Optional[str] = None\n) -> Any:\n    ...\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "ModelBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class ModelBase:\n    not_a_field: str\n    def __init_subclass__(\n        cls,\n        *,\n        frozen: bool = False,\n        kw_only: bool = True,\n        order: bool = True,\n    ) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "Customer1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class Customer1(ModelBase, frozen=True):\n    id: int = model_field()\n    name: str = model_field()\n    name2: str = model_field(alias=\"other_name\", default=\"None\")\nclass Customer1Subclass(Customer1, frozen=False):\n    salary: float = model_field()\nclass Customer2(ModelBase, order=True):\n    id: int\n    name: str = model_field(default=\"None\")\nc1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "Customer1Subclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class Customer1Subclass(Customer1, frozen=False):\n    salary: float = model_field()\nclass Customer2(ModelBase, order=True):\n    id: int\n    name: str = model_field(default=\"None\")\nc1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")\n# This should generate an error because the class is frozen.\nc1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "Customer2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class Customer2(ModelBase, order=True):\n    id: int\n    name: str = model_field(default=\"None\")\nc1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")\n# This should generate an error because the class is frozen.\nc1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "GenericModelBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class GenericModelBase(Generic[_T]):\n    not_a_field: _T\n    def __init_subclass__(\n        cls,\n        *,\n        frozen: bool = False,\n        kw_only: bool = True,\n        order: bool = True,\n    ) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "GenericCustomer",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "class GenericCustomer(GenericModelBase[int]):\n    id: int = model_field()\ngc_1 = GenericCustomer(id=3)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "model_field",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "def model_field(\n    *, init: bool = True, default: Optional[Any] = None, alias: Optional[str] = None\n) -> Any:\n    ...\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),\n)\nclass ModelBase:\n    not_a_field: str",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef __dataclass_transform__(\n    *,\n    eq_default: bool = True,\n    order_default: bool = False,\n    kw_only_default: bool = False,\n    field_specifiers: Tuple[Union[type, Callable[..., Any]], ...] = (()),\n) -> Callable[[_T], _T]:\n    return lambda a: a\nclass ModelField:",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c1_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c1_1 = Customer1(id=3, name=\"Sue\", other_name=\"Susan\")\n# This should generate an error because the class is frozen.\nc1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c1_1.id",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c1_1.id = 4\n# This should generate an error because the class is kw_only.\nc1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c1_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c1_2 = Customer1(3, \"Sue\")\n# This should generate an error because other_name is missing.\nc1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c1_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c1_3 = Customer1(id=3, name=\"John\")\n# This should generate an error because comparison methods are\n# not synthesized.\nv1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "v1 = c1_1 < c1_2\nc2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")\n_T = TypeVar(\"_T\")\n@__dataclass_transform__(\n    kw_only_default=True,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c2_1 = Customer2(id=0, name=\"John\")\nc2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")\n_T = TypeVar(\"_T\")\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c2_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c2_2 = Customer2(id=1)\nv2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")\n_T = TypeVar(\"_T\")\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),\n)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "v2 = c2_1 < c2_2\n# This should generate an error because Customer2 supports\n# keyword-only parameters for its constructor.\nc2_3 = Customer2(0, \"John\")\n_T = TypeVar(\"_T\")\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),\n)\nclass GenericModelBase(Generic[_T]):",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "c2_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "c2_3 = Customer2(0, \"John\")\n_T = TypeVar(\"_T\")\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),\n)\nclass GenericModelBase(Generic[_T]):\n    not_a_field: _T\n    def __init_subclass__(\n        cls,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "_T = TypeVar(\"_T\")\n@__dataclass_transform__(\n    kw_only_default=True,\n    field_specifiers=(ModelField, model_field),\n)\nclass GenericModelBase(Generic[_T]):\n    not_a_field: _T\n    def __init_subclass__(\n        cls,\n        *,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "gc_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "peekOfCode": "gc_1 = GenericCustomer(id=3)",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform3",
        "documentation": {}
    },
    {
        "label": "ModelField",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "class ModelField:\n    def __init__(\n        self,\n        *,\n        default: Optional[Any] = ...,\n        init: Optional[bool] = True,\n        **kwargs: Any,\n    ) -> None:\n        ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "CustomerModel",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "class CustomerModel:\n    id: int = field(resolver=lambda: 0)\n    name: str = field(default=\"Voldemort\")\nCustomerModel()\nCustomerModel(name=\"hi\")\n# This should generate an error because \"id\" is not\n# supposed to be part of the init function.\nCustomerModel(id=1, name=\"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "def field(\n    *,\n    default: Optional[str] = None,\n    resolver: Callable[[], Any],\n    init: Literal[False] = False,\n) -> Any:\n    ...\n@overload\ndef field(\n    *,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "def field(\n    *,\n    default: Optional[str] = None,\n    resolver: None = None,\n    init: Literal[True] = True,\n) -> Any:\n    ...\ndef field(\n    *,\n    default: Optional[str] = None,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "field",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "def field(\n    *,\n    default: Optional[str] = None,\n    resolver: Optional[Callable[[], Any]] = None,\n    init: bool = True,\n) -> Any:\n    ...\ndef __dataclass_transform__(\n    *,\n    eq_default: bool = True,",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "create_model",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "def create_model(*, init: bool = True) -> Callable[[Type[T]], Type[T]]:\n    ...\n@create_model()\nclass CustomerModel:\n    id: int = field(resolver=lambda: 0)\n    name: str = field(default=\"Voldemort\")\nCustomerModel()\nCustomerModel(name=\"hi\")\n# This should generate an error because \"id\" is not\n# supposed to be part of the init function.",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "description": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "peekOfCode": "T = TypeVar(\"T\")\nclass ModelField:\n    def __init__(\n        self,\n        *,\n        default: Optional[Any] = ...,\n        init: Optional[bool] = True,\n        **kwargs: Any,\n    ) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.dataclassTransform4",
        "documentation": {}
    },
    {
        "label": "Wrapper",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator1",
        "description": "packages.pyright-internal.src.tests.samples.decorator1",
        "peekOfCode": "class Wrapper:\n    def __init__(self, func):\n        self.func = func\n    def __get__(self, instance, owner):\n        return lambda **kwargs: self.func(instance, wrapped=True, **kwargs)\nclass Foo:\n    @Wrapper\n    def __init__(self, **kwargs):\n        print(f\"{kwargs}\")\nFoo(bar=3)",
        "detail": "packages.pyright-internal.src.tests.samples.decorator1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator1",
        "description": "packages.pyright-internal.src.tests.samples.decorator1",
        "peekOfCode": "class Foo:\n    @Wrapper\n    def __init__(self, **kwargs):\n        print(f\"{kwargs}\")\nFoo(bar=3)",
        "detail": "packages.pyright-internal.src.tests.samples.decorator1",
        "documentation": {}
    },
    {
        "label": "atomic",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator2",
        "description": "packages.pyright-internal.src.tests.samples.decorator2",
        "peekOfCode": "def atomic(__func: F) -> F:\n    ...\n@overload\ndef atomic(*, savepoint: bool = True) -> Callable[[F], F]:\n    ...\ndef atomic(\n    __func: Optional[Callable[..., None]] = None, *, savepoint: bool = True\n) -> Union[Callable[[], None], Callable[[Callable[[], None]], Callable[[], None]]]:\n    ...\n@atomic",
        "detail": "packages.pyright-internal.src.tests.samples.decorator2",
        "documentation": {}
    },
    {
        "label": "atomic",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator2",
        "description": "packages.pyright-internal.src.tests.samples.decorator2",
        "peekOfCode": "def atomic(*, savepoint: bool = True) -> Callable[[F], F]:\n    ...\ndef atomic(\n    __func: Optional[Callable[..., None]] = None, *, savepoint: bool = True\n) -> Union[Callable[[], None], Callable[[Callable[[], None]], Callable[[], None]]]:\n    ...\n@atomic\ndef func1() -> None:\n    ...\n@atomic(savepoint=False)",
        "detail": "packages.pyright-internal.src.tests.samples.decorator2",
        "documentation": {}
    },
    {
        "label": "atomic",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator2",
        "description": "packages.pyright-internal.src.tests.samples.decorator2",
        "peekOfCode": "def atomic(\n    __func: Optional[Callable[..., None]] = None, *, savepoint: bool = True\n) -> Union[Callable[[], None], Callable[[Callable[[], None]], Callable[[], None]]]:\n    ...\n@atomic\ndef func1() -> None:\n    ...\n@atomic(savepoint=False)\ndef func2() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.decorator2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator2",
        "description": "packages.pyright-internal.src.tests.samples.decorator2",
        "peekOfCode": "def func1() -> None:\n    ...\n@atomic(savepoint=False)\ndef func2() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.decorator2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator2",
        "description": "packages.pyright-internal.src.tests.samples.decorator2",
        "peekOfCode": "def func2() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.decorator2",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator2",
        "description": "packages.pyright-internal.src.tests.samples.decorator2",
        "peekOfCode": "F = TypeVar(\"F\", bound=Callable[[], None])\n@overload\ndef atomic(__func: F) -> F:\n    ...\n@overload\ndef atomic(*, savepoint: bool = True) -> Callable[[F], F]:\n    ...\ndef atomic(\n    __func: Optional[Callable[..., None]] = None, *, savepoint: bool = True\n) -> Union[Callable[[], None], Callable[[Callable[[], None]], Callable[[], None]]]:",
        "detail": "packages.pyright-internal.src.tests.samples.decorator2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator3",
        "description": "packages.pyright-internal.src.tests.samples.decorator3",
        "peekOfCode": "class Foo:\n    # This should generate an error if version < 3.9.\n    @my_decorators[0]\n    def my_static_method():\n        return 3\n    # This should generate an error if version < 3.9.\n    @my_decorators[1]\n    def my_class_method(cls):\n        return 3\n    # This should generate an error if version < 3.9.",
        "detail": "packages.pyright-internal.src.tests.samples.decorator3",
        "documentation": {}
    },
    {
        "label": "my_decorators",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator3",
        "description": "packages.pyright-internal.src.tests.samples.decorator3",
        "peekOfCode": "my_decorators = (staticmethod, classmethod, property)\nclass Foo:\n    # This should generate an error if version < 3.9.\n    @my_decorators[0]\n    def my_static_method():\n        return 3\n    # This should generate an error if version < 3.9.\n    @my_decorators[1]\n    def my_class_method(cls):\n        return 3",
        "detail": "packages.pyright-internal.src.tests.samples.decorator3",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator4",
        "description": "packages.pyright-internal.src.tests.samples.decorator4",
        "peekOfCode": "class Class2:\n    pass\ndef my_decorator(fn):\n    # This decorator returns a value that is\n    # inferred to be a union containing an Unknown type.\n    if fn:\n        return my_module.unknown\n    return Class2\n@my_decorator\nclass Class1:",
        "detail": "packages.pyright-internal.src.tests.samples.decorator4",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator4",
        "description": "packages.pyright-internal.src.tests.samples.decorator4",
        "peekOfCode": "class Class1:\n    def __init__(self, a, b, c):\n        pass\nv1 = Class1(1, 2, 3)\nreveal_type(v1, expected_text=\"Class1\")\n@my_decorator\ndef func1() -> int:\n    return 3\nv2 = func1()\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator4",
        "documentation": {}
    },
    {
        "label": "my_decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator4",
        "description": "packages.pyright-internal.src.tests.samples.decorator4",
        "peekOfCode": "def my_decorator(fn):\n    # This decorator returns a value that is\n    # inferred to be a union containing an Unknown type.\n    if fn:\n        return my_module.unknown\n    return Class2\n@my_decorator\nclass Class1:\n    def __init__(self, a, b, c):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.decorator4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator4",
        "description": "packages.pyright-internal.src.tests.samples.decorator4",
        "peekOfCode": "def func1() -> int:\n    return 3\nv2 = func1()\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator4",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator4",
        "description": "packages.pyright-internal.src.tests.samples.decorator4",
        "peekOfCode": "v1 = Class1(1, 2, 3)\nreveal_type(v1, expected_text=\"Class1\")\n@my_decorator\ndef func1() -> int:\n    return 3\nv2 = func1()\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator4",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator4",
        "description": "packages.pyright-internal.src.tests.samples.decorator4",
        "peekOfCode": "v2 = func1()\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator5",
        "description": "packages.pyright-internal.src.tests.samples.decorator5",
        "peekOfCode": "class Foo:\n    @simple_decorator\n    def method(self, var: str, kvar: str):\n        return\nreveal_type(Foo().method, expected_text=\"(var: str, kvar: str) -> None\")\nreveal_type(Foo.method, expected_text=\"(self: Foo, var: str, kvar: str) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator5",
        "documentation": {}
    },
    {
        "label": "simple_decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator5",
        "description": "packages.pyright-internal.src.tests.samples.decorator5",
        "peekOfCode": "def simple_decorator(method):\n    def wrapper(*args, **kw):\n        result = method(*args, **kw)\n        return result\n    return wrapper\n@simple_decorator\ndef function(var: str, kvar: str):\n    return\nreveal_type(function, expected_text=\"(var: str, kvar: str) -> None\")\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.decorator5",
        "documentation": {}
    },
    {
        "label": "function",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator5",
        "description": "packages.pyright-internal.src.tests.samples.decorator5",
        "peekOfCode": "def function(var: str, kvar: str):\n    return\nreveal_type(function, expected_text=\"(var: str, kvar: str) -> None\")\nclass Foo:\n    @simple_decorator\n    def method(self, var: str, kvar: str):\n        return\nreveal_type(Foo().method, expected_text=\"(var: str, kvar: str) -> None\")\nreveal_type(Foo.method, expected_text=\"(self: Foo, var: str, kvar: str) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator5",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator6",
        "description": "packages.pyright-internal.src.tests.samples.decorator6",
        "peekOfCode": "class Test:\n    def __init__(self):\n        self.test1(1, \"a\")\n        self.test2(\"hi\")\n    @staticmethod\n    @decorator\n    def test1(firstarg: int, secondarg: str) -> None:\n        print(secondarg)\n    @classmethod\n    @decorator",
        "detail": "packages.pyright-internal.src.tests.samples.decorator6",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator6",
        "description": "packages.pyright-internal.src.tests.samples.decorator6",
        "peekOfCode": "def decorator(func: Callable[[_T, str], None]) -> Callable[[_T, str], None]:\n    @functools.wraps(func)\n    def func_wrapper(firstarg: _T, secondarg: str) -> None:\n        return func(firstarg, secondarg)\n    return func_wrapper\nclass Test:\n    def __init__(self):\n        self.test1(1, \"a\")\n        self.test2(\"hi\")\n    @staticmethod",
        "detail": "packages.pyright-internal.src.tests.samples.decorator6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator6",
        "description": "packages.pyright-internal.src.tests.samples.decorator6",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef decorator(func: Callable[[_T, str], None]) -> Callable[[_T, str], None]:\n    @functools.wraps(func)\n    def func_wrapper(firstarg: _T, secondarg: str) -> None:\n        return func(firstarg, secondarg)\n    return func_wrapper\nclass Test:\n    def __init__(self):\n        self.test1(1, \"a\")\n        self.test2(\"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.decorator6",
        "documentation": {}
    },
    {
        "label": "ValueDecorated",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator7",
        "description": "packages.pyright-internal.src.tests.samples.decorator7",
        "peekOfCode": "class ValueDecorated(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n    def __call__(self) -> T:\n        return self._value",
        "detail": "packages.pyright-internal.src.tests.samples.decorator7",
        "documentation": {}
    },
    {
        "label": "decorate",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator7",
        "description": "packages.pyright-internal.src.tests.samples.decorator7",
        "peekOfCode": "def decorate() -> Callable[[FT], FT]:\n    ...\n@decorate()\nclass ValueDecorated(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n    def __call__(self) -> T:\n        return self._value",
        "detail": "packages.pyright-internal.src.tests.samples.decorator7",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator7",
        "description": "packages.pyright-internal.src.tests.samples.decorator7",
        "peekOfCode": "T = TypeVar(\"T\")\nFuncType = Callable[..., Any]\nFT = TypeVar(\"FT\", bound=FuncType)\ndef decorate() -> Callable[[FT], FT]:\n    ...\n@decorate()\nclass ValueDecorated(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n    def __call__(self) -> T:",
        "detail": "packages.pyright-internal.src.tests.samples.decorator7",
        "documentation": {}
    },
    {
        "label": "FuncType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator7",
        "description": "packages.pyright-internal.src.tests.samples.decorator7",
        "peekOfCode": "FuncType = Callable[..., Any]\nFT = TypeVar(\"FT\", bound=FuncType)\ndef decorate() -> Callable[[FT], FT]:\n    ...\n@decorate()\nclass ValueDecorated(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n    def __call__(self) -> T:\n        return self._value",
        "detail": "packages.pyright-internal.src.tests.samples.decorator7",
        "documentation": {}
    },
    {
        "label": "FT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.decorator7",
        "description": "packages.pyright-internal.src.tests.samples.decorator7",
        "peekOfCode": "FT = TypeVar(\"FT\", bound=FuncType)\ndef decorate() -> Callable[[FT], FT]:\n    ...\n@decorate()\nclass ValueDecorated(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self._value: T = value\n    def __call__(self) -> T:\n        return self._value",
        "detail": "packages.pyright-internal.src.tests.samples.decorator7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.defaultInitializer1",
        "description": "packages.pyright-internal.src.tests.samples.defaultInitializer1",
        "peekOfCode": "def func1(\n    a=None,\n    # This should generate an error\n    b=dict(),\n    # This should generate an error\n    c=max(3, 4),\n):\n    return 3\ndef func2(\n    a=None,",
        "detail": "packages.pyright-internal.src.tests.samples.defaultInitializer1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.defaultInitializer1",
        "description": "packages.pyright-internal.src.tests.samples.defaultInitializer1",
        "peekOfCode": "def func2(\n    a=None,\n    # This should generate an error\n    b={},\n    # This should generate an error\n    c=[],\n    # This should generate an error\n    d={1, 2, 3},\n    e=(1, 2, 3),\n):",
        "detail": "packages.pyright-internal.src.tests.samples.defaultInitializer1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.del1",
        "description": "packages.pyright-internal.src.tests.samples.del1",
        "peekOfCode": "class ClassA:\n    # This should generate an error because z1 is unbound.\n    del z1\n    z1 = 1\n    del z1",
        "detail": "packages.pyright-internal.src.tests.samples.del1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.del1",
        "description": "packages.pyright-internal.src.tests.samples.del1",
        "peekOfCode": "def func1(y1: int):\n    # This should generate an error because y2 is unbound.\n    del y1, y2\n    # This should generate an error because y1 is unbound.\n    del y1\n    y2 = 1\n    del y2\nclass ClassA:\n    # This should generate an error because z1 is unbound.\n    del z1",
        "detail": "packages.pyright-internal.src.tests.samples.del1",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.del1",
        "description": "packages.pyright-internal.src.tests.samples.del1",
        "peekOfCode": "x1 = 1\ndel x1\n# This should generate an error because x1 isn't defined.\ndel x1\ndef func1(y1: int):\n    # This should generate an error because y2 is unbound.\n    del y1, y2\n    # This should generate an error because y1 is unbound.\n    del y1\n    y2 = 1",
        "detail": "packages.pyright-internal.src.tests.samples.del1",
        "documentation": {}
    },
    {
        "label": "v7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.deprecated1",
        "description": "packages.pyright-internal.src.tests.samples.deprecated1",
        "peekOfCode": "v7 = Deque()\nv8 = DefaultDict()\nv9 = OrderedDict()\nv10 = Counter()\nv11 = ChainMap()\n# These should be marked deprecated for Python >= 3.10\nv20: Union[int, str]\nv21: Optional[int]",
        "detail": "packages.pyright-internal.src.tests.samples.deprecated1",
        "documentation": {}
    },
    {
        "label": "v8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.deprecated1",
        "description": "packages.pyright-internal.src.tests.samples.deprecated1",
        "peekOfCode": "v8 = DefaultDict()\nv9 = OrderedDict()\nv10 = Counter()\nv11 = ChainMap()\n# These should be marked deprecated for Python >= 3.10\nv20: Union[int, str]\nv21: Optional[int]",
        "detail": "packages.pyright-internal.src.tests.samples.deprecated1",
        "documentation": {}
    },
    {
        "label": "v9",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.deprecated1",
        "description": "packages.pyright-internal.src.tests.samples.deprecated1",
        "peekOfCode": "v9 = OrderedDict()\nv10 = Counter()\nv11 = ChainMap()\n# These should be marked deprecated for Python >= 3.10\nv20: Union[int, str]\nv21: Optional[int]",
        "detail": "packages.pyright-internal.src.tests.samples.deprecated1",
        "documentation": {}
    },
    {
        "label": "v10",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.deprecated1",
        "description": "packages.pyright-internal.src.tests.samples.deprecated1",
        "peekOfCode": "v10 = Counter()\nv11 = ChainMap()\n# These should be marked deprecated for Python >= 3.10\nv20: Union[int, str]\nv21: Optional[int]",
        "detail": "packages.pyright-internal.src.tests.samples.deprecated1",
        "documentation": {}
    },
    {
        "label": "v11",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.deprecated1",
        "description": "packages.pyright-internal.src.tests.samples.deprecated1",
        "peekOfCode": "v11 = ChainMap()\n# These should be marked deprecated for Python >= 3.10\nv20: Union[int, str]\nv21: Optional[int]",
        "detail": "packages.pyright-internal.src.tests.samples.deprecated1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "class A:\n    @property\n    def prop1(self) -> Optional[int]:\n        ...\n    @prop1.setter\n    def prop1(self, val: Optional[int]) -> None:\n        ...\n    @property\n    def prop2(self) -> Optional[int]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "Descriptor1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "class Descriptor1:\n    def __get__(self, instance: Any, owner: Any) -> Optional[int]:\n        ...\n    def __set__(self, owner: Any, value: Optional[int]) -> None:\n        ...\nclass Descriptor2:\n    def __get__(self, instance: Any, owner: Any) -> Optional[int]:\n        ...\n    def __set__(self, owner: Any, value: int) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "Descriptor2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "class Descriptor2:\n    def __get__(self, instance: Any, owner: Any) -> Optional[int]:\n        ...\n    def __set__(self, owner: Any, value: int) -> None:\n        ...\nclass Descriptor3:\n    def __get__(self, instance: Any, owner: Any) -> int:\n        ...\n    def __set__(self, owner: Any, value: Optional[int]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "Descriptor3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "class Descriptor3:\n    def __get__(self, instance: Any, owner: Any) -> int:\n        ...\n    def __set__(self, owner: Any, value: Optional[int]) -> None:\n        ...\nclass B:\n    desc1: Descriptor1\n    desc2: Descriptor2\n    desc3: Descriptor3\ndef func4(obj: B) -> Literal[3]:",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "class B:\n    desc1: Descriptor1\n    desc2: Descriptor2\n    desc3: Descriptor3\ndef func4(obj: B) -> Literal[3]:\n    obj.desc1 = None\n    b: None = obj.desc1\n    obj.desc1 = 3\n    v1 = obj.desc1 + 1\n    return obj.desc1",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "def func1(obj: A) -> Literal[3]:\n    obj.prop1 = None\n    b: None = obj.prop1\n    obj.prop1 = 3\n    v1 = obj.prop1 + 1\n    return obj.prop1\ndef func2(obj: A) -> Literal[3]:\n    obj.prop2 = 3\n    # This should generate an error because prop2 isn't\n    # narrowed in this case.",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "def func2(obj: A) -> Literal[3]:\n    obj.prop2 = 3\n    # This should generate an error because prop2 isn't\n    # narrowed in this case.\n    b: int = obj.prop2\n    # This should generate an error because prop2 isn't\n    # narrowed in this case.\n    return obj.prop2\ndef func3(obj: A) -> Literal[3]:\n    obj.prop3 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "def func3(obj: A) -> Literal[3]:\n    obj.prop3 = 3\n    b: int = obj.prop3\n    # This should generate an error because prop2 isn't\n    # narrowed in this case.\n    return obj.prop3\nclass Descriptor1:\n    def __get__(self, instance: Any, owner: Any) -> Optional[int]:\n        ...\n    def __set__(self, owner: Any, value: Optional[int]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "def func4(obj: B) -> Literal[3]:\n    obj.desc1 = None\n    b: None = obj.desc1\n    obj.desc1 = 3\n    v1 = obj.desc1 + 1\n    return obj.desc1\ndef func5(obj: B) -> Literal[3]:\n    obj.desc2 = 3\n    # This should generate an error because desc2 isn't\n    # narrowed in this case.",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "def func5(obj: B) -> Literal[3]:\n    obj.desc2 = 3\n    # This should generate an error because desc2 isn't\n    # narrowed in this case.\n    b: int = obj.desc2\n    # This should generate an error because desc2 isn't\n    # narrowed in this case.\n    return obj.desc2\ndef func6(obj: B) -> Literal[3]:\n    obj.desc3 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor1",
        "description": "packages.pyright-internal.src.tests.samples.descriptor1",
        "peekOfCode": "def func6(obj: B) -> Literal[3]:\n    obj.desc3 = 3\n    b: int = obj.desc3\n    # This should generate an error because prop2 isn't\n    # narrowed in this case.\n    return obj.desc3",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor1",
        "documentation": {}
    },
    {
        "label": "Descriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor2",
        "description": "packages.pyright-internal.src.tests.samples.descriptor2",
        "peekOfCode": "class Descriptor:\n    def __get__(self, obj: Any, objtype: Any = None) -> float:\n        return 1.0\nclass ClassA:\n    x: Descriptor\n    def __init__(self, x: Descriptor):\n        reveal_type(self.x, expected_type=\"float\")\n    def func1(self):\n        reveal_type(self.x, expected_type=\"float\")\nclass ClassB:",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor2",
        "description": "packages.pyright-internal.src.tests.samples.descriptor2",
        "peekOfCode": "class ClassA:\n    x: Descriptor\n    def __init__(self, x: Descriptor):\n        reveal_type(self.x, expected_type=\"float\")\n    def func1(self):\n        reveal_type(self.x, expected_type=\"float\")\nclass ClassB:\n    def __init__(self, x: Descriptor):\n        self.x = x\n        reveal_type(self.x, expected_type=\"Descriptor\")",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor2",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.descriptor2",
        "description": "packages.pyright-internal.src.tests.samples.descriptor2",
        "peekOfCode": "class ClassB:\n    def __init__(self, x: Descriptor):\n        self.x = x\n        reveal_type(self.x, expected_type=\"Descriptor\")\n    def func1(self):\n        reveal_type(self.x, expected_type=\"Descriptor\")",
        "detail": "packages.pyright-internal.src.tests.samples.descriptor2",
        "documentation": {}
    },
    {
        "label": "wantsIntDict",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary1",
        "description": "packages.pyright-internal.src.tests.samples.dictionary1",
        "peekOfCode": "def wantsIntDict(a: Dict[int, int]):\n    pass\nwantsIntDict({3: 3, 5: 5})\nwantsIntDict({x: x for x in [2, 3, 4]})\n# This should generate an error because\n# the type is wrong.\nwantsIntDict({\"hello\": 3, \"bye\": 5})\n# This should generate an error because\n# the type is wrong.\nwantsIntDict({\"sdf\": x for x in [2, 3, 4]})",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary1",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary1",
        "description": "packages.pyright-internal.src.tests.samples.dictionary1",
        "peekOfCode": "t1 = ()\n# This should generate an error because t1 is not a mapping.\nd1 = {**t1}\nd2 = {\"hi\": 3}\nd3 = {**d2, \"\": 4}\nreveal_type(d3, expected_text=\"dict[str, int]\")\nLitChoices = Literal[\"ab\", \"bcd\"]\nkeys: List[LitChoices] = [\"ab\", \"bcd\"]\nd4: Dict[LitChoices, int] = {k: len(k) for k in keys}\nd5: Dict[str, Callable[[Sequence[Any]], float]] = {",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary1",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary1",
        "description": "packages.pyright-internal.src.tests.samples.dictionary1",
        "peekOfCode": "d1 = {**t1}\nd2 = {\"hi\": 3}\nd3 = {**d2, \"\": 4}\nreveal_type(d3, expected_text=\"dict[str, int]\")\nLitChoices = Literal[\"ab\", \"bcd\"]\nkeys: List[LitChoices] = [\"ab\", \"bcd\"]\nd4: Dict[LitChoices, int] = {k: len(k) for k in keys}\nd5: Dict[str, Callable[[Sequence[Any]], float]] = {\n    \"min\": min,\n    \"max\": max,",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary1",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary1",
        "description": "packages.pyright-internal.src.tests.samples.dictionary1",
        "peekOfCode": "d2 = {\"hi\": 3}\nd3 = {**d2, \"\": 4}\nreveal_type(d3, expected_text=\"dict[str, int]\")\nLitChoices = Literal[\"ab\", \"bcd\"]\nkeys: List[LitChoices] = [\"ab\", \"bcd\"]\nd4: Dict[LitChoices, int] = {k: len(k) for k in keys}\nd5: Dict[str, Callable[[Sequence[Any]], float]] = {\n    \"min\": min,\n    \"max\": max,\n    \"sum\": sum,",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary1",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary1",
        "description": "packages.pyright-internal.src.tests.samples.dictionary1",
        "peekOfCode": "d3 = {**d2, \"\": 4}\nreveal_type(d3, expected_text=\"dict[str, int]\")\nLitChoices = Literal[\"ab\", \"bcd\"]\nkeys: List[LitChoices] = [\"ab\", \"bcd\"]\nd4: Dict[LitChoices, int] = {k: len(k) for k in keys}\nd5: Dict[str, Callable[[Sequence[Any]], float]] = {\n    \"min\": min,\n    \"max\": max,\n    \"sum\": sum,\n}",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary1",
        "documentation": {}
    },
    {
        "label": "LitChoices",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary1",
        "description": "packages.pyright-internal.src.tests.samples.dictionary1",
        "peekOfCode": "LitChoices = Literal[\"ab\", \"bcd\"]\nkeys: List[LitChoices] = [\"ab\", \"bcd\"]\nd4: Dict[LitChoices, int] = {k: len(k) for k in keys}\nd5: Dict[str, Callable[[Sequence[Any]], float]] = {\n    \"min\": min,\n    \"max\": max,\n    \"sum\": sum,\n}",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary2",
        "description": "packages.pyright-internal.src.tests.samples.dictionary2",
        "peekOfCode": "def f(mapping: Mapping[Union[str, bytes], int]):\n    return mapping\nf({\"x\": 1})\nf({b\"x\": 1})\n# This should generate an error.\nf({3: 1})",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary2",
        "documentation": {}
    },
    {
        "label": "MyMapping",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "class MyMapping(Generic[_KT, _VT]):\n    def keys(self) -> List[_KT]:\n        raise NotImplementedError\n    def __getitem__(self, key: _KT) -> _VT:\n        raise NotImplementedError\ndef func2(m: Union[MyMapping[str, int], MyMapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "def func1(m: Union[Mapping[str, int], Mapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")\nclass MyMapping(Generic[_KT, _VT]):\n    def keys(self) -> List[_KT]:\n        raise NotImplementedError\n    def __getitem__(self, key: _KT) -> _VT:\n        raise NotImplementedError\ndef func2(m: Union[MyMapping[str, int], MyMapping[str, str]]):\n    d1 = {**m}",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "def func2(m: Union[MyMapping[str, int], MyMapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "t1 = ()\n# This should generate an error because t1 is not a mapping.\nd1 = {**t1}\n_KT = TypeVar(\"_KT\")\n_VT = TypeVar(\"_VT\")\ndef func1(m: Union[Mapping[str, int], Mapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")\nclass MyMapping(Generic[_KT, _VT]):\n    def keys(self) -> List[_KT]:",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "d1 = {**t1}\n_KT = TypeVar(\"_KT\")\n_VT = TypeVar(\"_VT\")\ndef func1(m: Union[Mapping[str, int], Mapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")\nclass MyMapping(Generic[_KT, _VT]):\n    def keys(self) -> List[_KT]:\n        raise NotImplementedError\n    def __getitem__(self, key: _KT) -> _VT:",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "_KT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "_KT = TypeVar(\"_KT\")\n_VT = TypeVar(\"_VT\")\ndef func1(m: Union[Mapping[str, int], Mapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")\nclass MyMapping(Generic[_KT, _VT]):\n    def keys(self) -> List[_KT]:\n        raise NotImplementedError\n    def __getitem__(self, key: _KT) -> _VT:\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "_VT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dictionary3",
        "description": "packages.pyright-internal.src.tests.samples.dictionary3",
        "peekOfCode": "_VT = TypeVar(\"_VT\")\ndef func1(m: Union[Mapping[str, int], Mapping[str, str]]):\n    d1 = {**m}\n    reveal_type(d1, expected_text=\"dict[str, int | str]\")\nclass MyMapping(Generic[_KT, _VT]):\n    def keys(self) -> List[_KT]:\n        raise NotImplementedError\n    def __getitem__(self, key: _KT) -> _VT:\n        raise NotImplementedError\ndef func2(m: Union[MyMapping[str, int], MyMapping[str, str]]):",
        "detail": "packages.pyright-internal.src.tests.samples.dictionary3",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "test = 3\nhello = 3\nbar = 3\n__all__: Any\n__all__ = (\"test\", \"hello\")\n__all__ = [\"test\", \"hello\"]\n__all__.append(\"foo\")\n__all__.extend([\"foo\"])\n__all__.remove(\"foo\")\n__all__ += [\"bar\"]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "hello = 3\nbar = 3\n__all__: Any\n__all__ = (\"test\", \"hello\")\n__all__ = [\"test\", \"hello\"]\n__all__.append(\"foo\")\n__all__.extend([\"foo\"])\n__all__.remove(\"foo\")\n__all__ += [\"bar\"]\nmy_string = \"foo\"",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "bar = 3\n__all__: Any\n__all__ = (\"test\", \"hello\")\n__all__ = [\"test\", \"hello\"]\n__all__.append(\"foo\")\n__all__.extend([\"foo\"])\n__all__.remove(\"foo\")\n__all__ += [\"bar\"]\nmy_string = \"foo\"\n# The following should all generate diagnostics if reportUnsupportedDunderAll",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "__all__ = (\"test\", \"hello\")\n__all__ = [\"test\", \"hello\"]\n__all__.append(\"foo\")\n__all__.extend([\"foo\"])\n__all__.remove(\"foo\")\n__all__ += [\"bar\"]\nmy_string = \"foo\"\n# The following should all generate diagnostics if reportUnsupportedDunderAll\n# is enabled.\n__all__ = (\"test\", my_string)",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "__all__ = [\"test\", \"hello\"]\n__all__.append(\"foo\")\n__all__.extend([\"foo\"])\n__all__.remove(\"foo\")\n__all__ += [\"bar\"]\nmy_string = \"foo\"\n# The following should all generate diagnostics if reportUnsupportedDunderAll\n# is enabled.\n__all__ = (\"test\", my_string)\n__all__ = [\"test\", my_string]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "my_string",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "my_string = \"foo\"\n# The following should all generate diagnostics if reportUnsupportedDunderAll\n# is enabled.\n__all__ = (\"test\", my_string)\n__all__ = [\"test\", my_string]\n__all__ = \"test\"\n__all__.append(my_string)\n__all__.extend([my_string])\n__all__.remove(my_string)\n__all__ += [my_string]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "__all__ = (\"test\", my_string)\n__all__ = [\"test\", my_string]\n__all__ = \"test\"\n__all__.append(my_string)\n__all__.extend([my_string])\n__all__.remove(my_string)\n__all__ += [my_string]\n__all__.something()",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "__all__ = [\"test\", my_string]\n__all__ = \"test\"\n__all__.append(my_string)\n__all__.extend([my_string])\n__all__.remove(my_string)\n__all__ += [my_string]\n__all__.something()",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "peekOfCode": "__all__ = \"test\"\n__all__.append(my_string)\n__all__.extend([my_string])\n__all__.remove(my_string)\n__all__ += [my_string]\n__all__.something()",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "peekOfCode": "a = 3\nb = 4\ng = 4\n# This should generate an error for \"d\"\n__all__ = [\"a\", \"b\", \"c\", \"d\"]\n__all__.remove(\"c\")\n# This should generate an error for \"e\"\n__all__.append(\"e\")\n# This should generate an error for \"f\"\n__all__ += [\"f\", \"g\"]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "peekOfCode": "b = 4\ng = 4\n# This should generate an error for \"d\"\n__all__ = [\"a\", \"b\", \"c\", \"d\"]\n__all__.remove(\"c\")\n# This should generate an error for \"e\"\n__all__.append(\"e\")\n# This should generate an error for \"f\"\n__all__ += [\"f\", \"g\"]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "peekOfCode": "g = 4\n# This should generate an error for \"d\"\n__all__ = [\"a\", \"b\", \"c\", \"d\"]\n__all__.remove(\"c\")\n# This should generate an error for \"e\"\n__all__.append(\"e\")\n# This should generate an error for \"f\"\n__all__ += [\"f\", \"g\"]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "description": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "peekOfCode": "__all__ = [\"a\", \"b\", \"c\", \"d\"]\n__all__.remove(\"c\")\n# This should generate an error for \"e\"\n__all__.append(\"e\")\n# This should generate an error for \"f\"\n__all__ += [\"f\", \"g\"]",
        "detail": "packages.pyright-internal.src.tests.samples.dunderAll2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "class C:\n    # This should generate an error.\n    def f(self):\n        return 0\n    # This should generate an error.\n    def f(self):\n        return 0\n    def f(self):\n        return 1\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "def a() -> None:\n    ...\n@overload\ndef a(x: int) -> None:\n    ...\n# This should generate an error.\ndef a(x: int = 3):\n    pass\ndef a(x: int = 3):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "def a(x: int) -> None:\n    ...\n# This should generate an error.\ndef a(x: int = 3):\n    pass\ndef a(x: int = 3):\n    pass\n# This should generate an error.\ndef b():\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "def a(x: int = 3):\n    pass\ndef a(x: int = 3):\n    pass\n# This should generate an error.\ndef b():\n    pass\nb: int = 3\ndef func1(cond: bool):\n    if cond:",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "def a(x: int = 3):\n    pass\n# This should generate an error.\ndef b():\n    pass\nb: int = 3\ndef func1(cond: bool):\n    if cond:\n        def a() -> int:\n            return 3",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "def b():\n    pass\nb: int = 3\ndef func1(cond: bool):\n    if cond:\n        def a() -> int:\n            return 3\n        # This should generate an error because its inferred return\n        # type differs from b above.\n        def b():",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "peekOfCode": "def func1(cond: bool):\n    if cond:\n        def a() -> int:\n            return 3\n        # This should generate an error because its inferred return\n        # type differs from b above.\n        def b():\n            return 3\n        # This should generate an error because the parameter names don't match.\n        def c(a: int, b: str) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration1",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateDeclaration2",
        "description": "packages.pyright-internal.src.tests.samples.duplicateDeclaration2",
        "peekOfCode": "class MyClass:\n    def __init__(self):\n        self._property: str = \"\"\n    # This should generate an error because \"prop\"\n    # is overwritten below.\n    @property\n    def prop(self):\n        return self._property\n    # This should generate an error because \"prop\"\n    # is overwritten below.",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateDeclaration2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.duplicateImports1",
        "description": "packages.pyright-internal.src.tests.samples.duplicateImports1",
        "peekOfCode": "b = sys.api_version",
        "detail": "packages.pyright-internal.src.tests.samples.duplicateImports1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "description": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "peekOfCode": "class A:\n    def method1(self):\n        self.val1 = []\n        self.val2 = {}\n        self.val3 = []\n    def method2(self):\n        self.val1 = [3.4]\n        self.val2 = {\"a\": 1}\n    def method3(self):\n        reveal_type(self.val1, expected_text=\"list[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "description": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "peekOfCode": "def func1(a: bool):\n    val1 = []\n    if a:\n        val1 = [2, 3]\n    reveal_type(val1, expected_text=\"list[int]\")\n    if a:\n        val2 = []\n    else:\n        val2 = []\n    reveal_type(val2, expected_text=\"list[Unknown]\")",
        "detail": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "description": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "peekOfCode": "def func2(a: bool):\n    val1 = {}\n    if a:\n        val1 = {\"a\": 2}\n    reveal_type(val1, expected_text=\"dict[str, int]\")\n    if a:\n        val2 = {}\n    else:\n        val2 = {}\n    reveal_type(val2, expected_text=\"dict[Unknown, Unknown]\")",
        "detail": "packages.pyright-internal.src.tests.samples.emptyContainers1",
        "documentation": {}
    },
    {
        "label": "TestEnum3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "class TestEnum3(Enum):\n    A = 0\n    B = 1\n    C = 2\n    D = 3\na = TestEnum1[\"A\"]\naa = TestEnum1.A\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum1.Z",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "TestEnum1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "TestEnum1 = Enum(\"TestEnum1\", \"A B C D\")\nTestEnum2 = IntEnum(\"TestEnum2\", \"AA BB CC DD\")\nclass TestEnum3(Enum):\n    A = 0\n    B = 1\n    C = 2\n    D = 3\na = TestEnum1[\"A\"]\naa = TestEnum1.A\n# This should generate an error because \"Z\" isn't",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "TestEnum2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "TestEnum2 = IntEnum(\"TestEnum2\", \"AA BB CC DD\")\nclass TestEnum3(Enum):\n    A = 0\n    B = 1\n    C = 2\n    D = 3\na = TestEnum1[\"A\"]\naa = TestEnum1.A\n# This should generate an error because \"Z\" isn't\n# a valid member.",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "a = TestEnum1[\"A\"]\naa = TestEnum1.A\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum1.Z\nbb = TestEnum2.BB\n# This should generate an error because \"A\" isn't\n# a valid member.\nz = TestEnum2.A\nb = TestEnum3.B",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "aa = TestEnum1.A\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum1.Z\nbb = TestEnum2.BB\n# This should generate an error because \"A\" isn't\n# a valid member.\nz = TestEnum2.A\nb = TestEnum3.B\n# This should generate an error because \"Z\" isn't",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "z = TestEnum1.Z\nbb = TestEnum2.BB\n# This should generate an error because \"A\" isn't\n# a valid member.\nz = TestEnum2.A\nb = TestEnum3.B\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum3.Z\n# Test that enum classes are iterable.",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "bb",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "bb = TestEnum2.BB\n# This should generate an error because \"A\" isn't\n# a valid member.\nz = TestEnum2.A\nb = TestEnum3.B\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum3.Z\n# Test that enum classes are iterable.\nlist1 = list(TestEnum3)",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "z = TestEnum2.A\nb = TestEnum3.B\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum3.Z\n# Test that enum classes are iterable.\nlist1 = list(TestEnum3)\nreveal_type(list1, expected_text=\"list[TestEnum3]\")\nlist2 = [i for i in TestEnum3]\nreveal_type(list2, expected_text=\"list[TestEnum3]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "b = TestEnum3.B\n# This should generate an error because \"Z\" isn't\n# a valid member.\nz = TestEnum3.Z\n# Test that enum classes are iterable.\nlist1 = list(TestEnum3)\nreveal_type(list1, expected_text=\"list[TestEnum3]\")\nlist2 = [i for i in TestEnum3]\nreveal_type(list2, expected_text=\"list[TestEnum3]\")\nnum_items_in_enum3 = len(TestEnum3)",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "z = TestEnum3.Z\n# Test that enum classes are iterable.\nlist1 = list(TestEnum3)\nreveal_type(list1, expected_text=\"list[TestEnum3]\")\nlist2 = [i for i in TestEnum3]\nreveal_type(list2, expected_text=\"list[TestEnum3]\")\nnum_items_in_enum3 = len(TestEnum3)\nreveal_type(num_items_in_enum3, expected_text=\"int\")\nreveal_type(TestEnum3.A.name, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A._name_, expected_text=\"Literal['A']\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "list1 = list(TestEnum3)\nreveal_type(list1, expected_text=\"list[TestEnum3]\")\nlist2 = [i for i in TestEnum3]\nreveal_type(list2, expected_text=\"list[TestEnum3]\")\nnum_items_in_enum3 = len(TestEnum3)\nreveal_type(num_items_in_enum3, expected_text=\"int\")\nreveal_type(TestEnum3.A.name, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A._name_, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A.value, expected_text=\"Literal[0]\")\nreveal_type(TestEnum3.A._value_, expected_text=\"Literal[0]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "list2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "list2 = [i for i in TestEnum3]\nreveal_type(list2, expected_text=\"list[TestEnum3]\")\nnum_items_in_enum3 = len(TestEnum3)\nreveal_type(num_items_in_enum3, expected_text=\"int\")\nreveal_type(TestEnum3.A.name, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A._name_, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A.value, expected_text=\"Literal[0]\")\nreveal_type(TestEnum3.A._value_, expected_text=\"Literal[0]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "num_items_in_enum3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums1",
        "description": "packages.pyright-internal.src.tests.samples.enums1",
        "peekOfCode": "num_items_in_enum3 = len(TestEnum3)\nreveal_type(num_items_in_enum3, expected_text=\"int\")\nreveal_type(TestEnum3.A.name, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A._name_, expected_text=\"Literal['A']\")\nreveal_type(TestEnum3.A.value, expected_text=\"Literal[0]\")\nreveal_type(TestEnum3.A._value_, expected_text=\"Literal[0]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.enums10",
        "description": "packages.pyright-internal.src.tests.samples.enums10",
        "peekOfCode": "def func1(enum_cls: type[TEnum], enum_value: object) -> TEnum:\n    enum_member = enum_cls(enum_value)\n    reveal_type(enum_member, expected_text=\"TEnum@func1\")\n    return enum_member",
        "detail": "packages.pyright-internal.src.tests.samples.enums10",
        "documentation": {}
    },
    {
        "label": "TEnum",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums10",
        "description": "packages.pyright-internal.src.tests.samples.enums10",
        "peekOfCode": "TEnum = TypeVar(\"TEnum\", bound=Enum)\ndef func1(enum_cls: type[TEnum], enum_value: object) -> TEnum:\n    enum_member = enum_cls(enum_value)\n    reveal_type(enum_member, expected_text=\"TEnum@func1\")\n    return enum_member",
        "detail": "packages.pyright-internal.src.tests.samples.enums10",
        "documentation": {}
    },
    {
        "label": "CacheBehavior",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums2",
        "description": "packages.pyright-internal.src.tests.samples.enums2",
        "peekOfCode": "class CacheBehavior(Enum):\n    ALWAYS = auto()\n    NEVER = auto()\n    AUTO = auto()\na: CacheBehavior = CacheBehavior.ALWAYS\nb: CacheBehavior = CacheBehavior[\"ALWAYS\"]\nfoo = \"A\" + \"UTO\"\nc: CacheBehavior = CacheBehavior[foo]",
        "detail": "packages.pyright-internal.src.tests.samples.enums2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums2",
        "description": "packages.pyright-internal.src.tests.samples.enums2",
        "peekOfCode": "foo = \"A\" + \"UTO\"\nc: CacheBehavior = CacheBehavior[foo]",
        "detail": "packages.pyright-internal.src.tests.samples.enums2",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums3",
        "description": "packages.pyright-internal.src.tests.samples.enums3",
        "peekOfCode": "class Color(enum.Enum):\n    RED = enum.auto()\n    GREEN = enum.auto()\nclass Foo:\n    _foo: Type[enum.Enum]\n    def __init__(self):\n        self._foo = Color\n    def _print_foo(self):\n        for f in self._foo:\n            print(f)",
        "detail": "packages.pyright-internal.src.tests.samples.enums3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums3",
        "description": "packages.pyright-internal.src.tests.samples.enums3",
        "peekOfCode": "class Foo:\n    _foo: Type[enum.Enum]\n    def __init__(self):\n        self._foo = Color\n    def _print_foo(self):\n        for f in self._foo:\n            print(f)\ndef test_fn(color: Type[enum.Enum]):\n    print(color[\"RED\"])",
        "detail": "packages.pyright-internal.src.tests.samples.enums3",
        "documentation": {}
    },
    {
        "label": "test_fn",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.enums3",
        "description": "packages.pyright-internal.src.tests.samples.enums3",
        "peekOfCode": "def test_fn(color: Type[enum.Enum]):\n    print(color[\"RED\"])",
        "detail": "packages.pyright-internal.src.tests.samples.enums3",
        "documentation": {}
    },
    {
        "label": "Status",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums4",
        "description": "packages.pyright-internal.src.tests.samples.enums4",
        "peekOfCode": "class Status(Enum):\n    bad = 0\n    good = 1\nclass Myclass:\n    def __init__(self):\n        self.status = Status.bad\n        self.foo = 1\nmyobj = Myclass()\nreveal_type(myobj.status, expected_text=\"Status\")\nmyobj.status = Status.good",
        "detail": "packages.pyright-internal.src.tests.samples.enums4",
        "documentation": {}
    },
    {
        "label": "Myclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums4",
        "description": "packages.pyright-internal.src.tests.samples.enums4",
        "peekOfCode": "class Myclass:\n    def __init__(self):\n        self.status = Status.bad\n        self.foo = 1\nmyobj = Myclass()\nreveal_type(myobj.status, expected_text=\"Status\")\nmyobj.status = Status.good\nreveal_type(myobj.status, expected_text=\"Literal[Status.good]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums4",
        "documentation": {}
    },
    {
        "label": "myobj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums4",
        "description": "packages.pyright-internal.src.tests.samples.enums4",
        "peekOfCode": "myobj = Myclass()\nreveal_type(myobj.status, expected_text=\"Status\")\nmyobj.status = Status.good\nreveal_type(myobj.status, expected_text=\"Literal[Status.good]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums4",
        "documentation": {}
    },
    {
        "label": "myobj.status",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums4",
        "description": "packages.pyright-internal.src.tests.samples.enums4",
        "peekOfCode": "myobj.status = Status.good\nreveal_type(myobj.status, expected_text=\"Literal[Status.good]\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums4",
        "documentation": {}
    },
    {
        "label": "CustomFlags",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums5",
        "description": "packages.pyright-internal.src.tests.samples.enums5",
        "peekOfCode": "class CustomFlags(enum.Flag):\n    A = enum.auto()\n    B = enum.auto()\n    C = A | B\nflags1 = CustomFlags.A | CustomFlags.B\nreveal_type(flags1, expected_text=\"CustomFlags\")\nflags2 = CustomFlags.A & CustomFlags.B\nreveal_type(flags2, expected_text=\"CustomFlags\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums5",
        "documentation": {}
    },
    {
        "label": "flags1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums5",
        "description": "packages.pyright-internal.src.tests.samples.enums5",
        "peekOfCode": "flags1 = CustomFlags.A | CustomFlags.B\nreveal_type(flags1, expected_text=\"CustomFlags\")\nflags2 = CustomFlags.A & CustomFlags.B\nreveal_type(flags2, expected_text=\"CustomFlags\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums5",
        "documentation": {}
    },
    {
        "label": "flags2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums5",
        "description": "packages.pyright-internal.src.tests.samples.enums5",
        "peekOfCode": "flags2 = CustomFlags.A & CustomFlags.B\nreveal_type(flags2, expected_text=\"CustomFlags\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums5",
        "documentation": {}
    },
    {
        "label": "Descriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums6",
        "description": "packages.pyright-internal.src.tests.samples.enums6",
        "peekOfCode": "class Descriptor:\n    def __get__(self, instance, owner=None) -> complex:\n        return 3j\nclass MyEnum(Enum):\n    ENTRY = (123, \"abc\")\n    desc = Descriptor()\n    _exempt_ = 12\n    foo: int\n    bar: str\n    def __init__(self, foo: int, bar: str) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.enums6",
        "documentation": {}
    },
    {
        "label": "MyEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums6",
        "description": "packages.pyright-internal.src.tests.samples.enums6",
        "peekOfCode": "class MyEnum(Enum):\n    ENTRY = (123, \"abc\")\n    desc = Descriptor()\n    _exempt_ = 12\n    foo: int\n    bar: str\n    def __init__(self, foo: int, bar: str) -> None:\n        self.foo = foo\n        self.bar = bar\nbaz = 123 + MyEnum.ENTRY.foo",
        "detail": "packages.pyright-internal.src.tests.samples.enums6",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums6",
        "description": "packages.pyright-internal.src.tests.samples.enums6",
        "peekOfCode": "baz = 123 + MyEnum.ENTRY.foo\nreveal_type(baz, expected_text=\"int\")\nreveal_type(MyEnum._exempt_, expected_text=\"int\")\nreveal_type(MyEnum.desc, expected_text=\"complex\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums6",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "class Color(Enum):\n    red = \"red\"\n    blue = \"blue\"\n    yellow = \"yellow\"\n    # This should generate an error because the enum member\n    # already exists.\n    blue = \"blue\"\n    def __init__(self, value: str):\n        if value == \"blue\":\n            self.foo = False",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "NonEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "class NonEnum:\n    ...\n# This should generate an error because enums cannot\n# be subclassed.\nclass ExtraColor(NonEnum, Color):\n    pass\n# This should generate an error because reassignment of enum\n# values is not allowed.\nColor.red = \"new\"\nclass EnumWithoutValue(Enum):",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "ExtraColor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "class ExtraColor(NonEnum, Color):\n    pass\n# This should generate an error because reassignment of enum\n# values is not allowed.\nColor.red = \"new\"\nclass EnumWithoutValue(Enum):\n    def do_something(self):\n        pass\n    @property\n    def y(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "EnumWithoutValue",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "class EnumWithoutValue(Enum):\n    def do_something(self):\n        pass\n    @property\n    def y(self) -> None:\n        pass\nclass EnumWithValue(EnumWithoutValue):\n    x = 0\n# This should generate an error because enums with values\n# cannot be subclassed.",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "EnumWithValue",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "class EnumWithValue(EnumWithoutValue):\n    x = 0\n# This should generate an error because enums with values\n# cannot be subclassed.\nclass EnumSubclass(EnumWithValue):\n    y: int",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "EnumSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "class EnumSubclass(EnumWithValue):\n    y: int",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "Color.red",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.enums7",
        "description": "packages.pyright-internal.src.tests.samples.enums7",
        "peekOfCode": "Color.red = \"new\"\nclass EnumWithoutValue(Enum):\n    def do_something(self):\n        pass\n    @property\n    def y(self) -> None:\n        pass\nclass EnumWithValue(EnumWithoutValue):\n    x = 0\n# This should generate an error because enums with values",
        "detail": "packages.pyright-internal.src.tests.samples.enums7",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums8",
        "description": "packages.pyright-internal.src.tests.samples.enums8",
        "peekOfCode": "class Foo(Enum):\n    A = 1\n    B = 2\nFoo(1)\n# This should generate an error.\nFoo(1, 2, 3, 4)",
        "detail": "packages.pyright-internal.src.tests.samples.enums8",
        "documentation": {}
    },
    {
        "label": "EnumA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums9",
        "description": "packages.pyright-internal.src.tests.samples.enums9",
        "peekOfCode": "class EnumA(Enum):\n    x = auto()\nreveal_type(EnumA.x.value, expected_text=\"int\")\nclass EnumC(str, Enum):\n    def _generate_next_value_(name, start, count, last_values) -> str:\n        return name\nclass EnumD(EnumC):\n    x = auto()\nreveal_type(EnumD.x.value, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums9",
        "documentation": {}
    },
    {
        "label": "EnumC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums9",
        "description": "packages.pyright-internal.src.tests.samples.enums9",
        "peekOfCode": "class EnumC(str, Enum):\n    def _generate_next_value_(name, start, count, last_values) -> str:\n        return name\nclass EnumD(EnumC):\n    x = auto()\nreveal_type(EnumD.x.value, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums9",
        "documentation": {}
    },
    {
        "label": "EnumD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.enums9",
        "description": "packages.pyright-internal.src.tests.samples.enums9",
        "peekOfCode": "class EnumD(EnumC):\n    x = auto()\nreveal_type(EnumD.x.value, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.enums9",
        "documentation": {}
    },
    {
        "label": "returnsInt1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "def returnsInt1() -> int:\n    a = 1\n    b = 2\n    return a + b % b // a - b // a\ndef returnsInt2() -> int:\n    a = 1.0\n    b = 2\n    # This should generate an error because\n    # it should evaluate to a float, which is\n    # not compatible with the specified return",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "returnsInt2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "def returnsInt2() -> int:\n    a = 1.0\n    b = 2\n    # This should generate an error because\n    # it should evaluate to a float, which is\n    # not compatible with the specified return\n    # type.\n    return a + b % b // a - b // a\ndef returnsFloat1() -> float:\n    a = 1",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "returnsFloat1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "def returnsFloat1() -> float:\n    a = 1\n    b = 2\n    return a + b % b / a - b // a\ndef returnsFloat2() -> float:\n    a = complex(1, 2)\n    b = 2\n    # This should generate an error because it\n    # should evaluate to a complex, which is\n    # not compatible with the specified return",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "returnsFloat2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "def returnsFloat2() -> float:\n    a = complex(1, 2)\n    b = 2\n    # This should generate an error because it\n    # should evaluate to a complex, which is\n    # not compatible with the specified return\n    # type.\n    return a + b % b / a - b // a\ndef returnsComplex1() -> complex:\n    a = complex(1, 2)",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "returnsComplex1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "def returnsComplex1() -> complex:\n    a = complex(1, 2)\n    b = 2\n    c = 4.0\n    # This should generate an error because a\n    # float should be divisible by a complex.\n    return a + b % (b / a - c // a)\na = 3\nb = 4\n# This should generate an error because matrix multiply",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "a = 3\nb = 4\n# This should generate an error because matrix multiply\n# isn't supported for int.\nc = a @ b",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "b = 4\n# This should generate an error because matrix multiply\n# isn't supported for int.\nc = a @ b",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions1",
        "description": "packages.pyright-internal.src.tests.samples.expressions1",
        "peekOfCode": "c = a @ b",
        "detail": "packages.pyright-internal.src.tests.samples.expressions1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions2",
        "description": "packages.pyright-internal.src.tests.samples.expressions2",
        "peekOfCode": "class Foo:\n    def do_something1(self):\n        pass\n    def do_something2(self):\n        pass\nclass Bar:\n    def do_something1(self):\n        pass\na = 0\nfoo = Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.expressions2",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions2",
        "description": "packages.pyright-internal.src.tests.samples.expressions2",
        "peekOfCode": "class Bar:\n    def do_something1(self):\n        pass\na = 0\nfoo = Foo()\nbar = Bar()\nb = a and foo or bar\n# This should not be flagged as an error because\n# the type of b should be type Foo.\nb.do_something1()",
        "detail": "packages.pyright-internal.src.tests.samples.expressions2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions2",
        "description": "packages.pyright-internal.src.tests.samples.expressions2",
        "peekOfCode": "a = 0\nfoo = Foo()\nbar = Bar()\nb = a and foo or bar\n# This should not be flagged as an error because\n# the type of b should be type Foo.\nb.do_something1()\n# This should be flagged as an error because\n# Bar doesn't define a do_something2 method.\nb.do_something2()",
        "detail": "packages.pyright-internal.src.tests.samples.expressions2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions2",
        "description": "packages.pyright-internal.src.tests.samples.expressions2",
        "peekOfCode": "foo = Foo()\nbar = Bar()\nb = a and foo or bar\n# This should not be flagged as an error because\n# the type of b should be type Foo.\nb.do_something1()\n# This should be flagged as an error because\n# Bar doesn't define a do_something2 method.\nb.do_something2()",
        "detail": "packages.pyright-internal.src.tests.samples.expressions2",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions2",
        "description": "packages.pyright-internal.src.tests.samples.expressions2",
        "peekOfCode": "bar = Bar()\nb = a and foo or bar\n# This should not be flagged as an error because\n# the type of b should be type Foo.\nb.do_something1()\n# This should be flagged as an error because\n# Bar doesn't define a do_something2 method.\nb.do_something2()",
        "detail": "packages.pyright-internal.src.tests.samples.expressions2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions2",
        "description": "packages.pyright-internal.src.tests.samples.expressions2",
        "peekOfCode": "b = a and foo or bar\n# This should not be flagged as an error because\n# the type of b should be type Foo.\nb.do_something1()\n# This should be flagged as an error because\n# Bar doesn't define a do_something2 method.\nb.do_something2()",
        "detail": "packages.pyright-internal.src.tests.samples.expressions2",
        "documentation": {}
    },
    {
        "label": "returnsFloat1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions3",
        "description": "packages.pyright-internal.src.tests.samples.expressions3",
        "peekOfCode": "def returnsFloat1() -> float:\n    a = 1\n    b = not a\n    return b\ndef returnsInt1() -> int:\n    a = 1\n    b = -a\n    return b\ndef returnsInt2() -> int:\n    a = 1",
        "detail": "packages.pyright-internal.src.tests.samples.expressions3",
        "documentation": {}
    },
    {
        "label": "returnsInt1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions3",
        "description": "packages.pyright-internal.src.tests.samples.expressions3",
        "peekOfCode": "def returnsInt1() -> int:\n    a = 1\n    b = -a\n    return b\ndef returnsInt2() -> int:\n    a = 1\n    b = +a\n    return b\ndef returnsInt3() -> int:\n    a = 4",
        "detail": "packages.pyright-internal.src.tests.samples.expressions3",
        "documentation": {}
    },
    {
        "label": "returnsInt2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions3",
        "description": "packages.pyright-internal.src.tests.samples.expressions3",
        "peekOfCode": "def returnsInt2() -> int:\n    a = 1\n    b = +a\n    return b\ndef returnsInt3() -> int:\n    a = 4\n    b = ~a\n    return b",
        "detail": "packages.pyright-internal.src.tests.samples.expressions3",
        "documentation": {}
    },
    {
        "label": "returnsInt3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions3",
        "description": "packages.pyright-internal.src.tests.samples.expressions3",
        "peekOfCode": "def returnsInt3() -> int:\n    a = 4\n    b = ~a\n    return b",
        "detail": "packages.pyright-internal.src.tests.samples.expressions3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions4",
        "description": "packages.pyright-internal.src.tests.samples.expressions4",
        "peekOfCode": "def func1(a: Union[int, str]):\n    # This should generate an error because a's type doesn't\n    # support a __contains__ method.\n    if 3 in a:\n        pass\n    # This should generate an error because a's type doesn't\n    # support a __contains__ method.\n    if 3 not in a:\n        pass\ndef func(a: Union[List[int], Set[float]]):",
        "detail": "packages.pyright-internal.src.tests.samples.expressions4",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions4",
        "description": "packages.pyright-internal.src.tests.samples.expressions4",
        "peekOfCode": "def func(a: Union[List[int], Set[float]]):\n    if 3 in a:\n        pass\n    if 3 not in a:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.expressions4",
        "documentation": {}
    },
    {
        "label": "arith",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions5",
        "description": "packages.pyright-internal.src.tests.samples.expressions5",
        "peekOfCode": "def arith(\n    v1: Union[str, int],\n    v2: Optional[Union[str, int]],\n    v3: str,\n    v4: int,\n    v5: Optional[int],\n):\n    # This should generate an error.\n    a1 = v1 + v2\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.expressions5",
        "documentation": {}
    },
    {
        "label": "comparison",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions5",
        "description": "packages.pyright-internal.src.tests.samples.expressions5",
        "peekOfCode": "def comparison(\n    v1: Union[str, int],\n    v2: Optional[Union[str, int]],\n    v3: str,\n    v4: int,\n    v5: Optional[int],\n):\n    # This should generate an error.\n    a1 = v1 < v2\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.expressions5",
        "documentation": {}
    },
    {
        "label": "func_or",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions6",
        "description": "packages.pyright-internal.src.tests.samples.expressions6",
        "peekOfCode": "def func_or(a: Optional[Dict[str, Any]]):\n    a = a or dict()\n    reveal_type(a, expected_text=\"Dict[str, Any]\")\ndef func_and():\n    a: Optional[Dict[str, Any]] = True and dict()\n    reveal_type(a, expected_text=\"dict[str, Any]\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions6",
        "documentation": {}
    },
    {
        "label": "func_and",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions6",
        "description": "packages.pyright-internal.src.tests.samples.expressions6",
        "peekOfCode": "def func_and():\n    a: Optional[Dict[str, Any]] = True and dict()\n    reveal_type(a, expected_text=\"dict[str, Any]\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "class Foo:\n    ...\nclass Bar:\n    ...\ndef func2(a: Foo and Bar):\n    reveal_type(a, expected_text=\"Bar\")\ndef func3(a: Foo or Bar):\n    reveal_type(a, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "class Bar:\n    ...\ndef func2(a: Foo and Bar):\n    reveal_type(a, expected_text=\"Bar\")\ndef func3(a: Foo or Bar):\n    reveal_type(a, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "def foo() -> bool:\n    ...\ndef bar() -> int:\n    ...\ndef baz() -> str:\n    ...\nreveal_type(foo() and bar(), expected_text=\"int | Literal[False]\")\nreveal_type(foo() and baz(), expected_text=\"str | Literal[False]\")\nreveal_type(bar() and foo(), expected_text=\"int | bool\")\nreveal_type(baz() and foo(), expected_text=\"str | bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "def bar() -> int:\n    ...\ndef baz() -> str:\n    ...\nreveal_type(foo() and bar(), expected_text=\"int | Literal[False]\")\nreveal_type(foo() and baz(), expected_text=\"str | Literal[False]\")\nreveal_type(bar() and foo(), expected_text=\"int | bool\")\nreveal_type(baz() and foo(), expected_text=\"str | bool\")\nreveal_type(foo() or bar(), expected_text=\"int | Literal[True]\")\nreveal_type(foo() or baz(), expected_text=\"str | Literal[True]\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "def baz() -> str:\n    ...\nreveal_type(foo() and bar(), expected_text=\"int | Literal[False]\")\nreveal_type(foo() and baz(), expected_text=\"str | Literal[False]\")\nreveal_type(bar() and foo(), expected_text=\"int | bool\")\nreveal_type(baz() and foo(), expected_text=\"str | bool\")\nreveal_type(foo() or bar(), expected_text=\"int | Literal[True]\")\nreveal_type(foo() or baz(), expected_text=\"str | Literal[True]\")\nreveal_type(bar() or foo(), expected_text=\"int | bool\")\nreveal_type(baz() or foo(), expected_text=\"str | bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "def func2(a: Foo and Bar):\n    reveal_type(a, expected_text=\"Bar\")\ndef func3(a: Foo or Bar):\n    reveal_type(a, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions7",
        "description": "packages.pyright-internal.src.tests.samples.expressions7",
        "peekOfCode": "def func3(a: Foo or Bar):\n    reveal_type(a, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions7",
        "documentation": {}
    },
    {
        "label": "ComparableTo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions8",
        "description": "packages.pyright-internal.src.tests.samples.expressions8",
        "peekOfCode": "class ComparableTo(Protocol[_T_contra]):\n    @abstractmethod\n    def __lt__(self, __x: _T_contra) -> bool:\n        pass\ndef custom_compare(a: ComparableTo[_T], b: _T) -> bool:\n    return a < b\ncustom_compare(\"first\", \"second\")\ncustom_compare(3, 2)\n# This should generate an error.\ncustom_compare(3, \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions8",
        "documentation": {}
    },
    {
        "label": "custom_compare",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions8",
        "description": "packages.pyright-internal.src.tests.samples.expressions8",
        "peekOfCode": "def custom_compare(a: ComparableTo[_T], b: _T) -> bool:\n    return a < b\ncustom_compare(\"first\", \"second\")\ncustom_compare(3, 2)\n# This should generate an error.\ncustom_compare(3, \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.expressions8",
        "documentation": {}
    },
    {
        "label": "_T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions8",
        "description": "packages.pyright-internal.src.tests.samples.expressions8",
        "peekOfCode": "_T_contra = TypeVar(\"_T_contra\", contravariant=True)\n_T = TypeVar(\"_T\")\nclass ComparableTo(Protocol[_T_contra]):\n    @abstractmethod\n    def __lt__(self, __x: _T_contra) -> bool:\n        pass\ndef custom_compare(a: ComparableTo[_T], b: _T) -> bool:\n    return a < b\ncustom_compare(\"first\", \"second\")\ncustom_compare(3, 2)",
        "detail": "packages.pyright-internal.src.tests.samples.expressions8",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions8",
        "description": "packages.pyright-internal.src.tests.samples.expressions8",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass ComparableTo(Protocol[_T_contra]):\n    @abstractmethod\n    def __lt__(self, __x: _T_contra) -> bool:\n        pass\ndef custom_compare(a: ComparableTo[_T], b: _T) -> bool:\n    return a < b\ncustom_compare(\"first\", \"second\")\ncustom_compare(3, 2)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.expressions8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions9",
        "description": "packages.pyright-internal.src.tests.samples.expressions9",
        "peekOfCode": "def func1(a: List[Union[int, str]]):\n    a += [5]\n    return a + [5]\ndef func2(a: List[int], b: int):\n    return a + [b]",
        "detail": "packages.pyright-internal.src.tests.samples.expressions9",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.expressions9",
        "description": "packages.pyright-internal.src.tests.samples.expressions9",
        "peekOfCode": "def func2(a: List[int], b: int):\n    return a + [b]",
        "detail": "packages.pyright-internal.src.tests.samples.expressions9",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final1",
        "description": "packages.pyright-internal.src.tests.samples.final1",
        "peekOfCode": "class ClassA:\n    pass\n# This should generate an error because ClassA is\n# decorated as final.\nclass ClassB(ClassA):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.final1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final1",
        "description": "packages.pyright-internal.src.tests.samples.final1",
        "peekOfCode": "class ClassB(ClassA):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.final1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "class ClassA:\n    def func1(self):\n        pass\n    @classmethod\n    def func2(cls):\n        pass\n    @final\n    def func3(self):\n        pass\n    @final",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "class ClassB(ClassA):\n    def func1(self):\n        pass\n    @classmethod\n    def func2(cls):\n        pass\n    # This should generate an error because func3 is\n    # defined as final.\n    def func3(self):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "Base4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "class Base4:\n    ...\nclass Base5:\n    @final\n    def __init__(self, v: int) -> None:\n        ...\nclass C(Base4, Base5):\n    # This should generate an error because it overrides Base5,\n    # and __init__ is marked final there.\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "Base5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "class Base5:\n    @final\n    def __init__(self, v: int) -> None:\n        ...\nclass C(Base4, Base5):\n    # This should generate an error because it overrides Base5,\n    # and __init__ is marked final there.\n    def __init__(self) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "class C(Base4, Base5):\n    # This should generate an error because it overrides Base5,\n    # and __init__ is marked final there.\n    def __init__(self) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "ClassA.func3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "ClassA.func3 = lambda self: None\n# This should generate an error because func4 is final.\nClassA.func4 = lambda cls: None\n# This should generate an error because _func5 is final.\nClassA._func5 = lambda self: None\nclass ClassB(ClassA):\n    def func1(self):\n        pass\n    @classmethod\n    def func2(cls):",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "ClassA.func4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "ClassA.func4 = lambda cls: None\n# This should generate an error because _func5 is final.\nClassA._func5 = lambda self: None\nclass ClassB(ClassA):\n    def func1(self):\n        pass\n    @classmethod\n    def func2(cls):\n        pass\n    # This should generate an error because func3 is",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "ClassA._func5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final2",
        "description": "packages.pyright-internal.src.tests.samples.final2",
        "peekOfCode": "ClassA._func5 = lambda self: None\nclass ClassB(ClassA):\n    def func1(self):\n        pass\n    @classmethod\n    def func2(cls):\n        pass\n    # This should generate an error because func3 is\n    # defined as final.\n    def func3(self):",
        "detail": "packages.pyright-internal.src.tests.samples.final2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "class Foo:\n    member1: Final = 4\n    # This should generate an error because only\n    # one declaration can have a Final attribute.\n    member1: Final\n    member2: typing.Final[int] = 3\n    member4: Final[int]\n    # This should generate an error because there is\n    # no assignment.\n    member5: Final[str]",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "class Bar(Foo):\n    # This should generate an error because we are overriding\n    # a member that is marked Final in the parent class.\n    member1 = 5\n    # This should generate an error because we are overriding\n    # a member that is marked Final in the parent class.\n    _member7: Final = 6\n    # This should not generate an error because it's private.\n    __member8: Final = 6\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "class ClassA:\n    member1: Final = 3\n    member2: Final\n    def __init__(self):\n        # This should generate an error.\n        self.member1 = 5\n        self.member2 = \"hi\"\n        self.member3: Final = \"hi\"\n    def other(self):\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "class ClassB:\n    def __init__(self):\n        self.x: Final = 1\n    def method1(self):\n        # This should generate an error because x is Final.\n        self.x += 1",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "def func1(a: Final[int]):\n    pass\n# This should generate an error because Final must the outermost\n# type in assignments.\nb: List[Final[int]] = []\nclass ClassA:\n    member1: Final = 3\n    member2: Final\n    def __init__(self):\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "def func2():\n    x: Final[Any] = 3\n    # This should generate an error because x is Final.\n    x += 1\n    # This should generate an error because x is Final.\n    a = (x := 4)\n    # This should generate an error because x is Final.\n    for x in [1, 2, 3]:\n        pass\n    # This should generate an error because x is Final.",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "foo1 = 4\n# This should generate an error because there\n# is a previous Final declaration.\nfoo1: Final[int]\n# This should generate an error because\n# the type doesn't match.\nfoo2: Final[str] = 3\n# This should generate an error because\n# we expect only one type argument for Final.\nfoo3: Final[str, int] = \"hello\"",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "a = ClassA()\n# This should generate an error.\na.member1 = 4\n# This should generate an error.\na.member3 = \"x\"\ndef func2():\n    x: Final[Any] = 3\n    # This should generate an error because x is Final.\n    x += 1\n    # This should generate an error because x is Final.",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "a.member1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "a.member1 = 4\n# This should generate an error.\na.member3 = \"x\"\ndef func2():\n    x: Final[Any] = 3\n    # This should generate an error because x is Final.\n    x += 1\n    # This should generate an error because x is Final.\n    a = (x := 4)\n    # This should generate an error because x is Final.",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "a.member3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.final3",
        "description": "packages.pyright-internal.src.tests.samples.final3",
        "peekOfCode": "a.member3 = \"x\"\ndef func2():\n    x: Final[Any] = 3\n    # This should generate an error because x is Final.\n    x += 1\n    # This should generate an error because x is Final.\n    a = (x := 4)\n    # This should generate an error because x is Final.\n    for x in [1, 2, 3]:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.final3",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final5",
        "description": "packages.pyright-internal.src.tests.samples.final5",
        "peekOfCode": "class Foo1:\n    x: Final[int]\n    def __init__(self, x: int) -> None:\n        self.x = x\n@dataclass\nclass Foo2:\n    x: Final[int]",
        "detail": "packages.pyright-internal.src.tests.samples.final5",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.final5",
        "description": "packages.pyright-internal.src.tests.samples.final5",
        "peekOfCode": "class Foo2:\n    x: Final[int]",
        "detail": "packages.pyright-internal.src.tests.samples.final5",
        "documentation": {}
    },
    {
        "label": "AsyncIterable1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "class AsyncIterable1(object):\n    def __aiter__(self):\n        return self\n    async def __anext__(self):\n        return 1\niter1 = AsyncIterable1()\nasync def func2():\n    async for foo3 in iter1:\n        requires_int(foo3)\n    for d in [b for b in list1]:",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "ClassWithGetItem",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "class ClassWithGetItem(object):\n    def __getitem__(self, item) -> str:\n        return \"hello\"\ndef testGetItemIterator() -> str:\n    objWithGetItem = ClassWithGetItem()\n    for f in objWithGetItem:\n        return f\n    return \"none\"\n# This should generate a syntax error.\nfor in range(3):",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "class A:\n    def __init__(self):\n        self.__iter__ = lambda: iter([])\n# This should generate an error because A\n# is not iterable. The __iter__ method is an\n# instance variable.\nfor a in A():\n    ...\nclass B:\n    __slots__ = (\"__iter__\",)",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "class B:\n    __slots__ = (\"__iter__\",)\n    def __init__(self):\n        self.__iter__ = lambda: iter([])\nfor b in B():\n    ...\ndef func3():\n    x = None\n    for x in range(1):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "class C:\n    @overload\n    def __getitem__(self, i: int) -> str:\n        ...\n    @overload\n    def __getitem__(self, i: slice) -> list[str]:\n        ...\n    def __getitem__(self, i: Union[int, slice]) -> Union[str, list[str]]:\n        ...\nc = C()",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "requires_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "def requires_int(val: int):\n    pass\nlist1: list[int] = [1, 2, 3]\nfor a in list1:\n    requires_int(a)\nint1 = 1\n# This should generate an error because\n# an int type is not iterable.\nfor foo1 in int1:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "testGetItemIterator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "def testGetItemIterator() -> str:\n    objWithGetItem = ClassWithGetItem()\n    for f in objWithGetItem:\n        return f\n    return \"none\"\n# This should generate a syntax error.\nfor in range(3):\n    pass\nclass A:\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "def func3():\n    x = None\n    for x in range(1):\n        pass\n    reveal_type(x, expected_text=\"int | None\")\nclass C:\n    @overload\n    def __getitem__(self, i: int) -> str:\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "int1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "int1 = 1\n# This should generate an error because\n# an int type is not iterable.\nfor foo1 in int1:\n    pass\nasync def func1():\n    # This should generate an error because\n    # list1 isn't an async iterator.\n    async for foo2 in list1:\n        requires_int(foo2)",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "iter1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "iter1 = AsyncIterable1()\nasync def func2():\n    async for foo3 in iter1:\n        requires_int(foo3)\n    for d in [b for b in list1]:\n        requires_int(d)\n    for e in [b async for b in iter1]:\n        requires_int(e)\nclass ClassWithGetItem(object):\n    def __getitem__(self, item) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop1",
        "description": "packages.pyright-internal.src.tests.samples.forLoop1",
        "peekOfCode": "c = C()\nfor c1 in iter(c):\n    reveal_type(c1, expected_text=\"str\")\nfor c2 in c:\n    reveal_type(c2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop2",
        "description": "packages.pyright-internal.src.tests.samples.forLoop2",
        "peekOfCode": "def func1():\n    for x in []:\n        a = 0\n    # This should generate a \"potentially unbound\" error.\n    print(a)\n    # This should generate a \"potentially unbound\" error.\n    print(x)\n# For with no break and else.\ndef func2():\n    for x in []:",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop2",
        "description": "packages.pyright-internal.src.tests.samples.forLoop2",
        "peekOfCode": "def func2():\n    for x in []:\n        a = 0\n    else:\n        b = 0\n    # This should generate a \"potentially unbound\" error.\n    print(a)\n    print(b)\n    # This should generate a \"potentially unbound\" error.\n    print(x)",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop2",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.forLoop2",
        "description": "packages.pyright-internal.src.tests.samples.forLoop2",
        "peekOfCode": "def func3():\n    for x in []:\n        a = 0\n        break\n    else:\n        b = 0\n    # This should generate a \"potentially unbound\" error.\n    print(a)\n    # This should generate a \"potentially unbound\" error.\n    print(b)",
        "detail": "packages.pyright-internal.src.tests.samples.forLoop2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "a = f'hello { f\"hi {1}\" } bye { f\"hello\" }'\n# Test f-string with a backslash in the expression.\n# This should generate an error.\nb = f\"hello { \\t1 }\"\n# Test f-string with unterminated expression.\n# This should generate an error.\nc = f\"hello { 1 \"\n# Test f-string with double braces.\nd = f\"hello {{{1}}}\"\n# Test f-string with formatting directives.",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "b = f\"hello { \\t1 }\"\n# Test f-string with unterminated expression.\n# This should generate an error.\nc = f\"hello { 1 \"\n# Test f-string with double braces.\nd = f\"hello {{{1}}}\"\n# Test f-string with formatting directives.\ne = f\"hello { 2 != 3 !r:2 }\"\n# Test f-string with formatting directives.\nf = f\"hello { 2 != 3 :3 }\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "c = f\"hello { 1 \"\n# Test f-string with double braces.\nd = f\"hello {{{1}}}\"\n# Test f-string with formatting directives.\ne = f\"hello { 2 != 3 !r:2 }\"\n# Test f-string with formatting directives.\nf = f\"hello { 2 != 3 :3 }\"\n# Test f-string with embedded colon.\ng = f\"hello { a[2:3] :3 }\"\n# Test f-string with embedded bang.",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "d = f\"hello {{{1}}}\"\n# Test f-string with formatting directives.\ne = f\"hello { 2 != 3 !r:2 }\"\n# Test f-string with formatting directives.\nf = f\"hello { 2 != 3 :3 }\"\n# Test f-string with embedded colon.\ng = f\"hello { a[2:3] :3 }\"\n# Test f-string with embedded bang.\nh = f\"hello { b['hello!'] :3 }\"\n# Test f-string with expression that contains newlines.",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "e = f\"hello { 2 != 3 !r:2 }\"\n# Test f-string with formatting directives.\nf = f\"hello { 2 != 3 :3 }\"\n# Test f-string with embedded colon.\ng = f\"hello { a[2:3] :3 }\"\n# Test f-string with embedded bang.\nh = f\"hello { b['hello!'] :3 }\"\n# Test f-string with expression that contains newlines.\ni = f\"\"\"\n    {",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "f = f\"hello { 2 != 3 :3 }\"\n# Test f-string with embedded colon.\ng = f\"hello { a[2:3] :3 }\"\n# Test f-string with embedded bang.\nh = f\"hello { b['hello!'] :3 }\"\n# Test f-string with expression that contains newlines.\ni = f\"\"\"\n    {\n        f''' hi ''' +\n        'bye'",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "g = f\"hello { a[2:3] :3 }\"\n# Test f-string with embedded bang.\nh = f\"hello { b['hello!'] :3 }\"\n# Test f-string with expression that contains newlines.\ni = f\"\"\"\n    {\n        f''' hi ''' +\n        'bye'\n    }\n\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "h = f\"hello { b['hello!'] :3 }\"\n# Test f-string with expression that contains newlines.\ni = f\"\"\"\n    {\n        f''' hi ''' +\n        'bye'\n    }\n\"\"\"\nj = f\"\"\"\n{",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "i = f\"\"\"\n    {\n        f''' hi ''' +\n        'bye'\n    }\n\"\"\"\nj = f\"\"\"\n{\n    f'''\n        {f' { f\":\" } '}",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "j = f\"\"\"\n{\n    f'''\n        {f' { f\":\" } '}\n    '''\n}\n\"\"\"\n# This should generate a warning because of the unknown\n# escape sequence but not an error.\nh = f\"hello\\{4}\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "h = f\"hello\\{4}\"\n# Test f-string with raw string and backslash.\nj = rf\"aaa\\{4}\"\n# Test f-string with comma-separated expressions.\nh = f\"List: { 2 + 3, 'hi' + ' there'}\"\n# Test f-string with unpack operator.\nmy_dict = {\"a\": \"A\", \"b\": \"B\"}\ni = f\"{*my_dict.keys(),}\"\n# f-string with empty expression should generate error.\nj = f\"{}\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "j = rf\"aaa\\{4}\"\n# Test f-string with comma-separated expressions.\nh = f\"List: { 2 + 3, 'hi' + ' there'}\"\n# Test f-string with unpack operator.\nmy_dict = {\"a\": \"A\", \"b\": \"B\"}\ni = f\"{*my_dict.keys(),}\"\n# f-string with empty expression should generate error.\nj = f\"{}\"\n# f-string with quotes within quotes within quotes.\nk = f\"\"\"{\"#M's#\".replace(f\"'\", '')!r}\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "h = f\"List: { 2 + 3, 'hi' + ' there'}\"\n# Test f-string with unpack operator.\nmy_dict = {\"a\": \"A\", \"b\": \"B\"}\ni = f\"{*my_dict.keys(),}\"\n# f-string with empty expression should generate error.\nj = f\"{}\"\n# f-string with quotes within quotes within quotes.\nk = f\"\"\"{\"#M's#\".replace(f\"'\", '')!r}\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "my_dict = {\"a\": \"A\", \"b\": \"B\"}\ni = f\"{*my_dict.keys(),}\"\n# f-string with empty expression should generate error.\nj = f\"{}\"\n# f-string with quotes within quotes within quotes.\nk = f\"\"\"{\"#M's#\".replace(f\"'\", '')!r}\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "i = f\"{*my_dict.keys(),}\"\n# f-string with empty expression should generate error.\nj = f\"{}\"\n# f-string with quotes within quotes within quotes.\nk = f\"\"\"{\"#M's#\".replace(f\"'\", '')!r}\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "j",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "j = f\"{}\"\n# f-string with quotes within quotes within quotes.\nk = f\"\"\"{\"#M's#\".replace(f\"'\", '')!r}\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring1",
        "description": "packages.pyright-internal.src.tests.samples.fstring1",
        "peekOfCode": "k = f\"\"\"{\"#M's#\".replace(f\"'\", '')!r}\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring1",
        "documentation": {}
    },
    {
        "label": "return_right_aligned_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring2",
        "description": "packages.pyright-internal.src.tests.samples.fstring2",
        "peekOfCode": "def return_right_aligned_string():\n    some_length = 10\n    some_length2 = 2\n    some_string = \"some string to print\"\n    string_right_aligned = f\"{some_string:>{some_length - 2} {{some_length2: 3}}}\"\n    return string_right_aligned",
        "detail": "packages.pyright-internal.src.tests.samples.fstring2",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "a1 = f\"[{{name}}{'}' if True else ''}]\"\nb1 = f\"{'''hello'''}\"\nc1 = f\"\"\"{\"\\\"\"}\"\"\"\nhello1 = 3\nd1 = f\"{ f'{hello1}' }\"\nprint(f\"{'a' if 'b' != d1 else 'd'}\")\na2 = fr\"[{{name}}{'}' if True else ''}]\"\nb2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "b1 = f\"{'''hello'''}\"\nc1 = f\"\"\"{\"\\\"\"}\"\"\"\nhello1 = 3\nd1 = f\"{ f'{hello1}' }\"\nprint(f\"{'a' if 'b' != d1 else 'd'}\")\na2 = fr\"[{{name}}{'}' if True else ''}]\"\nb2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "c1 = f\"\"\"{\"\\\"\"}\"\"\"\nhello1 = 3\nd1 = f\"{ f'{hello1}' }\"\nprint(f\"{'a' if 'b' != d1 else 'd'}\")\na2 = fr\"[{{name}}{'}' if True else ''}]\"\nb2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "hello1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "hello1 = 3\nd1 = f\"{ f'{hello1}' }\"\nprint(f\"{'a' if 'b' != d1 else 'd'}\")\na2 = fr\"[{{name}}{'}' if True else ''}]\"\nb2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "d1 = f\"{ f'{hello1}' }\"\nprint(f\"{'a' if 'b' != d1 else 'd'}\")\na2 = fr\"[{{name}}{'}' if True else ''}]\"\nb2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {\n        ''.join([",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "a2 = fr\"[{{name}}{'}' if True else ''}]\"\nb2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {\n        ''.join([\n            'this',\n            \"that\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "b2 = fr\"{'''hello'''}\"\nc2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {\n        ''.join([\n            'this',\n            \"that\"\n        ])",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "c2 = rf\"\"\"{\"\\\"\"}\"\"\"\nhello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {\n        ''.join([\n            'this',\n            \"that\"\n        ])\n    }\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "hello2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "hello2 = 3\nd2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {\n        ''.join([\n            'this',\n            \"that\"\n        ])\n    }\"\"\"\n}'''",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "d2 = fr\"{ rf'{hello2}' }\"\ne1 = f''' {\n    f\"\"\" {\n        ''.join([\n            'this',\n            \"that\"\n        ])\n    }\"\"\"\n}'''",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "e1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring3",
        "description": "packages.pyright-internal.src.tests.samples.fstring3",
        "peekOfCode": "e1 = f''' {\n    f\"\"\" {\n        ''.join([\n            'this',\n            \"that\"\n        ])\n    }\"\"\"\n}'''",
        "detail": "packages.pyright-internal.src.tests.samples.fstring3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring4",
        "description": "packages.pyright-internal.src.tests.samples.fstring4",
        "peekOfCode": "def foo(spam, dictval: Dict):\n    print(dictval)\n    return \"Done\"\nprint(f\"{foo(0, {'bar' : 1, 'baz': 2})}\")\nhello = 200\nprint(f\"({hello} \\N{greek capital letter sigma})\")\nprint(f\"({hello} \\N{GREEK   CAPITAL     LETTER  SIGMA})\")\nprint(f\"({hello} \\N{VARIATION SELECTOR-16})\")\nprint(f\"({hello} \\N{VARIATION SELECTOR-16})\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring4",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring4",
        "description": "packages.pyright-internal.src.tests.samples.fstring4",
        "peekOfCode": "hello = 200\nprint(f\"({hello} \\N{greek capital letter sigma})\")\nprint(f\"({hello} \\N{GREEK   CAPITAL     LETTER  SIGMA})\")\nprint(f\"({hello} \\N{VARIATION SELECTOR-16})\")\nprint(f\"({hello} \\N{VARIATION SELECTOR-16})\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring4",
        "documentation": {}
    },
    {
        "label": "key",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring5",
        "description": "packages.pyright-internal.src.tests.samples.fstring5",
        "peekOfCode": "key = 3\nprint(f\"Value for {key =}\")\nprint(f\"Value for {key =    }\")\nprint(f\"Value for {key =   :.2f}\")\nprint(f\"Value for {key=}\")\nprint(f\"Value for {key=    }\")\nprint(f\"Value for {key=   :.2f}\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring5",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring6",
        "description": "packages.pyright-internal.src.tests.samples.fstring6",
        "peekOfCode": "msg = \"test\"\na = f\"{}\"\nmessage = \"hi\"\nf\"{message:\\u3000>10}\"\nx = 0\nprecision = 3\nprint(f\"{x: .{precision:d}f}\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring6",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring6",
        "description": "packages.pyright-internal.src.tests.samples.fstring6",
        "peekOfCode": "a = f\"{}\"\nmessage = \"hi\"\nf\"{message:\\u3000>10}\"\nx = 0\nprecision = 3\nprint(f\"{x: .{precision:d}f}\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring6",
        "documentation": {}
    },
    {
        "label": "message",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring6",
        "description": "packages.pyright-internal.src.tests.samples.fstring6",
        "peekOfCode": "message = \"hi\"\nf\"{message:\\u3000>10}\"\nx = 0\nprecision = 3\nprint(f\"{x: .{precision:d}f}\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring6",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring6",
        "description": "packages.pyright-internal.src.tests.samples.fstring6",
        "peekOfCode": "x = 0\nprecision = 3\nprint(f\"{x: .{precision:d}f}\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring6",
        "documentation": {}
    },
    {
        "label": "precision",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.fstring6",
        "description": "packages.pyright-internal.src.tests.samples.fstring6",
        "peekOfCode": "precision = 3\nprint(f\"{x: .{precision:d}f}\")",
        "detail": "packages.pyright-internal.src.tests.samples.fstring6",
        "documentation": {}
    },
    {
        "label": "function_with_args",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function1",
        "description": "packages.pyright-internal.src.tests.samples.function1",
        "peekOfCode": "def function_with_args(*args: str) -> Tuple[str, ...]:\n    return args\ndef function_with_kwargs(**kwargs: List[str]) -> Dict[str, List[str]]:\n    return kwargs",
        "detail": "packages.pyright-internal.src.tests.samples.function1",
        "documentation": {}
    },
    {
        "label": "function_with_kwargs",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function1",
        "description": "packages.pyright-internal.src.tests.samples.function1",
        "peekOfCode": "def function_with_kwargs(**kwargs: List[str]) -> Dict[str, List[str]]:\n    return kwargs",
        "detail": "packages.pyright-internal.src.tests.samples.function1",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function10",
        "description": "packages.pyright-internal.src.tests.samples.function10",
        "peekOfCode": "class Container(Generic[T]):\n    values: Sequence[Union[float, T]]\ndef create_container(values: Sequence[Union[float, T]]) -> Container[T]:\n    return Container(values)\narg: Sequence[Union[float, int]] = (1, 2.0)\nx: Container[int] = create_container(arg)",
        "detail": "packages.pyright-internal.src.tests.samples.function10",
        "documentation": {}
    },
    {
        "label": "create_container",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function10",
        "description": "packages.pyright-internal.src.tests.samples.function10",
        "peekOfCode": "def create_container(values: Sequence[Union[float, T]]) -> Container[T]:\n    return Container(values)\narg: Sequence[Union[float, int]] = (1, 2.0)\nx: Container[int] = create_container(arg)",
        "detail": "packages.pyright-internal.src.tests.samples.function10",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.function10",
        "description": "packages.pyright-internal.src.tests.samples.function10",
        "peekOfCode": "T = TypeVar(\"T\")\n@dataclass\nclass Container(Generic[T]):\n    values: Sequence[Union[float, T]]\ndef create_container(values: Sequence[Union[float, T]]) -> Container[T]:\n    return Container(values)\narg: Sequence[Union[float, int]] = (1, 2.0)\nx: Container[int] = create_container(arg)",
        "detail": "packages.pyright-internal.src.tests.samples.function10",
        "documentation": {}
    },
    {
        "label": "wrapper1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function11",
        "description": "packages.pyright-internal.src.tests.samples.function11",
        "peekOfCode": "def wrapper1(fn: Callable[[_A], int]) -> _A:\n    ...\ndef f1(a: Literal[0]) -> int:\n    ...\nreveal_type(wrapper1(f1), expected_text=\"Literal[0]\")\ndef wrapper2(fn: Callable[..., _A]) -> Callable[..., _A]:\n    ...\ndef f2() -> Literal[\"Foo\"]:\n    return \"Foo\"\nreveal_type(wrapper2(f2)(), expected_text=\"Literal['Foo']\")",
        "detail": "packages.pyright-internal.src.tests.samples.function11",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function11",
        "description": "packages.pyright-internal.src.tests.samples.function11",
        "peekOfCode": "def f1(a: Literal[0]) -> int:\n    ...\nreveal_type(wrapper1(f1), expected_text=\"Literal[0]\")\ndef wrapper2(fn: Callable[..., _A]) -> Callable[..., _A]:\n    ...\ndef f2() -> Literal[\"Foo\"]:\n    return \"Foo\"\nreveal_type(wrapper2(f2)(), expected_text=\"Literal['Foo']\")\ndef f3():\n    return \"Foo\"",
        "detail": "packages.pyright-internal.src.tests.samples.function11",
        "documentation": {}
    },
    {
        "label": "wrapper2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function11",
        "description": "packages.pyright-internal.src.tests.samples.function11",
        "peekOfCode": "def wrapper2(fn: Callable[..., _A]) -> Callable[..., _A]:\n    ...\ndef f2() -> Literal[\"Foo\"]:\n    return \"Foo\"\nreveal_type(wrapper2(f2)(), expected_text=\"Literal['Foo']\")\ndef f3():\n    return \"Foo\"\nreveal_type(wrapper2(f3)(), expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.function11",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function11",
        "description": "packages.pyright-internal.src.tests.samples.function11",
        "peekOfCode": "def f2() -> Literal[\"Foo\"]:\n    return \"Foo\"\nreveal_type(wrapper2(f2)(), expected_text=\"Literal['Foo']\")\ndef f3():\n    return \"Foo\"\nreveal_type(wrapper2(f3)(), expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.function11",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function11",
        "description": "packages.pyright-internal.src.tests.samples.function11",
        "peekOfCode": "def f3():\n    return \"Foo\"\nreveal_type(wrapper2(f3)(), expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.function11",
        "documentation": {}
    },
    {
        "label": "_A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.function11",
        "description": "packages.pyright-internal.src.tests.samples.function11",
        "peekOfCode": "_A = TypeVar(\"_A\")\ndef wrapper1(fn: Callable[[_A], int]) -> _A:\n    ...\ndef f1(a: Literal[0]) -> int:\n    ...\nreveal_type(wrapper1(f1), expected_text=\"Literal[0]\")\ndef wrapper2(fn: Callable[..., _A]) -> Callable[..., _A]:\n    ...\ndef f2() -> Literal[\"Foo\"]:\n    return \"Foo\"",
        "detail": "packages.pyright-internal.src.tests.samples.function11",
        "documentation": {}
    },
    {
        "label": "Thing1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function12",
        "description": "packages.pyright-internal.src.tests.samples.function12",
        "peekOfCode": "class Thing1:\n    prop1: str\nclass Thing2:\n    prop1: str\n    prop2: str\nclass ClassA(Generic[T_contra]):\n    def __init__(self, callback: Callable[[T_contra], Any]) -> None:\n        ...\ndef func1(cb: Callable[[Thing1], Any] | Callable[[Thing1 | Thing2], Any]):\n    reveal_type(ClassA(cb), expected_text=\"ClassA[Thing1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.function12",
        "documentation": {}
    },
    {
        "label": "Thing2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function12",
        "description": "packages.pyright-internal.src.tests.samples.function12",
        "peekOfCode": "class Thing2:\n    prop1: str\n    prop2: str\nclass ClassA(Generic[T_contra]):\n    def __init__(self, callback: Callable[[T_contra], Any]) -> None:\n        ...\ndef func1(cb: Callable[[Thing1], Any] | Callable[[Thing1 | Thing2], Any]):\n    reveal_type(ClassA(cb), expected_text=\"ClassA[Thing1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.function12",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function12",
        "description": "packages.pyright-internal.src.tests.samples.function12",
        "peekOfCode": "class ClassA(Generic[T_contra]):\n    def __init__(self, callback: Callable[[T_contra], Any]) -> None:\n        ...\ndef func1(cb: Callable[[Thing1], Any] | Callable[[Thing1 | Thing2], Any]):\n    reveal_type(ClassA(cb), expected_text=\"ClassA[Thing1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.function12",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function12",
        "description": "packages.pyright-internal.src.tests.samples.function12",
        "peekOfCode": "def func1(cb: Callable[[Thing1], Any] | Callable[[Thing1 | Thing2], Any]):\n    reveal_type(ClassA(cb), expected_text=\"ClassA[Thing1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.function12",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.function12",
        "description": "packages.pyright-internal.src.tests.samples.function12",
        "peekOfCode": "T_contra = TypeVar('T_contra', contravariant=True)\nclass Thing1:\n    prop1: str\nclass Thing2:\n    prop1: str\n    prop2: str\nclass ClassA(Generic[T_contra]):\n    def __init__(self, callback: Callable[[T_contra], Any]) -> None:\n        ...\ndef func1(cb: Callable[[Thing1], Any] | Callable[[Thing1 | Thing2], Any]):",
        "detail": "packages.pyright-internal.src.tests.samples.function12",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function2",
        "description": "packages.pyright-internal.src.tests.samples.function2",
        "peekOfCode": "def f(*a, b=1, c):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.function2",
        "documentation": {}
    },
    {
        "label": "StrSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "class StrSubclass(str):\n    ...\ndef test_kwargs2(\n    a: Mapping[str, Any],\n    b: Mapping[Any, Hashable],\n    c: Dict[StrSubclass, Hashable],\n    d: int,\n    e: Mapping[int, Hashable],\n    f: Tuple[str, ...],\n):",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "Callback1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "class Callback1(Protocol):\n    def __call__(self) -> None:\n        ...\ndef func1(\n    value: str = ...,\n    *args: object,\n) -> None:\n    ...\ndef func2(\n    value: str = ...,",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "requires_hashable_tuple",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def requires_hashable_tuple(p1: Tuple[Hashable, ...]):\n    ...\ndef requires_hashable_dict(p1: Dict[str, Hashable]):\n    ...\ndef test_args(*args: Hashable):\n    if args:\n        aaa = list(args)\n        bbb = tuple(aaa)\n        args = bbb\n    requires_hashable_tuple(args)",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "requires_hashable_dict",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def requires_hashable_dict(p1: Dict[str, Hashable]):\n    ...\ndef test_args(*args: Hashable):\n    if args:\n        aaa = list(args)\n        bbb = tuple(aaa)\n        args = bbb\n    requires_hashable_tuple(args)\ndef test_kwargs(**kwargs: Hashable):\n    requires_hashable_dict(kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "test_args",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def test_args(*args: Hashable):\n    if args:\n        aaa = list(args)\n        bbb = tuple(aaa)\n        args = bbb\n    requires_hashable_tuple(args)\ndef test_kwargs(**kwargs: Hashable):\n    requires_hashable_dict(kwargs)\nclass StrSubclass(str):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "test_kwargs",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def test_kwargs(**kwargs: Hashable):\n    requires_hashable_dict(kwargs)\nclass StrSubclass(str):\n    ...\ndef test_kwargs2(\n    a: Mapping[str, Any],\n    b: Mapping[Any, Hashable],\n    c: Dict[StrSubclass, Hashable],\n    d: int,\n    e: Mapping[int, Hashable],",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "test_kwargs2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def test_kwargs2(\n    a: Mapping[str, Any],\n    b: Mapping[Any, Hashable],\n    c: Dict[StrSubclass, Hashable],\n    d: int,\n    e: Mapping[int, Hashable],\n    f: Tuple[str, ...],\n):\n    test_kwargs(**a)\n    test_kwargs(**b)",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def func1(\n    value: str = ...,\n    *args: object,\n) -> None:\n    ...\ndef func2(\n    value: str = ...,\n    **kwargs: object,\n) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def func2(\n    value: str = ...,\n    **kwargs: object,\n) -> None:\n    ...\ndef func3(\n    value: str = ...,\n    *args: object,\n    **kwargs: object,\n) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function3",
        "description": "packages.pyright-internal.src.tests.samples.function3",
        "peekOfCode": "def func3(\n    value: str = ...,\n    *args: object,\n    **kwargs: object,\n) -> None:\n    ...\nv1: Callback1 = func1\nv2: Callback1 = func2\nv3: Callback1 = func3",
        "detail": "packages.pyright-internal.src.tests.samples.function3",
        "documentation": {}
    },
    {
        "label": "TestClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function4",
        "description": "packages.pyright-internal.src.tests.samples.function4",
        "peekOfCode": "class TestClass:\n    def method(self) -> None:\n        pass\n# This should generate an error.\nfunc1: Callable[[float], None] = TestClass.method",
        "detail": "packages.pyright-internal.src.tests.samples.function4",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function6",
        "description": "packages.pyright-internal.src.tests.samples.function6",
        "peekOfCode": "def f(key: str, msg: Optional[str]):\n    if msg is None:\n        my_dict = {\"a\": \"b\"}\n        msg = my_dict.get(key, \"c\")\n        # Without bidirectional type inference, the\n        # revealed type will be \"str\", but since \"msg\"\n        # has a declared type, it will be used in this\n        # case to inform the type \"str | None\", which\n        # is a valid solution for the constraint solver.\n        # Unfortunately, it's probably not the answer",
        "detail": "packages.pyright-internal.src.tests.samples.function6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function7",
        "description": "packages.pyright-internal.src.tests.samples.function7",
        "peekOfCode": "def func1(a: int) -> int:\n    return a\nx: object = func1\ny: Hashable = func1",
        "detail": "packages.pyright-internal.src.tests.samples.function7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function8",
        "description": "packages.pyright-internal.src.tests.samples.function8",
        "peekOfCode": "def func1(a: str) -> str:\n    ...\n@overload\ndef func1(a: int) -> int:\n    ...\ndef func1(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef func2(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef takes_object(val: object) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.function8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function8",
        "description": "packages.pyright-internal.src.tests.samples.function8",
        "peekOfCode": "def func1(a: int) -> int:\n    ...\ndef func1(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef func2(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef takes_object(val: object) -> None:\n    ...\ntakes_object(func1)\ntakes_object(func2)",
        "detail": "packages.pyright-internal.src.tests.samples.function8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function8",
        "description": "packages.pyright-internal.src.tests.samples.function8",
        "peekOfCode": "def func1(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef func2(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef takes_object(val: object) -> None:\n    ...\ntakes_object(func1)\ntakes_object(func2)\ndef func3(b: Callable[[str], bool]) -> None:\n    if b == func1:",
        "detail": "packages.pyright-internal.src.tests.samples.function8",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function8",
        "description": "packages.pyright-internal.src.tests.samples.function8",
        "peekOfCode": "def func2(a: Union[str, int]) -> Union[str, int]:\n    ...\ndef takes_object(val: object) -> None:\n    ...\ntakes_object(func1)\ntakes_object(func2)\ndef func3(b: Callable[[str], bool]) -> None:\n    if b == func1:\n        pass\n    if b != func2:",
        "detail": "packages.pyright-internal.src.tests.samples.function8",
        "documentation": {}
    },
    {
        "label": "takes_object",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function8",
        "description": "packages.pyright-internal.src.tests.samples.function8",
        "peekOfCode": "def takes_object(val: object) -> None:\n    ...\ntakes_object(func1)\ntakes_object(func2)\ndef func3(b: Callable[[str], bool]) -> None:\n    if b == func1:\n        pass\n    if b != func2:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.function8",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function8",
        "description": "packages.pyright-internal.src.tests.samples.function8",
        "peekOfCode": "def func3(b: Callable[[str], bool]) -> None:\n    if b == func1:\n        pass\n    if b != func2:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.function8",
        "documentation": {}
    },
    {
        "label": "_Writer1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class _Writer1(Protocol):\n    def write(self, a: str, b: str) -> object:\n        pass\nclass Writer1:\n    def write(self, a: str, /, b: str):\n        pass\ndef make_writer1(w: _Writer1):\n    pass\n# This should generate an error because the source function is positional-only.\nmake_writer1(Writer1())",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "Writer1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class Writer1:\n    def write(self, a: str, /, b: str):\n        pass\ndef make_writer1(w: _Writer1):\n    pass\n# This should generate an error because the source function is positional-only.\nmake_writer1(Writer1())\nclass _Writer2(Protocol):\n    def write(self, a: str, /, b: str) -> object:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "_Writer2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class _Writer2(Protocol):\n    def write(self, a: str, /, b: str) -> object:\n        pass\nclass Writer2:\n    def write(self, a: str, b: str):\n        pass\ndef make_writer2(w: _Writer2):\n    pass\nmake_writer2(Writer2())\nclass _Writer3(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "Writer2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class Writer2:\n    def write(self, a: str, b: str):\n        pass\ndef make_writer2(w: _Writer2):\n    pass\nmake_writer2(Writer2())\nclass _Writer3(Protocol):\n    def write(self, a: str, b: str) -> object:\n        pass\nclass Writer3:",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "_Writer3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class _Writer3(Protocol):\n    def write(self, a: str, b: str) -> object:\n        pass\nclass Writer3:\n    def write(self, __a: str, b: str):\n        pass\ndef make_writer3(w: _Writer3):\n    pass\n# This should generate an error because the source function is positional-only.\nmake_writer3(Writer3())",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "Writer3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class Writer3:\n    def write(self, __a: str, b: str):\n        pass\ndef make_writer3(w: _Writer3):\n    pass\n# This should generate an error because the source function is positional-only.\nmake_writer3(Writer3())\nclass _Writer4(Protocol):\n    def write(self, __a: str, b: str) -> object:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "_Writer4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class _Writer4(Protocol):\n    def write(self, __a: str, b: str) -> object:\n        pass\nclass Writer4:\n    def write(self, a: str, b: str):\n        pass\ndef make_writer4(w: _Writer4):\n    pass\nmake_writer4(Writer4())",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "Writer4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "class Writer4:\n    def write(self, a: str, b: str):\n        pass\ndef make_writer4(w: _Writer4):\n    pass\nmake_writer4(Writer4())",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "make_writer1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "def make_writer1(w: _Writer1):\n    pass\n# This should generate an error because the source function is positional-only.\nmake_writer1(Writer1())\nclass _Writer2(Protocol):\n    def write(self, a: str, /, b: str) -> object:\n        pass\nclass Writer2:\n    def write(self, a: str, b: str):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "make_writer2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "def make_writer2(w: _Writer2):\n    pass\nmake_writer2(Writer2())\nclass _Writer3(Protocol):\n    def write(self, a: str, b: str) -> object:\n        pass\nclass Writer3:\n    def write(self, __a: str, b: str):\n        pass\ndef make_writer3(w: _Writer3):",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "make_writer3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "def make_writer3(w: _Writer3):\n    pass\n# This should generate an error because the source function is positional-only.\nmake_writer3(Writer3())\nclass _Writer4(Protocol):\n    def write(self, __a: str, b: str) -> object:\n        pass\nclass Writer4:\n    def write(self, a: str, b: str):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "make_writer4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.function9",
        "description": "packages.pyright-internal.src.tests.samples.function9",
        "peekOfCode": "def make_writer4(w: _Writer4):\n    pass\nmake_writer4(Writer4())",
        "detail": "packages.pyright-internal.src.tests.samples.function9",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "class Foo:\n    pass\ndef func1g(*args, **kwargs):\n    # type: (*int, **float) -> int\n    return sum(args) + sum(round(kwarg) for kwarg in kwargs.values())\ndef func1h(\n    a,  # type: _Literal[\"{\", \"}\"]\n    b,  # type: Union[_Literal[\"%\"], _Literal[\"{\"], _Literal[\"$\"]]\n):\n    # type: (...) -> str",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1a(a, b):\n    # type: (int, str) -> str\n    return \"\"\ndef func1b(a, b):  # type: (Optional[str], int) -> str\n    return \"\"\ndef func1c(\n    a,  # type: int\n    b,  # type: str\n):\n    # type: (...) -> str",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1b(a, b):  # type: (Optional[str], int) -> str\n    return \"\"\ndef func1c(\n    a,  # type: int\n    b,  # type: str\n):\n    # type: (...) -> str\n    return \"\"\ndef func1d(\n    a,  # type: int",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1c",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1c(\n    a,  # type: int\n    b,  # type: str\n):\n    # type: (...) -> str\n    return \"\"\ndef func1d(\n    a,  # type: int\n    b,  # type: Foo\n):",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1d",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1d(\n    a,  # type: int\n    b,  # type: Foo\n):\n    # type: (...) -> str\n    return \"\"\ndef func1e(\n    a,  # type: int\n    b,  # type: str\n):",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1e",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1e(\n    a,  # type: int\n    b,  # type: str\n):\n    # type: (...) -> str\n    return \"\"\n# This should generate an error because a is unannotated.\ndef func1f(a):\n    # type: (...) -> str\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1f(a):\n    # type: (...) -> str\n    return \"\"\nclass Foo:\n    pass\ndef func1g(*args, **kwargs):\n    # type: (*int, **float) -> int\n    return sum(args) + sum(round(kwarg) for kwarg in kwargs.values())\ndef func1h(\n    a,  # type: _Literal[\"{\", \"}\"]",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1g(*args, **kwargs):\n    # type: (*int, **float) -> int\n    return sum(args) + sum(round(kwarg) for kwarg in kwargs.values())\ndef func1h(\n    a,  # type: _Literal[\"{\", \"}\"]\n    b,  # type: Union[_Literal[\"%\"], _Literal[\"{\"], _Literal[\"$\"]]\n):\n    # type: (...) -> str\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "func1h",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "peekOfCode": "def func1h(\n    a,  # type: _Literal[\"{\", \"}\"]\n    b,  # type: Union[_Literal[\"%\"], _Literal[\"{\"], _Literal[\"$\"]]\n):\n    # type: (...) -> str\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "peekOfCode": "class ClassA:\n    def method0(self, a, b):\n        # type: (str, int) -> str\n        return \"\"\n    # Too few annotations\n    def method1(self, a, b):\n        # type: (str) -> str\n        return \"\"\n    # Too many annotations\n    def method2(self, a, b):  # type: (str, int, int, int) -> str",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "documentation": {}
    },
    {
        "label": "func1a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "peekOfCode": "def func1a(a, b):\n    # type: (str) -> str\n    return \"\"\n# Too many annotations\ndef func1b(a, b):  # type: (str, int, int) -> str\n    return \"\"\nclass ClassA:\n    def method0(self, a, b):\n        # type: (str, int) -> str\n        return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "documentation": {}
    },
    {
        "label": "func1b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "peekOfCode": "def func1b(a, b):  # type: (str, int, int) -> str\n    return \"\"\nclass ClassA:\n    def method0(self, a, b):\n        # type: (str, int) -> str\n        return \"\"\n    # Too few annotations\n    def method1(self, a, b):\n        # type: (str) -> str\n        return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "peekOfCode": "class ClassA:\n    foo: str\n    def method0(self, a, b):\n        # type: (_T, str, ClassB) -> str\n        return self.foo\n    def method1(self, a, b):\n        # type: (_T, str, int) -> ClassB\n        return ClassB()\n    # Too many annotations\n    def method2(self, a, b):  # type: (_T, str, int, int) -> str",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "peekOfCode": "class ClassB:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=\"ClassA\")\nclass ClassA:\n    foo: str\n    def method0(self, a, b):\n        # type: (_T, str, ClassB) -> str\n        return self.foo\n    def method1(self, a, b):\n        # type: (_T, str, int) -> ClassB\n        return ClassB()\n    # Too many annotations",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation3",
        "documentation": {}
    },
    {
        "label": "func1a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "peekOfCode": "def func1a(a, b):\n    # type: (int, str) -> str\n    return \"\"\n# This should generate an error if reportTypeCommentUsage is enabled.\ndef func1b(a, b):  # type: (Optional[str], int) -> str\n    return \"\"\n# This should generate an error if reportTypeCommentUsage is enabled.\ndef func1c(\n    a,  # type: int\n    b,  # type: str",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "documentation": {}
    },
    {
        "label": "func1b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "peekOfCode": "def func1b(a, b):  # type: (Optional[str], int) -> str\n    return \"\"\n# This should generate an error if reportTypeCommentUsage is enabled.\ndef func1c(\n    a,  # type: int\n    b,  # type: str\n):\n    # type: (...) -> str\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "documentation": {}
    },
    {
        "label": "func1c",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "description": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "peekOfCode": "def func1c(\n    a,  # type: int\n    b,  # type: str\n):\n    # type: (...) -> str\n    return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.functionAnnotation4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember1",
        "description": "packages.pyright-internal.src.tests.samples.functionMember1",
        "peekOfCode": "def func1():\n    pass\na = func1.__annotations__\nb = func1.__class__\n# This should generate an error\nc = func1.bar\n# This should generate an error\nfunc1.baz = 3\n# This should generate an error\ndel func1.baz",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember1",
        "description": "packages.pyright-internal.src.tests.samples.functionMember1",
        "peekOfCode": "a = func1.__annotations__\nb = func1.__class__\n# This should generate an error\nc = func1.bar\n# This should generate an error\nfunc1.baz = 3\n# This should generate an error\ndel func1.baz",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember1",
        "description": "packages.pyright-internal.src.tests.samples.functionMember1",
        "peekOfCode": "b = func1.__class__\n# This should generate an error\nc = func1.bar\n# This should generate an error\nfunc1.baz = 3\n# This should generate an error\ndel func1.baz",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember1",
        "description": "packages.pyright-internal.src.tests.samples.functionMember1",
        "peekOfCode": "c = func1.bar\n# This should generate an error\nfunc1.baz = 3\n# This should generate an error\ndel func1.baz",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember1",
        "documentation": {}
    },
    {
        "label": "func1.baz",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember1",
        "description": "packages.pyright-internal.src.tests.samples.functionMember1",
        "peekOfCode": "func1.baz = 3\n# This should generate an error\ndel func1.baz",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "class A:\n    def method1(self) -> None:\n        ...\n    @classmethod\n    def method2(cls) -> None:\n        ...\n    @staticmethod\n    def method3() -> None:\n        ...\ns2 = A().method1.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "def func1(a: int) -> str:\n    ...\n# This should generate an error because func1 isn't\n# bound to a \"self\".\ns1 = func1.__self__\nclass A:\n    def method1(self) -> None:\n        ...\n    @classmethod\n    def method2(cls) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s1 = func1.__self__\nclass A:\n    def method1(self) -> None:\n        ...\n    @classmethod\n    def method2(cls) -> None:\n        ...\n    @staticmethod\n    def method3() -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s2 = A().method1.__self__\nreveal_type(s2, expected_text=\"A\")\ns3 = A.method2.__self__\nreveal_type(s3, expected_text=\"Type[A]\")\ns3 = A.method2.__self__\nreveal_type(s3, expected_text=\"Type[A]\")\ns4 = A().method2.__self__\nreveal_type(s4, expected_text=\"Type[A]\")\n# This should generate an error because method3 is static.\ns5 = A().method3.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s3 = A.method2.__self__\nreveal_type(s3, expected_text=\"Type[A]\")\ns3 = A.method2.__self__\nreveal_type(s3, expected_text=\"Type[A]\")\ns4 = A().method2.__self__\nreveal_type(s4, expected_text=\"Type[A]\")\n# This should generate an error because method3 is static.\ns5 = A().method3.__self__\n# This should generate an error because method3 is static.\ns6 = A.method3.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s3 = A.method2.__self__\nreveal_type(s3, expected_text=\"Type[A]\")\ns4 = A().method2.__self__\nreveal_type(s4, expected_text=\"Type[A]\")\n# This should generate an error because method3 is static.\ns5 = A().method3.__self__\n# This should generate an error because method3 is static.\ns6 = A.method3.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s4 = A().method2.__self__\nreveal_type(s4, expected_text=\"Type[A]\")\n# This should generate an error because method3 is static.\ns5 = A().method3.__self__\n# This should generate an error because method3 is static.\ns6 = A.method3.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s5 = A().method3.__self__\n# This should generate an error because method3 is static.\ns6 = A.method3.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "s6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.functionMember2",
        "description": "packages.pyright-internal.src.tests.samples.functionMember2",
        "peekOfCode": "s6 = A.method3.__self__",
        "detail": "packages.pyright-internal.src.tests.samples.functionMember2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "class ClassA:\n    pass\ns = True\nclass ClassB:\n    def shouldContinue(self):\n        global s\n        return s\nclass ClassC:\n    pass\ndef generator1() -> Generator[ClassA, ClassB, ClassC]:",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "class ClassB:\n    def shouldContinue(self):\n        global s\n        return s\nclass ClassC:\n    pass\ndef generator1() -> Generator[ClassA, ClassB, ClassC]:\n    cont = ClassB()\n    while cont.shouldContinue():\n        yield ClassA()",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "class ClassC:\n    pass\ndef generator1() -> Generator[ClassA, ClassB, ClassC]:\n    cont = ClassB()\n    while cont.shouldContinue():\n        yield ClassA()\n    return ClassC()\n# This should generate an error because the function\n# has no return statement at the bottom, so it\n# returns None which is not assignable to ClassC.",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "class TD1(TypedDict):\n    x: str\ndef generator12() -> Generator[TD1, None, None]:\n    yield {\"x\": \"x\"}\ndef generator13() -> Generator[TD1, None, None]:\n    # This should generate an error.\n    yield {\"y\": \"x\"}",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator1() -> Generator[ClassA, ClassB, ClassC]:\n    cont = ClassB()\n    while cont.shouldContinue():\n        yield ClassA()\n    return ClassC()\n# This should generate an error because the function\n# has no return statement at the bottom, so it\n# returns None which is not assignable to ClassC.\ndef generator2() -> Generator[ClassA, ClassB, ClassC]:\n    cont = ClassB()",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator2() -> Generator[ClassA, ClassB, ClassC]:\n    cont = ClassB()\n    if cont.shouldContinue():\n        # This should generate an error because False isn't\n        # assignable to the return type (ClassC).\n        return False\n    while cont.shouldContinue():\n        # This should generate an error because 3 isn't\n        # assignable to the yield type (ClassA).\n        yield 3",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator3() -> Generator[ClassA, int, Any]:\n    cont = ClassB()\n    if cont.shouldContinue():\n        return 3\n    while cont.shouldContinue():\n        # This should generate an error because 3 isn't\n        # assignable to the yield type (ClassA).\n        yield 3\ndef generator4() -> Iterable[ClassA]:\n    yield ClassA()",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator4() -> Iterable[ClassA]:\n    yield ClassA()\n    return True\ndef generator5() -> Iterator[ClassA]:\n    # This should generate an error because ClassB isn't\n    # assignable to ClassA.\n    yield ClassB()\ndef generate():\n    for i in range(2):\n        yield i",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator5() -> Iterator[ClassA]:\n    # This should generate an error because ClassB isn't\n    # assignable to ClassA.\n    yield ClassB()\ndef generate():\n    for i in range(2):\n        yield i\ns = generate()\n# Verify that a call to a Generator method succeeds\ns.close()",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generate():\n    for i in range(2):\n        yield i\ns = generate()\n# Verify that a call to a Generator method succeeds\ns.close()\ndef generator6():\n    yield\ndef generator7() -> Generator[None, None, None]:\n    yield",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator6():\n    yield\ndef generator7() -> Generator[None, None, None]:\n    yield\ndef generator8() -> Iterator[Dict[str, int]]:\n    # This tests the bidirectional type inference\n    # of dict types. It should not generate an error.\n    yield {\"hello\": 3}\n# This should generate an error.\ndef generator9() -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator7() -> Generator[None, None, None]:\n    yield\ndef generator8() -> Iterator[Dict[str, int]]:\n    # This tests the bidirectional type inference\n    # of dict types. It should not generate an error.\n    yield {\"hello\": 3}\n# This should generate an error.\ndef generator9() -> int:\n    yield None\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator8() -> Iterator[Dict[str, int]]:\n    # This tests the bidirectional type inference\n    # of dict types. It should not generate an error.\n    yield {\"hello\": 3}\n# This should generate an error.\ndef generator9() -> int:\n    yield None\n    return 3\n# This should generate an error.\nasync def generator10() -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator9() -> int:\n    yield None\n    return 3\n# This should generate an error.\nasync def generator10() -> int:\n    yield None\n# This should generate an error.\ndef generator11() -> List[int]:\n    yield 3\nclass TD1(TypedDict):",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator11() -> List[int]:\n    yield 3\nclass TD1(TypedDict):\n    x: str\ndef generator12() -> Generator[TD1, None, None]:\n    yield {\"x\": \"x\"}\ndef generator13() -> Generator[TD1, None, None]:\n    # This should generate an error.\n    yield {\"y\": \"x\"}",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator12() -> Generator[TD1, None, None]:\n    yield {\"x\": \"x\"}\ndef generator13() -> Generator[TD1, None, None]:\n    # This should generate an error.\n    yield {\"y\": \"x\"}",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "generator13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "def generator13() -> Generator[TD1, None, None]:\n    # This should generate an error.\n    yield {\"y\": \"x\"}",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "s = True\nclass ClassB:\n    def shouldContinue(self):\n        global s\n        return s\nclass ClassC:\n    pass\ndef generator1() -> Generator[ClassA, ClassB, ClassC]:\n    cont = ClassB()\n    while cont.shouldContinue():",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators1",
        "description": "packages.pyright-internal.src.tests.samples.generators1",
        "peekOfCode": "s = generate()\n# Verify that a call to a Generator method succeeds\ns.close()\ndef generator6():\n    yield\ndef generator7() -> Generator[None, None, None]:\n    yield\ndef generator8() -> Iterator[Dict[str, int]]:\n    # This tests the bidirectional type inference\n    # of dict types. It should not generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.generators1",
        "documentation": {}
    },
    {
        "label": "MyAwaitable",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators10",
        "description": "packages.pyright-internal.src.tests.samples.generators10",
        "peekOfCode": "class MyAwaitable(Awaitable):\n    def __await__(self):\n        yield from (sleep(0.1).__await__())\nasync def test():\n    x: None = await MyAwaitable()\nloop = get_event_loop()\nloop.run_until_complete(test())",
        "detail": "packages.pyright-internal.src.tests.samples.generators10",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators10",
        "description": "packages.pyright-internal.src.tests.samples.generators10",
        "peekOfCode": "loop = get_event_loop()\nloop.run_until_complete(test())",
        "detail": "packages.pyright-internal.src.tests.samples.generators10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators11",
        "description": "packages.pyright-internal.src.tests.samples.generators11",
        "peekOfCode": "def func1() -> Generator[int, None, str]:\n    yield 1\n    return \"done\"\ndef func2() -> Generator[int, int, None]:\n    # This should generate an error because yield is not allowed\n    # from within a list comprehension.\n    x = [(yield from func1()) for lel in range(5)]\n    v1 = yield from func1()\n    reveal_type(v1, expected_text=\"str\")\n    v2 = yield 4",
        "detail": "packages.pyright-internal.src.tests.samples.generators11",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators11",
        "description": "packages.pyright-internal.src.tests.samples.generators11",
        "peekOfCode": "def func2() -> Generator[int, int, None]:\n    # This should generate an error because yield is not allowed\n    # from within a list comprehension.\n    x = [(yield from func1()) for lel in range(5)]\n    v1 = yield from func1()\n    reveal_type(v1, expected_text=\"str\")\n    v2 = yield 4\n    reveal_type(v2, expected_text=\"int\")\ndef func3():\n    [x for x in (yield [[[1]], [[2]], [[3]]]) for y in x]",
        "detail": "packages.pyright-internal.src.tests.samples.generators11",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators11",
        "description": "packages.pyright-internal.src.tests.samples.generators11",
        "peekOfCode": "def func3():\n    [x for x in (yield [[[1]], [[2]], [[3]]]) for y in x]\n    # This should generate an error.\n    [x for x in [[[1]], [[2]], [[3]]] for y in (yield x)]",
        "detail": "packages.pyright-internal.src.tests.samples.generators11",
        "documentation": {}
    },
    {
        "label": "Yielder",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators12",
        "description": "packages.pyright-internal.src.tests.samples.generators12",
        "peekOfCode": "class Yielder:\n    def __iter__(self) -> Generator[int, None, bool]:\n        yield 1\n        return True\ndef collect1() -> Generator[str, None, bool]:\n    y = Yielder()\n    # This should generate an error because int doesn't match str.\n    z = yield from y\n    return z\ndef collect2():",
        "detail": "packages.pyright-internal.src.tests.samples.generators12",
        "documentation": {}
    },
    {
        "label": "collect1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators12",
        "description": "packages.pyright-internal.src.tests.samples.generators12",
        "peekOfCode": "def collect1() -> Generator[str, None, bool]:\n    y = Yielder()\n    # This should generate an error because int doesn't match str.\n    z = yield from y\n    return z\ndef collect2():\n    y = Yielder()\n    z = yield from y\n    reveal_type(z, expected_text=\"bool\")\n    return z",
        "detail": "packages.pyright-internal.src.tests.samples.generators12",
        "documentation": {}
    },
    {
        "label": "collect2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators12",
        "description": "packages.pyright-internal.src.tests.samples.generators12",
        "peekOfCode": "def collect2():\n    y = Yielder()\n    z = yield from y\n    reveal_type(z, expected_text=\"bool\")\n    return z",
        "detail": "packages.pyright-internal.src.tests.samples.generators12",
        "documentation": {}
    },
    {
        "label": "get_generator4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators13",
        "description": "packages.pyright-internal.src.tests.samples.generators13",
        "peekOfCode": "def get_generator4() -> AsyncGenerator[int, None]:\n    return (await get_value(v) for v in [1, 2, 3])\nasync def demo_bug1() -> None:\n    v1 = get_generator1()\n    reveal_type(v1, expected_text=\"Coroutine[Any, Any, AsyncGenerator[str, None]]\")\n    gen = await v1\n    reveal_type(gen, expected_text=\"AsyncGenerator[str, None]\")\n    async for s in gen:\n        print(s)\nasync def demo_bug2() -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.generators13",
        "documentation": {}
    },
    {
        "label": "loop",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators13",
        "description": "packages.pyright-internal.src.tests.samples.generators13",
        "peekOfCode": "loop = asyncio.get_event_loop()\nloop.run_until_complete(demo_bug1())\nloop.run_until_complete(demo_bug2())",
        "detail": "packages.pyright-internal.src.tests.samples.generators13",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators15",
        "description": "packages.pyright-internal.src.tests.samples.generators15",
        "peekOfCode": "def func1(*x: Any) -> None:\n    pass\nfunc1(x for x in [0, 1])\nfunc1((x for x in [0, 1]), 1)\nfunc1((x for x in [0, 1]),)\nfunc1(1, (x for x in [0, 1]))\n# This should generate an error.\nfunc1(x for x in [0, 1], 1)\n# This should generate an error.\nfunc1(x for x in [0, 1],)",
        "detail": "packages.pyright-internal.src.tests.samples.generators15",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators2",
        "description": "packages.pyright-internal.src.tests.samples.generators2",
        "peekOfCode": "class ClassA:\n    pass\nclass ClassB:\n    def shouldContinue(self):\n        return True\nclass ClassC:\n    pass\ndef generator1() -> Iterator[ClassA]:\n    yield from generator1()\ndef generator2() -> Iterator[ClassB]:",
        "detail": "packages.pyright-internal.src.tests.samples.generators2",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators2",
        "description": "packages.pyright-internal.src.tests.samples.generators2",
        "peekOfCode": "class ClassB:\n    def shouldContinue(self):\n        return True\nclass ClassC:\n    pass\ndef generator1() -> Iterator[ClassA]:\n    yield from generator1()\ndef generator2() -> Iterator[ClassB]:\n    # This should generate an error because it yields\n    # an iterator of the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.generators2",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators2",
        "description": "packages.pyright-internal.src.tests.samples.generators2",
        "peekOfCode": "class ClassC:\n    pass\ndef generator1() -> Iterator[ClassA]:\n    yield from generator1()\ndef generator2() -> Iterator[ClassB]:\n    # This should generate an error because it yields\n    # an iterator of the wrong type.\n    yield from generator1()\n    # This should also generate an error because it\n    # yields the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.generators2",
        "documentation": {}
    },
    {
        "label": "generator1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators2",
        "description": "packages.pyright-internal.src.tests.samples.generators2",
        "peekOfCode": "def generator1() -> Iterator[ClassA]:\n    yield from generator1()\ndef generator2() -> Iterator[ClassB]:\n    # This should generate an error because it yields\n    # an iterator of the wrong type.\n    yield from generator1()\n    # This should also generate an error because it\n    # yields the wrong type.\n    yield from [1]",
        "detail": "packages.pyright-internal.src.tests.samples.generators2",
        "documentation": {}
    },
    {
        "label": "generator2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators2",
        "description": "packages.pyright-internal.src.tests.samples.generators2",
        "peekOfCode": "def generator2() -> Iterator[ClassB]:\n    # This should generate an error because it yields\n    # an iterator of the wrong type.\n    yield from generator1()\n    # This should also generate an error because it\n    # yields the wrong type.\n    yield from [1]",
        "detail": "packages.pyright-internal.src.tests.samples.generators2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "class ClassA:\n    pass\nclass ClassB:\n    pass\ndef generator1():\n    yield ClassB()\ndef generator2():\n    yield \"Hello\"\n    yield ClassA()\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "class ClassB:\n    pass\ndef generator1():\n    yield ClassB()\ndef generator2():\n    yield \"Hello\"\n    yield ClassA()\n    return 3\ndef consumer1() -> ClassB:\n    return next(generator1())",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "generator1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "def generator1():\n    yield ClassB()\ndef generator2():\n    yield \"Hello\"\n    yield ClassA()\n    return 3\ndef consumer1() -> ClassB:\n    return next(generator1())\ndef consumer2() -> ClassA:\n    # This should generate an error because the",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "generator2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "def generator2():\n    yield \"Hello\"\n    yield ClassA()\n    return 3\ndef consumer1() -> ClassB:\n    return next(generator1())\ndef consumer2() -> ClassA:\n    # This should generate an error because the\n    # inferred type of generator1 should be incompatible\n    # with ClassA.",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "consumer1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "def consumer1() -> ClassB:\n    return next(generator1())\ndef consumer2() -> ClassA:\n    # This should generate an error because the\n    # inferred type of generator1 should be incompatible\n    # with ClassA.\n    return next(generator1())\ndef consumer3() -> Optional[ClassA]:\n    value = next(generator2())\n    if isinstance(value, str):",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "consumer2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "def consumer2() -> ClassA:\n    # This should generate an error because the\n    # inferred type of generator1 should be incompatible\n    # with ClassA.\n    return next(generator1())\ndef consumer3() -> Optional[ClassA]:\n    value = next(generator2())\n    if isinstance(value, str):\n        print(str)\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "consumer3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators3",
        "description": "packages.pyright-internal.src.tests.samples.generators3",
        "peekOfCode": "def consumer3() -> Optional[ClassA]:\n    value = next(generator2())\n    if isinstance(value, str):\n        print(str)\n    else:\n        return value",
        "detail": "packages.pyright-internal.src.tests.samples.generators3",
        "documentation": {}
    },
    {
        "label": "g1_explicit1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators4",
        "description": "packages.pyright-internal.src.tests.samples.generators4",
        "peekOfCode": "def g1_explicit1() -> Generator[int, None, None]:\n    yield 1\n    yield 2\nasync def g1_explicit2() -> AsyncGenerator[int, None]:\n    yield 1\n    yield 2\nasync def g2_explicit():\n    for v in g1_explicit1():\n        yield v\n    async for v in g1_explicit2():",
        "detail": "packages.pyright-internal.src.tests.samples.generators4",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators6",
        "description": "packages.pyright-internal.src.tests.samples.generators6",
        "peekOfCode": "def foo() -> Iterable[str]:\n    return\n    yield \"\"\nasync def afoo() -> AsyncIterable[str]:\n    return\n    yield \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.generators6",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators7",
        "description": "packages.pyright-internal.src.tests.samples.generators7",
        "peekOfCode": "def f():\n    yield from [1, 2, 3]\ndef g():\n    yield from f()\na: Dict[int, int] = {}\nfor i in g():\n    a[i] = i",
        "detail": "packages.pyright-internal.src.tests.samples.generators7",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators7",
        "description": "packages.pyright-internal.src.tests.samples.generators7",
        "peekOfCode": "def g():\n    yield from f()\na: Dict[int, int] = {}\nfor i in g():\n    a[i] = i",
        "detail": "packages.pyright-internal.src.tests.samples.generators7",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators8",
        "description": "packages.pyright-internal.src.tests.samples.generators8",
        "peekOfCode": "def foo() -> Generator[int, None, None]:\n    yield from ints1\n    yield from ints2",
        "detail": "packages.pyright-internal.src.tests.samples.generators8",
        "documentation": {}
    },
    {
        "label": "ints1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators8",
        "description": "packages.pyright-internal.src.tests.samples.generators8",
        "peekOfCode": "ints1 = [1, 2]\nints2 = [3, 4]\ndef foo() -> Generator[int, None, None]:\n    yield from ints1\n    yield from ints2",
        "detail": "packages.pyright-internal.src.tests.samples.generators8",
        "documentation": {}
    },
    {
        "label": "ints2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators8",
        "description": "packages.pyright-internal.src.tests.samples.generators8",
        "peekOfCode": "ints2 = [3, 4]\ndef foo() -> Generator[int, None, None]:\n    yield from ints1\n    yield from ints2",
        "detail": "packages.pyright-internal.src.tests.samples.generators8",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generators9",
        "description": "packages.pyright-internal.src.tests.samples.generators9",
        "peekOfCode": "class Foo:\n    # This should generate an error\n    yield",
        "detail": "packages.pyright-internal.src.tests.samples.generators9",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generators9",
        "description": "packages.pyright-internal.src.tests.samples.generators9",
        "peekOfCode": "def foo(a: bool):\n    if a:\n        yield 3\n    yield 5\n# This should generate an error\nyield 7\nclass Foo:\n    # This should generate an error\n    yield",
        "detail": "packages.pyright-internal.src.tests.samples.generators9",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generators9",
        "description": "packages.pyright-internal.src.tests.samples.generators9",
        "peekOfCode": "a = lambda: (yield)\ndef foo(a: bool):\n    if a:\n        yield 3\n    yield 5\n# This should generate an error\nyield 7\nclass Foo:\n    # This should generate an error\n    yield",
        "detail": "packages.pyright-internal.src.tests.samples.generators9",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "class Class1(Generic):\n    ...\n# This should generate two errors (a parse error and a semantic error).\nclass Class2(Generic[]):\n    ...\n# This should generate an error.\nclass Class3(Generic[int]):\n    ...\n# This should generate two errors.\nclass Class4(Generic[T, T, T]):",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "class Class2(Generic[]):\n    ...\n# This should generate an error.\nclass Class3(Generic[int]):\n    ...\n# This should generate two errors.\nclass Class4(Generic[T, T, T]):\n    ...\n# This should generate an error.\ndef func1(x: Generic[T]) -> T:",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "class Class3(Generic[int]):\n    ...\n# This should generate two errors.\nclass Class4(Generic[T, T, T]):\n    ...\n# This should generate an error.\ndef func1(x: Generic[T]) -> T:\n    ...\n# This should generate an error.\ndef func2(x: T) -> Generic[T]:",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "Class4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "class Class4(Generic[T, T, T]):\n    ...\n# This should generate an error.\ndef func1(x: Generic[T]) -> T:\n    ...\n# This should generate an error.\ndef func2(x: T) -> Generic[T]:\n    ...\nclass Class5(Generic[T]):\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "Class5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "class Class5(Generic[T]):\n    # This should generate an error.\n    x: Generic[T]\ndef func3(x: type):\n    if x is Generic:\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "def func1(x: Generic[T]) -> T:\n    ...\n# This should generate an error.\ndef func2(x: T) -> Generic[T]:\n    ...\nclass Class5(Generic[T]):\n    # This should generate an error.\n    x: Generic[T]\ndef func3(x: type):\n    if x is Generic:",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "def func2(x: T) -> Generic[T]:\n    ...\nclass Class5(Generic[T]):\n    # This should generate an error.\n    x: Generic[T]\ndef func3(x: type):\n    if x is Generic:\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "def func3(x: type):\n    if x is Generic:\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.generic1",
        "description": "packages.pyright-internal.src.tests.samples.generic1",
        "peekOfCode": "T = TypeVar(\"T\")\n# This should generate an error.\nclass Class1(Generic):\n    ...\n# This should generate two errors (a parse error and a semantic error).\nclass Class2(Generic[]):\n    ...\n# This should generate an error.\nclass Class3(Generic[int]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.generic1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "class Foo(Iterable[_T2], Generic[_T1, _T2]):\n    def __init__(self, a: _T1, b: _T2):\n        pass\n    def foo(self, a: _T1, b: _T2) -> _T2:\n        return b\n    def __iter__(self) -> Iterator[int]:\n        ...\na: Foo[int, str] = Foo(2, \"\")\nb: str = a.foo(4, \"\")\n# This should generate an error because a class shouldn't",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "class Bar(Generic[_T1], Generic[_T2]):\n    pass\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\n# This should generate an error because V isn't included\n# in the Generic type variable list.\nclass A(Mapping[K, V], Generic[K]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "class A(Mapping[K, V], Generic[K]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\n    \"_T2\", \"str\", \"int\"\n)  # 'str' and 'int' should be treated as forward reference\nclass Foo(Iterable[_T2], Generic[_T1, _T2]):\n    def __init__(self, a: _T1, b: _T2):\n        pass\n    def foo(self, a: _T1, b: _T2) -> _T2:\n        return b\n    def __iter__(self) -> Iterator[int]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "_T2 = TypeVar(\n    \"_T2\", \"str\", \"int\"\n)  # 'str' and 'int' should be treated as forward reference\nclass Foo(Iterable[_T2], Generic[_T1, _T2]):\n    def __init__(self, a: _T1, b: _T2):\n        pass\n    def foo(self, a: _T1, b: _T2) -> _T2:\n        return b\n    def __iter__(self) -> Iterator[int]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "K = TypeVar(\"K\")\nV = TypeVar(\"V\")\n# This should generate an error because V isn't included\n# in the Generic type variable list.\nclass A(Mapping[K, V], Generic[K]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "peekOfCode": "V = TypeVar(\"V\")\n# This should generate an error because V isn't included\n# in the Generic type variable list.\nclass A(Mapping[K, V], Generic[K]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes10",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "peekOfCode": "class Foo(Iterator[_T], Protocol):\n    pass\ndef foo(func: Callable[..., Iterator[_T]]) -> Callable[..., Foo[_T]]:\n    ...\n@foo\ndef f() -> Iterator[str]:\n    yield \"\"\na = f()\nb: Foo[str] = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "peekOfCode": "def foo(func: Callable[..., Iterator[_T]]) -> Callable[..., Foo[_T]]:\n    ...\n@foo\ndef f() -> Iterator[str]:\n    yield \"\"\na = f()\nb: Foo[str] = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "peekOfCode": "def f() -> Iterator[str]:\n    yield \"\"\na = f()\nb: Foo[str] = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "peekOfCode": "_T = TypeVar(\"_T\", covariant=True)\nclass Foo(Iterator[_T], Protocol):\n    pass\ndef foo(func: Callable[..., Iterator[_T]]) -> Callable[..., Foo[_T]]:\n    ...\n@foo\ndef f() -> Iterator[str]:\n    yield \"\"\na = f()\nb: Foo[str] = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "peekOfCode": "a = f()\nb: Foo[str] = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes11",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes12",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes12",
        "peekOfCode": "foo = bar",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes12",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\nclass C(A):\n    pass\n_T_A = TypeVar(\"_T_A\", bound=A)\ndef testFunc(value: Dict[str, _T_A]) -> _T_A:\n    return value[\"a\"]\nx = testFunc({\"b\": B(), \"c\": C()})",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "peekOfCode": "class B(A):\n    pass\nclass C(A):\n    pass\n_T_A = TypeVar(\"_T_A\", bound=A)\ndef testFunc(value: Dict[str, _T_A]) -> _T_A:\n    return value[\"a\"]\nx = testFunc({\"b\": B(), \"c\": C()})\nreveal_type(x, expected_text=\"B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "peekOfCode": "class C(A):\n    pass\n_T_A = TypeVar(\"_T_A\", bound=A)\ndef testFunc(value: Dict[str, _T_A]) -> _T_A:\n    return value[\"a\"]\nx = testFunc({\"b\": B(), \"c\": C()})\nreveal_type(x, expected_text=\"B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "documentation": {}
    },
    {
        "label": "testFunc",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "peekOfCode": "def testFunc(value: Dict[str, _T_A]) -> _T_A:\n    return value[\"a\"]\nx = testFunc({\"b\": B(), \"c\": C()})\nreveal_type(x, expected_text=\"B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "documentation": {}
    },
    {
        "label": "_T_A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "peekOfCode": "_T_A = TypeVar(\"_T_A\", bound=A)\ndef testFunc(value: Dict[str, _T_A]) -> _T_A:\n    return value[\"a\"]\nx = testFunc({\"b\": B(), \"c\": C()})\nreveal_type(x, expected_text=\"B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "peekOfCode": "x = testFunc({\"b\": B(), \"c\": C()})\nreveal_type(x, expected_text=\"B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes13",
        "documentation": {}
    },
    {
        "label": "filter",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "peekOfCode": "def filter(__function: None, __iterable: Iterable[Optional[_T]]) -> Iterator[_T]:\n    ...\n# In this case, bool is a subclass of int, so the TypeVar\n# matching for _T should evaluate to Iterator[int].\nlist_of_bools_and_ints: List[Union[Literal[False], int]] = []\ngenerator_of_ints = filter(None, list_of_bools_and_ints)\na: int = next(generator_of_ints)\n# This should generate an error\nb: bool = next(generator_of_ints)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef filter(__function: None, __iterable: Iterable[Optional[_T]]) -> Iterator[_T]:\n    ...\n# In this case, bool is a subclass of int, so the TypeVar\n# matching for _T should evaluate to Iterator[int].\nlist_of_bools_and_ints: List[Union[Literal[False], int]] = []\ngenerator_of_ints = filter(None, list_of_bools_and_ints)\na: int = next(generator_of_ints)\n# This should generate an error\nb: bool = next(generator_of_ints)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "documentation": {}
    },
    {
        "label": "generator_of_ints",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "peekOfCode": "generator_of_ints = filter(None, list_of_bools_and_ints)\na: int = next(generator_of_ints)\n# This should generate an error\nb: bool = next(generator_of_ints)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes14",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes15",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes15",
        "peekOfCode": "result = dict.keys(foo)\nreveal_type(result, expected_text=\"dict_keys[Unknown, Unknown]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes15",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "peekOfCode": "def foo(value: object) -> bool:\n    ...\n# This should evaluate to a type of \"Iterable[str]\",\n# not \"Iterable[object]\".\nfiltered_list = filter(foo, [\"b\", \"a\", \"r\"])\nshould_be_str = next(filtered_list)\na = len(should_be_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "documentation": {}
    },
    {
        "label": "filtered_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "peekOfCode": "filtered_list = filter(foo, [\"b\", \"a\", \"r\"])\nshould_be_str = next(filtered_list)\na = len(should_be_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "documentation": {}
    },
    {
        "label": "should_be_str",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "peekOfCode": "should_be_str = next(filtered_list)\na = len(should_be_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "peekOfCode": "a = len(should_be_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes16",
        "documentation": {}
    },
    {
        "label": "is_one",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "peekOfCode": "def is_one(x: int) -> bool:\n    return x == 1\nnums = [\"a\", \"b\", \"c\"]\n_T = TypeVar(\"_T\")\ndef filterX(__function: Callable[[_T], Any], __iterable: Iterable[_T]) -> Iterator[_T]:\n    ...\n# This should be flagged as an error because nums is\n# not an int array.\nones = filterX(is_one, nums)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "documentation": {}
    },
    {
        "label": "filterX",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "peekOfCode": "def filterX(__function: Callable[[_T], Any], __iterable: Iterable[_T]) -> Iterator[_T]:\n    ...\n# This should be flagged as an error because nums is\n# not an int array.\nones = filterX(is_one, nums)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "peekOfCode": "nums = [\"a\", \"b\", \"c\"]\n_T = TypeVar(\"_T\")\ndef filterX(__function: Callable[[_T], Any], __iterable: Iterable[_T]) -> Iterator[_T]:\n    ...\n# This should be flagged as an error because nums is\n# not an int array.\nones = filterX(is_one, nums)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef filterX(__function: Callable[[_T], Any], __iterable: Iterable[_T]) -> Iterator[_T]:\n    ...\n# This should be flagged as an error because nums is\n# not an int array.\nones = filterX(is_one, nums)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "documentation": {}
    },
    {
        "label": "ones",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "peekOfCode": "ones = filterX(is_one, nums)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes17",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class Foo1:\n    pass\nclass Foo2:\n    pass\nclass Foo3:\n    pass\nT = TypeVar(\"T\")\nResponse5 = Union[T, Foo1, Foo2]\n# Test nested type aliases\nResponse6 = Response5[Response4[Foo3]]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class Foo2:\n    pass\nclass Foo3:\n    pass\nT = TypeVar(\"T\")\nResponse5 = Union[T, Foo1, Foo2]\n# Test nested type aliases\nResponse6 = Response5[Response4[Foo3]]\ndef f6_1() -> Response6:\n    return Foo1()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Foo3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class Foo3:\n    pass\nT = TypeVar(\"T\")\nResponse5 = Union[T, Foo1, Foo2]\n# Test nested type aliases\nResponse6 = Response5[Response4[Foo3]]\ndef f6_1() -> Response6:\n    return Foo1()\ndef f6_2() -> Response6:\n    return Foo2()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "InnerA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class InnerA:\n    pass\nclass InnerB:\n    pass\nT = TypeVar(\"T\", bound=InnerA)\nclass A(Generic[T]):\n    pass\nclass B:\n    pass\nU = Union[A[T], B]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "InnerB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class InnerB:\n    pass\nT = TypeVar(\"T\", bound=InnerA)\nclass A(Generic[T]):\n    pass\nclass B:\n    pass\nU = Union[A[T], B]\na: U[InnerA]\n# This should generate an error because InnerB is not",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class A(Generic[T]):\n    pass\nclass B:\n    pass\nU = Union[A[T], B]\na: U[InnerA]\n# This should generate an error because InnerB is not\n# compatible with the type bound to TypeVar T.\nb: U[InnerB]\nV = Union[A[T], T]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "class B:\n    pass\nU = Union[A[T], B]\na: U[InnerA]\n# This should generate an error because InnerB is not\n# compatible with the type bound to TypeVar T.\nb: U[InnerB]\nV = Union[A[T], T]\n# This should generate an error because too many type\n# arguments are provided.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f1_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f1_1() -> Response1[str]:\n    return None\ndef f1_2() -> Response1[str]:\n    return \"s\"\ndef f1_3() -> Response1[float]:\n    # This should generate an error.\n    return \"s\"\nResponse2 = Union[S, int]\ndef f2_1() -> Response2[Any]:\n    return \"s\"",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f1_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f1_2() -> Response1[str]:\n    return \"s\"\ndef f1_3() -> Response1[float]:\n    # This should generate an error.\n    return \"s\"\nResponse2 = Union[S, int]\ndef f2_1() -> Response2[Any]:\n    return \"s\"\ndef f2_2() -> Response2[str]:\n    return \"s\"",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f1_3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f1_3() -> Response1[float]:\n    # This should generate an error.\n    return \"s\"\nResponse2 = Union[S, int]\ndef f2_1() -> Response2[Any]:\n    return \"s\"\ndef f2_2() -> Response2[str]:\n    return \"s\"\ndef f2_3() -> Response2[float]:\n    return 3.4",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f2_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f2_1() -> Response2[Any]:\n    return \"s\"\ndef f2_2() -> Response2[str]:\n    return \"s\"\ndef f2_3() -> Response2[float]:\n    return 3.4\ndef f2_4() -> Response2[datetime]:\n    # This should generate an error\n    return 3.4\nResponse3 = Callable[[S], S]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f2_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f2_2() -> Response2[str]:\n    return \"s\"\ndef f2_3() -> Response2[float]:\n    return 3.4\ndef f2_4() -> Response2[datetime]:\n    # This should generate an error\n    return 3.4\nResponse3 = Callable[[S], S]\ndef response2(query: str) -> Response3[int]:\n    return lambda x: x + 2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f2_3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f2_3() -> Response2[float]:\n    return 3.4\ndef f2_4() -> Response2[datetime]:\n    # This should generate an error\n    return 3.4\nResponse3 = Callable[[S], S]\ndef response2(query: str) -> Response3[int]:\n    return lambda x: x + 2\ndef response3(query: str) -> Response3[datetime]:\n    # This should generate an error because datetime doesn't support +",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f2_4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f2_4() -> Response2[datetime]:\n    # This should generate an error\n    return 3.4\nResponse3 = Callable[[S], S]\ndef response2(query: str) -> Response3[int]:\n    return lambda x: x + 2\ndef response3(query: str) -> Response3[datetime]:\n    # This should generate an error because datetime doesn't support +\n    return lambda x: x + 2\nResponse4 = Union[S, int, str]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "response2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def response2(query: str) -> Response3[int]:\n    return lambda x: x + 2\ndef response3(query: str) -> Response3[datetime]:\n    # This should generate an error because datetime doesn't support +\n    return lambda x: x + 2\nResponse4 = Union[S, int, str]\nclass Foo1:\n    pass\nclass Foo2:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "response3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def response3(query: str) -> Response3[datetime]:\n    # This should generate an error because datetime doesn't support +\n    return lambda x: x + 2\nResponse4 = Union[S, int, str]\nclass Foo1:\n    pass\nclass Foo2:\n    pass\nclass Foo3:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f6_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f6_1() -> Response6:\n    return Foo1()\ndef f6_2() -> Response6:\n    return Foo2()\ndef f6_3() -> Response6:\n    return Foo3()\ndef f6_4() -> Response6:\n    return 3\ndef f6_5() -> Response6:\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f6_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f6_2() -> Response6:\n    return Foo2()\ndef f6_3() -> Response6:\n    return Foo3()\ndef f6_4() -> Response6:\n    return 3\ndef f6_5() -> Response6:\n    # This should generate an error\n    return None\nclass InnerA:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f6_3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f6_3() -> Response6:\n    return Foo3()\ndef f6_4() -> Response6:\n    return 3\ndef f6_5() -> Response6:\n    # This should generate an error\n    return None\nclass InnerA:\n    pass\nclass InnerB:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f6_4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f6_4() -> Response6:\n    return 3\ndef f6_5() -> Response6:\n    # This should generate an error\n    return None\nclass InnerA:\n    pass\nclass InnerB:\n    pass\nT = TypeVar(\"T\", bound=InnerA)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "f6_5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "def f6_5() -> Response6:\n    # This should generate an error\n    return None\nclass InnerA:\n    pass\nclass InnerB:\n    pass\nT = TypeVar(\"T\", bound=InnerA)\nclass A(Generic[T]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "S = TypeVar(\"S\")\nResponse1 = Optional[Union[S, int]]\ndef f1_1() -> Response1[str]:\n    return None\ndef f1_2() -> Response1[str]:\n    return \"s\"\ndef f1_3() -> Response1[float]:\n    # This should generate an error.\n    return \"s\"\nResponse2 = Union[S, int]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Response1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "Response1 = Optional[Union[S, int]]\ndef f1_1() -> Response1[str]:\n    return None\ndef f1_2() -> Response1[str]:\n    return \"s\"\ndef f1_3() -> Response1[float]:\n    # This should generate an error.\n    return \"s\"\nResponse2 = Union[S, int]\ndef f2_1() -> Response2[Any]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Response2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "Response2 = Union[S, int]\ndef f2_1() -> Response2[Any]:\n    return \"s\"\ndef f2_2() -> Response2[str]:\n    return \"s\"\ndef f2_3() -> Response2[float]:\n    return 3.4\ndef f2_4() -> Response2[datetime]:\n    # This should generate an error\n    return 3.4",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Response3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "Response3 = Callable[[S], S]\ndef response2(query: str) -> Response3[int]:\n    return lambda x: x + 2\ndef response3(query: str) -> Response3[datetime]:\n    # This should generate an error because datetime doesn't support +\n    return lambda x: x + 2\nResponse4 = Union[S, int, str]\nclass Foo1:\n    pass\nclass Foo2:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Response4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "Response4 = Union[S, int, str]\nclass Foo1:\n    pass\nclass Foo2:\n    pass\nclass Foo3:\n    pass\nT = TypeVar(\"T\")\nResponse5 = Union[T, Foo1, Foo2]\n# Test nested type aliases",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "T = TypeVar(\"T\")\nResponse5 = Union[T, Foo1, Foo2]\n# Test nested type aliases\nResponse6 = Response5[Response4[Foo3]]\ndef f6_1() -> Response6:\n    return Foo1()\ndef f6_2() -> Response6:\n    return Foo2()\ndef f6_3() -> Response6:\n    return Foo3()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Response5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "Response5 = Union[T, Foo1, Foo2]\n# Test nested type aliases\nResponse6 = Response5[Response4[Foo3]]\ndef f6_1() -> Response6:\n    return Foo1()\ndef f6_2() -> Response6:\n    return Foo2()\ndef f6_3() -> Response6:\n    return Foo3()\ndef f6_4() -> Response6:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Response6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "Response6 = Response5[Response4[Foo3]]\ndef f6_1() -> Response6:\n    return Foo1()\ndef f6_2() -> Response6:\n    return Foo2()\ndef f6_3() -> Response6:\n    return Foo3()\ndef f6_4() -> Response6:\n    return 3\ndef f6_5() -> Response6:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "T = TypeVar(\"T\", bound=InnerA)\nclass A(Generic[T]):\n    pass\nclass B:\n    pass\nU = Union[A[T], B]\na: U[InnerA]\n# This should generate an error because InnerB is not\n# compatible with the type bound to TypeVar T.\nb: U[InnerB]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "U = Union[A[T], B]\na: U[InnerA]\n# This should generate an error because InnerB is not\n# compatible with the type bound to TypeVar T.\nb: U[InnerB]\nV = Union[A[T], T]\n# This should generate an error because too many type\n# arguments are provided.\nc: V[InnerA, int]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "peekOfCode": "V = Union[A[T], T]\n# This should generate an error because too many type\n# arguments are provided.\nc: V[InnerA, int]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes18",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "peekOfCode": "class Foo(Generic[_A, _B]):\n    def __init__(self, a: _A, b: _B = \"hello\"):\n        self._foo_a = a\n        self._foo_b = b\n    @property\n    def value_a(self):\n        return self._foo_a\n    @property\n    def value_b(self):\n        return self._foo_b",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "documentation": {}
    },
    {
        "label": "_A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "peekOfCode": "_A = TypeVar(\"_A\")\n_B = TypeVar(\"_B\")\nclass Foo(Generic[_A, _B]):\n    def __init__(self, a: _A, b: _B = \"hello\"):\n        self._foo_a = a\n        self._foo_b = b\n    @property\n    def value_a(self):\n        return self._foo_a\n    @property",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "documentation": {}
    },
    {
        "label": "_B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "peekOfCode": "_B = TypeVar(\"_B\")\nclass Foo(Generic[_A, _B]):\n    def __init__(self, a: _A, b: _B = \"hello\"):\n        self._foo_a = a\n        self._foo_b = b\n    @property\n    def value_a(self):\n        return self._foo_a\n    @property\n    def value_b(self):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "peekOfCode": "foo = Foo(27)\nreveal_type(foo.value_a, expected_text=\"int\")\nreveal_type(foo.value_b, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes19",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "peekOfCode": "class Foo:\n    ...\ndef call_len(x: Foo) -> None:\n    pass\n# This should generate an error because call_len takes a str,\n# which isn't compatible with a List[int].\nfor_each([1, 2, 3], call_len)\ndef validate_param_types(i: int, s: str):\n    pass\nasync def test():",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "documentation": {}
    },
    {
        "label": "for_each",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "peekOfCode": "def for_each(xs: List[T], f: Callable[[T], Any]) -> None:\n    for x in xs:\n        f(x)\nclass Foo:\n    ...\ndef call_len(x: Foo) -> None:\n    pass\n# This should generate an error because call_len takes a str,\n# which isn't compatible with a List[int].\nfor_each([1, 2, 3], call_len)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "documentation": {}
    },
    {
        "label": "call_len",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "peekOfCode": "def call_len(x: Foo) -> None:\n    pass\n# This should generate an error because call_len takes a str,\n# which isn't compatible with a List[int].\nfor_each([1, 2, 3], call_len)\ndef validate_param_types(i: int, s: str):\n    pass\nasync def test():\n    import asyncio\n    async def get_int() -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "documentation": {}
    },
    {
        "label": "validate_param_types",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "peekOfCode": "def validate_param_types(i: int, s: str):\n    pass\nasync def test():\n    import asyncio\n    async def get_int() -> int:\n        return 42\n    async def get_str() -> str:\n        return \"Hi!\"\n    i, s = await asyncio.gather(get_int(), get_str())\n    validate_param_types(i, s)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "peekOfCode": "T = TypeVar(\"T\")\ndef for_each(xs: List[T], f: Callable[[T], Any]) -> None:\n    for x in xs:\n        f(x)\nclass Foo:\n    ...\ndef call_len(x: Foo) -> None:\n    pass\n# This should generate an error because call_len takes a str,\n# which isn't compatible with a List[int].",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "peekOfCode": "class Foo(Handler):\n    def __init__(self, a, b=\"hello\", level=NOTSET):\n        super().__init__(level)\n        self._foo_a = a\n        self._foo_b = b\n    @property\n    def value_a(self):\n        return self._foo_a\n    @property\n    def value_b(self):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "peekOfCode": "foo1 = Foo(27)\nreveal_type(foo1.value_a, expected_text=\"int\")\nreveal_type(foo1.value_b, expected_text=\"str\")\nfoo2 = Foo(\"hello\", \"27\")\nreveal_type(foo2.value_a, expected_text=\"str\")\nreveal_type(foo2.value_b, expected_text=\"str\")\n# This should generate an error because a pseudo-generic\n# class is not actually generic.\nfoo3: Foo[int, str, int]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "peekOfCode": "foo2 = Foo(\"hello\", \"27\")\nreveal_type(foo2.value_a, expected_text=\"str\")\nreveal_type(foo2.value_b, expected_text=\"str\")\n# This should generate an error because a pseudo-generic\n# class is not actually generic.\nfoo3: Foo[int, str, int]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes20",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "peekOfCode": "def foo1(v: Optional[_T]) -> _T:\n    if v is None:\n        raise ValueError\n    return v\ndef foo2(v: _T) -> _T:\n    if v is None:\n        raise ValueError\n    return v\nf: Optional[int] = None\n# This should not generate an error because type var _T",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "peekOfCode": "def foo2(v: _T) -> _T:\n    if v is None:\n        raise ValueError\n    return v\nf: Optional[int] = None\n# This should not generate an error because type var _T\n# should be matched to \"int\" rather than \"Optional[int]\".\na: int = foo1(f)\n# This should generate an error because type var _T\n# should be matched to \"Optional[int]\".",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef foo1(v: Optional[_T]) -> _T:\n    if v is None:\n        raise ValueError\n    return v\ndef foo2(v: _T) -> _T:\n    if v is None:\n        raise ValueError\n    return v\nf: Optional[int] = None",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes21",
        "documentation": {}
    },
    {
        "label": "do_the_thing",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes22",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes22",
        "peekOfCode": "def do_the_thing(param: Union[Sequence[AnyStr], AnyStr]) -> None:\n    if isinstance(param, str):\n        print(f\"str: {param}\")\n        return\n    if isinstance(param, bytes):\n        print(f\"bytes: {param!r}\")\n        return\n    print(f\"list:\")\n    for itm in param:\n        print(f\"  -> {itm}\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes22",
        "documentation": {}
    },
    {
        "label": "Root",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "peekOfCode": "class Root(Generic[T]):\n    def __init__(self, _lambda: Callable[[T], T]):\n        self._lambda = _lambda\n    def call(self, val: T) -> T:\n        return self._lambda(val)\nclass Leaf(Root[T]):\n    pass\nroot_int: Root[int] = Root[int](lambda x: x << 2)\n# This should generate an error.\nroot_float: Root[float] = root_int",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "documentation": {}
    },
    {
        "label": "Leaf",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "peekOfCode": "class Leaf(Root[T]):\n    pass\nroot_int: Root[int] = Root[int](lambda x: x << 2)\n# This should generate an error.\nroot_float: Root[float] = root_int\n# This should generate an error.\nroot_float: Root[float] = Root[int](lambda x: x << 2)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "peekOfCode": "T = TypeVar(\"T\", bound=float)\nclass Root(Generic[T]):\n    def __init__(self, _lambda: Callable[[T], T]):\n        self._lambda = _lambda\n    def call(self, val: T) -> T:\n        return self._lambda(val)\nclass Leaf(Root[T]):\n    pass\nroot_int: Root[int] = Root[int](lambda x: x << 2)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes23",
        "documentation": {}
    },
    {
        "label": "Base1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "peekOfCode": "class Base1(Generic[T]):\n    pass\nclass Derived1(Base1[T]):\n    pass\nval1: Base1[int] = Derived1[int]()\nclass Base2(Generic[T]):\n    pass\nclass Derived2(Base2[float], Generic[T]):\n    pass\nval2_1: Base2[float] = Derived2[int]()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "documentation": {}
    },
    {
        "label": "Derived1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "peekOfCode": "class Derived1(Base1[T]):\n    pass\nval1: Base1[int] = Derived1[int]()\nclass Base2(Generic[T]):\n    pass\nclass Derived2(Base2[float], Generic[T]):\n    pass\nval2_1: Base2[float] = Derived2[int]()\n# This should generate an error because Derived2[int]\n# isn't assignable to Base2[int].",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "documentation": {}
    },
    {
        "label": "Base2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "peekOfCode": "class Base2(Generic[T]):\n    pass\nclass Derived2(Base2[float], Generic[T]):\n    pass\nval2_1: Base2[float] = Derived2[int]()\n# This should generate an error because Derived2[int]\n# isn't assignable to Base2[int].\nval2_2: Base2[int] = Derived2[int]()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "documentation": {}
    },
    {
        "label": "Derived2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "peekOfCode": "class Derived2(Base2[float], Generic[T]):\n    pass\nval2_1: Base2[float] = Derived2[int]()\n# This should generate an error because Derived2[int]\n# isn't assignable to Base2[int].\nval2_2: Base2[int] = Derived2[int]()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "peekOfCode": "T = TypeVar(\"T\", bound=float)\nclass Base1(Generic[T]):\n    pass\nclass Derived1(Base1[T]):\n    pass\nval1: Base1[int] = Derived1[int]()\nclass Base2(Generic[T]):\n    pass\nclass Derived2(Base2[float], Generic[T]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes24",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "peekOfCode": "class Item(Generic[T]):\n    value: Optional[T]\n    def __init__(self, source: Optional[T]) -> None:\n        self.value = source\n    def read(self) -> Optional[T]:\n        if self.value is None:\n            raise RuntimeError(f\"Item is required!\")\n        return self.value",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "documentation": {}
    },
    {
        "label": "version1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "peekOfCode": "def version1(cmd: Command) -> List[str]:\n    if isinstance(cmd, bytes):\n        return [str(cmd, \"utf-8\")]\n    if isinstance(cmd, str):\n        return [cmd]\n    ret: List[str] = []\n    for itm in cmd:\n        if isinstance(itm, str):\n            ret.append(itm)\n        else:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "peekOfCode": "Command = Union[AnyStr, Sequence[AnyStr]]\ndef version1(cmd: Command) -> List[str]:\n    if isinstance(cmd, bytes):\n        return [str(cmd, \"utf-8\")]\n    if isinstance(cmd, str):\n        return [cmd]\n    ret: List[str] = []\n    for itm in cmd:\n        if isinstance(itm, str):\n            ret.append(itm)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "peekOfCode": "T = TypeVar(\"T\", str, int, float, bool)\nclass Item(Generic[T]):\n    value: Optional[T]\n    def __init__(self, source: Optional[T]) -> None:\n        self.value = source\n    def read(self) -> Optional[T]:\n        if self.value is None:\n            raise RuntimeError(f\"Item is required!\")\n        return self.value",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes25",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes26",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes26",
        "peekOfCode": "class MyClass(metaclass=abc.ABCMeta):\n    def __init__(self, value=None):\n        self._cache = {\"value\": value}\n    @property\n    def cache(self):\n        return self._cache\n    @cache.deleter\n    def cache(self):\n        self._cache = {key: None for key in self._cache}\n    def __getattr__(self, attr):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes26",
        "documentation": {}
    },
    {
        "label": "my_class",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes26",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes26",
        "peekOfCode": "my_class = MyClass(\"test\")\nprint(my_class.value)\ndel my_class.cache\nprint(my_class.value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes26",
        "documentation": {}
    },
    {
        "label": "Gen",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "peekOfCode": "class Gen(Generic[D]):\n    pass\nGenAlias = Gen[E]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "peekOfCode": "D = TypeVar(\"D\", bool, int, float, object)\nE = TypeVar(\"E\", bool, int, float, object)\nclass Gen(Generic[D]):\n    pass\nGenAlias = Gen[E]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "peekOfCode": "E = TypeVar(\"E\", bool, int, float, object)\nclass Gen(Generic[D]):\n    pass\nGenAlias = Gen[E]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "documentation": {}
    },
    {
        "label": "GenAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "peekOfCode": "GenAlias = Gen[E]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes27",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "class Foo(Generic[_T1]):\n    def __init__(self, value: _T1) -> None:\n        ...\n    @classmethod\n    def get(cls: Type[_T3]) -> Type[_T3]:\n        return cls\nclass Bar(Foo):\n    pass\ndef bar(value: _T1) -> Type[Foo[_T1]]:\n    baz = Foo(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "class Bar(Foo):\n    pass\ndef bar(value: _T1) -> Type[Foo[_T1]]:\n    baz = Foo(value)\n    qux = type(baz)\n    reveal_type(qux, expected_text=\"Type[Foo[_T1@bar]]\")\n    return qux\nd = Bar.get()\nreveal_type(d, expected_text=\"Type[Bar]\")\nreveal_type(Bar.get(), expected_text=\"Type[Bar]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "def foo1(a: Type[_T1]) -> _T1:\n    return a()\na = foo1(Optional[int])\ndef foo2(a: Type[_T2]) -> Type[_T2]:\n    return a\nb = foo2(type(None))\n# This should generate an error because None is\n# not a type; it's an instance of the NoneType class.\nc = foo2(None)\nclass Foo(Generic[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "def foo2(a: Type[_T2]) -> Type[_T2]:\n    return a\nb = foo2(type(None))\n# This should generate an error because None is\n# not a type; it's an instance of the NoneType class.\nc = foo2(None)\nclass Foo(Generic[_T1]):\n    def __init__(self, value: _T1) -> None:\n        ...\n    @classmethod",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "def bar(value: _T1) -> Type[Foo[_T1]]:\n    baz = Foo(value)\n    qux = type(baz)\n    reveal_type(qux, expected_text=\"Type[Foo[_T1@bar]]\")\n    return qux\nd = Bar.get()\nreveal_type(d, expected_text=\"Type[Bar]\")\nreveal_type(Bar.get(), expected_text=\"Type[Bar]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=None)\n_T3 = TypeVar(\"_T3\")\ndef foo1(a: Type[_T1]) -> _T1:\n    return a()\na = foo1(Optional[int])\ndef foo2(a: Type[_T2]) -> Type[_T2]:\n    return a\nb = foo2(type(None))\n# This should generate an error because None is",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=None)\n_T3 = TypeVar(\"_T3\")\ndef foo1(a: Type[_T1]) -> _T1:\n    return a()\na = foo1(Optional[int])\ndef foo2(a: Type[_T2]) -> Type[_T2]:\n    return a\nb = foo2(type(None))\n# This should generate an error because None is\n# not a type; it's an instance of the NoneType class.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\ndef foo1(a: Type[_T1]) -> _T1:\n    return a()\na = foo1(Optional[int])\ndef foo2(a: Type[_T2]) -> Type[_T2]:\n    return a\nb = foo2(type(None))\n# This should generate an error because None is\n# not a type; it's an instance of the NoneType class.\nc = foo2(None)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "a = foo1(Optional[int])\ndef foo2(a: Type[_T2]) -> Type[_T2]:\n    return a\nb = foo2(type(None))\n# This should generate an error because None is\n# not a type; it's an instance of the NoneType class.\nc = foo2(None)\nclass Foo(Generic[_T1]):\n    def __init__(self, value: _T1) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "b = foo2(type(None))\n# This should generate an error because None is\n# not a type; it's an instance of the NoneType class.\nc = foo2(None)\nclass Foo(Generic[_T1]):\n    def __init__(self, value: _T1) -> None:\n        ...\n    @classmethod\n    def get(cls: Type[_T3]) -> Type[_T3]:\n        return cls",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "c = foo2(None)\nclass Foo(Generic[_T1]):\n    def __init__(self, value: _T1) -> None:\n        ...\n    @classmethod\n    def get(cls: Type[_T3]) -> Type[_T3]:\n        return cls\nclass Bar(Foo):\n    pass\ndef bar(value: _T1) -> Type[Foo[_T1]]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "peekOfCode": "d = Bar.get()\nreveal_type(d, expected_text=\"Type[Bar]\")\nreveal_type(Bar.get(), expected_text=\"Type[Bar]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes28",
        "documentation": {}
    },
    {
        "label": "keys",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "peekOfCode": "keys = channel_types.keys()\n_T = TypeVar(\"_T\")\n_S = TypeVar(\"_S\")\noptions.update(dict.fromkeys(keys, 1))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_S = TypeVar(\"_S\")\noptions.update(dict.fromkeys(keys, 1))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "documentation": {}
    },
    {
        "label": "_S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "peekOfCode": "_S = TypeVar(\"_S\")\noptions.update(dict.fromkeys(keys, 1))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes29",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "class Foo(Generic[_T1]):\n    pass\n# This should generate an error.\ndef func1(a: _T1) -> Generic[_T1]:\n    ...\n# This should generate an error.\ndef func2(p1: Generic[_T1]) -> _T1:\n    ...\nAAA = Generic\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "class Foo2(AAA[_T1]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "def func1(a: _T1) -> Generic[_T1]:\n    ...\n# This should generate an error.\ndef func2(p1: Generic[_T1]) -> _T1:\n    ...\nAAA = Generic\n# This should generate an error.\ndef func3(a: _T1) -> AAA[_T1]:\n    ...\nclass Foo2(AAA[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "def func2(p1: Generic[_T1]) -> _T1:\n    ...\nAAA = Generic\n# This should generate an error.\ndef func3(a: _T1) -> AAA[_T1]:\n    ...\nclass Foo2(AAA[_T1]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "def func3(a: _T1) -> AAA[_T1]:\n    ...\nclass Foo2(AAA[_T1]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass Foo(Generic[_T1]):\n    pass\n# This should generate an error.\ndef func1(a: _T1) -> Generic[_T1]:\n    ...\n# This should generate an error.\ndef func2(p1: Generic[_T1]) -> _T1:\n    ...\nAAA = Generic",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "AAA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "peekOfCode": "AAA = Generic\n# This should generate an error.\ndef func3(a: _T1) -> AAA[_T1]:\n    ...\nclass Foo2(AAA[_T1]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes30",
        "documentation": {}
    },
    {
        "label": "to_list1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "peekOfCode": "def to_list1(obj_type: Type[T], obj: Union[List[T], T]) -> List[T]:\n    return []\ndef to_list2(obj_type: Type[T], obj: Union[T, List[T]]) -> List[T]:\n    return []\ninput_list: List[str] = [\"string\"]\n# The expression on the RHS can satisfy the type variable T\n# with either the type str or Union[List[str], str]. It should\n# pick the simpler of the two.\noutput_list1 = to_list1(str, input_list)\nverify_type1: List[str] = output_list1",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "documentation": {}
    },
    {
        "label": "to_list2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "peekOfCode": "def to_list2(obj_type: Type[T], obj: Union[T, List[T]]) -> List[T]:\n    return []\ninput_list: List[str] = [\"string\"]\n# The expression on the RHS can satisfy the type variable T\n# with either the type str or Union[List[str], str]. It should\n# pick the simpler of the two.\noutput_list1 = to_list1(str, input_list)\nverify_type1: List[str] = output_list1\n# The resulting type should not depend on the order of the union\n# elements.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "peekOfCode": "T = TypeVar(\"T\")\ndef to_list1(obj_type: Type[T], obj: Union[List[T], T]) -> List[T]:\n    return []\ndef to_list2(obj_type: Type[T], obj: Union[T, List[T]]) -> List[T]:\n    return []\ninput_list: List[str] = [\"string\"]\n# The expression on the RHS can satisfy the type variable T\n# with either the type str or Union[List[str], str]. It should\n# pick the simpler of the two.\noutput_list1 = to_list1(str, input_list)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "documentation": {}
    },
    {
        "label": "output_list1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "peekOfCode": "output_list1 = to_list1(str, input_list)\nverify_type1: List[str] = output_list1\n# The resulting type should not depend on the order of the union\n# elements.\noutput_list2 = to_list2(str, input_list)\nverify_type2: List[str] = output_list2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "documentation": {}
    },
    {
        "label": "output_list2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "peekOfCode": "output_list2 = to_list2(str, input_list)\nverify_type2: List[str] = output_list2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes31",
        "documentation": {}
    },
    {
        "label": "extend_if",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "peekOfCode": "def extend_if(xs: List[_T], ys: List[Tuple[_T, bool]]) -> List[_T]:\n    raise NotImplementedError()\nextend_if([\"foo\"], [(\"bar\", True), (\"baz\", True)])\ndef Return(value: _T) -> Callable[[_T], None]:\n    ...\ndef func1() -> Callable[[bool], None]:\n    return Return(True)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "documentation": {}
    },
    {
        "label": "Return",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "peekOfCode": "def Return(value: _T) -> Callable[[_T], None]:\n    ...\ndef func1() -> Callable[[bool], None]:\n    return Return(True)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "peekOfCode": "def func1() -> Callable[[bool], None]:\n    return Return(True)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef extend_if(xs: List[_T], ys: List[Tuple[_T, bool]]) -> List[_T]:\n    raise NotImplementedError()\nextend_if([\"foo\"], [(\"bar\", True), (\"baz\", True)])\ndef Return(value: _T) -> Callable[[_T], None]:\n    ...\ndef func1() -> Callable[[bool], None]:\n    return Return(True)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes32",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "class Class1(Generic[_T1]):\n    pass\n# This should generate an error when reportMissingTypeArgument is enabled.\nclass Class2(Class1):\n    pass\n# This should generate an error when reportMissingTypeArgument is enabled.\n_T2 = TypeVar(\"_T2\", bound=Class1)\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar1: Optional[Class1] = None\nGenericTypeAlias = Union[Class1[_T1], int]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "class Class2(Class1):\n    pass\n# This should generate an error when reportMissingTypeArgument is enabled.\n_T2 = TypeVar(\"_T2\", bound=Class1)\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar1: Optional[Class1] = None\nGenericTypeAlias = Union[Class1[_T1], int]\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar2: Optional[GenericTypeAlias] = None\nclass Class3(Generic[_T1, _T2]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "class Class3(Generic[_T1, _T2]):\n    pass\n# This should generate an error regardless of whether reportMissingTypeArgument\n# is enabled because this class requires two type arguments and this will\n# generate a runtime exception.\na = Class3[int]\n# This should generate an error when reportMissingTypeArgument is enabled.\ndef func1() -> collections.deque:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "def func1() -> collections.deque:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass Class1(Generic[_T1]):\n    pass\n# This should generate an error when reportMissingTypeArgument is enabled.\nclass Class2(Class1):\n    pass\n# This should generate an error when reportMissingTypeArgument is enabled.\n_T2 = TypeVar(\"_T2\", bound=Class1)\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar1: Optional[Class1] = None",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=Class1)\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar1: Optional[Class1] = None\nGenericTypeAlias = Union[Class1[_T1], int]\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar2: Optional[GenericTypeAlias] = None\nclass Class3(Generic[_T1, _T2]):\n    pass\n# This should generate an error regardless of whether reportMissingTypeArgument\n# is enabled because this class requires two type arguments and this will",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "GenericTypeAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "GenericTypeAlias = Union[Class1[_T1], int]\n# This should generate an error when reportMissingTypeArgument is enabled.\nvar2: Optional[GenericTypeAlias] = None\nclass Class3(Generic[_T1, _T2]):\n    pass\n# This should generate an error regardless of whether reportMissingTypeArgument\n# is enabled because this class requires two type arguments and this will\n# generate a runtime exception.\na = Class3[int]\n# This should generate an error when reportMissingTypeArgument is enabled.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "peekOfCode": "a = Class3[int]\n# This should generate an error when reportMissingTypeArgument is enabled.\ndef func1() -> collections.deque:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes33",
        "documentation": {}
    },
    {
        "label": "MyData",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "class MyData(Generic[T]):\n    def __init__(self, val: T):\n        self.val = val\nOp = Callable[[MyData[T]], T]\ndef f_generic1(val: T, op: Op[T]) -> T:\n    obj = MyData[T](val)\n    return op(obj)\ndef f_generic2(val: T, op: Op[T]) -> T:\n    obj = MyData(val)\n    return op(obj)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "f_generic1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def f_generic1(val: T, op: Op[T]) -> T:\n    obj = MyData[T](val)\n    return op(obj)\ndef f_generic2(val: T, op: Op[T]) -> T:\n    obj = MyData(val)\n    return op(obj)\ndef f_bool(val: bool) -> bool:\n    op: Op[bool] = lambda od: od.val\n    r = f_generic1(val, op)\n    return r",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "f_generic2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def f_generic2(val: T, op: Op[T]) -> T:\n    obj = MyData(val)\n    return op(obj)\ndef f_bool(val: bool) -> bool:\n    op: Op[bool] = lambda od: od.val\n    r = f_generic1(val, op)\n    return r\ndef f_generic3(val: T) -> T:\n    return val\ndef f_union(val: Union[bool, str]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "f_bool",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def f_bool(val: bool) -> bool:\n    op: Op[bool] = lambda od: od.val\n    r = f_generic1(val, op)\n    return r\ndef f_generic3(val: T) -> T:\n    return val\ndef f_union(val: Union[bool, str]) -> None:\n    # This should generate an error because a\n    # union cannot be assigned to a constrained\n    # type variable.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "f_generic3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def f_generic3(val: T) -> T:\n    return val\ndef f_union(val: Union[bool, str]) -> None:\n    # This should generate an error because a\n    # union cannot be assigned to a constrained\n    # type variable.\n    f_generic3(val)\n    if isinstance(val, bool):\n        f_generic3(val)\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "f_union",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def f_union(val: Union[bool, str]) -> None:\n    # This should generate an error because a\n    # union cannot be assigned to a constrained\n    # type variable.\n    f_generic3(val)\n    if isinstance(val, bool):\n        f_generic3(val)\n    else:\n        f_generic3(val)\ndef func1(v: T, t: Type[T]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def func1(v: T, t: Type[T]):\n    print(t)\ndef func2(v: T, t: Type[T]):\n    func1(v, t)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "def func2(v: T, t: Type[T]):\n    func1(v, t)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "T = TypeVar(\"T\", str, bool, None)\nclass MyData(Generic[T]):\n    def __init__(self, val: T):\n        self.val = val\nOp = Callable[[MyData[T]], T]\ndef f_generic1(val: T, op: Op[T]) -> T:\n    obj = MyData[T](val)\n    return op(obj)\ndef f_generic2(val: T, op: Op[T]) -> T:\n    obj = MyData(val)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "Op",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "peekOfCode": "Op = Callable[[MyData[T]], T]\ndef f_generic1(val: T, op: Op[T]) -> T:\n    obj = MyData[T](val)\n    return op(obj)\ndef f_generic2(val: T, op: Op[T]) -> T:\n    obj = MyData(val)\n    return op(obj)\ndef f_bool(val: bool) -> bool:\n    op: Op[bool] = lambda od: od.val\n    r = f_generic1(val, op)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes34",
        "documentation": {}
    },
    {
        "label": "identity1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "def identity1(x: T1) -> T1:\n    return x\ndef fmap(f: Callable[[T1], U1], maybe: Optional[T1]) -> Optional[U1]:\n    return None\nx1: Optional[int] = 0\ny1 = fmap(identity1, x1)\nif y1 is not None:\n    # Make sure we can call an int method on y to confirm\n    # that it is an \"int\".\n    y1.conjugate()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "fmap",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "def fmap(f: Callable[[T1], U1], maybe: Optional[T1]) -> Optional[U1]:\n    return None\nx1: Optional[int] = 0\ny1 = fmap(identity1, x1)\nif y1 is not None:\n    # Make sure we can call an int method on y to confirm\n    # that it is an \"int\".\n    y1.conjugate()\n# In this variant, use a bound type.\nT2 = TypeVar(\"T2\", bound=str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "identity2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "def identity2(x: T2) -> T2:\n    return x\nx2: Optional[int] = 0\n# This should generate an error because identity2's TypeVar\n# T2 is bound to str, so there is no solution that satisfies\n# all of the constraints.\ny2 = fmap(identity2, x2)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nU1 = TypeVar(\"U1\")\ndef identity1(x: T1) -> T1:\n    return x\ndef fmap(f: Callable[[T1], U1], maybe: Optional[T1]) -> Optional[U1]:\n    return None\nx1: Optional[int] = 0\ny1 = fmap(identity1, x1)\nif y1 is not None:\n    # Make sure we can call an int method on y to confirm",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "U1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "U1 = TypeVar(\"U1\")\ndef identity1(x: T1) -> T1:\n    return x\ndef fmap(f: Callable[[T1], U1], maybe: Optional[T1]) -> Optional[U1]:\n    return None\nx1: Optional[int] = 0\ny1 = fmap(identity1, x1)\nif y1 is not None:\n    # Make sure we can call an int method on y to confirm\n    # that it is an \"int\".",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "y1 = fmap(identity1, x1)\nif y1 is not None:\n    # Make sure we can call an int method on y to confirm\n    # that it is an \"int\".\n    y1.conjugate()\n# In this variant, use a bound type.\nT2 = TypeVar(\"T2\", bound=str)\ndef identity2(x: T2) -> T2:\n    return x\nx2: Optional[int] = 0",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=str)\ndef identity2(x: T2) -> T2:\n    return x\nx2: Optional[int] = 0\n# This should generate an error because identity2's TypeVar\n# T2 is bound to str, so there is no solution that satisfies\n# all of the constraints.\ny2 = fmap(identity2, x2)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "peekOfCode": "y2 = fmap(identity2, x2)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes35",
        "documentation": {}
    },
    {
        "label": "add1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "def add1(a: _T1, b: _T1) -> _T1:\n    return a + b\na1 = add1(3, 5.5)\nreveal_type(a1, expected_text=\"float\")\nb1 = add1(3.3, 5)\nreveal_type(b1, expected_text=\"float\")\nc1 = add1(\"3\", \"5\")\nreveal_type(c1, expected_text=\"str\")\n_T2 = TypeVar(\"_T2\", float, int)\ndef add2(a: _T2, b: _T2) -> _T2:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "add2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "def add2(a: _T2, b: _T2) -> _T2:\n    return a + b\na2 = add2(3, 5.5)\nreveal_type(a2, expected_text=\"float\")\nb2 = add2(3.3, 5)\nreveal_type(b2, expected_text=\"float\")\nc2 = add2(3, 5)\nreveal_type(c2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", float, str)\ndef add1(a: _T1, b: _T1) -> _T1:\n    return a + b\na1 = add1(3, 5.5)\nreveal_type(a1, expected_text=\"float\")\nb1 = add1(3.3, 5)\nreveal_type(b1, expected_text=\"float\")\nc1 = add1(\"3\", \"5\")\nreveal_type(c1, expected_text=\"str\")\n_T2 = TypeVar(\"_T2\", float, int)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "a1 = add1(3, 5.5)\nreveal_type(a1, expected_text=\"float\")\nb1 = add1(3.3, 5)\nreveal_type(b1, expected_text=\"float\")\nc1 = add1(\"3\", \"5\")\nreveal_type(c1, expected_text=\"str\")\n_T2 = TypeVar(\"_T2\", float, int)\ndef add2(a: _T2, b: _T2) -> _T2:\n    return a + b\na2 = add2(3, 5.5)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "b1 = add1(3.3, 5)\nreveal_type(b1, expected_text=\"float\")\nc1 = add1(\"3\", \"5\")\nreveal_type(c1, expected_text=\"str\")\n_T2 = TypeVar(\"_T2\", float, int)\ndef add2(a: _T2, b: _T2) -> _T2:\n    return a + b\na2 = add2(3, 5.5)\nreveal_type(a2, expected_text=\"float\")\nb2 = add2(3.3, 5)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "c1 = add1(\"3\", \"5\")\nreveal_type(c1, expected_text=\"str\")\n_T2 = TypeVar(\"_T2\", float, int)\ndef add2(a: _T2, b: _T2) -> _T2:\n    return a + b\na2 = add2(3, 5.5)\nreveal_type(a2, expected_text=\"float\")\nb2 = add2(3.3, 5)\nreveal_type(b2, expected_text=\"float\")\nc2 = add2(3, 5)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", float, int)\ndef add2(a: _T2, b: _T2) -> _T2:\n    return a + b\na2 = add2(3, 5.5)\nreveal_type(a2, expected_text=\"float\")\nb2 = add2(3.3, 5)\nreveal_type(b2, expected_text=\"float\")\nc2 = add2(3, 5)\nreveal_type(c2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "a2 = add2(3, 5.5)\nreveal_type(a2, expected_text=\"float\")\nb2 = add2(3.3, 5)\nreveal_type(b2, expected_text=\"float\")\nc2 = add2(3, 5)\nreveal_type(c2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "b2 = add2(3.3, 5)\nreveal_type(b2, expected_text=\"float\")\nc2 = add2(3, 5)\nreveal_type(c2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "peekOfCode": "c2 = add2(3, 5)\nreveal_type(c2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes36",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "peekOfCode": "class Bar:\n    ...\n_T = TypeVar(\"_T\", bound=Bar)\nclass Foo(Generic[_T]):\n    def func1(self, a: _T):\n        pass\n    def func2(self, y: _T):\n        x: int = 3\n        # This should generate an error\n        self.func1(x)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "peekOfCode": "class Foo(Generic[_T]):\n    def func1(self, a: _T):\n        pass\n    def func2(self, y: _T):\n        x: int = 3\n        # This should generate an error\n        self.func1(x)\n        self.func1(y)\n        z: Any = 3\n        self.func1(z)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=Bar)\nclass Foo(Generic[_T]):\n    def func1(self, a: _T):\n        pass\n    def func2(self, y: _T):\n        x: int = 3\n        # This should generate an error\n        self.func1(x)\n        self.func1(y)\n        z: Any = 3",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes37",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes38",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes38",
        "peekOfCode": "class Foo(Generic[_T]):\n    def __init__(self):\n        self._queue: \"Queue[Optional[_T]]\" = Queue()\n    def publish(self, message: _T):\n        self._queue.put_nowait(message)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes38",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes38",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes38",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Foo(Generic[_T]):\n    def __init__(self):\n        self._queue: \"Queue[Optional[_T]]\" = Queue()\n    def publish(self, message: _T):\n        self._queue.put_nowait(message)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes38",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class Foo:\n    pass\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=Foo)\n_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T3 = TypeVar(\"_T3\", Foo, int, str)\nclass MyClass1(Generic[_T1]):\n    def __init__(self, a: _T1):\n        self._a: Dict[str, _T1] = {}\n        self._b: Tuple[_T1, ...] = (a, a, a)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "MyClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class MyClass1(Generic[_T1]):\n    def __init__(self, a: _T1):\n        self._a: Dict[str, _T1] = {}\n        self._b: Tuple[_T1, ...] = (a, a, a)\n        self._c: Tuple[_T1, _T1] = (a, a)\n        self._d: List[_T1] = [a]\nclass MyClass2(Generic[_T2]):\n    def __init__(self, a: _T2):\n        self._a: Dict[str, _T2] = {}\n        self._b: Tuple[_T2, ...] = (a, a, a)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "MyClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class MyClass2(Generic[_T2]):\n    def __init__(self, a: _T2):\n        self._a: Dict[str, _T2] = {}\n        self._b: Tuple[_T2, ...] = (a, a, a)\n        self._c: Tuple[_T2, _T2] = (a, a)\n        self._d: List[_T2] = [a]\nclass MyClass2A(Generic[_T2, _T2A]):\n    def __init__(self, a: _T2, b: _T2A):\n        self._a1: Dict[str, _T2A] = {\"a\": b}\n        self._a2: Dict[str, _T2] = {\"a\": a}",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "MyClass2A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class MyClass2A(Generic[_T2, _T2A]):\n    def __init__(self, a: _T2, b: _T2A):\n        self._a1: Dict[str, _T2A] = {\"a\": b}\n        self._a2: Dict[str, _T2] = {\"a\": a}\n        self._b: Tuple[_T2, ...] = (a, a, a)\n        self._c: Tuple[_T2, _T2] = (a, a)\n        self._d: List[_T2] = [a]\nclass MyClass3(Generic[_T3]):\n    def __init__(self, a: _T3):\n        self._a: Dict[str, _T3] = {}",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "MyClass3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class MyClass3(Generic[_T3]):\n    def __init__(self, a: _T3):\n        self._a: Dict[str, _T3] = {}\n        self._b: Tuple[_T3, ...] = (a, a, a)\n        self._c: Tuple[_T3, _T3] = (a, a)\n        self._d: List[_T3] = [a]\nclass Animal:\n    pass\nclass Cow(Animal):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class Animal:\n    pass\nclass Cow(Animal):\n    pass\n_TA = TypeVar(\"_TA\", bound=Animal)\ndef fn(p2: _TA) -> _TA:\n    # This should generate an error.\n    p2 = Animal()\n    if 1 + 1 == 3:\n        return p2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "Cow",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "class Cow(Animal):\n    pass\n_TA = TypeVar(\"_TA\", bound=Animal)\ndef fn(p2: _TA) -> _TA:\n    # This should generate an error.\n    p2 = Animal()\n    if 1 + 1 == 3:\n        return p2\n    # This should generate an error.\n    return Animal()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "def do_something(\n    collection: Iterable[T], zero: R, f: Callable[[R, T], R]\n) -> Iterable[R]:\n    s = zero\n    yield s\n    for x in collection:\n        s = f(s, x)\n        yield s\nclass Foo:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "def fn(p2: _TA) -> _TA:\n    # This should generate an error.\n    p2 = Animal()\n    if 1 + 1 == 3:\n        return p2\n    # This should generate an error.\n    return Animal()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "T = TypeVar(\"T\")\nR = TypeVar(\"R\")\ndef do_something(\n    collection: Iterable[T], zero: R, f: Callable[[R, T], R]\n) -> Iterable[R]:\n    s = zero\n    yield s\n    for x in collection:\n        s = f(s, x)\n        yield s",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "R = TypeVar(\"R\")\ndef do_something(\n    collection: Iterable[T], zero: R, f: Callable[[R, T], R]\n) -> Iterable[R]:\n    s = zero\n    yield s\n    for x in collection:\n        s = f(s, x)\n        yield s\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=Foo)\n_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T3 = TypeVar(\"_T3\", Foo, int, str)\nclass MyClass1(Generic[_T1]):\n    def __init__(self, a: _T1):\n        self._a: Dict[str, _T1] = {}\n        self._b: Tuple[_T1, ...] = (a, a, a)\n        self._c: Tuple[_T1, _T1] = (a, a)\n        self._d: List[_T1] = [a]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=Foo)\n_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T3 = TypeVar(\"_T3\", Foo, int, str)\nclass MyClass1(Generic[_T1]):\n    def __init__(self, a: _T1):\n        self._a: Dict[str, _T1] = {}\n        self._b: Tuple[_T1, ...] = (a, a, a)\n        self._c: Tuple[_T1, _T1] = (a, a)\n        self._d: List[_T1] = [a]\nclass MyClass2(Generic[_T2]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "_T2A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T3 = TypeVar(\"_T3\", Foo, int, str)\nclass MyClass1(Generic[_T1]):\n    def __init__(self, a: _T1):\n        self._a: Dict[str, _T1] = {}\n        self._b: Tuple[_T1, ...] = (a, a, a)\n        self._c: Tuple[_T1, _T1] = (a, a)\n        self._d: List[_T1] = [a]\nclass MyClass2(Generic[_T2]):\n    def __init__(self, a: _T2):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", Foo, int, str)\nclass MyClass1(Generic[_T1]):\n    def __init__(self, a: _T1):\n        self._a: Dict[str, _T1] = {}\n        self._b: Tuple[_T1, ...] = (a, a, a)\n        self._c: Tuple[_T1, _T1] = (a, a)\n        self._d: List[_T1] = [a]\nclass MyClass2(Generic[_T2]):\n    def __init__(self, a: _T2):\n        self._a: Dict[str, _T2] = {}",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "_TA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "peekOfCode": "_TA = TypeVar(\"_TA\", bound=Animal)\ndef fn(p2: _TA) -> _TA:\n    # This should generate an error.\n    p2 = Animal()\n    if 1 + 1 == 3:\n        return p2\n    # This should generate an error.\n    return Animal()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes39",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "m = int(1)\nn = float(1.1)\np = \"hello\"\na = dict(x=m, y=m)\na1: int = a[\"x\"]\nb = dict(x=n, y=n)\n# This should generate an error because b should be\n# typed as dict[Any, float], and b[\"x\"] is a float.\nb1: int = b[\"x\"]\nb2: float = b[\"x\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "n = float(1.1)\np = \"hello\"\na = dict(x=m, y=m)\na1: int = a[\"x\"]\nb = dict(x=n, y=n)\n# This should generate an error because b should be\n# typed as dict[Any, float], and b[\"x\"] is a float.\nb1: int = b[\"x\"]\nb2: float = b[\"x\"]\nc = dict(x=m, y=n)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "p = \"hello\"\na = dict(x=m, y=m)\na1: int = a[\"x\"]\nb = dict(x=n, y=n)\n# This should generate an error because b should be\n# typed as dict[Any, float], and b[\"x\"] is a float.\nb1: int = b[\"x\"]\nb2: float = b[\"x\"]\nc = dict(x=m, y=n)\n# This should generate an error because d should be",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "a = dict(x=m, y=m)\na1: int = a[\"x\"]\nb = dict(x=n, y=n)\n# This should generate an error because b should be\n# typed as dict[Any, float], and b[\"x\"] is a float.\nb1: int = b[\"x\"]\nb2: float = b[\"x\"]\nc = dict(x=m, y=n)\n# This should generate an error because d should be\n# typed as dict[Any, float].",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "b = dict(x=n, y=n)\n# This should generate an error because b should be\n# typed as dict[Any, float], and b[\"x\"] is a float.\nb1: int = b[\"x\"]\nb2: float = b[\"x\"]\nc = dict(x=m, y=n)\n# This should generate an error because d should be\n# typed as dict[Any, float].\nc1: int = c[\"x\"]\nc2: float = c[\"x\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "c = dict(x=m, y=n)\n# This should generate an error because d should be\n# typed as dict[Any, float].\nc1: int = c[\"x\"]\nc2: float = c[\"x\"]\nd = dict(x=p, y=p)\n# This should generate an error because d should be\n# typed as dict[Any, str].\nd1: float = d[\"x\"]\nd2: str = d[\"x\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "d = dict(x=p, y=p)\n# This should generate an error because d should be\n# typed as dict[Any, str].\nd1: float = d[\"x\"]\nd2: str = d[\"x\"]\ne = dict(x=n, y=p)\n# This should generate an error because d should be\n# typed as dict[Any, str].\ne1: str = e[\"x\"]\n# This should generate an error because d should be",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "peekOfCode": "e = dict(x=n, y=p)\n# This should generate an error because d should be\n# typed as dict[Any, str].\ne1: str = e[\"x\"]\n# This should generate an error because d should be\n# typed as dict[Any, str].\ne2: float = e[\"x\"]\ne3: Union[float, str] = e[\"x\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes4",
        "documentation": {}
    },
    {
        "label": "filter_fn",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "def filter_fn(value: object):\n    ...\nv1 = filter(filter_fn, [1, 2, 3])\nreveal_type(v1, expected_text=\"filter[int]\")\nv2 = filter(filter_fn, {1, 2})\nreveal_type(v2, expected_text=\"filter[int]\")\nv3 = filter(filter_fn, {1: 2})\nreveal_type(v3, expected_text=\"filter[int]\")\n_T = TypeVar(\"_T\")\nAnimal = Literal[\"cat\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "def func(v: Callable[[], _T]) -> _T:\n    ...\nx1: Dict[Animal, int] = func(lambda: {\"cat\": 0})\ndef func1(factory: Callable[[], _T]) -> _T:\n    ...\nx2: set[int] = func1(lambda: set())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "def func1(factory: Callable[[], _T]) -> _T:\n    ...\nx2: set[int] = func1(lambda: set())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "v1 = filter(filter_fn, [1, 2, 3])\nreveal_type(v1, expected_text=\"filter[int]\")\nv2 = filter(filter_fn, {1, 2})\nreveal_type(v2, expected_text=\"filter[int]\")\nv3 = filter(filter_fn, {1: 2})\nreveal_type(v3, expected_text=\"filter[int]\")\n_T = TypeVar(\"_T\")\nAnimal = Literal[\"cat\"]\ndef func(v: Callable[[], _T]) -> _T:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "v2 = filter(filter_fn, {1, 2})\nreveal_type(v2, expected_text=\"filter[int]\")\nv3 = filter(filter_fn, {1: 2})\nreveal_type(v3, expected_text=\"filter[int]\")\n_T = TypeVar(\"_T\")\nAnimal = Literal[\"cat\"]\ndef func(v: Callable[[], _T]) -> _T:\n    ...\nx1: Dict[Animal, int] = func(lambda: {\"cat\": 0})\ndef func1(factory: Callable[[], _T]) -> _T:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "v3 = filter(filter_fn, {1: 2})\nreveal_type(v3, expected_text=\"filter[int]\")\n_T = TypeVar(\"_T\")\nAnimal = Literal[\"cat\"]\ndef func(v: Callable[[], _T]) -> _T:\n    ...\nx1: Dict[Animal, int] = func(lambda: {\"cat\": 0})\ndef func1(factory: Callable[[], _T]) -> _T:\n    ...\nx2: set[int] = func1(lambda: set())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "_T = TypeVar(\"_T\")\nAnimal = Literal[\"cat\"]\ndef func(v: Callable[[], _T]) -> _T:\n    ...\nx1: Dict[Animal, int] = func(lambda: {\"cat\": 0})\ndef func1(factory: Callable[[], _T]) -> _T:\n    ...\nx2: set[int] = func1(lambda: set())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "peekOfCode": "Animal = Literal[\"cat\"]\ndef func(v: Callable[[], _T]) -> _T:\n    ...\nx1: Dict[Animal, int] = func(lambda: {\"cat\": 0})\ndef func1(factory: Callable[[], _T]) -> _T:\n    ...\nx2: set[int] = func1(lambda: set())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes40",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "peekOfCode": "class P:\n    def chain(self: _T1) -> _T1:\n        ...\ndef func(p1: _T2) -> _T2:\n    return p1.chain()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "peekOfCode": "def func(p1: _T2) -> _T2:\n    return p1.chain()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=\"P\")\n_T2 = TypeVar(\"_T2\", bound=\"P\")\nclass P:\n    def chain(self: _T1) -> _T1:\n        ...\ndef func(p1: _T2) -> _T2:\n    return p1.chain()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=\"P\")\nclass P:\n    def chain(self: _T1) -> _T1:\n        ...\ndef func(p1: _T2) -> _T2:\n    return p1.chain()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes41",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "peekOfCode": "class Foo:\n    def __init__(self, a: int, b: str):\n        pass\n_TFoo = TypeVar(\"_TFoo\", bound=Foo)\ndef func1(cls: Type[_TFoo]) -> _TFoo:\n    # This should generate an error\n    y = cls()\n    x = cls(1, \"\")\n    reveal_type(x, expected_text=\"_TFoo@func1\")\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "peekOfCode": "def func1(cls: Type[_TFoo]) -> _TFoo:\n    # This should generate an error\n    y = cls()\n    x = cls(1, \"\")\n    reveal_type(x, expected_text=\"_TFoo@func1\")\n    return x\n_T = TypeVar(\"_T\")\ndef func2(cls: Type[_T]) -> _T:\n    y = cls(1, \"\")\n    x = cls()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "peekOfCode": "def func2(cls: Type[_T]) -> _T:\n    y = cls(1, \"\")\n    x = cls()\n    reveal_type(x, expected_text=\"_T@func2\")\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "documentation": {}
    },
    {
        "label": "_TFoo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "peekOfCode": "_TFoo = TypeVar(\"_TFoo\", bound=Foo)\ndef func1(cls: Type[_TFoo]) -> _TFoo:\n    # This should generate an error\n    y = cls()\n    x = cls(1, \"\")\n    reveal_type(x, expected_text=\"_TFoo@func1\")\n    return x\n_T = TypeVar(\"_T\")\ndef func2(cls: Type[_T]) -> _T:\n    y = cls(1, \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func2(cls: Type[_T]) -> _T:\n    y = cls(1, \"\")\n    x = cls()\n    reveal_type(x, expected_text=\"_T@func2\")\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes42",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "peekOfCode": "class Foo:\n    pass\n_TFoo = TypeVar(\"_TFoo\", bound=Foo)\n_TAnything = TypeVar(\"_TAnything\")\nclass Bar(Generic[_TFoo, _TAnything]):\n    def __init__(\n        self,\n        p1: Type[_TFoo] = Foo,\n        p2: List[_TAnything] = [],\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "peekOfCode": "class Bar(Generic[_TFoo, _TAnything]):\n    def __init__(\n        self,\n        p1: Type[_TFoo] = Foo,\n        p2: List[_TAnything] = [],\n        # This should generate an error.\n        p3: List[_TFoo] = [2],\n        p4: List[_TAnything] = [2],\n    ):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "documentation": {}
    },
    {
        "label": "_TFoo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "peekOfCode": "_TFoo = TypeVar(\"_TFoo\", bound=Foo)\n_TAnything = TypeVar(\"_TAnything\")\nclass Bar(Generic[_TFoo, _TAnything]):\n    def __init__(\n        self,\n        p1: Type[_TFoo] = Foo,\n        p2: List[_TAnything] = [],\n        # This should generate an error.\n        p3: List[_TFoo] = [2],\n        p4: List[_TAnything] = [2],",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "documentation": {}
    },
    {
        "label": "_TAnything",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "peekOfCode": "_TAnything = TypeVar(\"_TAnything\")\nclass Bar(Generic[_TFoo, _TAnything]):\n    def __init__(\n        self,\n        p1: Type[_TFoo] = Foo,\n        p2: List[_TAnything] = [],\n        # This should generate an error.\n        p3: List[_TFoo] = [2],\n        p4: List[_TAnything] = [2],\n    ):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes43",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "peekOfCode": "class ClassA(Iterator[T]):\n    def __init__(self, it: Iterable[T]) -> None:\n        ...\n    def __next__(self) -> T:\n        ...\n    def __iter__(self) -> Iterator[T]:\n        ...\ndef bar(it: Iterable[T]) -> Iterator[T]:\n    return ClassA(it)\ndef baz(it_of_its: Iterable[Iterable[T]]) -> Iterator[T]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "peekOfCode": "class ClassB(Generic[T]):\n    def __init__(self, xs: Iterable[T]) -> None:\n        self.xs = xs\n    def indexed(self) -> \"ClassB[Tuple[int, T]]\":\n        return ClassB(enumerate(self.xs))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "peekOfCode": "def bar(it: Iterable[T]) -> Iterator[T]:\n    return ClassA(it)\ndef baz(it_of_its: Iterable[Iterable[T]]) -> Iterator[T]:\n    return chain(*it_of_its)\nclass ClassB(Generic[T]):\n    def __init__(self, xs: Iterable[T]) -> None:\n        self.xs = xs\n    def indexed(self) -> \"ClassB[Tuple[int, T]]\":\n        return ClassB(enumerate(self.xs))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "peekOfCode": "def baz(it_of_its: Iterable[Iterable[T]]) -> Iterator[T]:\n    return chain(*it_of_its)\nclass ClassB(Generic[T]):\n    def __init__(self, xs: Iterable[T]) -> None:\n        self.xs = xs\n    def indexed(self) -> \"ClassB[Tuple[int, T]]\":\n        return ClassB(enumerate(self.xs))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "peekOfCode": "T = TypeVar(\"T\")\nclass ClassA(Iterator[T]):\n    def __init__(self, it: Iterable[T]) -> None:\n        ...\n    def __next__(self) -> T:\n        ...\n    def __iter__(self) -> Iterator[T]:\n        ...\ndef bar(it: Iterable[T]) -> Iterator[T]:\n    return ClassA(it)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes44",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "peekOfCode": "class Foo(Generic[_T1]):\n    @staticmethod\n    def func1(value: _T1) -> \"Foo[_T1]\":\n        return Foo[_T1]()\n    @classmethod\n    def func2(cls, value: _T1) -> \"Foo[_T1]\":\n        return cls()\nclass FooSub1(Foo[_T2]):\n    pass\nclass FooSub2(Foo[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "documentation": {}
    },
    {
        "label": "FooSub1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "peekOfCode": "class FooSub1(Foo[_T2]):\n    pass\nclass FooSub2(Foo[int]):\n    pass\ndef test1(val_str: str, val_int: int):\n    reveal_type(Foo.func1(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub1.func1(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub2.func1(val_int), expected_text=\"Foo[int]\")\n    # This should generate an error because the argument type doesn't match.\n    FooSub2.func1(val_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "documentation": {}
    },
    {
        "label": "FooSub2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "peekOfCode": "class FooSub2(Foo[int]):\n    pass\ndef test1(val_str: str, val_int: int):\n    reveal_type(Foo.func1(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub1.func1(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub2.func1(val_int), expected_text=\"Foo[int]\")\n    # This should generate an error because the argument type doesn't match.\n    FooSub2.func1(val_str)\n    reveal_type(Foo.func2(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub1.func2(val_str), expected_text=\"Foo[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "peekOfCode": "def test1(val_str: str, val_int: int):\n    reveal_type(Foo.func1(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub1.func1(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub2.func1(val_int), expected_text=\"Foo[int]\")\n    # This should generate an error because the argument type doesn't match.\n    FooSub2.func1(val_str)\n    reveal_type(Foo.func2(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub1.func2(val_str), expected_text=\"Foo[str]\")\n    reveal_type(FooSub2.func2(val_int), expected_text=\"Foo[int]\")\n    # This should generate an error because the argument type doesn't match.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass Foo(Generic[_T1]):\n    @staticmethod\n    def func1(value: _T1) -> \"Foo[_T1]\":\n        return Foo[_T1]()\n    @classmethod\n    def func2(cls, value: _T1) -> \"Foo[_T1]\":\n        return cls()\nclass FooSub1(Foo[_T2]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nclass Foo(Generic[_T1]):\n    @staticmethod\n    def func1(value: _T1) -> \"Foo[_T1]\":\n        return Foo[_T1]()\n    @classmethod\n    def func2(cls, value: _T1) -> \"Foo[_T1]\":\n        return cls()\nclass FooSub1(Foo[_T2]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes45",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "class A:\n    ...\nclass B(A):\n    ...\n_T4 = TypeVar(\"_T4\", A, B)\n_T5 = TypeVar(\"_T5\", B, A)\ndef func6(t: type[_T4]) -> type[_T4]:\n    return t\ndef func7(t: type[_T5]) -> type[_T5]:\n    return t",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "class B(A):\n    ...\n_T4 = TypeVar(\"_T4\", A, B)\n_T5 = TypeVar(\"_T5\", B, A)\ndef func6(t: type[_T4]) -> type[_T4]:\n    return t\ndef func7(t: type[_T5]) -> type[_T5]:\n    return t\nval6 = func6(B)\nval7 = func7(B)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func(a: Union[int, float]):\n    ...\n_T1 = TypeVar(\"_T1\", int, float)\ndef func1(a: _T1, b: _T1):\n    return func(a)\n_T2 = TypeVar(\"_T2\", int, float, complex)\ndef func2(a: _T2, b: _T2):\n    # This should generate an error.\n    return func(a)\n_T3 = TypeVar(\"_T3\", int, float)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func1(a: _T1, b: _T1):\n    return func(a)\n_T2 = TypeVar(\"_T2\", int, float, complex)\ndef func2(a: _T2, b: _T2):\n    # This should generate an error.\n    return func(a)\n_T3 = TypeVar(\"_T3\", int, float)\ndef func3(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return (x for x in xs if x is not None)\ndef func4(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func2(a: _T2, b: _T2):\n    # This should generate an error.\n    return func(a)\n_T3 = TypeVar(\"_T3\", int, float)\ndef func3(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return (x for x in xs if x is not None)\ndef func4(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return func3(xs)\ndef func5(xs: Sequence[Optional[_T2]]) -> Iterator[_T2]:\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func3(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return (x for x in xs if x is not None)\ndef func4(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return func3(xs)\ndef func5(xs: Sequence[Optional[_T2]]) -> Iterator[_T2]:\n    # This should generate an error.\n    return func3(xs)\nclass A:\n    ...\nclass B(A):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func4(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return func3(xs)\ndef func5(xs: Sequence[Optional[_T2]]) -> Iterator[_T2]:\n    # This should generate an error.\n    return func3(xs)\nclass A:\n    ...\nclass B(A):\n    ...\n_T4 = TypeVar(\"_T4\", A, B)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func5(xs: Sequence[Optional[_T2]]) -> Iterator[_T2]:\n    # This should generate an error.\n    return func3(xs)\nclass A:\n    ...\nclass B(A):\n    ...\n_T4 = TypeVar(\"_T4\", A, B)\n_T5 = TypeVar(\"_T5\", B, A)\ndef func6(t: type[_T4]) -> type[_T4]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func6(t: type[_T4]) -> type[_T4]:\n    return t\ndef func7(t: type[_T5]) -> type[_T5]:\n    return t\nval6 = func6(B)\nval7 = func7(B)\nreveal_type(val6, expected_text=\"Type[B]\")\nreveal_type(val7, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "def func7(t: type[_T5]) -> type[_T5]:\n    return t\nval6 = func6(B)\nval7 = func7(B)\nreveal_type(val6, expected_text=\"Type[B]\")\nreveal_type(val7, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", int, float)\ndef func1(a: _T1, b: _T1):\n    return func(a)\n_T2 = TypeVar(\"_T2\", int, float, complex)\ndef func2(a: _T2, b: _T2):\n    # This should generate an error.\n    return func(a)\n_T3 = TypeVar(\"_T3\", int, float)\ndef func3(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return (x for x in xs if x is not None)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", int, float, complex)\ndef func2(a: _T2, b: _T2):\n    # This should generate an error.\n    return func(a)\n_T3 = TypeVar(\"_T3\", int, float)\ndef func3(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return (x for x in xs if x is not None)\ndef func4(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return func3(xs)\ndef func5(xs: Sequence[Optional[_T2]]) -> Iterator[_T2]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", int, float)\ndef func3(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return (x for x in xs if x is not None)\ndef func4(xs: Sequence[Optional[_T3]]) -> Iterator[_T3]:\n    return func3(xs)\ndef func5(xs: Sequence[Optional[_T2]]) -> Iterator[_T2]:\n    # This should generate an error.\n    return func3(xs)\nclass A:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "_T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "_T4 = TypeVar(\"_T4\", A, B)\n_T5 = TypeVar(\"_T5\", B, A)\ndef func6(t: type[_T4]) -> type[_T4]:\n    return t\ndef func7(t: type[_T5]) -> type[_T5]:\n    return t\nval6 = func6(B)\nval7 = func7(B)\nreveal_type(val6, expected_text=\"Type[B]\")\nreveal_type(val7, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "_T5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "_T5 = TypeVar(\"_T5\", B, A)\ndef func6(t: type[_T4]) -> type[_T4]:\n    return t\ndef func7(t: type[_T5]) -> type[_T5]:\n    return t\nval6 = func6(B)\nval7 = func7(B)\nreveal_type(val6, expected_text=\"Type[B]\")\nreveal_type(val7, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "val6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "val6 = func6(B)\nval7 = func7(B)\nreveal_type(val6, expected_text=\"Type[B]\")\nreveal_type(val7, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "val7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "peekOfCode": "val7 = func7(B)\nreveal_type(val6, expected_text=\"Type[B]\")\nreveal_type(val7, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes46",
        "documentation": {}
    },
    {
        "label": "HasAdd1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "class HasAdd1(Protocol[A]):\n    def __add__(self: A, other: A) -> A:\n        ...\nT1 = TypeVar(\"T1\", bound=HasAdd1)\ndef merge_element_lists1(a: Sequence[T1], b: Sequence[T1]) -> Sequence[T1]:\n    retval: Sequence[T1] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)\n    return retval",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "HasAdd2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "class HasAdd2(Protocol):\n    def __add__(self: A, other: A) -> A:\n        ...\nT2 = TypeVar(\"T2\", bound=HasAdd2)\ndef merge_element_lists2(a: Sequence[T2], b: Sequence[T2]) -> Sequence[T2]:\n    retval: Sequence[T2] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)\n    return retval",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "merge_element_lists1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "def merge_element_lists1(a: Sequence[T1], b: Sequence[T1]) -> Sequence[T1]:\n    retval: Sequence[T1] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)\n    return retval\n# This is similar to HasAdd1 except that the class isn't generic.\nclass HasAdd2(Protocol):\n    def __add__(self: A, other: A) -> A:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "merge_element_lists2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "def merge_element_lists2(a: Sequence[T2], b: Sequence[T2]) -> Sequence[T2]:\n    retval: Sequence[T2] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)\n    return retval",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "A = TypeVar(\"A\")\nclass HasAdd1(Protocol[A]):\n    def __add__(self: A, other: A) -> A:\n        ...\nT1 = TypeVar(\"T1\", bound=HasAdd1)\ndef merge_element_lists1(a: Sequence[T1], b: Sequence[T1]) -> Sequence[T1]:\n    retval: Sequence[T1] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "T1 = TypeVar(\"T1\", bound=HasAdd1)\ndef merge_element_lists1(a: Sequence[T1], b: Sequence[T1]) -> Sequence[T1]:\n    retval: Sequence[T1] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)\n    return retval\n# This is similar to HasAdd1 except that the class isn't generic.\nclass HasAdd2(Protocol):\n    def __add__(self: A, other: A) -> A:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=HasAdd2)\ndef merge_element_lists2(a: Sequence[T2], b: Sequence[T2]) -> Sequence[T2]:\n    retval: Sequence[T2] = []\n    for a_elem in a:\n        for b_elem in b:\n            retval.append(a_elem + b_elem)\n    return retval",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes47",
        "documentation": {}
    },
    {
        "label": "Configuration",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes48",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes48",
        "peekOfCode": "class Configuration:\n    @classmethod\n    def _create(cls: Type[_Configuration], data: Mapping[str, Any]) -> _Configuration:\n        ...\n    @classmethod\n    def _from_dict(\n        cls: Type[_Configuration], data: Mapping[str, Any]\n    ) -> _Configuration:\n        return cls._create({})",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes48",
        "documentation": {}
    },
    {
        "label": "_Configuration",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes48",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes48",
        "peekOfCode": "_Configuration = TypeVar(\"_Configuration\", bound=\"Configuration\")\nclass Configuration:\n    @classmethod\n    def _create(cls: Type[_Configuration], data: Mapping[str, Any]) -> _Configuration:\n        ...\n    @classmethod\n    def _from_dict(\n        cls: Type[_Configuration], data: Mapping[str, Any]\n    ) -> _Configuration:\n        return cls._create({})",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes48",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "class Base:\n    ...\nT = TypeVar(\"T\", bound=Base)\ndef register(state_name: str, state: Type[T]):\n    ...\ndef register_state(state_name: str) -> Callable[[Type[T]], Type[T]]:\n    def decorator(state: Type[T]) -> Type[T]:\n        register(state_name, state)\n        return state\n    return decorator",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "class F:\n    ...\nE = TypeVar(\"E\", bound=F)\ndef coercer_method(value: Union[E, str], enum: Type[E]) -> E:\n    ...\nclass C(Generic[E]):\n    e_type: Type[E]\n    def coerce(self, e_type: Type[E], value: Union[E, str]) -> E:\n        return coercer_method(value, self.e_type)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "class C(Generic[E]):\n    e_type: Type[E]\n    def coerce(self, e_type: Type[E], value: Union[E, str]) -> E:\n        return coercer_method(value, self.e_type)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "def register(state_name: str, state: Type[T]):\n    ...\ndef register_state(state_name: str) -> Callable[[Type[T]], Type[T]]:\n    def decorator(state: Type[T]) -> Type[T]:\n        register(state_name, state)\n        return state\n    return decorator\nclass F:\n    ...\nE = TypeVar(\"E\", bound=F)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "register_state",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "def register_state(state_name: str) -> Callable[[Type[T]], Type[T]]:\n    def decorator(state: Type[T]) -> Type[T]:\n        register(state_name, state)\n        return state\n    return decorator\nclass F:\n    ...\nE = TypeVar(\"E\", bound=F)\ndef coercer_method(value: Union[E, str], enum: Type[E]) -> E:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "coercer_method",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "def coercer_method(value: Union[E, str], enum: Type[E]) -> E:\n    ...\nclass C(Generic[E]):\n    e_type: Type[E]\n    def coerce(self, e_type: Type[E], value: Union[E, str]) -> E:\n        return coercer_method(value, self.e_type)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "T = TypeVar(\"T\", bound=Base)\ndef register(state_name: str, state: Type[T]):\n    ...\ndef register_state(state_name: str) -> Callable[[Type[T]], Type[T]]:\n    def decorator(state: Type[T]) -> Type[T]:\n        register(state_name, state)\n        return state\n    return decorator\nclass F:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "peekOfCode": "E = TypeVar(\"E\", bound=F)\ndef coercer_method(value: Union[E, str], enum: Type[E]) -> E:\n    ...\nclass C(Generic[E]):\n    e_type: Type[E]\n    def coerce(self, e_type: Type[E], value: Union[E, str]) -> E:\n        return coercer_method(value, self.e_type)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes49",
        "documentation": {}
    },
    {
        "label": "Adder",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "peekOfCode": "class Adder(Generic[T]):\n    def add(self, a: T, b: T) -> T:\n        return a + b\nint_adder: Adder[int] = Adder()\nint_adder.add(1, 2)\n# This should be an error because \"adder\"\n# should be of type Adder[int].\nint_adder.add(\"1\", 2)\ndef requires_str_adder(str_adder: Adder[str]):\n    return str_adder",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "documentation": {}
    },
    {
        "label": "requires_str_adder",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "peekOfCode": "def requires_str_adder(str_adder: Adder[str]):\n    return str_adder\na = requires_str_adder(Adder())\nprint(a.add(\"1\", \"2\"))\n# This should be an error because the result\n# of the call should be an Adder[str]\nprint(a.add(1, \"2\"))\ngeneric_adder = Adder()\ngeneric_adder.add(1, 2)\ngeneric_adder.add(\"a\", \"b\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "peekOfCode": "T = TypeVar(\"T\", int, str)\nclass Adder(Generic[T]):\n    def add(self, a: T, b: T) -> T:\n        return a + b\nint_adder: Adder[int] = Adder()\nint_adder.add(1, 2)\n# This should be an error because \"adder\"\n# should be of type Adder[int].\nint_adder.add(\"1\", 2)\ndef requires_str_adder(str_adder: Adder[str]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "peekOfCode": "a = requires_str_adder(Adder())\nprint(a.add(\"1\", \"2\"))\n# This should be an error because the result\n# of the call should be an Adder[str]\nprint(a.add(1, \"2\"))\ngeneric_adder = Adder()\ngeneric_adder.add(1, 2)\ngeneric_adder.add(\"a\", \"b\")\n# Since the type has an Unknown type argument,\n# the following should not generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "documentation": {}
    },
    {
        "label": "generic_adder",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "peekOfCode": "generic_adder = Adder()\ngeneric_adder.add(1, 2)\ngeneric_adder.add(\"a\", \"b\")\n# Since the type has an Unknown type argument,\n# the following should not generate an error.\ngeneric_adder.add(1, \"b\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes5",
        "documentation": {}
    },
    {
        "label": "SupportsDivMod",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "class SupportsDivMod(Protocol, Generic[_X_contra, _X_co]):\n    def __divmod__(self, __other: _X_contra) -> _X_co:\n        ...\nclass SupportsRDivMod(Protocol[_X_contra, _X_co]):\n    def __rdivmod__(self, __other: _X_contra) -> _X_co:\n        ...\n@overload\ndef divmod(__x: SupportsDivMod[_X_contra, _X_co], __y: _X_contra) -> _X_co:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "SupportsRDivMod",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "class SupportsRDivMod(Protocol[_X_contra, _X_co]):\n    def __rdivmod__(self, __other: _X_contra) -> _X_co:\n        ...\n@overload\ndef divmod(__x: SupportsDivMod[_X_contra, _X_co], __y: _X_contra) -> _X_co:\n    ...\n@overload\ndef divmod(__x: _X_contra, __y: SupportsRDivMod[_X_contra, _X_co]) -> _X_co:\n    ...\ndef divmod(__x: Any, __y: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "SupportsLessThan",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "class SupportsLessThan(Protocol):\n    def __lt__(self, __other: Any) -> bool:\n        ...\nSupportsLessThanT = TypeVar(\"SupportsLessThanT\", bound=SupportsLessThan)\ndef max2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef min2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef func1():\n    x = max2(1, min2(1, 4.5))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "divmod",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "def divmod(__x: SupportsDivMod[_X_contra, _X_co], __y: _X_contra) -> _X_co:\n    ...\n@overload\ndef divmod(__x: _X_contra, __y: SupportsRDivMod[_X_contra, _X_co]) -> _X_co:\n    ...\ndef divmod(__x: Any, __y: Any) -> Any:\n    ...\nreveal_type(\n    divmod(timedelta(minutes=90), timedelta(hours=1)),\n    expected_text=\"tuple[int, timedelta]\",",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "divmod",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "def divmod(__x: _X_contra, __y: SupportsRDivMod[_X_contra, _X_co]) -> _X_co:\n    ...\ndef divmod(__x: Any, __y: Any) -> Any:\n    ...\nreveal_type(\n    divmod(timedelta(minutes=90), timedelta(hours=1)),\n    expected_text=\"tuple[int, timedelta]\",\n)\nreveal_type(divmod(3, 4), expected_text=\"tuple[int, int]\")\nreveal_type(divmod(3.6, 4), expected_text=\"tuple[float, float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "divmod",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "def divmod(__x: Any, __y: Any) -> Any:\n    ...\nreveal_type(\n    divmod(timedelta(minutes=90), timedelta(hours=1)),\n    expected_text=\"tuple[int, timedelta]\",\n)\nreveal_type(divmod(3, 4), expected_text=\"tuple[int, int]\")\nreveal_type(divmod(3.6, 4), expected_text=\"tuple[float, float]\")\nreveal_type(divmod(3, 4.5), expected_text=\"tuple[float, float]\")\nclass SupportsLessThan(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "max2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "def max2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef min2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef func1():\n    x = max2(1, min2(1, 4.5))\n    reveal_type(x, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "min2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "def min2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef func1():\n    x = max2(1, min2(1, 4.5))\n    reveal_type(x, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "def func1():\n    x = max2(1, min2(1, 4.5))\n    reveal_type(x, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "_X_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "_X_co = TypeVar(\"_X_co\", covariant=True)\n_X_contra = TypeVar(\"_X_contra\", contravariant=True)\nclass SupportsDivMod(Protocol, Generic[_X_contra, _X_co]):\n    def __divmod__(self, __other: _X_contra) -> _X_co:\n        ...\nclass SupportsRDivMod(Protocol[_X_contra, _X_co]):\n    def __rdivmod__(self, __other: _X_contra) -> _X_co:\n        ...\n@overload\ndef divmod(__x: SupportsDivMod[_X_contra, _X_co], __y: _X_contra) -> _X_co:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "_X_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "_X_contra = TypeVar(\"_X_contra\", contravariant=True)\nclass SupportsDivMod(Protocol, Generic[_X_contra, _X_co]):\n    def __divmod__(self, __other: _X_contra) -> _X_co:\n        ...\nclass SupportsRDivMod(Protocol[_X_contra, _X_co]):\n    def __rdivmod__(self, __other: _X_contra) -> _X_co:\n        ...\n@overload\ndef divmod(__x: SupportsDivMod[_X_contra, _X_co], __y: _X_contra) -> _X_co:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "SupportsLessThanT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "peekOfCode": "SupportsLessThanT = TypeVar(\"SupportsLessThanT\", bound=SupportsLessThan)\ndef max2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef min2(__arg1: SupportsLessThanT, __arg2: SupportsLessThanT) -> SupportsLessThanT:\n    ...\ndef func1():\n    x = max2(1, min2(1, 4.5))\n    reveal_type(x, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes50",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "class Array:\n    ...\nclass MMap:\n    ...\n# Note that this union contains types that are not compatible\n# with the type \"bytes\".\nReadableBuffer = Union[bytes, bytearray, memoryview, Array, MMap]\n_T_contra = TypeVar(\"_T_contra\", contravariant=True)\n_T_co = TypeVar(\"_T_co\", covariant=True)\nclass BufferedWriter:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "MMap",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "class MMap:\n    ...\n# Note that this union contains types that are not compatible\n# with the type \"bytes\".\nReadableBuffer = Union[bytes, bytearray, memoryview, Array, MMap]\n_T_contra = TypeVar(\"_T_contra\", contravariant=True)\n_T_co = TypeVar(\"_T_co\", covariant=True)\nclass BufferedWriter:\n    def write(self, __buffer: ReadableBuffer) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "BufferedWriter",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "class BufferedWriter:\n    def write(self, __buffer: ReadableBuffer) -> int:\n        ...\nclass SupportsWrite(Protocol[_T_contra]):\n    def write(self, __s: _T_contra) -> Any:\n        ...\nclass SupportsRead(Protocol[_T_co]):\n    def read(self, __length: int = ...) -> _T_co:\n        ...\nclass BufferedReader:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "SupportsWrite",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "class SupportsWrite(Protocol[_T_contra]):\n    def write(self, __s: _T_contra) -> Any:\n        ...\nclass SupportsRead(Protocol[_T_co]):\n    def read(self, __length: int = ...) -> _T_co:\n        ...\nclass BufferedReader:\n    def read(self, __size: Optional[int] = ...) -> bytes:\n        ...\ndef copyfileobj(",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "SupportsRead",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "class SupportsRead(Protocol[_T_co]):\n    def read(self, __length: int = ...) -> _T_co:\n        ...\nclass BufferedReader:\n    def read(self, __size: Optional[int] = ...) -> bytes:\n        ...\ndef copyfileobj(\n    fsrc: SupportsRead[AnyStr], fdst: SupportsWrite[AnyStr], length: int = ...\n) -> AnyStr:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "BufferedReader",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "class BufferedReader:\n    def read(self, __size: Optional[int] = ...) -> bytes:\n        ...\ndef copyfileobj(\n    fsrc: SupportsRead[AnyStr], fdst: SupportsWrite[AnyStr], length: int = ...\n) -> AnyStr:\n    ...\ndef f(fr: BufferedReader, fw: BufferedWriter):\n    x = copyfileobj(fr, fw)\n    reveal_type(x, expected_text=\"bytes\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "copyfileobj",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "def copyfileobj(\n    fsrc: SupportsRead[AnyStr], fdst: SupportsWrite[AnyStr], length: int = ...\n) -> AnyStr:\n    ...\ndef f(fr: BufferedReader, fw: BufferedWriter):\n    x = copyfileobj(fr, fw)\n    reveal_type(x, expected_text=\"bytes\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "def f(fr: BufferedReader, fw: BufferedWriter):\n    x = copyfileobj(fr, fw)\n    reveal_type(x, expected_text=\"bytes\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "ReadableBuffer",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "ReadableBuffer = Union[bytes, bytearray, memoryview, Array, MMap]\n_T_contra = TypeVar(\"_T_contra\", contravariant=True)\n_T_co = TypeVar(\"_T_co\", covariant=True)\nclass BufferedWriter:\n    def write(self, __buffer: ReadableBuffer) -> int:\n        ...\nclass SupportsWrite(Protocol[_T_contra]):\n    def write(self, __s: _T_contra) -> Any:\n        ...\nclass SupportsRead(Protocol[_T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "_T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "_T_contra = TypeVar(\"_T_contra\", contravariant=True)\n_T_co = TypeVar(\"_T_co\", covariant=True)\nclass BufferedWriter:\n    def write(self, __buffer: ReadableBuffer) -> int:\n        ...\nclass SupportsWrite(Protocol[_T_contra]):\n    def write(self, __s: _T_contra) -> Any:\n        ...\nclass SupportsRead(Protocol[_T_co]):\n    def read(self, __length: int = ...) -> _T_co:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\nclass BufferedWriter:\n    def write(self, __buffer: ReadableBuffer) -> int:\n        ...\nclass SupportsWrite(Protocol[_T_contra]):\n    def write(self, __s: _T_contra) -> Any:\n        ...\nclass SupportsRead(Protocol[_T_co]):\n    def read(self, __length: int = ...) -> _T_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes51",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "peekOfCode": "def foo(value: T) -> T:\n    ...\ndef bar(values: Sequence[T]) -> T:\n    ...\ndef baz(\n    value: T,\n    callback: Callable[[T], U],\n) -> U:\n    ...\ndef qux(",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "peekOfCode": "def bar(values: Sequence[T]) -> T:\n    ...\ndef baz(\n    value: T,\n    callback: Callable[[T], U],\n) -> U:\n    ...\ndef qux(\n    values: Sequence[T],\n    callback: Callable[[Sequence[T]], U],",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "peekOfCode": "def baz(\n    value: T,\n    callback: Callable[[T], U],\n) -> U:\n    ...\ndef qux(\n    values: Sequence[T],\n    callback: Callable[[Sequence[T]], U],\n) -> U:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "documentation": {}
    },
    {
        "label": "qux",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "peekOfCode": "def qux(\n    values: Sequence[T],\n    callback: Callable[[Sequence[T]], U],\n) -> U:\n    ...\nreveal_type(baz(1.0, foo), expected_text=\"float\")\nreveal_type(qux([1.0], foo), expected_text=\"Sequence[float]\")\nreveal_type(qux([1.0], bar), expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\ndef foo(value: T) -> T:\n    ...\ndef bar(values: Sequence[T]) -> T:\n    ...\ndef baz(\n    value: T,\n    callback: Callable[[T], U],\n) -> U:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "peekOfCode": "U = TypeVar(\"U\")\ndef foo(value: T) -> T:\n    ...\ndef bar(values: Sequence[T]) -> T:\n    ...\ndef baz(\n    value: T,\n    callback: Callable[[T], U],\n) -> U:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes52",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "def func1(arg: _T) -> _T:\n    return arg\nv1: Literal[\"test\"] = func1(\"test\")\nx: List[Literal[\"test\"]] = [\"test\"]\nv2: List[Literal[\"test\"]] = func1(x)\ndef func2(arg: _T) -> List[_T]:\n    return [arg]\nv3: List[Literal[\"test\"]] = func2(\"test\")\nv4 = func1(\"test\")\nreveal_type(v4, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "def func2(arg: _T) -> List[_T]:\n    return [arg]\nv3: List[Literal[\"test\"]] = func2(\"test\")\nv4 = func1(\"test\")\nreveal_type(v4, expected_text=\"str\")\nv5 = func2(\"test\")\nreveal_type(v5, expected_text=\"List[str]\")\ndef reduce(function: Callable[[_T, _T], _T], sequence: Iterable[_T]) -> _T:\n    ...\ndicts = [{\"a\": \"b\"}, {\"c\": \"d\"}]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "reduce",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "def reduce(function: Callable[[_T, _T], _T], sequence: Iterable[_T]) -> _T:\n    ...\ndicts = [{\"a\": \"b\"}, {\"c\": \"d\"}]\nv6 = reduce(lambda x, y: x | y, dicts)\nreveal_type(v6, expected_text=\"dict[str, str]\")\nv7 = reduce(lambda x, y: {**x, **y}, dicts)\nreveal_type(v7, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(arg: _T) -> _T:\n    return arg\nv1: Literal[\"test\"] = func1(\"test\")\nx: List[Literal[\"test\"]] = [\"test\"]\nv2: List[Literal[\"test\"]] = func1(x)\ndef func2(arg: _T) -> List[_T]:\n    return [arg]\nv3: List[Literal[\"test\"]] = func2(\"test\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "v4 = func1(\"test\")\nreveal_type(v4, expected_text=\"str\")\nv5 = func2(\"test\")\nreveal_type(v5, expected_text=\"List[str]\")\ndef reduce(function: Callable[[_T, _T], _T], sequence: Iterable[_T]) -> _T:\n    ...\ndicts = [{\"a\": \"b\"}, {\"c\": \"d\"}]\nv6 = reduce(lambda x, y: x | y, dicts)\nreveal_type(v6, expected_text=\"dict[str, str]\")\nv7 = reduce(lambda x, y: {**x, **y}, dicts)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "v5 = func2(\"test\")\nreveal_type(v5, expected_text=\"List[str]\")\ndef reduce(function: Callable[[_T, _T], _T], sequence: Iterable[_T]) -> _T:\n    ...\ndicts = [{\"a\": \"b\"}, {\"c\": \"d\"}]\nv6 = reduce(lambda x, y: x | y, dicts)\nreveal_type(v6, expected_text=\"dict[str, str]\")\nv7 = reduce(lambda x, y: {**x, **y}, dicts)\nreveal_type(v7, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "dicts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "dicts = [{\"a\": \"b\"}, {\"c\": \"d\"}]\nv6 = reduce(lambda x, y: x | y, dicts)\nreveal_type(v6, expected_text=\"dict[str, str]\")\nv7 = reduce(lambda x, y: {**x, **y}, dicts)\nreveal_type(v7, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "v6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "v6 = reduce(lambda x, y: x | y, dicts)\nreveal_type(v6, expected_text=\"dict[str, str]\")\nv7 = reduce(lambda x, y: {**x, **y}, dicts)\nreveal_type(v7, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "v7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "peekOfCode": "v7 = reduce(lambda x, y: {**x, **y}, dicts)\nreveal_type(v7, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes53",
        "documentation": {}
    },
    {
        "label": "exists2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "def exists2(path: AnyStr) -> bool:\n    ...\ndef filter2(f: Callable[[_T1], Any], i: Iterable[_T1]) -> Iterator[_T1]:\n    ...\nresult = filter2(exists2, [\"hello\", \"world\"])\n_T2 = TypeVar(\"_T2\", set, frozenset)\ndef merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "filter2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "def filter2(f: Callable[[_T1], Any], i: Iterable[_T1]) -> Iterator[_T1]:\n    ...\nresult = filter2(exists2, [\"hello\", \"world\"])\n_T2 = TypeVar(\"_T2\", set, frozenset)\ndef merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "merge_sets",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "def merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nAnyStr = TypeVar(\"AnyStr\", str, bytes)\ndef exists2(path: AnyStr) -> bool:\n    ...\ndef filter2(f: Callable[[_T1], Any], i: Iterable[_T1]) -> Iterator[_T1]:\n    ...\nresult = filter2(exists2, [\"hello\", \"world\"])\n_T2 = TypeVar(\"_T2\", set, frozenset)\ndef merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "AnyStr",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "AnyStr = TypeVar(\"AnyStr\", str, bytes)\ndef exists2(path: AnyStr) -> bool:\n    ...\ndef filter2(f: Callable[[_T1], Any], i: Iterable[_T1]) -> Iterator[_T1]:\n    ...\nresult = filter2(exists2, [\"hello\", \"world\"])\n_T2 = TypeVar(\"_T2\", set, frozenset)\ndef merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "result = filter2(exists2, [\"hello\", \"world\"])\n_T2 = TypeVar(\"_T2\", set, frozenset)\ndef merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", set, frozenset)\ndef merge_sets(sets: Iterable[_T2]) -> _T2:\n    return reduce(lambda x, y: x.union(y), sets)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes54",
        "documentation": {}
    },
    {
        "label": "identity_generic",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "def identity_generic(x: _T) -> _T:\n    return x\ndef identity_callable_1(x: Callable[[_T], _T]) -> Callable[[_T], _T]:\n    return x\nMyCallable = Callable[[_T], _T]\ndef identity_callable_2(x: MyCallable[_T]) -> MyCallable[_T]:\n    return x\ndef identity_int(x: int) -> int:\n    return x\nv1 = identity_callable_1(identity_int)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "identity_callable_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "def identity_callable_1(x: Callable[[_T], _T]) -> Callable[[_T], _T]:\n    return x\nMyCallable = Callable[[_T], _T]\ndef identity_callable_2(x: MyCallable[_T]) -> MyCallable[_T]:\n    return x\ndef identity_int(x: int) -> int:\n    return x\nv1 = identity_callable_1(identity_int)\nreveal_type(v1, expected_text=\"(int) -> int\")\nreveal_type(v1(0), expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "identity_callable_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "def identity_callable_2(x: MyCallable[_T]) -> MyCallable[_T]:\n    return x\ndef identity_int(x: int) -> int:\n    return x\nv1 = identity_callable_1(identity_int)\nreveal_type(v1, expected_text=\"(int) -> int\")\nreveal_type(v1(0), expected_text=\"int\")\nv2 = identity_callable_1(identity_generic)\nreveal_type(v2, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v2(0), expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "identity_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "def identity_int(x: int) -> int:\n    return x\nv1 = identity_callable_1(identity_int)\nreveal_type(v1, expected_text=\"(int) -> int\")\nreveal_type(v1(0), expected_text=\"int\")\nv2 = identity_callable_1(identity_generic)\nreveal_type(v2, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v2(0), expected_text=\"int\")\nreveal_type(v2(\"\"), expected_text=\"str\")\nv3 = identity_callable_2(identity_int)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "dec",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "def dec() -> Callable[[_U], _U]:\n    ...\n@dec()\ndef func1(x: _T, y: Union[_T, List[_T]]) -> None:\n    pass\nfunc1(1, 2)\nfunc1(1, [2, 3])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "def func1(x: _T, y: Union[_T, List[_T]]) -> None:\n    pass\nfunc1(1, 2)\nfunc1(1, [2, 3])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef identity_generic(x: _T) -> _T:\n    return x\ndef identity_callable_1(x: Callable[[_T], _T]) -> Callable[[_T], _T]:\n    return x\nMyCallable = Callable[[_T], _T]\ndef identity_callable_2(x: MyCallable[_T]) -> MyCallable[_T]:\n    return x\ndef identity_int(x: int) -> int:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "MyCallable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "MyCallable = Callable[[_T], _T]\ndef identity_callable_2(x: MyCallable[_T]) -> MyCallable[_T]:\n    return x\ndef identity_int(x: int) -> int:\n    return x\nv1 = identity_callable_1(identity_int)\nreveal_type(v1, expected_text=\"(int) -> int\")\nreveal_type(v1(0), expected_text=\"int\")\nv2 = identity_callable_1(identity_generic)\nreveal_type(v2, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "v1 = identity_callable_1(identity_int)\nreveal_type(v1, expected_text=\"(int) -> int\")\nreveal_type(v1(0), expected_text=\"int\")\nv2 = identity_callable_1(identity_generic)\nreveal_type(v2, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v2(0), expected_text=\"int\")\nreveal_type(v2(\"\"), expected_text=\"str\")\nv3 = identity_callable_2(identity_int)\nreveal_type(v3, expected_text=\"(int) -> int\")\nreveal_type(v3(0), expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "v2 = identity_callable_1(identity_generic)\nreveal_type(v2, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v2(0), expected_text=\"int\")\nreveal_type(v2(\"\"), expected_text=\"str\")\nv3 = identity_callable_2(identity_int)\nreveal_type(v3, expected_text=\"(int) -> int\")\nreveal_type(v3(0), expected_text=\"int\")\nv4 = identity_callable_2(identity_generic)\nreveal_type(v4, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v4(0), expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "v3 = identity_callable_2(identity_int)\nreveal_type(v3, expected_text=\"(int) -> int\")\nreveal_type(v3(0), expected_text=\"int\")\nv4 = identity_callable_2(identity_generic)\nreveal_type(v4, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v4(0), expected_text=\"int\")\nreveal_type(v4(\"\"), expected_text=\"str\")\n_U = TypeVar(\"_U\")\ndef dec() -> Callable[[_U], _U]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "v4 = identity_callable_2(identity_generic)\nreveal_type(v4, expected_text=\"(_T@identity_generic) -> _T@identity_generic\")\nreveal_type(v4(0), expected_text=\"int\")\nreveal_type(v4(\"\"), expected_text=\"str\")\n_U = TypeVar(\"_U\")\ndef dec() -> Callable[[_U], _U]:\n    ...\n@dec()\ndef func1(x: _T, y: Union[_T, List[_T]]) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "_U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "peekOfCode": "_U = TypeVar(\"_U\")\ndef dec() -> Callable[[_U], _U]:\n    ...\n@dec()\ndef func1(x: _T, y: Union[_T, List[_T]]) -> None:\n    pass\nfunc1(1, 2)\nfunc1(1, [2, 3])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes55",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "peekOfCode": "class ClassA:\n    ...\nT = TypeVar(\"T\")\ndef func1(x: Type[Any], y: Type[T]) -> T:\n    v1: Type[Any] = x\n    v2: Type[Any] = ClassA\n    v3: Type[Any] = y\n    return y()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "peekOfCode": "def func1(x: Type[Any], y: Type[T]) -> T:\n    v1: Type[Any] = x\n    v2: Type[Any] = ClassA\n    v3: Type[Any] = y\n    return y()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "peekOfCode": "T = TypeVar(\"T\")\ndef func1(x: Type[Any], y: Type[T]) -> T:\n    v1: Type[Any] = x\n    v2: Type[Any] = ClassA\n    v3: Type[Any] = y\n    return y()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes56",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "peekOfCode": "def func1(v: List[Optional[_T]]) -> _T:\n    ...\ndef func2(v: List[Optional[Union[_T, str]]]) -> _T:\n    ...\nv1: List[Optional[int]] = [1, None]\nr1 = func1(v1)\nreveal_type(r1, expected_text=\"int\")\nv2: List[Optional[Union[int, str]]] = [1, None]\nr2_1 = func1(v2)\nreveal_type(r2_1, expected_text=\"int | str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "peekOfCode": "def func2(v: List[Optional[Union[_T, str]]]) -> _T:\n    ...\nv1: List[Optional[int]] = [1, None]\nr1 = func1(v1)\nreveal_type(r1, expected_text=\"int\")\nv2: List[Optional[Union[int, str]]] = [1, None]\nr2_1 = func1(v2)\nreveal_type(r2_1, expected_text=\"int | str\")\nr2_2 = func2(v2)\nreveal_type(r2_2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(v: List[Optional[_T]]) -> _T:\n    ...\ndef func2(v: List[Optional[Union[_T, str]]]) -> _T:\n    ...\nv1: List[Optional[int]] = [1, None]\nr1 = func1(v1)\nreveal_type(r1, expected_text=\"int\")\nv2: List[Optional[Union[int, str]]] = [1, None]\nr2_1 = func1(v2)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "peekOfCode": "r1 = func1(v1)\nreveal_type(r1, expected_text=\"int\")\nv2: List[Optional[Union[int, str]]] = [1, None]\nr2_1 = func1(v2)\nreveal_type(r2_1, expected_text=\"int | str\")\nr2_2 = func2(v2)\nreveal_type(r2_2, expected_text=\"int\")\nv3: List[Union[str, Sequence[Pattern]]] = [\"\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "documentation": {}
    },
    {
        "label": "r2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "peekOfCode": "r2_1 = func1(v2)\nreveal_type(r2_1, expected_text=\"int | str\")\nr2_2 = func2(v2)\nreveal_type(r2_2, expected_text=\"int\")\nv3: List[Union[str, Sequence[Pattern]]] = [\"\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "documentation": {}
    },
    {
        "label": "r2_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "peekOfCode": "r2_2 = func2(v2)\nreveal_type(r2_2, expected_text=\"int\")\nv3: List[Union[str, Sequence[Pattern]]] = [\"\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes57",
        "documentation": {}
    },
    {
        "label": "UsesFoo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "class UsesFoo(Generic[CallbackSigT]):\n    ...\ndef dec1() -> Callable[\n    [Union[CallbackSigT, UsesFoo[CallbackSigT]]], UsesFoo[CallbackSigT]\n]:\n    ...\n@dec1()\nasync def bars() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "def func1(x: Union[str, None, _T]) -> Union[str, None, _T]:\n    ...\nreveal_type(func1(None), expected_text=\"str | None\")\nreveal_type(func1(\"hi\"), expected_text=\"str | None\")\nreveal_type(func1(3), expected_text=\"str | int | None\")\ndef func2(x: Union[str, None, _T]) -> List[Union[str, None, _T]]:\n    ...\nreveal_type(func2(None), expected_text=\"List[str | None]\")\nreveal_type(func2(\"hi\"), expected_text=\"List[str | None]\")\nreveal_type(func2(3), expected_text=\"List[str | int | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "def func2(x: Union[str, None, _T]) -> List[Union[str, None, _T]]:\n    ...\nreveal_type(func2(None), expected_text=\"List[str | None]\")\nreveal_type(func2(\"hi\"), expected_text=\"List[str | None]\")\nreveal_type(func2(3), expected_text=\"List[str | int | None]\")\nCallbackSig = Callable[..., Awaitable[None]]\nCallbackSigT = TypeVar(\"CallbackSigT\", bound=\"CallbackSig\")\nclass UsesFoo(Generic[CallbackSigT]):\n    ...\ndef dec1() -> Callable[",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "dec1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "def dec1() -> Callable[\n    [Union[CallbackSigT, UsesFoo[CallbackSigT]]], UsesFoo[CallbackSigT]\n]:\n    ...\n@dec1()\nasync def bars() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(x: Union[str, None, _T]) -> Union[str, None, _T]:\n    ...\nreveal_type(func1(None), expected_text=\"str | None\")\nreveal_type(func1(\"hi\"), expected_text=\"str | None\")\nreveal_type(func1(3), expected_text=\"str | int | None\")\ndef func2(x: Union[str, None, _T]) -> List[Union[str, None, _T]]:\n    ...\nreveal_type(func2(None), expected_text=\"List[str | None]\")\nreveal_type(func2(\"hi\"), expected_text=\"List[str | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "CallbackSig",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "CallbackSig = Callable[..., Awaitable[None]]\nCallbackSigT = TypeVar(\"CallbackSigT\", bound=\"CallbackSig\")\nclass UsesFoo(Generic[CallbackSigT]):\n    ...\ndef dec1() -> Callable[\n    [Union[CallbackSigT, UsesFoo[CallbackSigT]]], UsesFoo[CallbackSigT]\n]:\n    ...\n@dec1()\nasync def bars() -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "CallbackSigT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "peekOfCode": "CallbackSigT = TypeVar(\"CallbackSigT\", bound=\"CallbackSig\")\nclass UsesFoo(Generic[CallbackSigT]):\n    ...\ndef dec1() -> Callable[\n    [Union[CallbackSigT, UsesFoo[CallbackSigT]]], UsesFoo[CallbackSigT]\n]:\n    ...\n@dec1()\nasync def bars() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes58",
        "documentation": {}
    },
    {
        "label": "Wrapper",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "class Wrapper(Generic[T1]):\n    ...\ndef ensure_wrapped(item: Union[T1, Wrapper[T1]]) -> Wrapper[T1]:\n    ...\ndef some_func(x: Wrapper[T1]) -> Wrapper[T1]:\n    return ensure_wrapped(x)\ndef func1a(value: List[Union[T1, List[T1]]]) -> T1:\n    ...\ndef func2a(value: List[Union[float, List[float]]]):\n    x = func1a(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "ensure_wrapped",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def ensure_wrapped(item: Union[T1, Wrapper[T1]]) -> Wrapper[T1]:\n    ...\ndef some_func(x: Wrapper[T1]) -> Wrapper[T1]:\n    return ensure_wrapped(x)\ndef func1a(value: List[Union[T1, List[T1]]]) -> T1:\n    ...\ndef func2a(value: List[Union[float, List[float]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3a(value: List[Union[str, List[float]]]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "some_func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def some_func(x: Wrapper[T1]) -> Wrapper[T1]:\n    return ensure_wrapped(x)\ndef func1a(value: List[Union[T1, List[T1]]]) -> T1:\n    ...\ndef func2a(value: List[Union[float, List[float]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3a(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1a(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func1a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func1a(value: List[Union[T1, List[T1]]]) -> T1:\n    ...\ndef func2a(value: List[Union[float, List[float]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3a(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1a(value)\ndef func4a(value: List[Union[float, str, List[Union[float, str]]]]):\n    x = func1a(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func2a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func2a(value: List[Union[float, List[float]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3a(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1a(value)\ndef func4a(value: List[Union[float, str, List[Union[float, str]]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float | str\")\ndef func1b(value: List[Union[int, List[T1]]]) -> T1:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func3a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func3a(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1a(value)\ndef func4a(value: List[Union[float, str, List[Union[float, str]]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float | str\")\ndef func1b(value: List[Union[int, List[T1]]]) -> T1:\n    ...\ndef func2b(value: List[Union[int, List[float]]]):\n    x = func1b(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func4a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func4a(value: List[Union[float, str, List[Union[float, str]]]]):\n    x = func1a(value)\n    reveal_type(x, expected_text=\"float | str\")\ndef func1b(value: List[Union[int, List[T1]]]) -> T1:\n    ...\ndef func2b(value: List[Union[int, List[float]]]):\n    x = func1b(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3b(value: List[Union[str, List[float]]]):\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func1b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func1b(value: List[Union[int, List[T1]]]) -> T1:\n    ...\ndef func2b(value: List[Union[int, List[float]]]):\n    x = func1b(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3b(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1b(value)\ndef ensure_list(value: Union[T1, List[T1]]) -> List[T1]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func2b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func2b(value: List[Union[int, List[float]]]):\n    x = func1b(value)\n    reveal_type(x, expected_text=\"float\")\ndef func3b(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1b(value)\ndef ensure_list(value: Union[T1, List[T1]]) -> List[T1]:\n    ...\ndef func4(\n    v1: list, v2: List[Any], v3: List[None], v4: Any, v5: int, v6: T1, v7: List[T1]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func3b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func3b(value: List[Union[str, List[float]]]):\n    # This should generate an error\n    func1b(value)\ndef ensure_list(value: Union[T1, List[T1]]) -> List[T1]:\n    ...\ndef func4(\n    v1: list, v2: List[Any], v3: List[None], v4: Any, v5: int, v6: T1, v7: List[T1]\n) -> T1:\n    reveal_type(ensure_list(v1), expected_text=\"List[Unknown]\")\n    reveal_type(ensure_list(v2), expected_text=\"List[Any]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "ensure_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def ensure_list(value: Union[T1, List[T1]]) -> List[T1]:\n    ...\ndef func4(\n    v1: list, v2: List[Any], v3: List[None], v4: Any, v5: int, v6: T1, v7: List[T1]\n) -> T1:\n    reveal_type(ensure_list(v1), expected_text=\"List[Unknown]\")\n    reveal_type(ensure_list(v2), expected_text=\"List[Any]\")\n    reveal_type(ensure_list(v3), expected_text=\"List[None]\")\n    reveal_type(ensure_list(v4), expected_text=\"List[Any]\")\n    reveal_type(ensure_list(v5), expected_text=\"List[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "def func4(\n    v1: list, v2: List[Any], v3: List[None], v4: Any, v5: int, v6: T1, v7: List[T1]\n) -> T1:\n    reveal_type(ensure_list(v1), expected_text=\"List[Unknown]\")\n    reveal_type(ensure_list(v2), expected_text=\"List[Any]\")\n    reveal_type(ensure_list(v3), expected_text=\"List[None]\")\n    reveal_type(ensure_list(v4), expected_text=\"List[Any]\")\n    reveal_type(ensure_list(v5), expected_text=\"List[int]\")\n    reveal_type(ensure_list(v6), expected_text=\"List[T1@func4]\")\n    reveal_type(ensure_list(v7), expected_text=\"List[T1@func4]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nclass Wrapper(Generic[T1]):\n    ...\ndef ensure_wrapped(item: Union[T1, Wrapper[T1]]) -> Wrapper[T1]:\n    ...\ndef some_func(x: Wrapper[T1]) -> Wrapper[T1]:\n    return ensure_wrapped(x)\ndef func1a(value: List[Union[T1, List[T1]]]) -> T1:\n    ...\ndef func2a(value: List[Union[float, List[float]]]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes59",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "class Foo(Generic[U]):\n    def generic_func1(self, a: U, b: U = ..., **kwargs: U) -> U:\n        return b\nfoo = Foo[str]()\nr1 = foo.generic_func1(\"hi\")\nreveal_type(r1, expected_text=\"str\")\nr2 = foo.generic_func1(\"hi\", test=\"hi\")\nreveal_type(r2, expected_text=\"str\")\n# This should generate an error.\nr3 = foo.generic_func1(\"hi\", test=3)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "constrained",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "def constrained(first: S, second: S) -> S:\n    return first\n# This should generate an error because the two arguments\n# cannot satisfy the 'str' or 'bytes' constraint.\nresult = constrained(\"a\", b\"abc\")\nT = TypeVar(\"T\")\ndef unconstrained(first: T, second: T) -> T:\n    return first\n# This shouldn't generate an error because the TypeVar matching\n# logic is free to expand the type to a union of 'str' and 'bytes'.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "unconstrained",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "def unconstrained(first: T, second: T) -> T:\n    return first\n# This shouldn't generate an error because the TypeVar matching\n# logic is free to expand the type to a union of 'str' and 'bytes'.\nresult = unconstrained(\"a\", b\"abc\")\nU = TypeVar(\"U\", int, str)\nclass Foo(Generic[U]):\n    def generic_func1(self, a: U, b: U = ..., **kwargs: U) -> U:\n        return b\nfoo = Foo[str]()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "S = TypeVar(\"S\", str, bytes)\ndef constrained(first: S, second: S) -> S:\n    return first\n# This should generate an error because the two arguments\n# cannot satisfy the 'str' or 'bytes' constraint.\nresult = constrained(\"a\", b\"abc\")\nT = TypeVar(\"T\")\ndef unconstrained(first: T, second: T) -> T:\n    return first\n# This shouldn't generate an error because the TypeVar matching",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "result = constrained(\"a\", b\"abc\")\nT = TypeVar(\"T\")\ndef unconstrained(first: T, second: T) -> T:\n    return first\n# This shouldn't generate an error because the TypeVar matching\n# logic is free to expand the type to a union of 'str' and 'bytes'.\nresult = unconstrained(\"a\", b\"abc\")\nU = TypeVar(\"U\", int, str)\nclass Foo(Generic[U]):\n    def generic_func1(self, a: U, b: U = ..., **kwargs: U) -> U:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "T = TypeVar(\"T\")\ndef unconstrained(first: T, second: T) -> T:\n    return first\n# This shouldn't generate an error because the TypeVar matching\n# logic is free to expand the type to a union of 'str' and 'bytes'.\nresult = unconstrained(\"a\", b\"abc\")\nU = TypeVar(\"U\", int, str)\nclass Foo(Generic[U]):\n    def generic_func1(self, a: U, b: U = ..., **kwargs: U) -> U:\n        return b",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "result = unconstrained(\"a\", b\"abc\")\nU = TypeVar(\"U\", int, str)\nclass Foo(Generic[U]):\n    def generic_func1(self, a: U, b: U = ..., **kwargs: U) -> U:\n        return b\nfoo = Foo[str]()\nr1 = foo.generic_func1(\"hi\")\nreveal_type(r1, expected_text=\"str\")\nr2 = foo.generic_func1(\"hi\", test=\"hi\")\nreveal_type(r2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "U = TypeVar(\"U\", int, str)\nclass Foo(Generic[U]):\n    def generic_func1(self, a: U, b: U = ..., **kwargs: U) -> U:\n        return b\nfoo = Foo[str]()\nr1 = foo.generic_func1(\"hi\")\nreveal_type(r1, expected_text=\"str\")\nr2 = foo.generic_func1(\"hi\", test=\"hi\")\nreveal_type(r2, expected_text=\"str\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "foo = Foo[str]()\nr1 = foo.generic_func1(\"hi\")\nreveal_type(r1, expected_text=\"str\")\nr2 = foo.generic_func1(\"hi\", test=\"hi\")\nreveal_type(r2, expected_text=\"str\")\n# This should generate an error.\nr3 = foo.generic_func1(\"hi\", test=3)\nreveal_type(r3, expected_text=\"str\")\n# This should generate an error.\nr4 = foo.generic_func1(\"hi\", 3)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "r1 = foo.generic_func1(\"hi\")\nreveal_type(r1, expected_text=\"str\")\nr2 = foo.generic_func1(\"hi\", test=\"hi\")\nreveal_type(r2, expected_text=\"str\")\n# This should generate an error.\nr3 = foo.generic_func1(\"hi\", test=3)\nreveal_type(r3, expected_text=\"str\")\n# This should generate an error.\nr4 = foo.generic_func1(\"hi\", 3)\nreveal_type(r4, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "r2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "r2 = foo.generic_func1(\"hi\", test=\"hi\")\nreveal_type(r2, expected_text=\"str\")\n# This should generate an error.\nr3 = foo.generic_func1(\"hi\", test=3)\nreveal_type(r3, expected_text=\"str\")\n# This should generate an error.\nr4 = foo.generic_func1(\"hi\", 3)\nreveal_type(r4, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "r3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "r3 = foo.generic_func1(\"hi\", test=3)\nreveal_type(r3, expected_text=\"str\")\n# This should generate an error.\nr4 = foo.generic_func1(\"hi\", 3)\nreveal_type(r4, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "r4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "peekOfCode": "r4 = foo.generic_func1(\"hi\", 3)\nreveal_type(r4, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes6",
        "documentation": {}
    },
    {
        "label": "LI",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "peekOfCode": "class LI(List[int]):\n    pass\nclass LS(List[str]):\n    pass\n_T1 = TypeVar(\"_T1\")\nclass MyList(List[Union[LI, LS]]):\n    def get_generator(self, *, type_: Type[_T1]) -> Generator[_T1, None, None]:\n        for elem in self:\n            if isinstance(elem, type_):\n                yield elem",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "documentation": {}
    },
    {
        "label": "LS",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "peekOfCode": "class LS(List[str]):\n    pass\n_T1 = TypeVar(\"_T1\")\nclass MyList(List[Union[LI, LS]]):\n    def get_generator(self, *, type_: Type[_T1]) -> Generator[_T1, None, None]:\n        for elem in self:\n            if isinstance(elem, type_):\n                yield elem\ndef same(other: Union[LI, LS]):\n    for elem in MyList().get_generator(type_=other.__class__):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "peekOfCode": "class MyList(List[Union[LI, LS]]):\n    def get_generator(self, *, type_: Type[_T1]) -> Generator[_T1, None, None]:\n        for elem in self:\n            if isinstance(elem, type_):\n                yield elem\ndef same(other: Union[LI, LS]):\n    for elem in MyList().get_generator(type_=other.__class__):\n        for v in elem:\n            print(v)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "documentation": {}
    },
    {
        "label": "same",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "peekOfCode": "def same(other: Union[LI, LS]):\n    for elem in MyList().get_generator(type_=other.__class__):\n        for v in elem:\n            print(v)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass MyList(List[Union[LI, LS]]):\n    def get_generator(self, *, type_: Type[_T1]) -> Generator[_T1, None, None]:\n        for elem in self:\n            if isinstance(elem, type_):\n                yield elem\ndef same(other: Union[LI, LS]):\n    for elem in MyList().get_generator(type_=other.__class__):\n        for v in elem:\n            print(v)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes60",
        "documentation": {}
    },
    {
        "label": "Registry",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "class Registry(Generic[K, V]):\n    key: K\n    value: Dict[str, V] = field(default_factory=dict)\nclass Base:\n    pass\nBaseType = TypeVar(\"BaseType\", bound=Base)\nclass BaseTypeRegistry(Registry[Type[BaseType], BaseType]):\n    pass\nclass Thing1(Base):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "class Base:\n    pass\nBaseType = TypeVar(\"BaseType\", bound=Base)\nclass BaseTypeRegistry(Registry[Type[BaseType], BaseType]):\n    pass\nclass Thing1(Base):\n    pass\nreveal_type(BaseTypeRegistry(Thing1), expected_text=\"BaseTypeRegistry[Thing1]\")\nfoo: BaseTypeRegistry[Thing1] = BaseTypeRegistry(Thing1)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "BaseTypeRegistry",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "class BaseTypeRegistry(Registry[Type[BaseType], BaseType]):\n    pass\nclass Thing1(Base):\n    pass\nreveal_type(BaseTypeRegistry(Thing1), expected_text=\"BaseTypeRegistry[Thing1]\")\nfoo: BaseTypeRegistry[Thing1] = BaseTypeRegistry(Thing1)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "Thing1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "class Thing1(Base):\n    pass\nreveal_type(BaseTypeRegistry(Thing1), expected_text=\"BaseTypeRegistry[Thing1]\")\nfoo: BaseTypeRegistry[Thing1] = BaseTypeRegistry(Thing1)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "K = TypeVar(\"K\")\nV = TypeVar(\"V\")\n@dataclass\nclass Registry(Generic[K, V]):\n    key: K\n    value: Dict[str, V] = field(default_factory=dict)\nclass Base:\n    pass\nBaseType = TypeVar(\"BaseType\", bound=Base)\nclass BaseTypeRegistry(Registry[Type[BaseType], BaseType]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "V = TypeVar(\"V\")\n@dataclass\nclass Registry(Generic[K, V]):\n    key: K\n    value: Dict[str, V] = field(default_factory=dict)\nclass Base:\n    pass\nBaseType = TypeVar(\"BaseType\", bound=Base)\nclass BaseTypeRegistry(Registry[Type[BaseType], BaseType]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "BaseType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "peekOfCode": "BaseType = TypeVar(\"BaseType\", bound=Base)\nclass BaseTypeRegistry(Registry[Type[BaseType], BaseType]):\n    pass\nclass Thing1(Base):\n    pass\nreveal_type(BaseTypeRegistry(Thing1), expected_text=\"BaseTypeRegistry[Thing1]\")\nfoo: BaseTypeRegistry[Thing1] = BaseTypeRegistry(Thing1)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes61",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "peekOfCode": "class ClassA(Generic[T1]):\n    ...\nclass ClassB(Generic[T2]):\n    def broken(self, p0: ClassA[T2], p1: Callable[[T2], object]):\n        func(p0, p1)\ndef func(\n    p0: ClassA[T3],\n    p1: Callable[[T3], object],\n):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "peekOfCode": "class ClassB(Generic[T2]):\n    def broken(self, p0: ClassA[T2], p1: Callable[[T2], object]):\n        func(p0, p1)\ndef func(\n    p0: ClassA[T3],\n    p1: Callable[[T3], object],\n):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "peekOfCode": "def func(\n    p0: ClassA[T3],\n    p1: Callable[[T3], object],\n):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\nT3 = TypeVar(\"T3\")\nclass ClassA(Generic[T1]):\n    ...\nclass ClassB(Generic[T2]):\n    def broken(self, p0: ClassA[T2], p1: Callable[[T2], object]):\n        func(p0, p1)\ndef func(\n    p0: ClassA[T3],",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "peekOfCode": "T2 = TypeVar(\"T2\")\nT3 = TypeVar(\"T3\")\nclass ClassA(Generic[T1]):\n    ...\nclass ClassB(Generic[T2]):\n    def broken(self, p0: ClassA[T2], p1: Callable[[T2], object]):\n        func(p0, p1)\ndef func(\n    p0: ClassA[T3],\n    p1: Callable[[T3], object],",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "peekOfCode": "T3 = TypeVar(\"T3\")\nclass ClassA(Generic[T1]):\n    ...\nclass ClassB(Generic[T2]):\n    def broken(self, p0: ClassA[T2], p1: Callable[[T2], object]):\n        func(p0, p1)\ndef func(\n    p0: ClassA[T3],\n    p1: Callable[[T3], object],\n):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes62",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "peekOfCode": "class A:\n    def __init__(self, x: Any) -> None:\n        pass\n    def f(self) -> None:\n        pass\nT = TypeVar(\"T\", str, int, A)\ndef factory(desired_type: Type[T]) -> T:\n    return desired_type(1)\nfactory(str)\nreveal_type(factory(str), expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "documentation": {}
    },
    {
        "label": "factory",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "peekOfCode": "def factory(desired_type: Type[T]) -> T:\n    return desired_type(1)\nfactory(str)\nreveal_type(factory(str), expected_text=\"str\")\nfactory(int)\nreveal_type(factory(int), expected_text=\"int\")\nfactory(A).f()\nreveal_type(factory(A), expected_text=\"A\")\n# This should generate an error\nfactory(float)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "peekOfCode": "T = TypeVar(\"T\", str, int, A)\ndef factory(desired_type: Type[T]) -> T:\n    return desired_type(1)\nfactory(str)\nreveal_type(factory(str), expected_text=\"str\")\nfactory(int)\nreveal_type(factory(int), expected_text=\"int\")\nfactory(A).f()\nreveal_type(factory(A), expected_text=\"A\")\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes63",
        "documentation": {}
    },
    {
        "label": "custom_eq",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "peekOfCode": "def custom_eq(x: IntStr, y: IntStr) -> bool:\n    return True\ndef eq(f: Callable[[T1], T2], x: T1, y: T2) -> bool:\n    return custom_eq(f(x), y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "documentation": {}
    },
    {
        "label": "eq",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "peekOfCode": "def eq(f: Callable[[T1], T2], x: T1, y: T2) -> bool:\n    return custom_eq(f(x), y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "peekOfCode": "T = TypeVar(\"T\")\nIntStr = Union[str, int]\nT1 = TypeVar(\"T1\", bound=IntStr)\nT2 = TypeVar(\"T2\", bound=IntStr)\ndef custom_eq(x: IntStr, y: IntStr) -> bool:\n    return True\ndef eq(f: Callable[[T1], T2], x: T1, y: T2) -> bool:\n    return custom_eq(f(x), y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "documentation": {}
    },
    {
        "label": "IntStr",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "peekOfCode": "IntStr = Union[str, int]\nT1 = TypeVar(\"T1\", bound=IntStr)\nT2 = TypeVar(\"T2\", bound=IntStr)\ndef custom_eq(x: IntStr, y: IntStr) -> bool:\n    return True\ndef eq(f: Callable[[T1], T2], x: T1, y: T2) -> bool:\n    return custom_eq(f(x), y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "peekOfCode": "T1 = TypeVar(\"T1\", bound=IntStr)\nT2 = TypeVar(\"T2\", bound=IntStr)\ndef custom_eq(x: IntStr, y: IntStr) -> bool:\n    return True\ndef eq(f: Callable[[T1], T2], x: T1, y: T2) -> bool:\n    return custom_eq(f(x), y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=IntStr)\ndef custom_eq(x: IntStr, y: IntStr) -> bool:\n    return True\ndef eq(f: Callable[[T1], T2], x: T1, y: T2) -> bool:\n    return custom_eq(f(x), y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes64",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "peekOfCode": "class A(Generic[XOrY]):\n    pass\nclass B(Generic[XOrY]):\n    def __init__(self, a: A[XOrY]):\n        self.a = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "peekOfCode": "class B(Generic[XOrY]):\n    def __init__(self, a: A[XOrY]):\n        self.a = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "documentation": {}
    },
    {
        "label": "XOrY",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "peekOfCode": "XOrY = TypeVar(\"XOrY\", Literal[True], Literal[False])\nclass A(Generic[XOrY]):\n    pass\nclass B(Generic[XOrY]):\n    def __init__(self, a: A[XOrY]):\n        self.a = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes65",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "def func1(x: T1) -> T1:\n    return x\ndef func2(x: T2) -> T2:\n    return x\ndef func3(x: T3) -> T3:\n    return x\ndef func4(y: Union[int, str]):\n    # This should generate an error because T1 doesn't\n    # include a union constraint.\n    func1(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "def func2(x: T2) -> T2:\n    return x\ndef func3(x: T3) -> T3:\n    return x\ndef func4(y: Union[int, str]):\n    # This should generate an error because T1 doesn't\n    # include a union constraint.\n    func1(y)\n    func2(y)\n    func3(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "def func3(x: T3) -> T3:\n    return x\ndef func4(y: Union[int, str]):\n    # This should generate an error because T1 doesn't\n    # include a union constraint.\n    func1(y)\n    func2(y)\n    func3(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "def func4(y: Union[int, str]):\n    # This should generate an error because T1 doesn't\n    # include a union constraint.\n    func1(y)\n    func2(y)\n    func3(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "T1 = TypeVar(\"T1\", int, str)\nT2 = TypeVar(\"T2\", int, str, Union[int, str])\nT3 = TypeVar(\"T3\", int, str, Union[int, str, List[int]])\ndef func1(x: T1) -> T1:\n    return x\ndef func2(x: T2) -> T2:\n    return x\ndef func3(x: T3) -> T3:\n    return x\ndef func4(y: Union[int, str]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "T2 = TypeVar(\"T2\", int, str, Union[int, str])\nT3 = TypeVar(\"T3\", int, str, Union[int, str, List[int]])\ndef func1(x: T1) -> T1:\n    return x\ndef func2(x: T2) -> T2:\n    return x\ndef func3(x: T3) -> T3:\n    return x\ndef func4(y: Union[int, str]):\n    # This should generate an error because T1 doesn't",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "peekOfCode": "T3 = TypeVar(\"T3\", int, str, Union[int, str, List[int]])\ndef func1(x: T1) -> T1:\n    return x\ndef func2(x: T2) -> T2:\n    return x\ndef func3(x: T3) -> T3:\n    return x\ndef func4(y: Union[int, str]):\n    # This should generate an error because T1 doesn't\n    # include a union constraint.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes66",
        "documentation": {}
    },
    {
        "label": "IntSubclass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "class IntSubclass1(int):\n    pass\n_T1 = TypeVar(\"_T1\", int, IntSubclass1)\ndef add1(value: _T1) -> _T1:\n    reveal_type(value + 1, expected_text=\"int*\")\n    # This should generate an error\n    return value + 5\nclass IntSubclass2(int):\n    def __add__(self, value: object) -> \"IntSubclass2\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "IntSubclass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "class IntSubclass2(int):\n    def __add__(self, value: object) -> \"IntSubclass2\":\n        ...\n_T2 = TypeVar(\"_T2\", int, IntSubclass2)\ndef add2(value: _T2) -> _T2:\n    reveal_type(value + 1, expected_text=\"int* | IntSubclass2*\")\n    return value + 5\nclass A:\n    ...\nclass B:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "class A:\n    ...\nclass B:\n    ...\n_T3 = TypeVar(\"_T3\", bound=Union[A, B])\nclass Registry(Generic[_T3]):\n    def __init__(self) -> None:\n        self.registry = {}\n    @property\n    def registry(self) -> Dict[str, _T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "class B:\n    ...\n_T3 = TypeVar(\"_T3\", bound=Union[A, B])\nclass Registry(Generic[_T3]):\n    def __init__(self) -> None:\n        self.registry = {}\n    @property\n    def registry(self) -> Dict[str, _T3]:\n        ...\n    @registry.setter",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "Registry",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "class Registry(Generic[_T3]):\n    def __init__(self) -> None:\n        self.registry = {}\n    @property\n    def registry(self) -> Dict[str, _T3]:\n        ...\n    @registry.setter\n    def registry(self, registry: Dict[str, _T3]) -> None:\n        ...\n    def get(self, _id: str) -> Optional[_T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "add1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "def add1(value: _T1) -> _T1:\n    reveal_type(value + 1, expected_text=\"int*\")\n    # This should generate an error\n    return value + 5\nclass IntSubclass2(int):\n    def __add__(self, value: object) -> \"IntSubclass2\":\n        ...\n_T2 = TypeVar(\"_T2\", int, IntSubclass2)\ndef add2(value: _T2) -> _T2:\n    reveal_type(value + 1, expected_text=\"int* | IntSubclass2*\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "add2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "def add2(value: _T2) -> _T2:\n    reveal_type(value + 1, expected_text=\"int* | IntSubclass2*\")\n    return value + 5\nclass A:\n    ...\nclass B:\n    ...\n_T3 = TypeVar(\"_T3\", bound=Union[A, B])\nclass Registry(Generic[_T3]):\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", int, IntSubclass1)\ndef add1(value: _T1) -> _T1:\n    reveal_type(value + 1, expected_text=\"int*\")\n    # This should generate an error\n    return value + 5\nclass IntSubclass2(int):\n    def __add__(self, value: object) -> \"IntSubclass2\":\n        ...\n_T2 = TypeVar(\"_T2\", int, IntSubclass2)\ndef add2(value: _T2) -> _T2:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", int, IntSubclass2)\ndef add2(value: _T2) -> _T2:\n    reveal_type(value + 1, expected_text=\"int* | IntSubclass2*\")\n    return value + 5\nclass A:\n    ...\nclass B:\n    ...\n_T3 = TypeVar(\"_T3\", bound=Union[A, B])\nclass Registry(Generic[_T3]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", bound=Union[A, B])\nclass Registry(Generic[_T3]):\n    def __init__(self) -> None:\n        self.registry = {}\n    @property\n    def registry(self) -> Dict[str, _T3]:\n        ...\n    @registry.setter\n    def registry(self, registry: Dict[str, _T3]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes67",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes68",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes68",
        "peekOfCode": "def func(path: AnyStr | PathLike[AnyStr]) -> AnyStr:\n    ...\ndef thing(value: AnyStr) -> AnyStr:\n    return func(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes68",
        "documentation": {}
    },
    {
        "label": "thing",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes68",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes68",
        "peekOfCode": "def thing(value: AnyStr) -> AnyStr:\n    return func(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes68",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "peekOfCode": "class A(Protocol[T]):\n    def a(self) -> \"A[Tuple[T]]\":\n        ...\n    def b(self) -> \"A[Tuple[T]]\":\n        ...\n    def c(self) -> \"T\":\n        ...\nclass B(Generic[T]):\n    def __init__(self, t: T):\n        self._t = t",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "peekOfCode": "class B(Generic[T]):\n    def __init__(self, t: T):\n        self._t = t\n    def a(self) -> A[Tuple[T]]:\n        t = (self._t,)\n        y = B(t)\n        v = f(y.b())\n        reveal_type(v, expected_text=\"tuple[T@B]\")\n        return y\n    def b(self) -> A[Tuple[T]]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "peekOfCode": "def f(a: A[Tuple[T]]) -> T:\n    return a.c()[0]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "peekOfCode": "T = TypeVar(\"T\")\nclass A(Protocol[T]):\n    def a(self) -> \"A[Tuple[T]]\":\n        ...\n    def b(self) -> \"A[Tuple[T]]\":\n        ...\n    def c(self) -> \"T\":\n        ...\nclass B(Generic[T]):\n    def __init__(self, t: T):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes69",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "peekOfCode": "class Foo(Generic[T]):\n    def __init__(self, bar: T):\n        self._bar = bar\n    @property\n    def bar(self) -> T:\n        return self._bar\n    def bar_method(self) -> T:\n        reveal_type(self._bar, expected_text=\"T@Foo\")\n        return self._bar\nfoo = Foo[int](3)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Foo(Generic[T]):\n    def __init__(self, bar: T):\n        self._bar = bar\n    @property\n    def bar(self) -> T:\n        return self._bar\n    def bar_method(self) -> T:\n        reveal_type(self._bar, expected_text=\"T@Foo\")\n        return self._bar",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "peekOfCode": "foo = Foo[int](3)\n# This should work fine because foo.bar should be an int\nfoo.bar.bit_length()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes7",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "class Result(Generic[V]):\n    pass\nParseFn = Callable[[Sequence[T], int, int], Result[V]]\nclass Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:\n            raise NotImplementedError()\n        reveal_type(FnParser(fmap2), expected_text=\"FnParser[T@Parser, U@fmap1]\")\n        return FnParser(fmap2)\nclass FnParser(Parser[T, V_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "Parser",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "class Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:\n            raise NotImplementedError()\n        reveal_type(FnParser(fmap2), expected_text=\"FnParser[T@Parser, U@fmap1]\")\n        return FnParser(fmap2)\nclass FnParser(Parser[T, V_co]):\n    def __init__(self, fn: ParseFn[T, V_co]):\n        self._fn = fn",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "FnParser",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "class FnParser(Parser[T, V_co]):\n    def __init__(self, fn: ParseFn[T, V_co]):\n        self._fn = fn",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "T = TypeVar(\"T\")\nV = TypeVar(\"V\", bound=object)\nV_co = TypeVar(\"V_co\", covariant=True)\nU = TypeVar(\"U\", bound=object)\nclass Result(Generic[V]):\n    pass\nParseFn = Callable[[Sequence[T], int, int], Result[V]]\nclass Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "V = TypeVar(\"V\", bound=object)\nV_co = TypeVar(\"V_co\", covariant=True)\nU = TypeVar(\"U\", bound=object)\nclass Result(Generic[V]):\n    pass\nParseFn = Callable[[Sequence[T], int, int], Result[V]]\nclass Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:\n            raise NotImplementedError()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "V_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "V_co = TypeVar(\"V_co\", covariant=True)\nU = TypeVar(\"U\", bound=object)\nclass Result(Generic[V]):\n    pass\nParseFn = Callable[[Sequence[T], int, int], Result[V]]\nclass Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:\n            raise NotImplementedError()\n        reveal_type(FnParser(fmap2), expected_text=\"FnParser[T@Parser, U@fmap1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "U = TypeVar(\"U\", bound=object)\nclass Result(Generic[V]):\n    pass\nParseFn = Callable[[Sequence[T], int, int], Result[V]]\nclass Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:\n            raise NotImplementedError()\n        reveal_type(FnParser(fmap2), expected_text=\"FnParser[T@Parser, U@fmap1]\")\n        return FnParser(fmap2)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "ParseFn",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "peekOfCode": "ParseFn = Callable[[Sequence[T], int, int], Result[V]]\nclass Parser(Generic[T, V_co]):\n    def fmap1(self, fn: Callable[[V_co], U]) -> \"Parser[T, U]\":\n        def fmap2(stream: Sequence[T], pos: int, bt: int) -> Result[U]:\n            raise NotImplementedError()\n        reveal_type(FnParser(fmap2), expected_text=\"FnParser[T@Parser, U@fmap1]\")\n        return FnParser(fmap2)\nclass FnParser(Parser[T, V_co]):\n    def __init__(self, fn: ParseFn[T, V_co]):\n        self._fn = fn",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes70",
        "documentation": {}
    },
    {
        "label": "Box",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "class Box(Generic[T]):\n    def __init__(self, value: T = 123):\n        self.value = value\nx1 = Box[str | int]()\nx2 = Box[float]()\nx3 = Box[str](\"hi\")\n# This should generate an error because \"hi\" isn't compatible\n# with float.\nx4 = Box[float](\"hi\")\n# This should generate an error because the default value of 123",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "class Container(Generic[T]):\n    def __init__(self, value: T = None):\n        self.value = value\n    @classmethod\n    def create(cls) -> \"Container[T]\":\n        # This should generate an error but it doesn't\n        # currently because Container[T] being constructed\n        # is different from the current Container[T].\n        return Container[T]()\n    def on_next(self, value: T):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "IntContainer",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "class IntContainer(Container[int]):\n    def increment(self):\n        # This should generate an error if strictParameterNoneValue is true.\n        self.value += 1\nclass ContainerList(Generic[U]):\n    def __init__(self) -> None:\n        self.containers: List[Container[U]] = []\n    def method1(self, a: U):\n        Container[U](a)\n        Container()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "ContainerList",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "class ContainerList(Generic[U]):\n    def __init__(self) -> None:\n        self.containers: List[Container[U]] = []\n    def method1(self, a: U):\n        Container[U](a)\n        Container()\n        Container(123)\n        # This should generate an error if strictParameterNoneValue is false.\n        Container[U]()\n        # This should generate an error if strictParameterNoneValue is false.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "default_if_empty",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "def default_if_empty(obv: Container[T], default_value: T = None) -> None:\n    # This should generate an error.\n    obv.on_next(default_value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\nclass Box(Generic[T]):\n    def __init__(self, value: T = 123):\n        self.value = value\nx1 = Box[str | int]()\nx2 = Box[float]()\nx3 = Box[str](\"hi\")\n# This should generate an error because \"hi\" isn't compatible\n# with float.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "U = TypeVar(\"U\")\nclass Box(Generic[T]):\n    def __init__(self, value: T = 123):\n        self.value = value\nx1 = Box[str | int]()\nx2 = Box[float]()\nx3 = Box[str](\"hi\")\n# This should generate an error because \"hi\" isn't compatible\n# with float.\nx4 = Box[float](\"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "x1 = Box[str | int]()\nx2 = Box[float]()\nx3 = Box[str](\"hi\")\n# This should generate an error because \"hi\" isn't compatible\n# with float.\nx4 = Box[float](\"hi\")\n# This should generate an error because the default value of 123\n# isn't compatible with str.\ny = Box[str]()\nclass Container(Generic[T]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "x2 = Box[float]()\nx3 = Box[str](\"hi\")\n# This should generate an error because \"hi\" isn't compatible\n# with float.\nx4 = Box[float](\"hi\")\n# This should generate an error because the default value of 123\n# isn't compatible with str.\ny = Box[str]()\nclass Container(Generic[T]):\n    def __init__(self, value: T = None):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "x3 = Box[str](\"hi\")\n# This should generate an error because \"hi\" isn't compatible\n# with float.\nx4 = Box[float](\"hi\")\n# This should generate an error because the default value of 123\n# isn't compatible with str.\ny = Box[str]()\nclass Container(Generic[T]):\n    def __init__(self, value: T = None):\n        self.value = value",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "x4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "x4 = Box[float](\"hi\")\n# This should generate an error because the default value of 123\n# isn't compatible with str.\ny = Box[str]()\nclass Container(Generic[T]):\n    def __init__(self, value: T = None):\n        self.value = value\n    @classmethod\n    def create(cls) -> \"Container[T]\":\n        # This should generate an error but it doesn't",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "peekOfCode": "y = Box[str]()\nclass Container(Generic[T]):\n    def __init__(self, value: T = None):\n        self.value = value\n    @classmethod\n    def create(cls) -> \"Container[T]\":\n        # This should generate an error but it doesn't\n        # currently because Container[T] being constructed\n        # is different from the current Container[T].\n        return Container[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes71",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "peekOfCode": "def func1(__o: object, name: str, __default: _T) -> Any | _T:\n    ...\nx: Literal[1, 2, 3] = func1(object(), \"\", 1)\ndef func2(a: _T) -> bool | _T:\n    ...\ny = func2(None)\nif y is not True:\n    z = y or func2(False)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "peekOfCode": "def func2(a: _T) -> bool | _T:\n    ...\ny = func2(None)\nif y is not True:\n    z = y or func2(False)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(__o: object, name: str, __default: _T) -> Any | _T:\n    ...\nx: Literal[1, 2, 3] = func1(object(), \"\", 1)\ndef func2(a: _T) -> bool | _T:\n    ...\ny = func2(None)\nif y is not True:\n    z = y or func2(False)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "peekOfCode": "y = func2(None)\nif y is not True:\n    z = y or func2(False)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes72",
        "documentation": {}
    },
    {
        "label": "to_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "peekOfCode": "def to_list(t: Union[list[T], T]) -> list[T]:\n    ...\nx = to_list([1, 2, 3])\nreveal_type(x, expected_text=\"list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "peekOfCode": "T = TypeVar(\"T\")\ndef to_list(t: Union[list[T], T]) -> list[T]:\n    ...\nx = to_list([1, 2, 3])\nreveal_type(x, expected_text=\"list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "peekOfCode": "x = to_list([1, 2, 3])\nreveal_type(x, expected_text=\"list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes73",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "peekOfCode": "class X(Generic[A, B]):\n    _dict: dict[A, B]\n    _pair: \"X[B, A]\"\n    def method(self, a: A, b: B) -> None:\n        self._pair._dict[b]\nx = X[int, str]()\nx._pair._dict[\"foo\"]\nreveal_type(x._pair, expected_text=\"X[str, int]\")\nreveal_type(x._pair._pair, expected_text=\"X[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "peekOfCode": "A = TypeVar(\"A\")\nB = TypeVar(\"B\")\nclass X(Generic[A, B]):\n    _dict: dict[A, B]\n    _pair: \"X[B, A]\"\n    def method(self, a: A, b: B) -> None:\n        self._pair._dict[b]\nx = X[int, str]()\nx._pair._dict[\"foo\"]\nreveal_type(x._pair, expected_text=\"X[str, int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "peekOfCode": "B = TypeVar(\"B\")\nclass X(Generic[A, B]):\n    _dict: dict[A, B]\n    _pair: \"X[B, A]\"\n    def method(self, a: A, b: B) -> None:\n        self._pair._dict[b]\nx = X[int, str]()\nx._pair._dict[\"foo\"]\nreveal_type(x._pair, expected_text=\"X[str, int]\")\nreveal_type(x._pair._pair, expected_text=\"X[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "peekOfCode": "x = X[int, str]()\nx._pair._dict[\"foo\"]\nreveal_type(x._pair, expected_text=\"X[str, int]\")\nreveal_type(x._pair._pair, expected_text=\"X[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes74",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "peekOfCode": "class A(Generic[T]):\n    def __init__(self, x: T):\n        self.x = x\n    def method1(self) -> \"A[T]\":\n        x = self.x\n        reveal_type(x, expected_text=\"T@A\")\n        t = (x,)\n        reveal_type(t, expected_text=\"tuple[T@A]\")\n        a = A(t[0])\n        reveal_type(a, expected_text=\"A[T@A]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "peekOfCode": "class B(Generic[T]):\n    def __init__(self, thing: T):\n        pass\n    @staticmethod\n    def method1(val: T) -> \"B[T]\":\n        # This should generate an error.\n        return B(0)\nclass C(Generic[T]):\n    def method1(self) -> \"C[T]\":\n        return C[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "peekOfCode": "class C(Generic[T]):\n    def method1(self) -> \"C[T]\":\n        return C[T]()\nc1 = C[int]()\nreveal_type(c1, expected_text=\"C[int]\")\nc2 = c1.method1()\nreveal_type(c2, expected_text=\"C[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "peekOfCode": "T = TypeVar(\"T\")\nclass A(Generic[T]):\n    def __init__(self, x: T):\n        self.x = x\n    def method1(self) -> \"A[T]\":\n        x = self.x\n        reveal_type(x, expected_text=\"T@A\")\n        t = (x,)\n        reveal_type(t, expected_text=\"tuple[T@A]\")\n        a = A(t[0])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "peekOfCode": "c1 = C[int]()\nreveal_type(c1, expected_text=\"C[int]\")\nc2 = c1.method1()\nreveal_type(c2, expected_text=\"C[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "peekOfCode": "c2 = c1.method1()\nreveal_type(c2, expected_text=\"C[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes75",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "class A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\n_T3 = TypeVar(\"_T3\", A, B, C)\n_P = ParamSpec(\"_P\")\n_Ts = TypeVarTuple(\"_Ts\")\ndef func1(val1: _T1) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "class B:\n    ...\nclass C:\n    ...\n_T3 = TypeVar(\"_T3\", A, B, C)\n_P = ParamSpec(\"_P\")\n_Ts = TypeVarTuple(\"_Ts\")\ndef func1(val1: _T1) -> _T1:\n    if isinstance(val1, str):\n        return \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "class C:\n    ...\n_T3 = TypeVar(\"_T3\", A, B, C)\n_P = ParamSpec(\"_P\")\n_Ts = TypeVarTuple(\"_Ts\")\ndef func1(val1: _T1) -> _T1:\n    if isinstance(val1, str):\n        return \"\"\n    return 0\ndef func2(val1: _T1) -> list[_T1]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "class Class1(Generic[_T1, _T2, _T3, _P, Unpack[_Ts]]):\n    def meth1(\n        self, val1: _T1, val2: _T2, val3: _T3, cond: bool\n    ) -> Union[List[_T1], List[_T2], List[_T3]]:\n        if cond:\n            # This should generate an error.\n            return [0]\n        if cond:\n            if isinstance(val1, str):\n                # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "def func1(val1: _T1) -> _T1:\n    if isinstance(val1, str):\n        return \"\"\n    return 0\ndef func2(val1: _T1) -> list[_T1]:\n    if isinstance(val1, str):\n        return [\"\"]\n    return [0]\nclass Class1(Generic[_T1, _T2, _T3, _P, Unpack[_Ts]]):\n    def meth1(",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "def func2(val1: _T1) -> list[_T1]:\n    if isinstance(val1, str):\n        return [\"\"]\n    return [0]\nclass Class1(Generic[_T1, _T2, _T3, _P, Unpack[_Ts]]):\n    def meth1(\n        self, val1: _T1, val2: _T2, val3: _T3, cond: bool\n    ) -> Union[List[_T1], List[_T2], List[_T3]]:\n        if cond:\n            # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "def func3(s: AnyStr, y: Optional[AnyStr] = None) -> AnyStr:\n    if isinstance(s, str):\n        if y is None:\n            pass\n        return \"\"\n    else:\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", str, int)\n_T2 = TypeVar(\"_T2\")\nclass A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\n_T3 = TypeVar(\"_T3\", A, B, C)\n_P = ParamSpec(\"_P\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nclass A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\n_T3 = TypeVar(\"_T3\", A, B, C)\n_P = ParamSpec(\"_P\")\n_Ts = TypeVarTuple(\"_Ts\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", A, B, C)\n_P = ParamSpec(\"_P\")\n_Ts = TypeVarTuple(\"_Ts\")\ndef func1(val1: _T1) -> _T1:\n    if isinstance(val1, str):\n        return \"\"\n    return 0\ndef func2(val1: _T1) -> list[_T1]:\n    if isinstance(val1, str):\n        return [\"\"]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "_P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "_P = ParamSpec(\"_P\")\n_Ts = TypeVarTuple(\"_Ts\")\ndef func1(val1: _T1) -> _T1:\n    if isinstance(val1, str):\n        return \"\"\n    return 0\ndef func2(val1: _T1) -> list[_T1]:\n    if isinstance(val1, str):\n        return [\"\"]\n    return [0]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "_Ts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "peekOfCode": "_Ts = TypeVarTuple(\"_Ts\")\ndef func1(val1: _T1) -> _T1:\n    if isinstance(val1, str):\n        return \"\"\n    return 0\ndef func2(val1: _T1) -> list[_T1]:\n    if isinstance(val1, str):\n        return [\"\"]\n    return [0]\nclass Class1(Generic[_T1, _T2, _T3, _P, Unpack[_Ts]]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes76",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "peekOfCode": "class Test(Generic[T]):\n    def fun(self, x: Iterable[T], f: Callable[[T], T]):\n        ...\n    def caller(self, x: Iterable[T]):\n        self.fun(x, identity)\n        # This should generate an error.\n        self.fun(x, not_identity)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "documentation": {}
    },
    {
        "label": "identity",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "peekOfCode": "def identity(x: U) -> U:\n    return x\ndef not_identity(x: Any) -> int:\n    return 3\nclass Test(Generic[T]):\n    def fun(self, x: Iterable[T], f: Callable[[T], T]):\n        ...\n    def caller(self, x: Iterable[T]):\n        self.fun(x, identity)\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "documentation": {}
    },
    {
        "label": "not_identity",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "peekOfCode": "def not_identity(x: Any) -> int:\n    return 3\nclass Test(Generic[T]):\n    def fun(self, x: Iterable[T], f: Callable[[T], T]):\n        ...\n    def caller(self, x: Iterable[T]):\n        self.fun(x, identity)\n        # This should generate an error.\n        self.fun(x, not_identity)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\ndef identity(x: U) -> U:\n    return x\ndef not_identity(x: Any) -> int:\n    return 3\nclass Test(Generic[T]):\n    def fun(self, x: Iterable[T], f: Callable[[T], T]):\n        ...\n    def caller(self, x: Iterable[T]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "peekOfCode": "U = TypeVar(\"U\")\ndef identity(x: U) -> U:\n    return x\ndef not_identity(x: Any) -> int:\n    return 3\nclass Test(Generic[T]):\n    def fun(self, x: Iterable[T], f: Callable[[T], T]):\n        ...\n    def caller(self, x: Iterable[T]):\n        self.fun(x, identity)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes77",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "peekOfCode": "def func1(val1: _T) -> Callable[[_T], None]:\n    def f(a: str):\n        ...\n    # This should generate an error because str isn't\n    # compatible with _T.\n    return f\ndef func2(val1: _T) -> Callable[[_T], None]:\n    def f(a: _T):\n        ...\n    return f",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "peekOfCode": "def func2(val1: _T) -> Callable[[_T], None]:\n    def f(a: _T):\n        ...\n    return f",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(val1: _T) -> Callable[[_T], None]:\n    def f(a: str):\n        ...\n    # This should generate an error because str isn't\n    # compatible with _T.\n    return f\ndef func2(val1: _T) -> Callable[[_T], None]:\n    def f(a: _T):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes78",
        "documentation": {}
    },
    {
        "label": "IAsyncContext",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "class IAsyncContext(Generic[_T]):\n    pass\nAsync = Callable[[IAsyncContext[_T]], None]\ndef func1(value: _T) -> Async[_T]:\n    def ret(ctx: IAsyncContext[_T]) -> None:\n        pass\n    return ret\ndef func2() -> Async[bool]:\n    return func1(True)\ndef func3(value: _T) -> Callable[[_T], None]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "def func1(value: _T) -> Async[_T]:\n    def ret(ctx: IAsyncContext[_T]) -> None:\n        pass\n    return ret\ndef func2() -> Async[bool]:\n    return func1(True)\ndef func3(value: _T) -> Callable[[_T], None]:\n    ...\nx: Callable[[Tuple[bool]], None] = func3((True,))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "def func2() -> Async[bool]:\n    return func1(True)\ndef func3(value: _T) -> Callable[[_T], None]:\n    ...\nx: Callable[[Tuple[bool]], None] = func3((True,))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "def func3(value: _T) -> Callable[[_T], None]:\n    ...\nx: Callable[[Tuple[bool]], None] = func3((True,))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "FileChanges",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "FileChanges = Dict[str, Literal[\"created\", \"edited\", \"removed\"]]\nchanges: FileChanges = {}\nchanges.update({filename: \"removed\" for filename in [\"foo.py\", \"bar.py\"]})\n_T = TypeVar(\"_T\")\nclass IAsyncContext(Generic[_T]):\n    pass\nAsync = Callable[[IAsyncContext[_T]], None]\ndef func1(value: _T) -> Async[_T]:\n    def ret(ctx: IAsyncContext[_T]) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass IAsyncContext(Generic[_T]):\n    pass\nAsync = Callable[[IAsyncContext[_T]], None]\ndef func1(value: _T) -> Async[_T]:\n    def ret(ctx: IAsyncContext[_T]) -> None:\n        pass\n    return ret\ndef func2() -> Async[bool]:\n    return func1(True)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "Async",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "peekOfCode": "Async = Callable[[IAsyncContext[_T]], None]\ndef func1(value: _T) -> Async[_T]:\n    def ret(ctx: IAsyncContext[_T]) -> None:\n        pass\n    return ret\ndef func2() -> Async[bool]:\n    return func1(True)\ndef func3(value: _T) -> Callable[[_T], None]:\n    ...\nx: Callable[[Tuple[bool]], None] = func3((True,))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes79",
        "documentation": {}
    },
    {
        "label": "compose2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "peekOfCode": "def compose2(f: Callable[[T], U], g: Callable[[U], V]) -> Callable[[T], V]:\n    def composition(x: T) -> V:\n        return g(f(x))\n    return composition\ndef add_one(x: int) -> int:\n    return x + 1\ndef make_str(x: int) -> str:\n    return str(x)\nadd_two: Callable[[int], str] = compose2(add_one, make_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "documentation": {}
    },
    {
        "label": "add_one",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "peekOfCode": "def add_one(x: int) -> int:\n    return x + 1\ndef make_str(x: int) -> str:\n    return str(x)\nadd_two: Callable[[int], str] = compose2(add_one, make_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "documentation": {}
    },
    {
        "label": "make_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "peekOfCode": "def make_str(x: int) -> str:\n    return str(x)\nadd_two: Callable[[int], str] = compose2(add_one, make_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\nV = TypeVar(\"V\")\ndef compose2(f: Callable[[T], U], g: Callable[[U], V]) -> Callable[[T], V]:\n    def composition(x: T) -> V:\n        return g(f(x))\n    return composition\ndef add_one(x: int) -> int:\n    return x + 1\ndef make_str(x: int) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "peekOfCode": "U = TypeVar(\"U\")\nV = TypeVar(\"V\")\ndef compose2(f: Callable[[T], U], g: Callable[[U], V]) -> Callable[[T], V]:\n    def composition(x: T) -> V:\n        return g(f(x))\n    return composition\ndef add_one(x: int) -> int:\n    return x + 1\ndef make_str(x: int) -> str:\n    return str(x)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "peekOfCode": "V = TypeVar(\"V\")\ndef compose2(f: Callable[[T], U], g: Callable[[U], V]) -> Callable[[T], V]:\n    def composition(x: T) -> V:\n        return g(f(x))\n    return composition\ndef add_one(x: int) -> int:\n    return x + 1\ndef make_str(x: int) -> str:\n    return str(x)\nadd_two: Callable[[int], str] = compose2(add_one, make_str)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes80",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes80",
        "peekOfCode": "def func1(u):\n    b: bool = True\n    x = dict(b=b, u=u, x=[])\n    reveal_type(x, expected_text=\"dict[str, bool | list[Any]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes80",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "peekOfCode": "class A:\n    ...\nclass B:\n    ...\nclass A2(A):\n    ...\nT = TypeVar(\"T\", A, B)\nclass F(Generic[T]):\n    def __init__(self, thing: T) -> None:\n        self.thing = thing",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "peekOfCode": "class B:\n    ...\nclass A2(A):\n    ...\nT = TypeVar(\"T\", A, B)\nclass F(Generic[T]):\n    def __init__(self, thing: T) -> None:\n        self.thing = thing\nf2 = F[A2](A2())\nreveal_type(F[A2], expected_text=\"Type[F[A]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "documentation": {}
    },
    {
        "label": "A2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "peekOfCode": "class A2(A):\n    ...\nT = TypeVar(\"T\", A, B)\nclass F(Generic[T]):\n    def __init__(self, thing: T) -> None:\n        self.thing = thing\nf2 = F[A2](A2())\nreveal_type(F[A2], expected_text=\"Type[F[A]]\")\nreveal_type(f2, expected_text=\"F[A]\")\nreveal_type(f2.thing, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "peekOfCode": "class F(Generic[T]):\n    def __init__(self, thing: T) -> None:\n        self.thing = thing\nf2 = F[A2](A2())\nreveal_type(F[A2], expected_text=\"Type[F[A]]\")\nreveal_type(f2, expected_text=\"F[A]\")\nreveal_type(f2.thing, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "peekOfCode": "T = TypeVar(\"T\", A, B)\nclass F(Generic[T]):\n    def __init__(self, thing: T) -> None:\n        self.thing = thing\nf2 = F[A2](A2())\nreveal_type(F[A2], expected_text=\"Type[F[A]]\")\nreveal_type(f2, expected_text=\"F[A]\")\nreveal_type(f2.thing, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "peekOfCode": "f2 = F[A2](A2())\nreveal_type(F[A2], expected_text=\"Type[F[A]]\")\nreveal_type(f2, expected_text=\"F[A]\")\nreveal_type(f2.thing, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes81",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "peekOfCode": "def f(x: type[T]) -> T:\n    ...\ndef g() -> type | Any:\n    ...\ny = g()\nf(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "peekOfCode": "def g() -> type | Any:\n    ...\ny = g()\nf(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "peekOfCode": "T = TypeVar(\"T\")\ndef f(x: type[T]) -> T:\n    ...\ndef g() -> type | Any:\n    ...\ny = g()\nf(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "peekOfCode": "y = g()\nf(y)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes82",
        "documentation": {}
    },
    {
        "label": "NDArray",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "peekOfCode": "class NDArray:\n    ...\n_T = TypeVar(\"_T\", Union[int, float], NDArray)\n@dataclass\nclass Data(Generic[_T]):\n    data: _T\ndef func1(a: Data[_T]) -> _T:\n    if isinstance(a.data, (int, float)):\n        value = int(a.data / 3)\n        reveal_type(value, expected_text=\"int*\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "documentation": {}
    },
    {
        "label": "Data",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "peekOfCode": "class Data(Generic[_T]):\n    data: _T\ndef func1(a: Data[_T]) -> _T:\n    if isinstance(a.data, (int, float)):\n        value = int(a.data / 3)\n        reveal_type(value, expected_text=\"int*\")\n    else:\n        value = a.data\n        reveal_type(value, expected_text=\"NDArray*\")\n    return value",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "peekOfCode": "def func1(a: Data[_T]) -> _T:\n    if isinstance(a.data, (int, float)):\n        value = int(a.data / 3)\n        reveal_type(value, expected_text=\"int*\")\n    else:\n        value = a.data\n        reveal_type(value, expected_text=\"NDArray*\")\n    return value",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "peekOfCode": "_T = TypeVar(\"_T\", Union[int, float], NDArray)\n@dataclass\nclass Data(Generic[_T]):\n    data: _T\ndef func1(a: Data[_T]) -> _T:\n    if isinstance(a.data, (int, float)):\n        value = int(a.data / 3)\n        reveal_type(value, expected_text=\"int*\")\n    else:\n        value = a.data",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes83",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes84",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes84",
        "peekOfCode": "def foo(self, obj: T, foo: Any) -> T:\n    # NotImplemented is an instance of a class that derives from Any.\n    return NotImplemented",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes84",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes84",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes84",
        "peekOfCode": "T = TypeVar(\"T\")\ndef foo(self, obj: T, foo: Any) -> T:\n    # NotImplemented is an instance of a class that derives from Any.\n    return NotImplemented",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes84",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes85",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes85",
        "peekOfCode": "def func1(x: list[Hashable]):\n    ...\ndef func2(x: list[object]):\n    ...\nv1: list[int] = [1]\n# This should generate an error.\nfunc1(v1)\n# This should generate an error.\nfunc2(v1)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes85",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes85",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes85",
        "peekOfCode": "def func2(x: list[object]):\n    ...\nv1: list[int] = [1]\n# This should generate an error.\nfunc1(v1)\n# This should generate an error.\nfunc2(v1)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes85",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "peekOfCode": "class Parent(Generic[T]):\n    y: type[T]\nclass Child(Parent[Any]):\n    # This should generate an error.\n    y = 42",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "peekOfCode": "class Child(Parent[Any]):\n    # This should generate an error.\n    y = 42",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Parent(Generic[T]):\n    y: type[T]\nclass Child(Parent[Any]):\n    # This should generate an error.\n    y = 42",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes86",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "peekOfCode": "def f(x: T, y: U) -> T | U:\n    return x if random() > 0.5 else y\ndef g(x: T, y: T) -> T:\n    return x if random() > 0.5 else y\nreveal_type(g(f, g), expected_text=\"(x: T@f, y: U@f) -> (T@f | U@f)\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "peekOfCode": "def g(x: T, y: T) -> T:\n    return x if random() > 0.5 else y\nreveal_type(g(f, g), expected_text=\"(x: T@f, y: U@f) -> (T@f | U@f)\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\ndef f(x: T, y: U) -> T | U:\n    return x if random() > 0.5 else y\ndef g(x: T, y: T) -> T:\n    return x if random() > 0.5 else y\nreveal_type(g(f, g), expected_text=\"(x: T@f, y: U@f) -> (T@f | U@f)\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "peekOfCode": "U = TypeVar(\"U\")\ndef f(x: T, y: U) -> T | U:\n    return x if random() > 0.5 else y\ndef g(x: T, y: T) -> T:\n    return x if random() > 0.5 else y\nreveal_type(g(f, g), expected_text=\"(x: T@f, y: U@f) -> (T@f | U@f)\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes87",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "peekOfCode": "def f1(x: tuple[int | _T]) -> _T | None:\n    pass\ndef f2(x: tuple[_T | int]) -> None | _T:\n    pass\ndef g1(z: tuple[int] | tuple[_T]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g1 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g1 | None\")\ndef g2(z: tuple[_T] | tuple[int]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g2 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g2 | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "peekOfCode": "def f2(x: tuple[_T | int]) -> None | _T:\n    pass\ndef g1(z: tuple[int] | tuple[_T]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g1 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g1 | None\")\ndef g2(z: tuple[_T] | tuple[int]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g2 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g2 | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "documentation": {}
    },
    {
        "label": "g1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "peekOfCode": "def g1(z: tuple[int] | tuple[_T]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g1 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g1 | None\")\ndef g2(z: tuple[_T] | tuple[int]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g2 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g2 | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "documentation": {}
    },
    {
        "label": "g2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "peekOfCode": "def g2(z: tuple[_T] | tuple[int]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g2 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g2 | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef f1(x: tuple[int | _T]) -> _T | None:\n    pass\ndef f2(x: tuple[_T | int]) -> None | _T:\n    pass\ndef g1(z: tuple[int] | tuple[_T]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g1 | None\")\n    reveal_type(f2(z), expected_text=\"_T@g1 | None\")\ndef g2(z: tuple[_T] | tuple[int]) -> _T | None:\n    reveal_type(f1(z), expected_text=\"_T@g2 | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes88",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes89",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes89",
        "peekOfCode": "def foo(\n    mkfoo: Callable[[T], list[T]], param1: T, param2: Any, param3: Union[Any, T]\n) -> None:\n    mkfoo(param1)\n    mkfoo(param2)\n    mkfoo(param3)\n    # This should generate an error.\n    mkfoo(0)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes89",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes89",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes89",
        "peekOfCode": "T = TypeVar(\"T\")\ndef foo(\n    mkfoo: Callable[[T], list[T]], param1: T, param2: Any, param3: Union[Any, T]\n) -> None:\n    mkfoo(param1)\n    mkfoo(param2)\n    mkfoo(param3)\n    # This should generate an error.\n    mkfoo(0)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes89",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "class Foo:\n    pass\nclass Bar(Foo):\n    pass\nT1 = TypeVar(\"T1\", Foo, str)\nT2 = TypeVar(\"T2\", bound=Foo)\ndef test1(x: T1) -> T1:\n    return x\ndef test2(x: T2) -> T2:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "class Bar(Foo):\n    pass\nT1 = TypeVar(\"T1\", Foo, str)\nT2 = TypeVar(\"T2\", bound=Foo)\ndef test1(x: T1) -> T1:\n    return x\ndef test2(x: T2) -> T2:\n    return x\n# This should generate an error because test1(Bar())\n# should evaluate to type Foo, not Bar.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "class A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\nclass D:\n    ...\nT3 = TypeVar(\"T3\", A, B, Union[C, D])\ndef do_something(value: T3) -> T3:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "class B:\n    ...\nclass C:\n    ...\nclass D:\n    ...\nT3 = TypeVar(\"T3\", A, B, Union[C, D])\ndef do_something(value: T3) -> T3:\n    ...\ndef func10(value: Union[C, D]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "class C:\n    ...\nclass D:\n    ...\nT3 = TypeVar(\"T3\", A, B, Union[C, D])\ndef do_something(value: T3) -> T3:\n    ...\ndef func10(value: Union[C, D]):\n    value1 = do_something(value)\ndef func11(value: D):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "class D:\n    ...\nT3 = TypeVar(\"T3\", A, B, Union[C, D])\ndef do_something(value: T3) -> T3:\n    ...\ndef func10(value: Union[C, D]):\n    value1 = do_something(value)\ndef func11(value: D):\n    value1 = do_something(value)\ndef func12(value: Union[A, B]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def test1(x: T1) -> T1:\n    return x\ndef test2(x: T2) -> T2:\n    return x\n# This should generate an error because test1(Bar())\n# should evaluate to type Foo, not Bar.\naa1: Bar = test1(Bar())\naa2: Foo = test1(Bar())\nbb1: Bar = test2(Bar())\nbb2: Foo = test2(Bar())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def test2(x: T2) -> T2:\n    return x\n# This should generate an error because test1(Bar())\n# should evaluate to type Foo, not Bar.\naa1: Bar = test1(Bar())\naa2: Foo = test1(Bar())\nbb1: Bar = test2(Bar())\nbb2: Foo = test2(Bar())\n# The call to rmtree should not generate any errors.\ndata_dir = pathlib.Path(\"/tmp\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func1(a: AnyStr, b: AnyStr) -> None:\n    ...\ndef func2(a: Union[str, bytes], b: Union[str, bytes]):\n    # This should generate two errors\n    func1(a, b)\nclass A:\n    ...\nclass B:\n    ...\nclass C:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func2(a: Union[str, bytes], b: Union[str, bytes]):\n    # This should generate two errors\n    func1(a, b)\nclass A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\nclass D:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def do_something(value: T3) -> T3:\n    ...\ndef func10(value: Union[C, D]):\n    value1 = do_something(value)\ndef func11(value: D):\n    value1 = do_something(value)\ndef func12(value: Union[A, B]):\n    # This should generate an error because A and B\n    # map to different constraints.\n    value1 = do_something(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func10(value: Union[C, D]):\n    value1 = do_something(value)\ndef func11(value: D):\n    value1 = do_something(value)\ndef func12(value: Union[A, B]):\n    # This should generate an error because A and B\n    # map to different constraints.\n    value1 = do_something(value)\ndef func13(value: Union[A, D]):\n    # This should generate an error because A and D",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func11(value: D):\n    value1 = do_something(value)\ndef func12(value: Union[A, B]):\n    # This should generate an error because A and B\n    # map to different constraints.\n    value1 = do_something(value)\ndef func13(value: Union[A, D]):\n    # This should generate an error because A and D\n    # map to different constraints.\n    value1 = do_something(value)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func12(value: Union[A, B]):\n    # This should generate an error because A and B\n    # map to different constraints.\n    value1 = do_something(value)\ndef func13(value: Union[A, D]):\n    # This should generate an error because A and D\n    # map to different constraints.\n    value1 = do_something(value)\nT4 = TypeVar(\"T4\", A, B, Union[C, D])\ndef func14(cls: Type[T4]) -> T4:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func13(value: Union[A, D]):\n    # This should generate an error because A and D\n    # map to different constraints.\n    value1 = do_something(value)\nT4 = TypeVar(\"T4\", A, B, Union[C, D])\ndef func14(cls: Type[T4]) -> T4:\n    instance1 = cls()\n    reveal_type(instance1, expected_text=\"T4@func14\")  # Unknown\n    return instance1\ndef func15(cls: Union[Type[Union[A, B]], Type[Union[C, D]]]) -> Union[A, B, C, D]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func14(cls: Type[T4]) -> T4:\n    instance1 = cls()\n    reveal_type(instance1, expected_text=\"T4@func14\")  # Unknown\n    return instance1\ndef func15(cls: Union[Type[Union[A, B]], Type[Union[C, D]]]) -> Union[A, B, C, D]:\n    instance2 = cls()\n    reveal_type(instance2, expected_text=\"A | B | C | D\")\n    return instance2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "def func15(cls: Union[Type[Union[A, B]], Type[Union[C, D]]]) -> Union[A, B, C, D]:\n    instance2 = cls()\n    reveal_type(instance2, expected_text=\"A | B | C | D\")\n    return instance2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "T1 = TypeVar(\"T1\", Foo, str)\nT2 = TypeVar(\"T2\", bound=Foo)\ndef test1(x: T1) -> T1:\n    return x\ndef test2(x: T2) -> T2:\n    return x\n# This should generate an error because test1(Bar())\n# should evaluate to type Foo, not Bar.\naa1: Bar = test1(Bar())\naa2: Foo = test1(Bar())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=Foo)\ndef test1(x: T1) -> T1:\n    return x\ndef test2(x: T2) -> T2:\n    return x\n# This should generate an error because test1(Bar())\n# should evaluate to type Foo, not Bar.\naa1: Bar = test1(Bar())\naa2: Foo = test1(Bar())\nbb1: Bar = test2(Bar())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "data_dir = pathlib.Path(\"/tmp\")\narchive_path = data_dir / \"hello\"\nshutil.rmtree(archive_path)\ndef func1(a: AnyStr, b: AnyStr) -> None:\n    ...\ndef func2(a: Union[str, bytes], b: Union[str, bytes]):\n    # This should generate two errors\n    func1(a, b)\nclass A:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "archive_path",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "archive_path = data_dir / \"hello\"\nshutil.rmtree(archive_path)\ndef func1(a: AnyStr, b: AnyStr) -> None:\n    ...\ndef func2(a: Union[str, bytes], b: Union[str, bytes]):\n    # This should generate two errors\n    func1(a, b)\nclass A:\n    ...\nclass B:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "T3 = TypeVar(\"T3\", A, B, Union[C, D])\ndef do_something(value: T3) -> T3:\n    ...\ndef func10(value: Union[C, D]):\n    value1 = do_something(value)\ndef func11(value: D):\n    value1 = do_something(value)\ndef func12(value: Union[A, B]):\n    # This should generate an error because A and B\n    # map to different constraints.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "peekOfCode": "T4 = TypeVar(\"T4\", A, B, Union[C, D])\ndef func14(cls: Type[T4]) -> T4:\n    instance1 = cls()\n    reveal_type(instance1, expected_text=\"T4@func14\")  # Unknown\n    return instance1\ndef func15(cls: Union[Type[Union[A, B]], Type[Union[C, D]]]) -> Union[A, B, C, D]:\n    instance2 = cls()\n    reveal_type(instance2, expected_text=\"A | B | C | D\")\n    return instance2",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes9",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes90",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes90",
        "peekOfCode": "def func(x: list[_T]) -> list[_T]:\n    result = func(x)\n    return result",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes90",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes90",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes90",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func(x: list[_T]) -> list[_T]:\n    result = func(x)\n    return result",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes90",
        "documentation": {}
    },
    {
        "label": "IterableProxy",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "peekOfCode": "class IterableProxy(Iterable[T]):\n    ...\nclass Parent(Generic[T]):\n    def m1(self, v: Iterable[T] = IterableProxy()) -> None:\n        ...\nclass Child(Parent[T]):\n    def m2(self) -> None:\n        self.m1()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "peekOfCode": "class Parent(Generic[T]):\n    def m1(self, v: Iterable[T] = IterableProxy()) -> None:\n        ...\nclass Child(Parent[T]):\n    def m2(self) -> None:\n        self.m1()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "peekOfCode": "class Child(Parent[T]):\n    def m2(self) -> None:\n        self.m1()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "peekOfCode": "T = TypeVar(\"T\")\nclass IterableProxy(Iterable[T]):\n    ...\nclass Parent(Generic[T]):\n    def m1(self, v: Iterable[T] = IterableProxy()) -> None:\n        ...\nclass Child(Parent[T]):\n    def m2(self) -> None:\n        self.m1()",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes91",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes92",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes92",
        "peekOfCode": "def func(t: tuple[Any] | tuple[int]):\n    # This should generate a type violation.\n    x: int = t",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes92",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "peekOfCode": "class ClassA(Generic[V_co]):\n    pass\nclass ClassB(Generic[V_co]):\n    def __init__(self, x: ClassA[V_co]):\n        pass\ndef func1(a: ClassA[V], b: ClassA[U], c: bool) -> ClassB[Union[V, U]]:\n    x: ClassA[V | U] = a\n    reveal_type(x, expected_text=\"ClassA[V@func1]\")\n    if c:\n        x = b",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "peekOfCode": "class ClassB(Generic[V_co]):\n    def __init__(self, x: ClassA[V_co]):\n        pass\ndef func1(a: ClassA[V], b: ClassA[U], c: bool) -> ClassB[Union[V, U]]:\n    x: ClassA[V | U] = a\n    reveal_type(x, expected_text=\"ClassA[V@func1]\")\n    if c:\n        x = b\n        reveal_type(x, expected_text=\"ClassA[U@func1]\")\n    r = ClassB(x)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "peekOfCode": "def func1(a: ClassA[V], b: ClassA[U], c: bool) -> ClassB[Union[V, U]]:\n    x: ClassA[V | U] = a\n    reveal_type(x, expected_text=\"ClassA[V@func1]\")\n    if c:\n        x = b\n        reveal_type(x, expected_text=\"ClassA[U@func1]\")\n    r = ClassB(x)\n    reveal_type(r, expected_text=\"ClassB[U@func1 | V@func1]\")\n    return r",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "peekOfCode": "V = TypeVar(\"V\")\nV_co = TypeVar(\"V_co\", covariant=True)\nU = TypeVar(\"U\")\nclass ClassA(Generic[V_co]):\n    pass\nclass ClassB(Generic[V_co]):\n    def __init__(self, x: ClassA[V_co]):\n        pass\ndef func1(a: ClassA[V], b: ClassA[U], c: bool) -> ClassB[Union[V, U]]:\n    x: ClassA[V | U] = a",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "documentation": {}
    },
    {
        "label": "V_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "peekOfCode": "V_co = TypeVar(\"V_co\", covariant=True)\nU = TypeVar(\"U\")\nclass ClassA(Generic[V_co]):\n    pass\nclass ClassB(Generic[V_co]):\n    def __init__(self, x: ClassA[V_co]):\n        pass\ndef func1(a: ClassA[V], b: ClassA[U], c: bool) -> ClassB[Union[V, U]]:\n    x: ClassA[V | U] = a\n    reveal_type(x, expected_text=\"ClassA[V@func1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "peekOfCode": "U = TypeVar(\"U\")\nclass ClassA(Generic[V_co]):\n    pass\nclass ClassB(Generic[V_co]):\n    def __init__(self, x: ClassA[V_co]):\n        pass\ndef func1(a: ClassA[V], b: ClassA[U], c: bool) -> ClassB[Union[V, U]]:\n    x: ClassA[V | U] = a\n    reveal_type(x, expected_text=\"ClassA[V@func1]\")\n    if c:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes93",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class ClassA(Generic[T, U]):\n    x: Callable[[T], U]\n    def __init__(self, f: Callable[[T], U]):\n        self.x = f\n    def __call__(self, x: T) -> U:\n        return self.x(x)\n    def __add__(self, other: \"ClassA[U, V]\") -> \"ClassA[T, V]\":\n        f = self.x\n        g: Callable[[U], V] = other.x\n        return ClassA(lambda x: g(f(x)))",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class ClassB(Generic[T]):\n    value: T\n    def __init__(self, val: T) -> None:\n        self.value = val\n    def method1(self, val: U) -> \"ClassB[U]\":\n        # This should generate an error.\n        return ClassB(self.value)\n@dataclass\nclass DC1(Generic[T]):\n    value: T",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class DC1(Generic[T]):\n    value: T\n@dataclass\nclass DC2(Generic[S]):\n    value: S\n@dataclass\nclass ClassC(Generic[T, S]):\n    value: DC1[T] | DC2[S]\n    def method1(self, val: U) -> \"ClassC[U, S]\":\n        if isinstance(self.value, DC1):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class DC2(Generic[S]):\n    value: S\n@dataclass\nclass ClassC(Generic[T, S]):\n    value: DC1[T] | DC2[S]\n    def method1(self, val: U) -> \"ClassC[U, S]\":\n        if isinstance(self.value, DC1):\n            # This should generate an error.\n            return ClassC(self.value)\n        else:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class ClassC(Generic[T, S]):\n    value: DC1[T] | DC2[S]\n    def method1(self, val: U) -> \"ClassC[U, S]\":\n        if isinstance(self.value, DC1):\n            # This should generate an error.\n            return ClassC(self.value)\n        else:\n            return ClassC(self.value)\nT_co = TypeVar(\"T_co\", covariant=True)\nclass ClassD(Generic[T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class ClassD(Generic[T_co]):\n    @overload\n    def __init__(self, arg: Iterable[T_co]) -> None:\n        ...\n    @overload\n    def __init__(self, arg: Callable[[], Iterable[T_co]]) -> None:\n        ...\n    def __init__(self, arg: Iterable[T_co] | Callable[[], Iterable[T_co]]) -> None:\n        ...\n    def __iter__(self) -> Iterator[T_co]:",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "ClassE",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "class ClassE(ClassD[T_co]):\n    def method(self) -> \"ClassE[ClassE[T_co]]\":\n        def inner():\n            for x in self:\n                yield ClassE(lambda: [x])\n        return ClassE(inner)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "S = TypeVar(\"S\")\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\nV = TypeVar(\"V\")\nclass ClassA(Generic[T, U]):\n    x: Callable[[T], U]\n    def __init__(self, f: Callable[[T], U]):\n        self.x = f\n    def __call__(self, x: T) -> U:\n        return self.x(x)",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\nV = TypeVar(\"V\")\nclass ClassA(Generic[T, U]):\n    x: Callable[[T], U]\n    def __init__(self, f: Callable[[T], U]):\n        self.x = f\n    def __call__(self, x: T) -> U:\n        return self.x(x)\n    def __add__(self, other: \"ClassA[U, V]\") -> \"ClassA[T, V]\":",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "U = TypeVar(\"U\")\nV = TypeVar(\"V\")\nclass ClassA(Generic[T, U]):\n    x: Callable[[T], U]\n    def __init__(self, f: Callable[[T], U]):\n        self.x = f\n    def __call__(self, x: T) -> U:\n        return self.x(x)\n    def __add__(self, other: \"ClassA[U, V]\") -> \"ClassA[T, V]\":\n        f = self.x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "V = TypeVar(\"V\")\nclass ClassA(Generic[T, U]):\n    x: Callable[[T], U]\n    def __init__(self, f: Callable[[T], U]):\n        self.x = f\n    def __call__(self, x: T) -> U:\n        return self.x(x)\n    def __add__(self, other: \"ClassA[U, V]\") -> \"ClassA[T, V]\":\n        f = self.x\n        g: Callable[[U], V] = other.x",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "peekOfCode": "T_co = TypeVar(\"T_co\", covariant=True)\nclass ClassD(Generic[T_co]):\n    @overload\n    def __init__(self, arg: Iterable[T_co]) -> None:\n        ...\n    @overload\n    def __init__(self, arg: Callable[[], Iterable[T_co]]) -> None:\n        ...\n    def __init__(self, arg: Iterable[T_co] | Callable[[], Iterable[T_co]]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes94",
        "documentation": {}
    },
    {
        "label": "str2int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "peekOfCode": "def str2int(a: str) -> int:\n    return int(a)\ndef int2str(b: int) -> str:\n    return str(b)\ndef func1(cb: Callable[[str], T], val: list[Callable[[T], str] | None]):\n    pass\nfunc1(str2int, [int2str])\nfunc1(str2int, [None])\nfunc1(str2int, [])\nfunc1(str2int, [int2str, None])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "documentation": {}
    },
    {
        "label": "int2str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "peekOfCode": "def int2str(b: int) -> str:\n    return str(b)\ndef func1(cb: Callable[[str], T], val: list[Callable[[T], str] | None]):\n    pass\nfunc1(str2int, [int2str])\nfunc1(str2int, [None])\nfunc1(str2int, [])\nfunc1(str2int, [int2str, None])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "peekOfCode": "def func1(cb: Callable[[str], T], val: list[Callable[[T], str] | None]):\n    pass\nfunc1(str2int, [int2str])\nfunc1(str2int, [None])\nfunc1(str2int, [])\nfunc1(str2int, [int2str, None])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "peekOfCode": "T = TypeVar(\"T\")\ndef str2int(a: str) -> int:\n    return int(a)\ndef int2str(b: int) -> str:\n    return str(b)\ndef func1(cb: Callable[[str], T], val: list[Callable[[T], str] | None]):\n    pass\nfunc1(str2int, [int2str])\nfunc1(str2int, [None])\nfunc1(str2int, [])",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes95",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "peekOfCode": "class ClassA:\n    ...\nT = TypeVar(\"T\", bound=ClassA)\ndef func1(cls: type[T]) -> list[type[T]]:\n    result = [cls]\n    for c in cls.__subclasses__():\n        result.extend(func1(c)) \n    return result",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "peekOfCode": "def func1(cls: type[T]) -> list[type[T]]:\n    result = [cls]\n    for c in cls.__subclasses__():\n        result.extend(func1(c)) \n    return result",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "peekOfCode": "T = TypeVar(\"T\", bound=ClassA)\ndef func1(cls: type[T]) -> list[type[T]]:\n    result = [cls]\n    for c in cls.__subclasses__():\n        result.extend(func1(c)) \n    return result",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes96",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class1(list[T_co]): pass\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be contravariant.\nclass Class2(list[T_contra]): pass\nclass Class3(Generic[T_co]): ...\nclass Class3_Child1(Class3[T_co]): ...\nclass Class3_Child2(Class3[T]): ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class3_Child3(Class3[T_contra]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class2(list[T_contra]): pass\nclass Class3(Generic[T_co]): ...\nclass Class3_Child1(Class3[T_co]): ...\nclass Class3_Child2(Class3[T]): ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class3_Child3(Class3[T_contra]): ...\nclass Class4(Generic[T_contra]): ...\nclass Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class3(Generic[T_co]): ...\nclass Class3_Child1(Class3[T_co]): ...\nclass Class3_Child2(Class3[T]): ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class3_Child3(Class3[T_contra]): ...\nclass Class4(Generic[T_contra]): ...\nclass Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't ",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class3_Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class3_Child1(Class3[T_co]): ...\nclass Class3_Child2(Class3[T]): ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class3_Child3(Class3[T_contra]): ...\nclass Class4(Generic[T_contra]): ...\nclass Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class3_Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class3_Child2(Class3[T]): ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class3_Child3(Class3[T_contra]): ...\nclass Class4(Generic[T_contra]): ...\nclass Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class4_Child3(Class4[T_co]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class3_Child3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class3_Child3(Class3[T_contra]): ...\nclass Class4(Generic[T_contra]): ...\nclass Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class4_Child3(Class4[T_co]): ...\nclass Class5(Generic[T_contra]):\n    ...\nclass Class5_Child1(Class5[frozenset[T_contra]]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class4(Generic[T_contra]): ...\nclass Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class4_Child3(Class4[T_co]): ...\nclass Class5(Generic[T_contra]):\n    ...\nclass Class5_Child1(Class5[frozenset[T_contra]]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class4_Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class4_Child1(Class4[T_contra]): ...\nclass Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class4_Child3(Class4[T_co]): ...\nclass Class5(Generic[T_contra]):\n    ...\nclass Class5_Child1(Class5[frozenset[T_contra]]):\n    ...\n# This should generate an error because Sequence[T_co]",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class4_Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class4_Child2(Class4[T]): ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class4_Child3(Class4[T_co]): ...\nclass Class5(Generic[T_contra]):\n    ...\nclass Class5_Child1(Class5[frozenset[T_contra]]):\n    ...\n# This should generate an error because Sequence[T_co]\n# is covariant and is therefore not compatible with",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class4_Child3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class4_Child3(Class4[T_co]): ...\nclass Class5(Generic[T_contra]):\n    ...\nclass Class5_Child1(Class5[frozenset[T_contra]]):\n    ...\n# This should generate an error because Sequence[T_co]\n# is covariant and is therefore not compatible with\n# a contravariant type parameter.\nclass Class5_Child2(Class5[Sequence[T_co]]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class5(Generic[T_contra]):\n    ...\nclass Class5_Child1(Class5[frozenset[T_contra]]):\n    ...\n# This should generate an error because Sequence[T_co]\n# is covariant and is therefore not compatible with\n# a contravariant type parameter.\nclass Class5_Child2(Class5[Sequence[T_co]]):\n    ...\nclass Class5_Child3(Class5[Sequence[T]]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class5_Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class5_Child1(Class5[frozenset[T_contra]]):\n    ...\n# This should generate an error because Sequence[T_co]\n# is covariant and is therefore not compatible with\n# a contravariant type parameter.\nclass Class5_Child2(Class5[Sequence[T_co]]):\n    ...\nclass Class5_Child3(Class5[Sequence[T]]):\n    ...\nclass Class6(Generic[T_co, T_contra]):",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class5_Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class5_Child2(Class5[Sequence[T_co]]):\n    ...\nclass Class5_Child3(Class5[Sequence[T]]):\n    ...\nclass Class6(Generic[T_co, T_contra]):\n    ...\nclass Class6_Child1(Class6[T_co, T_contra]):\n    ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class5_Child3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class5_Child3(Class5[Sequence[T]]):\n    ...\nclass Class6(Generic[T_co, T_contra]):\n    ...\nclass Class6_Child1(Class6[T_co, T_contra]):\n    ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class6_Child2(Class6[T_co, T_co]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class6(Generic[T_co, T_contra]):\n    ...\nclass Class6_Child1(Class6[T_co, T_contra]):\n    ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class6_Child2(Class6[T_co, T_co]):\n    ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class6_Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class6_Child1(Class6[T_co, T_contra]):\n    ...\n# This should generate an error because T_co isn't \n# compatible with T_contra.\nclass Class6_Child2(Class6[T_co, T_co]):\n    ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class6_Child3(Class6[T_contra, T_contra]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class6_Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class6_Child2(Class6[T_co, T_co]):\n    ...\n# This should generate an error because T_contra isn't \n# compatible with T_co.\nclass Class6_Child3(Class6[T_contra, T_contra]):\n    ...\nclass Class6_Child4(Class6[T, T]):\n    ...\n# This should generate an error because Sequence[T_co] isn't \n# compatible with T_contra.",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class6_Child3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class6_Child3(Class6[T_contra, T_contra]):\n    ...\nclass Class6_Child4(Class6[T, T]):\n    ...\n# This should generate an error because Sequence[T_co] isn't \n# compatible with T_contra.\nclass Class6_Child5(Class6[Sequence[T_co], Sequence[T_co]]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class6_Child4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class6_Child4(Class6[T, T]):\n    ...\n# This should generate an error because Sequence[T_co] isn't \n# compatible with T_contra.\nclass Class6_Child5(Class6[Sequence[T_co], Sequence[T_co]]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "Class6_Child5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "class Class6_Child5(Class6[Sequence[T_co], Sequence[T_co]]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "T = TypeVar(\"T\")\nT_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be covariant.\nclass Class1(list[T_co]): pass\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be contravariant.\nclass Class2(list[T_contra]): pass\nclass Class3(Generic[T_co]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "T_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be covariant.\nclass Class1(list[T_co]): pass\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be contravariant.\nclass Class2(list[T_contra]): pass\nclass Class3(Generic[T_co]): ...\nclass Class3_Child1(Class3[T_co]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "peekOfCode": "T_contra = TypeVar(\"T_contra\", contravariant=True)\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be covariant.\nclass Class1(list[T_co]): pass\n# This should generate an error because the type parameter for list\n# is invariant, so T_co here cannot be contravariant.\nclass Class2(list[T_contra]): pass\nclass Class3(Generic[T_co]): ...\nclass Class3_Child1(Class3[T_co]): ...\nclass Class3_Child2(Class3[T]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes97",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "peekOfCode": "class A(Generic[T1]):\n    ...\ndef func1(x: A[T2]) -> A[T2 | None]:\n    ...\nx1: A[int | None] = func1(A[int]())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "peekOfCode": "def func1(x: A[T2]) -> A[T2 | None]:\n    ...\nx1: A[int | None] = func1(A[int]())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "peekOfCode": "T1 = TypeVar(\"T1\", contravariant=True)\nT2 = TypeVar(\"T2\")\nclass A(Generic[T1]):\n    ...\ndef func1(x: A[T2]) -> A[T2 | None]:\n    ...\nx1: A[int | None] = func1(A[int]())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "peekOfCode": "T2 = TypeVar(\"T2\")\nclass A(Generic[T1]):\n    ...\ndef func1(x: A[T2]) -> A[T2 | None]:\n    ...\nx1: A[int | None] = func1(A[int]())",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes98",
        "documentation": {}
    },
    {
        "label": "Iter",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes99",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes99",
        "peekOfCode": "class Iter(Generic[A]):\n    def __iter__(self) -> Iterator[A]:\n        ...\n    def enumerate(self) -> \"Iter[tuple[int, A]]\":\n        ...\n    def method1(self) -> None:\n        for x in self.enumerate():\n            reveal_type(x, expected_text=\"tuple[int, A@Iter]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes99",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.genericTypes99",
        "description": "packages.pyright-internal.src.tests.samples.genericTypes99",
        "peekOfCode": "A = TypeVar(\"A\")\nclass Iter(Generic[A]):\n    def __iter__(self) -> Iterator[A]:\n        ...\n    def enumerate(self) -> \"Iter[tuple[int, A]]\":\n        ...\n    def method1(self) -> None:\n        for x in self.enumerate():\n            reveal_type(x, expected_text=\"tuple[int, A@Iter]\")",
        "detail": "packages.pyright-internal.src.tests.samples.genericTypes99",
        "documentation": {}
    },
    {
        "label": "StrList",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "class StrList(list[str]):\n    def __hash__(self) -> int:\n        ...\ns3 = {StrList()}\n# This should generate two errors because {} and [] are not hashable.\nd1 = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\n# This should generate two errors because {} and [] are not hashable.\nd2: dict[Any, Any] = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\ndef func1(x: str | dict[Any, Any], y: Any, z: None):\n    # This should generate an error because dict isn't hashable",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "DC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "class DC1:\n    a: int\n@dataclass(frozen=True)\nclass DC2:\n    a: int\ndc1 = DC1(0)\n# This should generate an error because a non-frozen\n# dataclass is not hashable.\nd5 = {dc1: 100}\ndc2 = DC2(0)",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "DC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "class DC2:\n    a: int\ndc1 = DC1(0)\n# This should generate an error because a non-frozen\n# dataclass is not hashable.\nd5 = {dc1: 100}\ndc2 = DC2(0)\nd6 = {dc2: 100}",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "def func1(x: str | dict[Any, Any], y: Any, z: None):\n    # This should generate an error because dict isn't hashable\n    d3 = {x: \"hi\"}\n    d4 = {y: \"hi\", z: \"hi\"}\n@dataclass\nclass DC1:\n    a: int\n@dataclass(frozen=True)\nclass DC2:\n    a: int",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "s1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "s1 = {{}, 2, dict, frozenset(), []}\n# This should generate two errors because {} and [] are not hashable.\ns2: set[Any] = {{}, 2, dict, frozenset(), []}\nclass StrList(list[str]):\n    def __hash__(self) -> int:\n        ...\ns3 = {StrList()}\n# This should generate two errors because {} and [] are not hashable.\nd1 = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\n# This should generate two errors because {} and [] are not hashable.",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "s3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "s3 = {StrList()}\n# This should generate two errors because {} and [] are not hashable.\nd1 = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\n# This should generate two errors because {} and [] are not hashable.\nd2: dict[Any, Any] = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\ndef func1(x: str | dict[Any, Any], y: Any, z: None):\n    # This should generate an error because dict isn't hashable\n    d3 = {x: \"hi\"}\n    d4 = {y: \"hi\", z: \"hi\"}\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "d1 = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\n# This should generate two errors because {} and [] are not hashable.\nd2: dict[Any, Any] = {{}: None, None: 2, dict: 3, frozenset(): 4, []: \"\"}\ndef func1(x: str | dict[Any, Any], y: Any, z: None):\n    # This should generate an error because dict isn't hashable\n    d3 = {x: \"hi\"}\n    d4 = {y: \"hi\", z: \"hi\"}\n@dataclass\nclass DC1:\n    a: int",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "dc1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "dc1 = DC1(0)\n# This should generate an error because a non-frozen\n# dataclass is not hashable.\nd5 = {dc1: 100}\ndc2 = DC2(0)\nd6 = {dc2: 100}",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "d5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "d5 = {dc1: 100}\ndc2 = DC2(0)\nd6 = {dc2: 100}",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "dc2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "dc2 = DC2(0)\nd6 = {dc2: 100}",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "d6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.hashability1",
        "description": "packages.pyright-internal.src.tests.samples.hashability1",
        "peekOfCode": "d6 = {dc2: 100}",
        "detail": "packages.pyright-internal.src.tests.samples.hashability1",
        "documentation": {}
    },
    {
        "label": "__path__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import1",
        "description": "packages.pyright-internal.src.tests.samples.import1",
        "peekOfCode": "__path__ = __import__(\"pkgutil\").extend_path(__path__, __name__)",
        "detail": "packages.pyright-internal.src.tests.samples.import1",
        "documentation": {}
    },
    {
        "label": "test_zero_division",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.import10",
        "description": "packages.pyright-internal.src.tests.samples.import10",
        "peekOfCode": "def test_zero_division():\n    with unresolved_import.raises(ZeroDivisionError):\n        v = 1 / 0",
        "detail": "packages.pyright-internal.src.tests.samples.import10",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import11",
        "description": "packages.pyright-internal.src.tests.samples.import11",
        "peekOfCode": "a = json.decoder.JSONDecodeError\nb = json.JSONDecodeError",
        "detail": "packages.pyright-internal.src.tests.samples.import11",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import11",
        "description": "packages.pyright-internal.src.tests.samples.import11",
        "peekOfCode": "b = json.JSONDecodeError",
        "detail": "packages.pyright-internal.src.tests.samples.import11",
        "documentation": {}
    },
    {
        "label": ".package1",
        "kind": 6,
        "importPath": ".package1",
        "description": ".package1",
        "detail": ".package1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import2",
        "description": "packages.pyright-internal.src.tests.samples.import2",
        "peekOfCode": "a = p1.foo()\nfrom .package1 import foo\nb = foo()\n# This should generate an error because there is no\n# directory or file named package2.\nfrom . import package2 as p2\nfrom .package1.sub import subfoo\n# subfoo should resolve to the package1/sub/__init__.py,\n# which returns a datetime. Verify that it does.\nc: datetime = subfoo()",
        "detail": "packages.pyright-internal.src.tests.samples.import2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import2",
        "description": "packages.pyright-internal.src.tests.samples.import2",
        "peekOfCode": "b = foo()\n# This should generate an error because there is no\n# directory or file named package2.\nfrom . import package2 as p2\nfrom .package1.sub import subfoo\n# subfoo should resolve to the package1/sub/__init__.py,\n# which returns a datetime. Verify that it does.\nc: datetime = subfoo()\nfrom .package1.psyche import psyche1\n# This should resolve to package1/psyche.py even though",
        "detail": "packages.pyright-internal.src.tests.samples.import2",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import3",
        "description": "packages.pyright-internal.src.tests.samples.import3",
        "peekOfCode": "__all__ = [\"foo\", \"_foo\", \"_bar\"]\nfoo = 3\n_foo = 4\nbar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import3",
        "description": "packages.pyright-internal.src.tests.samples.import3",
        "peekOfCode": "foo = 3\n_foo = 4\nbar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import3",
        "documentation": {}
    },
    {
        "label": "_foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import3",
        "description": "packages.pyright-internal.src.tests.samples.import3",
        "peekOfCode": "_foo = 4\nbar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import3",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import3",
        "description": "packages.pyright-internal.src.tests.samples.import3",
        "peekOfCode": "bar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import3",
        "documentation": {}
    },
    {
        "label": "_bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import3",
        "description": "packages.pyright-internal.src.tests.samples.import3",
        "peekOfCode": "_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import4",
        "description": "packages.pyright-internal.src.tests.samples.import4",
        "peekOfCode": "a = foo\nb = _foo\n# This should generate an error because bar isn't\n# included in the __all__ assignment.\nc = bar\nd = _bar\n# This should generate an error because a trailing comma\n# isn't allowed in a \"from import\" statement without parens.\nfrom .import3 import foo,",
        "detail": "packages.pyright-internal.src.tests.samples.import4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import4",
        "description": "packages.pyright-internal.src.tests.samples.import4",
        "peekOfCode": "b = _foo\n# This should generate an error because bar isn't\n# included in the __all__ assignment.\nc = bar\nd = _bar\n# This should generate an error because a trailing comma\n# isn't allowed in a \"from import\" statement without parens.\nfrom .import3 import foo,",
        "detail": "packages.pyright-internal.src.tests.samples.import4",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import4",
        "description": "packages.pyright-internal.src.tests.samples.import4",
        "peekOfCode": "c = bar\nd = _bar\n# This should generate an error because a trailing comma\n# isn't allowed in a \"from import\" statement without parens.\nfrom .import3 import foo,",
        "detail": "packages.pyright-internal.src.tests.samples.import4",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import4",
        "description": "packages.pyright-internal.src.tests.samples.import4",
        "peekOfCode": "d = _bar\n# This should generate an error because a trailing comma\n# isn't allowed in a \"from import\" statement without parens.\nfrom .import3 import foo,",
        "detail": "packages.pyright-internal.src.tests.samples.import4",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import5",
        "description": "packages.pyright-internal.src.tests.samples.import5",
        "peekOfCode": "foo = 3\n__foo = 4\nbar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import5",
        "documentation": {}
    },
    {
        "label": "__foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import5",
        "description": "packages.pyright-internal.src.tests.samples.import5",
        "peekOfCode": "__foo = 4\nbar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import5",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import5",
        "description": "packages.pyright-internal.src.tests.samples.import5",
        "peekOfCode": "bar = 5\n_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import5",
        "documentation": {}
    },
    {
        "label": "_bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import5",
        "description": "packages.pyright-internal.src.tests.samples.import5",
        "peekOfCode": "_bar = 6",
        "detail": "packages.pyright-internal.src.tests.samples.import5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import6",
        "description": "packages.pyright-internal.src.tests.samples.import6",
        "peekOfCode": "a = foo\n# This should generate an error because there is no\n# __all__ assignment, and names starting with a double underscore\n# should not be imported in a wildcard.\nb = __foo\nc = bar\n# This should generate an error because there is no __all__ assignment\n# and names starting with a single underscore should not be imported\n# in a wildcard.\nd = _bar",
        "detail": "packages.pyright-internal.src.tests.samples.import6",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import6",
        "description": "packages.pyright-internal.src.tests.samples.import6",
        "peekOfCode": "b = __foo\nc = bar\n# This should generate an error because there is no __all__ assignment\n# and names starting with a single underscore should not be imported\n# in a wildcard.\nd = _bar",
        "detail": "packages.pyright-internal.src.tests.samples.import6",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import6",
        "description": "packages.pyright-internal.src.tests.samples.import6",
        "peekOfCode": "c = bar\n# This should generate an error because there is no __all__ assignment\n# and names starting with a single underscore should not be imported\n# in a wildcard.\nd = _bar",
        "detail": "packages.pyright-internal.src.tests.samples.import6",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.import6",
        "description": "packages.pyright-internal.src.tests.samples.import6",
        "peekOfCode": "d = _bar",
        "detail": "packages.pyright-internal.src.tests.samples.import6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.import7",
        "description": "packages.pyright-internal.src.tests.samples.import7",
        "peekOfCode": "class Foo:\n    # This should generate an error.\n    from .import5 import *\ndef bar():\n    # This should generate an error.\n    from .import5 import *",
        "detail": "packages.pyright-internal.src.tests.samples.import7",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.import7",
        "description": "packages.pyright-internal.src.tests.samples.import7",
        "peekOfCode": "def bar():\n    # This should generate an error.\n    from .import5 import *",
        "detail": "packages.pyright-internal.src.tests.samples.import7",
        "documentation": {}
    },
    {
        "label": "Parent1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "description": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "peekOfCode": "class Parent1:\n    def __init__(self, a: int) -> None:\n        ...\nclass Child1(Parent1):\n    # This should generate an error if reportInconsistentConstructor is enabled.\n    def __new__(cls, a: int | str):\n        ...\nclass Parent2:\n    def __init__(self, b: int) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "documentation": {}
    },
    {
        "label": "Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "description": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "peekOfCode": "class Child1(Parent1):\n    # This should generate an error if reportInconsistentConstructor is enabled.\n    def __new__(cls, a: int | str):\n        ...\nclass Parent2:\n    def __init__(self, b: int) -> None:\n        ...\nclass Child2(Parent2):\n    # This should generate an error if reportInconsistentConstructor is enabled.\n    def __new__(cls, b: str):",
        "detail": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "documentation": {}
    },
    {
        "label": "Parent2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "description": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "peekOfCode": "class Parent2:\n    def __init__(self, b: int) -> None:\n        ...\nclass Child2(Parent2):\n    # This should generate an error if reportInconsistentConstructor is enabled.\n    def __new__(cls, b: str):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "documentation": {}
    },
    {
        "label": "Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "description": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "peekOfCode": "class Child2(Parent2):\n    # This should generate an error if reportInconsistentConstructor is enabled.\n    def __new__(cls, b: str):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.inconsistentConstructor1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.inconsistentSpaceTab1",
        "description": "packages.pyright-internal.src.tests.samples.inconsistentSpaceTab1",
        "peekOfCode": "def main(jsonIn):\n    print(\"a\")\n\t# This should generate an error because of inconsistent use of\n\t# tabs and spaces.\n\tprint(\"b\")",
        "detail": "packages.pyright-internal.src.tests.samples.inconsistentSpaceTab1",
        "documentation": {}
    },
    {
        "label": "MyInt",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class MyInt:\n    def __init__(self, value: int) -> None:\n        self.value = value\n    def __index__(self) -> int:\n        return self.value\nl = [\"foo\", \"bar\"]\nt = (\"foo\", \"bar\")\nhex(MyInt(7))\nl[MyInt(0)]\nl[MyInt(0)] = \"hi\"",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "MyNonInt",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class MyNonInt:\n    def __init__(self) -> None:\n        pass\n# These should generate errors\nhex(MyNonInt())\nl[MyNonInt()]\nl[MyNonInt()] = \"hi\"\nt[MyNonInt()]\nT = TypeVar(\"T\")\nclass MyMetaclass(type):",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "MyMetaclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class MyMetaclass(type):\n    def __getitem__(cls: Type[T], item: int) -> T:\n        return cls()\nclass ClassA(metaclass=MyMetaclass):\n    pass\na1 = ClassA[1]\nreveal_type(a1, expected_text=\"ClassA\")\n# This should generate an error\nClassA[\"1\"]\nclass ClassB:",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class ClassA(metaclass=MyMetaclass):\n    pass\na1 = ClassA[1]\nreveal_type(a1, expected_text=\"ClassA\")\n# This should generate an error\nClassA[\"1\"]\nclass ClassB:\n    def __setitem__(self, index: int, value: \"ClassB\"):\n        ...\nclass ClassC:",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class ClassB:\n    def __setitem__(self, index: int, value: \"ClassB\"):\n        ...\nclass ClassC:\n    def __setitem__(self, index: int, value: \"ClassC\"):\n        ...\nB_or_C = TypeVar(\"B_or_C\", ClassB, ClassC)\ndef func1(container: B_or_C):\n    a = container\n    a[1] = container",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class ClassC:\n    def __setitem__(self, index: int, value: \"ClassC\"):\n        ...\nB_or_C = TypeVar(\"B_or_C\", ClassB, ClassC)\ndef func1(container: B_or_C):\n    a = container\n    a[1] = container\nTD = TypeVar(\"TD\", bound=\"ClassD[Any]\")\nclass ClassD(Generic[TD]):\n    def __setitem__(self, index: int, value: TD):",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class ClassD(Generic[TD]):\n    def __setitem__(self, index: int, value: TD):\n        ...\ndef func2(container: ClassD[TD], value: TD):\n    container[1] = value\nclass ClassE:\n    def __getattr__(self, s: str) -> Any:\n        raise NotImplementedError()\ne = ClassE()\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "ClassE",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "class ClassE:\n    def __getattr__(self, s: str) -> Any:\n        raise NotImplementedError()\ne = ClassE()\n# This should generate an error\nv_e = e[\"test\"]\n# This should generate an error\ne[\"test\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "def func1(container: B_or_C):\n    a = container\n    a[1] = container\nTD = TypeVar(\"TD\", bound=\"ClassD[Any]\")\nclass ClassD(Generic[TD]):\n    def __setitem__(self, index: int, value: TD):\n        ...\ndef func2(container: ClassD[TD], value: TD):\n    container[1] = value\nclass ClassE:",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "def func2(container: ClassD[TD], value: TD):\n    container[1] = value\nclass ClassE:\n    def __getattr__(self, s: str) -> Any:\n        raise NotImplementedError()\ne = ClassE()\n# This should generate an error\nv_e = e[\"test\"]\n# This should generate an error\ne[\"test\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "l = [\"foo\", \"bar\"]\nt = (\"foo\", \"bar\")\nhex(MyInt(7))\nl[MyInt(0)]\nl[MyInt(0)] = \"hi\"\nt[MyInt(1)]\nclass MyNonInt:\n    def __init__(self) -> None:\n        pass\n# These should generate errors",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "t = (\"foo\", \"bar\")\nhex(MyInt(7))\nl[MyInt(0)]\nl[MyInt(0)] = \"hi\"\nt[MyInt(1)]\nclass MyNonInt:\n    def __init__(self) -> None:\n        pass\n# These should generate errors\nhex(MyNonInt())",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "l[MyInt(0)]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "l[MyInt(0)] = \"hi\"\nt[MyInt(1)]\nclass MyNonInt:\n    def __init__(self) -> None:\n        pass\n# These should generate errors\nhex(MyNonInt())\nl[MyNonInt()]\nl[MyNonInt()] = \"hi\"\nt[MyNonInt()]",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "l[MyNonInt()]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "l[MyNonInt()] = \"hi\"\nt[MyNonInt()]\nT = TypeVar(\"T\")\nclass MyMetaclass(type):\n    def __getitem__(cls: Type[T], item: int) -> T:\n        return cls()\nclass ClassA(metaclass=MyMetaclass):\n    pass\na1 = ClassA[1]\nreveal_type(a1, expected_text=\"ClassA\")",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "T = TypeVar(\"T\")\nclass MyMetaclass(type):\n    def __getitem__(cls: Type[T], item: int) -> T:\n        return cls()\nclass ClassA(metaclass=MyMetaclass):\n    pass\na1 = ClassA[1]\nreveal_type(a1, expected_text=\"ClassA\")\n# This should generate an error\nClassA[\"1\"]",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "a1 = ClassA[1]\nreveal_type(a1, expected_text=\"ClassA\")\n# This should generate an error\nClassA[\"1\"]\nclass ClassB:\n    def __setitem__(self, index: int, value: \"ClassB\"):\n        ...\nclass ClassC:\n    def __setitem__(self, index: int, value: \"ClassC\"):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "B_or_C",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "B_or_C = TypeVar(\"B_or_C\", ClassB, ClassC)\ndef func1(container: B_or_C):\n    a = container\n    a[1] = container\nTD = TypeVar(\"TD\", bound=\"ClassD[Any]\")\nclass ClassD(Generic[TD]):\n    def __setitem__(self, index: int, value: TD):\n        ...\ndef func2(container: ClassD[TD], value: TD):\n    container[1] = value",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "TD",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "TD = TypeVar(\"TD\", bound=\"ClassD[Any]\")\nclass ClassD(Generic[TD]):\n    def __setitem__(self, index: int, value: TD):\n        ...\ndef func2(container: ClassD[TD], value: TD):\n    container[1] = value\nclass ClassE:\n    def __getattr__(self, s: str) -> Any:\n        raise NotImplementedError()\ne = ClassE()",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "e = ClassE()\n# This should generate an error\nv_e = e[\"test\"]\n# This should generate an error\ne[\"test\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "v_e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "v_e = e[\"test\"]\n# This should generate an error\ne[\"test\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "e[\"test\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.index1",
        "description": "packages.pyright-internal.src.tests.samples.index1",
        "peekOfCode": "e[\"test\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.index1",
        "documentation": {}
    },
    {
        "label": "perform_request",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "description": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "peekOfCode": "def perform_request(build_req: Callable[[], str]) -> str:\n    return \"purr\"\ndef make_api_request(auth: str) -> str:\n    return \"meow\"\ndef testfunc() -> None:\n    resp = open(\"test\")\n    auth = resp.read()\n    def build_req():\n        # \"auth\" is declared in a different execution context\n        # and included here in the closure. Make sure its type",
        "detail": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "documentation": {}
    },
    {
        "label": "make_api_request",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "description": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "peekOfCode": "def make_api_request(auth: str) -> str:\n    return \"meow\"\ndef testfunc() -> None:\n    resp = open(\"test\")\n    auth = resp.read()\n    def build_req():\n        # \"auth\" is declared in a different execution context\n        # and included here in the closure. Make sure its type\n        # is properly inferred.\n        return make_api_request(auth)",
        "detail": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "documentation": {}
    },
    {
        "label": "testfunc",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "description": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "peekOfCode": "def testfunc() -> None:\n    resp = open(\"test\")\n    auth = resp.read()\n    def build_req():\n        # \"auth\" is declared in a different execution context\n        # and included here in the closure. Make sure its type\n        # is properly inferred.\n        return make_api_request(auth)\n    resp = perform_request(build_req)",
        "detail": "packages.pyright-internal.src.tests.samples.inferredTypes1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "class Foo:\n    def __init_subclass__(\n        cls, *, param1: str, param2: float, param3: Optional[Any] = None\n    ) -> None:\n        super().__init_subclass__()\n# This should generate an error because param1 is\n# the wrong type.\nclass Bar1(Foo, param1=0, param2=4):\n    pass\n# This should generate an error because param2 is missing.",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "Bar1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "class Bar1(Foo, param1=0, param2=4):\n    pass\n# This should generate an error because param2 is missing.\nclass Bar2(Foo, param1=\"0\", param3=datetime.now()):\n    pass\nclass Bar3(Foo, param1=\"0\", param2=5.0):\n    pass\nclass Bar4:\n    def __init_subclass__(cls, *, arg: int) -> None:\n        func(cls, arg)",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "Bar2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "class Bar2(Foo, param1=\"0\", param3=datetime.now()):\n    pass\nclass Bar3(Foo, param1=\"0\", param2=5.0):\n    pass\nclass Bar4:\n    def __init_subclass__(cls, *, arg: int) -> None:\n        func(cls, arg)\n    def __new__(cls) -> \"Bar4\":\n        func(cls, 9)\n        return super().__new__(cls)",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "Bar3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "class Bar3(Foo, param1=\"0\", param2=5.0):\n    pass\nclass Bar4:\n    def __init_subclass__(cls, *, arg: int) -> None:\n        func(cls, arg)\n    def __new__(cls) -> \"Bar4\":\n        func(cls, 9)\n        return super().__new__(cls)\ndef func(klass: Type[Bar4], arg: int):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "Bar4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "class Bar4:\n    def __init_subclass__(cls, *, arg: int) -> None:\n        func(cls, arg)\n    def __new__(cls) -> \"Bar4\":\n        func(cls, 9)\n        return super().__new__(cls)\ndef func(klass: Type[Bar4], arg: int):\n    pass\nclass Bar5(Foo, param1=\"hi\", param2=3.4):\n    def __init_subclass__(cls, param_alt1: int):",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "Bar5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "class Bar5(Foo, param1=\"hi\", param2=3.4):\n    def __init_subclass__(cls, param_alt1: int):\n        super().__init_subclass__(param1=\"yo\", param2=param_alt1)",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "peekOfCode": "def func(klass: Type[Bar4], arg: int):\n    pass\nclass Bar5(Foo, param1=\"hi\", param2=3.4):\n    def __init_subclass__(cls, param_alt1: int):\n        super().__init_subclass__(param1=\"yo\", param2=param_alt1)",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "peekOfCode": "class A:\n    def __init_subclass__(cls, param_a: int):\n        super().__init_subclass__()\nclass B(A, param_a=123):\n    pass\n# This should generate an error because param_a is missing\nclass C(B):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "peekOfCode": "class B(A, param_a=123):\n    pass\n# This should generate an error because param_a is missing\nclass C(B):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "description": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "peekOfCode": "class C(B):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.initsubclass2",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.initVar1",
        "description": "packages.pyright-internal.src.tests.samples.initVar1",
        "peekOfCode": "class Container:\n    init_var1: InitVarAlias[int]\n    init_var2: InitVar[int]\n    not_init_var1: int\nc = Container(1, 2, 3)\nreveal_type(c.not_init_var1, expected_text=\"int\")\n# This should generate an error\nc.init_var1\n# This should generate an error\nc.init_var2",
        "detail": "packages.pyright-internal.src.tests.samples.initVar1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.initVar1",
        "description": "packages.pyright-internal.src.tests.samples.initVar1",
        "peekOfCode": "c = Container(1, 2, 3)\nreveal_type(c.not_init_var1, expected_text=\"int\")\n# This should generate an error\nc.init_var1\n# This should generate an error\nc.init_var2",
        "detail": "packages.pyright-internal.src.tests.samples.initVar1",
        "documentation": {}
    },
    {
        "label": "SomeTypedDict",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "class SomeTypedDict(TypedDict):\n    name: str\ndef func4(x: Union[int, SomeTypedDict]):\n    if isinstance(x, dict):\n        reveal_type(x, expected_text=\"SomeTypedDict\")\n    else:\n        reveal_type(x, expected_text=\"int\")\ndef func5(x: int | str | complex):\n    if isinstance(x, (int, str)):\n        reveal_type(x, expected_text=\"int | str\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func1(x: Union[List[str], int]):\n    if isinstance(x, list):\n        reveal_type(x, expected_text=\"List[str]\")\n    else:\n        reveal_type(x, expected_text=\"int\")\ndef func2(x: Any):\n    if isinstance(x, list):\n        reveal_type(x, expected_text=\"list[Unknown]\")\n    else:\n        reveal_type(x, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func2(x: Any):\n    if isinstance(x, list):\n        reveal_type(x, expected_text=\"list[Unknown]\")\n    else:\n        reveal_type(x, expected_text=\"Any\")\ndef func3(x):\n    if isinstance(x, list):\n        reveal_type(x, expected_text=\"list[Unknown]\")\n    else:\n        reveal_type(x, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func3(x):\n    if isinstance(x, list):\n        reveal_type(x, expected_text=\"list[Unknown]\")\n    else:\n        reveal_type(x, expected_text=\"Unknown\")\nclass SomeTypedDict(TypedDict):\n    name: str\ndef func4(x: Union[int, SomeTypedDict]):\n    if isinstance(x, dict):\n        reveal_type(x, expected_text=\"SomeTypedDict\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func4(x: Union[int, SomeTypedDict]):\n    if isinstance(x, dict):\n        reveal_type(x, expected_text=\"SomeTypedDict\")\n    else:\n        reveal_type(x, expected_text=\"int\")\ndef func5(x: int | str | complex):\n    if isinstance(x, (int, str)):\n        reveal_type(x, expected_text=\"int | str\")\n    else:\n        reveal_type(x, expected_text=\"complex\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func5(x: int | str | complex):\n    if isinstance(x, (int, str)):\n        reveal_type(x, expected_text=\"int | str\")\n    else:\n        reveal_type(x, expected_text=\"complex\")\ndef func6(x: Type[int] | Type[str] | Type[complex]):\n    if issubclass(x, (int, str)):\n        reveal_type(x, expected_text=\"Type[int] | Type[str]\")\n    else:\n        reveal_type(x, expected_text=\"Type[complex]\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func6(x: Type[int] | Type[str] | Type[complex]):\n    if issubclass(x, (int, str)):\n        reveal_type(x, expected_text=\"Type[int] | Type[str]\")\n    else:\n        reveal_type(x, expected_text=\"Type[complex]\")\ndef func7(x: Optional[Union[int, SomeTypedDict]]):\n    if isinstance(x, (dict, type(None))):\n        reveal_type(x, expected_text=\"SomeTypedDict | None\")\n    else:\n        reveal_type(x, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance1",
        "description": "packages.pyright-internal.src.tests.samples.isinstance1",
        "peekOfCode": "def func7(x: Optional[Union[int, SomeTypedDict]]):\n    if isinstance(x, (dict, type(None))):\n        reveal_type(x, expected_text=\"SomeTypedDict | None\")\n    else:\n        reveal_type(x, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance10",
        "description": "packages.pyright-internal.src.tests.samples.isinstance10",
        "peekOfCode": "def f(v: Any) -> bool:\n    if isinstance(v, Iterable):\n        reveal_type(v, expected_text=\"Iterable[Unknown]\")\n        if isinstance(v, Sized):\n            reveal_type(v, expected_text=\"<subclass of Iterable and Sized>\")\n            return True\n    return False",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance10",
        "documentation": {}
    },
    {
        "label": "DbModel",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance2",
        "description": "packages.pyright-internal.src.tests.samples.isinstance2",
        "peekOfCode": "class DbModel(Document):\n    pass\ndef foo() -> Union[int, DbModel]:\n    return DbModel()\n# This should not generate an error even though DbModel is\n# derived from an unknown base class.\nisinstance(foo(), int)\ndef bar(obj: object, typ: type):\n    return isinstance(obj, typ)",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance2",
        "description": "packages.pyright-internal.src.tests.samples.isinstance2",
        "peekOfCode": "def foo() -> Union[int, DbModel]:\n    return DbModel()\n# This should not generate an error even though DbModel is\n# derived from an unknown base class.\nisinstance(foo(), int)\ndef bar(obj: object, typ: type):\n    return isinstance(obj, typ)",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance2",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance2",
        "description": "packages.pyright-internal.src.tests.samples.isinstance2",
        "peekOfCode": "def bar(obj: object, typ: type):\n    return isinstance(obj, typ)",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance3",
        "description": "packages.pyright-internal.src.tests.samples.isinstance3",
        "peekOfCode": "class A(Generic[_T]):\n    pass\na = A()\nif isinstance(a, A):\n    pass\n# This should generate an error because generic types with\n# subscripts are not allowed.\nif isinstance(a, A[str]):\n    pass\n# This should generate an error in Python 3.9 and older",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance3",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance3",
        "description": "packages.pyright-internal.src.tests.samples.isinstance3",
        "peekOfCode": "class ClassA(Generic[_T]):\n    v1: _T\n    v2: Type[_T]\n    @property\n    @abstractmethod\n    def _elem_type_(self) -> Union[Type[_T], Tuple[Type[_T], ...]]:\n        raise NotImplementedError\n    def check_type(self, var: Any) -> bool:\n        return isinstance(var, self._elem_type_)\n    def execute(self, var: Union[_T, Tuple[_T]]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance3",
        "description": "packages.pyright-internal.src.tests.samples.isinstance3",
        "peekOfCode": "_T = TypeVar(\"_T\", int, str)\nclass A(Generic[_T]):\n    pass\na = A()\nif isinstance(a, A):\n    pass\n# This should generate an error because generic types with\n# subscripts are not allowed.\nif isinstance(a, A[str]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance3",
        "description": "packages.pyright-internal.src.tests.samples.isinstance3",
        "peekOfCode": "a = A()\nif isinstance(a, A):\n    pass\n# This should generate an error because generic types with\n# subscripts are not allowed.\nif isinstance(a, A[str]):\n    pass\n# This should generate an error in Python 3.9 and older\n# because unions are not allowed.\nif issubclass(A, Union[A, int]):",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance3",
        "documentation": {}
    },
    {
        "label": "MyProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "class MyProtocol(Protocol):\n    pass\n# This should generate an error because Sized is a Protocol that\n# is not runtime checkable.\nisinstance(4, MyProtocol)\n# This should generate an error because Iterable is a Protocol.\nissubclass(str, (str, MyProtocol))\nclass CustomClass:\n    def __call__(self, *args: Any):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "CustomClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "class CustomClass:\n    def __call__(self, *args: Any):\n        pass\ndef get_type_of_object(object: Union[Callable[..., Any], CustomClass]):\n    # This would normally generate an error, but FunctionType is special.\n    if isinstance(object, FunctionType):\n        return \"is function\"\n    if isinstance(object, LambdaType):\n        return \"is lambda\"\n    if isinstance(object, Callable):",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "get_type_of_object",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "def get_type_of_object(object: Union[Callable[..., Any], CustomClass]):\n    # This would normally generate an error, but FunctionType is special.\n    if isinstance(object, FunctionType):\n        return \"is function\"\n    if isinstance(object, LambdaType):\n        return \"is lambda\"\n    if isinstance(object, Callable):\n        return \"is callable\"\n    return \"nothing\"\n_T1 = TypeVar(\"_T1\", bound=CustomClass)",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "def func1(cls: Type[_T1], val: _T1):\n    if issubclass(cls, CustomClass):\n        reveal_type(cls, expected_text=\"Type[CustomClass]*\")\n    else:\n        reveal_type(cls, expected_text=\"Never\")\n_T2 = TypeVar(\"_T2\")\ndef func2(x: _T2) -> Union[_T2, int]:\n    if callable(x) and isfunction(x):\n        return 1\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "def func2(x: _T2) -> Union[_T2, int]:\n    if callable(x) and isfunction(x):\n        return 1\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=CustomClass)\ndef func1(cls: Type[_T1], val: _T1):\n    if issubclass(cls, CustomClass):\n        reveal_type(cls, expected_text=\"Type[CustomClass]*\")\n    else:\n        reveal_type(cls, expected_text=\"Never\")\n_T2 = TypeVar(\"_T2\")\ndef func2(x: _T2) -> Union[_T2, int]:\n    if callable(x) and isfunction(x):\n        return 1",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance4",
        "description": "packages.pyright-internal.src.tests.samples.isinstance4",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\ndef func2(x: _T2) -> Union[_T2, int]:\n    if callable(x) and isfunction(x):\n        return 1\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance5",
        "description": "packages.pyright-internal.src.tests.samples.isinstance5",
        "peekOfCode": "class Foo:\n    def bar(self):\n        a = isinstance(object(), self.__class__)\n        b = isinstance(object(), __class__)",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance6",
        "description": "packages.pyright-internal.src.tests.samples.isinstance6",
        "peekOfCode": "class Foo:\n    @classmethod\n    def bar(cls, other: type):\n        if issubclass(other, cls):\n            reveal_type(other, expected_text=\"Type[Self@Foo]\")\n        if issubclass(other, (int, cls)):\n            reveal_type(other, expected_text=\"Type[Self@Foo] | Type[int]\")\n    def baz(self, other: object):\n        if isinstance(other, self.__class__):\n            reveal_type(other, expected_text=\"Self@Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance6",
        "documentation": {}
    },
    {
        "label": "Operator",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "class Operator:\n    ...\nOpType = TypeVar(\"OpType\", bound=Operator)\nclass BasePipeline(Operator, Generic[OpType]):\n    def __init__(\n        self,\n        step: OpType,\n    ) -> None:\n        if isinstance(step, BasePipeline):\n            reveal_type(step, expected_text=\"BasePipeline[Unknown]*\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "BasePipeline",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "class BasePipeline(Operator, Generic[OpType]):\n    def __init__(\n        self,\n        step: OpType,\n    ) -> None:\n        if isinstance(step, BasePipeline):\n            reveal_type(step, expected_text=\"BasePipeline[Unknown]*\")\n        else:\n            reveal_type(step, expected_text=\"Operator*\")\nT1 = TypeVar(\"T1\", int, str)",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "do_nothing1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "def do_nothing1(x: T1) -> T1:\n    if isinstance(x, int):\n        return x\n    return x\nT2 = TypeVar(\"T2\")\ndef func2(arg: T2) -> T2:\n    if isinstance(arg, str):\n        reveal_type(arg, expected_text=\"str*\")\n    reveal_type(arg, expected_text=\"str* | object*\")\n    return arg",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "def func2(arg: T2) -> T2:\n    if isinstance(arg, str):\n        reveal_type(arg, expected_text=\"str*\")\n    reveal_type(arg, expected_text=\"str* | object*\")\n    return arg",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "OpType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "OpType = TypeVar(\"OpType\", bound=Operator)\nclass BasePipeline(Operator, Generic[OpType]):\n    def __init__(\n        self,\n        step: OpType,\n    ) -> None:\n        if isinstance(step, BasePipeline):\n            reveal_type(step, expected_text=\"BasePipeline[Unknown]*\")\n        else:\n            reveal_type(step, expected_text=\"Operator*\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "T1 = TypeVar(\"T1\", int, str)\ndef do_nothing1(x: T1) -> T1:\n    if isinstance(x, int):\n        return x\n    return x\nT2 = TypeVar(\"T2\")\ndef func2(arg: T2) -> T2:\n    if isinstance(arg, str):\n        reveal_type(arg, expected_text=\"str*\")\n    reveal_type(arg, expected_text=\"str* | object*\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance7",
        "description": "packages.pyright-internal.src.tests.samples.isinstance7",
        "peekOfCode": "T2 = TypeVar(\"T2\")\ndef func2(arg: T2) -> T2:\n    if isinstance(arg, str):\n        reveal_type(arg, expected_text=\"str*\")\n    reveal_type(arg, expected_text=\"str* | object*\")\n    return arg",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance9",
        "description": "packages.pyright-internal.src.tests.samples.isinstance9",
        "peekOfCode": "def func1(cls: Type[T], obj: Any) -> T:\n    assert isinstance(obj, cls)\n    reveal_type(obj, expected_text=\"T@func1\")\n    return obj\nv1 = func1(int, 3)\nreveal_type(v1, expected_text=\"int\")\ndef func2(klass: Type[T], obj: Union[T, int]) -> T:\n    assert isinstance(obj, klass)\n    reveal_type(obj, expected_text=\"T@func2\")\n    return obj",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance9",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance9",
        "description": "packages.pyright-internal.src.tests.samples.isinstance9",
        "peekOfCode": "def func2(klass: Type[T], obj: Union[T, int]) -> T:\n    assert isinstance(obj, klass)\n    reveal_type(obj, expected_text=\"T@func2\")\n    return obj\nv2 = func2(str, 3)\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance9",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance9",
        "description": "packages.pyright-internal.src.tests.samples.isinstance9",
        "peekOfCode": "T = TypeVar(\"T\")\ndef func1(cls: Type[T], obj: Any) -> T:\n    assert isinstance(obj, cls)\n    reveal_type(obj, expected_text=\"T@func1\")\n    return obj\nv1 = func1(int, 3)\nreveal_type(v1, expected_text=\"int\")\ndef func2(klass: Type[T], obj: Union[T, int]) -> T:\n    assert isinstance(obj, klass)\n    reveal_type(obj, expected_text=\"T@func2\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance9",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance9",
        "description": "packages.pyright-internal.src.tests.samples.isinstance9",
        "peekOfCode": "v1 = func1(int, 3)\nreveal_type(v1, expected_text=\"int\")\ndef func2(klass: Type[T], obj: Union[T, int]) -> T:\n    assert isinstance(obj, klass)\n    reveal_type(obj, expected_text=\"T@func2\")\n    return obj\nv2 = func2(str, 3)\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance9",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.isinstance9",
        "description": "packages.pyright-internal.src.tests.samples.isinstance9",
        "peekOfCode": "v2 = func2(str, 3)\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.isinstance9",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TD1(TypedDict):\n    v1: Required[int]\n    v2: NotRequired[str]\nclass TD2(TD1):\n    v3: Required[str]\ndef func1(**kwargs: Unpack[TD2]) -> None:\n    v1 = kwargs[\"v1\"]\n    reveal_type(v1, expected_text=\"int\")\n    # This should generate an error because v2 might not be present.\n    kwargs[\"v2\"]",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TD2(TD1):\n    v3: Required[str]\ndef func1(**kwargs: Unpack[TD2]) -> None:\n    v1 = kwargs[\"v1\"]\n    reveal_type(v1, expected_text=\"int\")\n    # This should generate an error because v2 might not be present.\n    kwargs[\"v2\"]\n    if \"v2\" in kwargs:\n        v2 = kwargs[\"v2\"]\n        reveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TDProtocol1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TDProtocol1(Protocol):\n    def __call__(self, *, v1: int, v3: str) -> None:\n        ...\nclass TDProtocol2(Protocol):\n    def __call__(self, *, v1: int, v3: str, v2: str = \"\") -> None:\n        ...\nclass TDProtocol3(Protocol):\n    def __call__(self, *, v1: int, v2: int, v3: str) -> None:\n        ...\nclass TDProtocol4(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TDProtocol2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TDProtocol2(Protocol):\n    def __call__(self, *, v1: int, v3: str, v2: str = \"\") -> None:\n        ...\nclass TDProtocol3(Protocol):\n    def __call__(self, *, v1: int, v2: int, v3: str) -> None:\n        ...\nclass TDProtocol4(Protocol):\n    def __call__(self, *, v1: int) -> None:\n        ...\nclass TDProtocol5(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TDProtocol3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TDProtocol3(Protocol):\n    def __call__(self, *, v1: int, v2: int, v3: str) -> None:\n        ...\nclass TDProtocol4(Protocol):\n    def __call__(self, *, v1: int) -> None:\n        ...\nclass TDProtocol5(Protocol):\n    def __call__(self, v1: int, v3: str) -> None:\n        ...\nclass TDProtocol6(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TDProtocol4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TDProtocol4(Protocol):\n    def __call__(self, *, v1: int) -> None:\n        ...\nclass TDProtocol5(Protocol):\n    def __call__(self, v1: int, v3: str) -> None:\n        ...\nclass TDProtocol6(Protocol):\n    def __call__(self, **kwargs: Unpack[TD2]) -> None:\n        ...\nv1: TDProtocol1 = func1",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TDProtocol5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TDProtocol5(Protocol):\n    def __call__(self, v1: int, v3: str) -> None:\n        ...\nclass TDProtocol6(Protocol):\n    def __call__(self, **kwargs: Unpack[TD2]) -> None:\n        ...\nv1: TDProtocol1 = func1\nv2: TDProtocol2 = func1\n# This should generate an error because v2 is the wrong type.\nv3: TDProtocol3 = func1",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "TDProtocol6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "class TDProtocol6(Protocol):\n    def __call__(self, **kwargs: Unpack[TD2]) -> None:\n        ...\nv1: TDProtocol1 = func1\nv2: TDProtocol2 = func1\n# This should generate an error because v2 is the wrong type.\nv3: TDProtocol3 = func1\n# This should generate an error because v3 is missing.\nv4: TDProtocol4 = func1\n# This should generate an error because parameters are positional.",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "def func1(**kwargs: Unpack[TD2]) -> None:\n    v1 = kwargs[\"v1\"]\n    reveal_type(v1, expected_text=\"int\")\n    # This should generate an error because v2 might not be present.\n    kwargs[\"v2\"]\n    if \"v2\" in kwargs:\n        v2 = kwargs[\"v2\"]\n        reveal_type(v2, expected_text=\"str\")\n    v3 = kwargs[\"v3\"]\n    reveal_type(v3, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "def func2(v1: int, **kwargs: Unpack[TD1]) -> None:\n    pass\ndef func3():\n    # This should generate an error because it is\n    # missing required keyword arguments.\n    func1()\n    func1(v1=1, v2=\"\", v3=\"5\")\n    td2 = TD2(v1=2, v3=\"4\")\n    func1(**td2)\n    # This should generate an error because v4 is not in TD2.",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "peekOfCode": "def func3():\n    # This should generate an error because it is\n    # missing required keyword arguments.\n    func1()\n    func1(v1=1, v2=\"\", v3=\"5\")\n    td2 = TD2(v1=2, v3=\"4\")\n    func1(**td2)\n    # This should generate an error because v4 is not in TD2.\n    func1(v1=1, v2=\"\", v3=\"5\", v4=5)\n    # This should generate an error because args are passed by position.",
        "detail": "packages.pyright-internal.src.tests.samples.kwargsUnpack1",
        "documentation": {}
    },
    {
        "label": "needs_function",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "def needs_function(callback: Callable[[str, int], str]):\n    pass\nneeds_function(lambda x, y:x)\n# This should generate an error because the lambda doesn't\n# accept two parameters.\nneeds_function(lambda x:x)\n#------------------------------------------------------\n# Test lambda matching when dest includes default parameter values\ndef needs_function2(callback: Callable[[str, int], str]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "needs_function2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "def needs_function2(callback: Callable[[str, int], str]):\n    pass\nneeds_function(lambda x, y:x)\n#------------------------------------------------------\n# Test parameter rules for lambdas\n# This should generate an error because a parameter with\n# no default follows a parameter with a default.\nlambda2 = lambda x=1, y:y\nlambda3 = lambda x, y=5:y\nlambda3(1)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "may_need_function_generic",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "def may_need_function_generic(callback: Optional[Callable[[_T1], _T1]]):\n    pass\nmay_need_function_generic(lambda x: x)\ndef reduce(function: Callable[[_T1, _T1], _T1], sequence: Iterable[_T1]) -> _T1:\n    ...\na: object = reduce((lambda x, y: x * y), [1, 2, 3, 4])",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "reduce",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "def reduce(function: Callable[[_T1, _T1], _T1], sequence: Iterable[_T1]) -> _T1:\n    ...\na: object = reduce((lambda x, y: x * y), [1, 2, 3, 4])",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "lambda2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "lambda2 = lambda x=1, y:y\nlambda3 = lambda x, y=5:y\nlambda3(1)\nlambda3(1, 2)\nlambda4 = lambda x, *y, z:y\n#------------------------------------------------------\n# Test calling of lambdas\nlambda1 = lambda x, y:x\nlambda1(1, 2)\n# This should generate an error because the lambda doesn't",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "lambda3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "lambda3 = lambda x, y=5:y\nlambda3(1)\nlambda3(1, 2)\nlambda4 = lambda x, *y, z:y\n#------------------------------------------------------\n# Test calling of lambdas\nlambda1 = lambda x, y:x\nlambda1(1, 2)\n# This should generate an error because the lambda doesn't\n# accept three parameters.",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "lambda4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "lambda4 = lambda x, *y, z:y\n#------------------------------------------------------\n# Test calling of lambdas\nlambda1 = lambda x, y:x\nlambda1(1, 2)\n# This should generate an error because the lambda doesn't\n# accept three parameters.\nlambda1(1, 2, 3)\nlambda4(1, z=3)\nlambda4(1, 3, 4, 5, 6, z=3)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "lambda1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "lambda1 = lambda x, y:x\nlambda1(1, 2)\n# This should generate an error because the lambda doesn't\n# accept three parameters.\nlambda1(1, 2, 3)\nlambda4(1, z=3)\nlambda4(1, 3, 4, 5, 6, z=3)\n# This should generate an error because the arguments\n# don't match the parameter list.\nlambda4(1, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda1",
        "description": "packages.pyright-internal.src.tests.samples.lambda1",
        "peekOfCode": "_T1 = TypeVar('_T1')\ndef may_need_function_generic(callback: Optional[Callable[[_T1], _T1]]):\n    pass\nmay_need_function_generic(lambda x: x)\ndef reduce(function: Callable[[_T1, _T1], _T1], sequence: Iterable[_T1]) -> _T1:\n    ...\na: object = reduce((lambda x, y: x * y), [1, 2, 3, 4])",
        "detail": "packages.pyright-internal.src.tests.samples.lambda1",
        "documentation": {}
    },
    {
        "label": "MyCallback",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda3",
        "description": "packages.pyright-internal.src.tests.samples.lambda3",
        "peekOfCode": "class MyCallback(Protocol):\n    def __call__(self, y: int, a: int = 0) -> bool:\n        ...\nlambda1: Callable[[int, int], bool] = lambda y, a=0: a == y\nlambda2: MyCallback = lambda y, a=0: a == y\nlambda1(20)\nlambda2(20)\nlambda2(20, 30)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda3",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda3",
        "description": "packages.pyright-internal.src.tests.samples.lambda3",
        "peekOfCode": "def test1():\n    var = 1\n    lambda _=var: ...\ndef test2():\n    # This should generate an error because var2 isn't defined.\n    lambda _=var2: ...\ndef test3():\n    var = 0\n    lambda var=var: ...\nclass MyCallback(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.lambda3",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda3",
        "description": "packages.pyright-internal.src.tests.samples.lambda3",
        "peekOfCode": "def test2():\n    # This should generate an error because var2 isn't defined.\n    lambda _=var2: ...\ndef test3():\n    var = 0\n    lambda var=var: ...\nclass MyCallback(Protocol):\n    def __call__(self, y: int, a: int = 0) -> bool:\n        ...\nlambda1: Callable[[int, int], bool] = lambda y, a=0: a == y",
        "detail": "packages.pyright-internal.src.tests.samples.lambda3",
        "documentation": {}
    },
    {
        "label": "test3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda3",
        "description": "packages.pyright-internal.src.tests.samples.lambda3",
        "peekOfCode": "def test3():\n    var = 0\n    lambda var=var: ...\nclass MyCallback(Protocol):\n    def __call__(self, y: int, a: int = 0) -> bool:\n        ...\nlambda1: Callable[[int, int], bool] = lambda y, a=0: a == y\nlambda2: MyCallback = lambda y, a=0: a == y\nlambda1(20)\nlambda2(20)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda3",
        "documentation": {}
    },
    {
        "label": "Callable1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "class Callable1(Protocol):\n    def __call__(self, p0: int, p1: str) -> bool:\n        ...\nclass Callable2(Protocol):\n    def __call__(self, p0: str) -> bool:\n        ...\nclass Callable3(Protocol):\n    def __call__(self, *p0: str) -> bool:\n        ...\nclass Callable4(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "Callable2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "class Callable2(Protocol):\n    def __call__(self, p0: str) -> bool:\n        ...\nclass Callable3(Protocol):\n    def __call__(self, *p0: str) -> bool:\n        ...\nclass Callable4(Protocol):\n    def __call__(self, p0: int, p1: str, *p2: str) -> bool:\n        ...\nU2 = Union[Callable1, Callable2, Callable3, Callable4]",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "Callable3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "class Callable3(Protocol):\n    def __call__(self, *p0: str) -> bool:\n        ...\nclass Callable4(Protocol):\n    def __call__(self, p0: int, p1: str, *p2: str) -> bool:\n        ...\nU2 = Union[Callable1, Callable2, Callable3, Callable4]\ndef accepts_u2(cb: U2) -> U2:\n    return cb\naccepts_u2(lambda p0: p0.startswith(\"hello\"))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "Callable4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "class Callable4(Protocol):\n    def __call__(self, p0: int, p1: str, *p2: str) -> bool:\n        ...\nU2 = Union[Callable1, Callable2, Callable3, Callable4]\ndef accepts_u2(cb: U2) -> U2:\n    return cb\naccepts_u2(lambda p0: p0.startswith(\"hello\"))\naccepts_u2(lambda p0, p1: p0 > 0 and p1.startswith(\"hello\"))\naccepts_u2(lambda *i: True)\naccepts_u2(lambda p0, p1, *p2: True)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "accepts_u1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "def accepts_u1(cb: U1) -> U1:\n    return cb\ndef callback_1(p0: int, p1: str):\n    return True\ndef callback_2(p0: str):\n    return True\ndef callback_3(*p0: str):\n    return True\naccepts_u1(lambda s: s.startswith(\"hello\"))\naccepts_u1(lambda i, s: i > 0 and s.startswith(\"hello\"))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "callback_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "def callback_1(p0: int, p1: str):\n    return True\ndef callback_2(p0: str):\n    return True\ndef callback_3(*p0: str):\n    return True\naccepts_u1(lambda s: s.startswith(\"hello\"))\naccepts_u1(lambda i, s: i > 0 and s.startswith(\"hello\"))\naccepts_u1(lambda *i: True)\naccepts_u1(callback_1)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "callback_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "def callback_2(p0: str):\n    return True\ndef callback_3(*p0: str):\n    return True\naccepts_u1(lambda s: s.startswith(\"hello\"))\naccepts_u1(lambda i, s: i > 0 and s.startswith(\"hello\"))\naccepts_u1(lambda *i: True)\naccepts_u1(callback_1)\naccepts_u1(callback_2)\naccepts_u1(callback_3)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "callback_3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "def callback_3(*p0: str):\n    return True\naccepts_u1(lambda s: s.startswith(\"hello\"))\naccepts_u1(lambda i, s: i > 0 and s.startswith(\"hello\"))\naccepts_u1(lambda *i: True)\naccepts_u1(callback_1)\naccepts_u1(callback_2)\naccepts_u1(callback_3)\n# This should generate an error\naccepts_u1(lambda a, b, c: True)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "accepts_u2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "def accepts_u2(cb: U2) -> U2:\n    return cb\naccepts_u2(lambda p0: p0.startswith(\"hello\"))\naccepts_u2(lambda p0, p1: p0 > 0 and p1.startswith(\"hello\"))\naccepts_u2(lambda *i: True)\naccepts_u2(lambda p0, p1, *p2: True)\naccepts_u2(callback_1)\naccepts_u2(callback_2)\naccepts_u2(callback_3)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "U1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "U1 = Union[Callable[[int, str], bool], Callable[[str], bool]]\ndef accepts_u1(cb: U1) -> U1:\n    return cb\ndef callback_1(p0: int, p1: str):\n    return True\ndef callback_2(p0: str):\n    return True\ndef callback_3(*p0: str):\n    return True\naccepts_u1(lambda s: s.startswith(\"hello\"))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "U2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda4",
        "description": "packages.pyright-internal.src.tests.samples.lambda4",
        "peekOfCode": "U2 = Union[Callable1, Callable2, Callable3, Callable4]\ndef accepts_u2(cb: U2) -> U2:\n    return cb\naccepts_u2(lambda p0: p0.startswith(\"hello\"))\naccepts_u2(lambda p0, p1: p0 > 0 and p1.startswith(\"hello\"))\naccepts_u2(lambda *i: True)\naccepts_u2(lambda p0, p1, *p2: True)\naccepts_u2(callback_1)\naccepts_u2(callback_2)\naccepts_u2(callback_3)",
        "detail": "packages.pyright-internal.src.tests.samples.lambda4",
        "documentation": {}
    },
    {
        "label": "Msg",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda5",
        "description": "packages.pyright-internal.src.tests.samples.lambda5",
        "peekOfCode": "class Msg(Generic[T]):\n    body: T\nclass Request:\n    ...\ndef check(func: \"Callable[[MsgT, int], object]\") -> MsgT:\n    ...\nnotification: Msg[Request] = check(lambda msg, foo: (msg.body, foo))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda5",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda5",
        "description": "packages.pyright-internal.src.tests.samples.lambda5",
        "peekOfCode": "class Request:\n    ...\ndef check(func: \"Callable[[MsgT, int], object]\") -> MsgT:\n    ...\nnotification: Msg[Request] = check(lambda msg, foo: (msg.body, foo))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda5",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda5",
        "description": "packages.pyright-internal.src.tests.samples.lambda5",
        "peekOfCode": "def check(func: \"Callable[[MsgT, int], object]\") -> MsgT:\n    ...\nnotification: Msg[Request] = check(lambda msg, foo: (msg.body, foo))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda5",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda5",
        "description": "packages.pyright-internal.src.tests.samples.lambda5",
        "peekOfCode": "T = TypeVar(\"T\")\nMsgT = TypeVar(\"MsgT\", bound=\"Msg[Any]\")\nclass Msg(Generic[T]):\n    body: T\nclass Request:\n    ...\ndef check(func: \"Callable[[MsgT, int], object]\") -> MsgT:\n    ...\nnotification: Msg[Request] = check(lambda msg, foo: (msg.body, foo))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda5",
        "documentation": {}
    },
    {
        "label": "MsgT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda5",
        "description": "packages.pyright-internal.src.tests.samples.lambda5",
        "peekOfCode": "MsgT = TypeVar(\"MsgT\", bound=\"Msg[Any]\")\nclass Msg(Generic[T]):\n    body: T\nclass Request:\n    ...\ndef check(func: \"Callable[[MsgT, int], object]\") -> MsgT:\n    ...\nnotification: Msg[Request] = check(lambda msg, foo: (msg.body, foo))",
        "detail": "packages.pyright-internal.src.tests.samples.lambda5",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda6",
        "description": "packages.pyright-internal.src.tests.samples.lambda6",
        "peekOfCode": "class A:\n    x1 = lambda: var1\n    var2 = [1, 2]\n    # This should generate an error.\n    x2 = lambda: var2",
        "detail": "packages.pyright-internal.src.tests.samples.lambda6",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lambda6",
        "description": "packages.pyright-internal.src.tests.samples.lambda6",
        "peekOfCode": "var1 = [1, 2]\nclass A:\n    x1 = lambda: var1\n    var2 = [1, 2]\n    # This should generate an error.\n    x2 = lambda: var2",
        "detail": "packages.pyright-internal.src.tests.samples.lambda6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lines1",
        "description": "packages.pyright-internal.src.tests.samples.lines1",
        "peekOfCode": "foo = r\"\\\n\"\n# The final token should be on line 14\nbar = foo",
        "detail": "packages.pyright-internal.src.tests.samples.lines1",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.lines1",
        "description": "packages.pyright-internal.src.tests.samples.lines1",
        "peekOfCode": "bar = foo",
        "detail": "packages.pyright-internal.src.tests.samples.lines1",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "class Baz(Generic[_T]):\n    def __get__(self, instance: Any, owner: Any) -> _T:\n        ...\n    def __set__(self, instance: Any, value: _T) -> None:\n        ...\nclass Foo:\n    ...\nclass Bar:\n    baz: Baz[list[Foo]]\nv10 = Bar()",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "class Foo:\n    ...\nclass Bar:\n    baz: Baz[list[Foo]]\nv10 = Bar()\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv10.baz = [Foo()]\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv11: List[Any] = [[\"hi\", [\"hi\"], [[{}]]]]\nreveal_type(v11, expected_text=\"list[Any]\")",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "class Bar:\n    baz: Baz[list[Foo]]\nv10 = Bar()\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv10.baz = [Foo()]\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv11: List[Any] = [[\"hi\", [\"hi\"], [[{}]]]]\nreveal_type(v11, expected_text=\"list[Any]\")\nv12: List[Optional[int]] = [None] * 3\nreveal_type(v12, expected_text=\"list[int | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "def func1(by: list[ScalarKeysT]) -> ScalarKeysT:\n    ...\nreveal_type(func1([\"country\"]), expected_type=\"Literal['country']\")\nreveal_type(func1([\"name\"]), expected_type=\"Literal['name']\")\nreveal_type(func1([\"name\", \"country\"]), expected_type=\"Literal['name', 'country']\")\n# This should generate an error.\nfunc1([\"id\"])",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "v1 = [1, 2, 3]\nreveal_type(v1, expected_text=\"list[int]\")\nv2 = [1, 3.4, \"hi\"]\nreveal_type(v2, expected_text=\"list[int | float | str]\")\nv3 = []\nreveal_type(v3, expected_text=\"list[Unknown]\")\nv4: List[object] = []\nv5: object = []\nv6: Sequence[float] = [3, 4, 5]\nv7: Collection[object] = [[]]",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "v2 = [1, 3.4, \"hi\"]\nreveal_type(v2, expected_text=\"list[int | float | str]\")\nv3 = []\nreveal_type(v3, expected_text=\"list[Unknown]\")\nv4: List[object] = []\nv5: object = []\nv6: Sequence[float] = [3, 4, 5]\nv7: Collection[object] = [[]]\n_T = TypeVar(\"_T\")\nclass Baz(Generic[_T]):",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "v3 = []\nreveal_type(v3, expected_text=\"list[Unknown]\")\nv4: List[object] = []\nv5: object = []\nv6: Sequence[float] = [3, 4, 5]\nv7: Collection[object] = [[]]\n_T = TypeVar(\"_T\")\nclass Baz(Generic[_T]):\n    def __get__(self, instance: Any, owner: Any) -> _T:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Baz(Generic[_T]):\n    def __get__(self, instance: Any, owner: Any) -> _T:\n        ...\n    def __set__(self, instance: Any, value: _T) -> None:\n        ...\nclass Foo:\n    ...\nclass Bar:\n    baz: Baz[list[Foo]]",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "v10",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "v10 = Bar()\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv10.baz = [Foo()]\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv11: List[Any] = [[\"hi\", [\"hi\"], [[{}]]]]\nreveal_type(v11, expected_text=\"list[Any]\")\nv12: List[Optional[int]] = [None] * 3\nreveal_type(v12, expected_text=\"list[int | None]\")\nv13: List[Optional[str]] = [\"3\", None] * 2\nreveal_type(v13, expected_text=\"list[str | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "v10.baz",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "v10.baz = [Foo()]\nreveal_type(v10.baz, expected_text=\"list[Foo]\")\nv11: List[Any] = [[\"hi\", [\"hi\"], [[{}]]]]\nreveal_type(v11, expected_text=\"list[Any]\")\nv12: List[Optional[int]] = [None] * 3\nreveal_type(v12, expected_text=\"list[int | None]\")\nv13: List[Optional[str]] = [\"3\", None] * 2\nreveal_type(v13, expected_text=\"list[str | None]\")\nx1 = 3\nv14: List[Optional[str]] = [None] * x1",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "x1 = 3\nv14: List[Optional[str]] = [None] * x1\nx2 = [1, 2, 3]\nv15: List[Optional[str]] = [None] * sum(x2)\nv16: Dict[str, List[Optional[str]]] = {n: [None] * len(n) for n in [\"a\", \"aa\", \"aaa\"]}\nScalarKeysT = TypeVar(\"ScalarKeysT\", bound=Literal[\"name\", \"country\"])\ndef func1(by: list[ScalarKeysT]) -> ScalarKeysT:\n    ...\nreveal_type(func1([\"country\"]), expected_type=\"Literal['country']\")\nreveal_type(func1([\"name\"]), expected_type=\"Literal['name']\")",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "x2 = [1, 2, 3]\nv15: List[Optional[str]] = [None] * sum(x2)\nv16: Dict[str, List[Optional[str]]] = {n: [None] * len(n) for n in [\"a\", \"aa\", \"aaa\"]}\nScalarKeysT = TypeVar(\"ScalarKeysT\", bound=Literal[\"name\", \"country\"])\ndef func1(by: list[ScalarKeysT]) -> ScalarKeysT:\n    ...\nreveal_type(func1([\"country\"]), expected_type=\"Literal['country']\")\nreveal_type(func1([\"name\"]), expected_type=\"Literal['name']\")\nreveal_type(func1([\"name\", \"country\"]), expected_type=\"Literal['name', 'country']\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "ScalarKeysT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.list1",
        "description": "packages.pyright-internal.src.tests.samples.list1",
        "peekOfCode": "ScalarKeysT = TypeVar(\"ScalarKeysT\", bound=Literal[\"name\", \"country\"])\ndef func1(by: list[ScalarKeysT]) -> ScalarKeysT:\n    ...\nreveal_type(func1([\"country\"]), expected_type=\"Literal['country']\")\nreveal_type(func1([\"name\"]), expected_type=\"Literal['name']\")\nreveal_type(func1([\"name\", \"country\"]), expected_type=\"Literal['name', 'country']\")\n# This should generate an error.\nfunc1([\"id\"])",
        "detail": "packages.pyright-internal.src.tests.samples.list1",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.list2",
        "description": "packages.pyright-internal.src.tests.samples.list2",
        "peekOfCode": "def func(x: LiteralString):\n    \"\".join([random.choice(x) for _ in range(8)])",
        "detail": "packages.pyright-internal.src.tests.samples.list2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "def func1() -> Generator[int, None, None]:\n    b = (elem for elem in a)\n    return b\ndef func2() -> List[int]:\n    c = [elem for elem in a]\n    return c\ndef func3() -> List[str]:\n    c = [elem for elem in a]\n    # This should generate an error because\n    # c is a List[int], which doesn't match",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "def func2() -> List[int]:\n    c = [elem for elem in a]\n    return c\ndef func3() -> List[str]:\n    c = [elem for elem in a]\n    # This should generate an error because\n    # c is a List[int], which doesn't match\n    # the declared return type.\n    return c\ndef generate():",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "def func3() -> List[str]:\n    c = [elem for elem in a]\n    # This should generate an error because\n    # c is a List[int], which doesn't match\n    # the declared return type.\n    return c\ndef generate():\n    for i in range(2):\n        yield i\n# Verify that generate returns a Generator.",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "def generate():\n    for i in range(2):\n        yield i\n# Verify that generate returns a Generator.\ns = generate()\ns.close()\n# verify that literals are handled correctly.\nFooOrBar = Literal[\"foo\", \"bar\"]\ndef to_list(values: Iterable[FooOrBar]) -> List[FooOrBar]:\n    return [value for value in values]",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "to_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "def to_list(values: Iterable[FooOrBar]) -> List[FooOrBar]:\n    return [value for value in values]\nx = 3\n# This should generate a syntax error.\n[x for in range(3)]",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "a = [1, 2, 3, 4]\ndef func1() -> Generator[int, None, None]:\n    b = (elem for elem in a)\n    return b\ndef func2() -> List[int]:\n    c = [elem for elem in a]\n    return c\ndef func3() -> List[str]:\n    c = [elem for elem in a]\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "s = generate()\ns.close()\n# verify that literals are handled correctly.\nFooOrBar = Literal[\"foo\", \"bar\"]\ndef to_list(values: Iterable[FooOrBar]) -> List[FooOrBar]:\n    return [value for value in values]\nx = 3\n# This should generate a syntax error.\n[x for in range(3)]",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "FooOrBar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "FooOrBar = Literal[\"foo\", \"bar\"]\ndef to_list(values: Iterable[FooOrBar]) -> List[FooOrBar]:\n    return [value for value in values]\nx = 3\n# This should generate a syntax error.\n[x for in range(3)]",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "peekOfCode": "x = 3\n# This should generate a syntax error.\n[x for in range(3)]",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension2",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension2",
        "peekOfCode": "a = [\n    y + z + x[0]\n    for x in m1\n    if x is not None\n    for y in x\n    if y is not None\n    for z in [1, None, 3]\n    if z is not None\n]",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension3",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension3",
        "peekOfCode": "def foo() -> list[str]:\n    pairs = [s.split(\":\") if \":\" in s else [s, \"null\"] for s in [\"foo:bar\", \"baz\"]]\n    foo = [p[0] for p in pairs]\n    if foo:\n        return foo\n    bar = [a for [a, b] in pairs]\n    return bar",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension3",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension4",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension4",
        "peekOfCode": "b = [a for a in [len(a)]]\n# This assignment should succeed because \"a\" at this\n# point should have the type of \"a\" in the outer scope,\n# not the int type from the list comprehension.\nc: str = a",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension7",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension7",
        "peekOfCode": "class A:\n    var1 = [1, 2]\n    var2 = {x for x in var1}\n    # This should generate an error.\n    var3 = {var1[0] for x in var1}\n    var4 = {outer_var[0] for x in outer_var}",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension7",
        "documentation": {}
    },
    {
        "label": "outer_var",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension7",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension7",
        "peekOfCode": "outer_var = [1, 2]\nclass A:\n    var1 = [1, 2]\n    var2 = {x for x in var1}\n    # This should generate an error.\n    var3 = {var1[0] for x in var1}\n    var4 = {outer_var[0] for x in outer_var}",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension7",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension8",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension8",
        "peekOfCode": "class Foo:\n    input: str\n    output: str\ndef minify1(foo: Foo):\n    foo.output = \"\".join(\n        stripped for line in foo.input.splitlines() if (stripped := line.strip())\n    )",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension8",
        "documentation": {}
    },
    {
        "label": "minify1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension8",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension8",
        "peekOfCode": "def minify1(foo: Foo):\n    foo.output = \"\".join(\n        stripped for line in foo.input.splitlines() if (stripped := line.strip())\n    )",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension8",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.listComprehension9",
        "description": "packages.pyright-internal.src.tests.samples.listComprehension9",
        "peekOfCode": "class X(TypedDict):\n    x: str\nxs: list[X] = []\nxs.extend({\"x\": c} for c in \"abc\")",
        "detail": "packages.pyright-internal.src.tests.samples.listComprehension9",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literals1",
        "description": "packages.pyright-internal.src.tests.samples.literals1",
        "peekOfCode": "def foo(a: ValidResponses):\n    pass\nfoo(\"a\")\nfoo(b\"b\")\nfoo(\"cc\")\nfoo(True)\nfoo(None)\n# This should generate an error because 'b'\n# isn't a valid literal value.\nfoo(\"b\")",
        "detail": "packages.pyright-internal.src.tests.samples.literals1",
        "documentation": {}
    },
    {
        "label": "ValidResponses",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals1",
        "description": "packages.pyright-internal.src.tests.samples.literals1",
        "peekOfCode": "ValidResponses = Literal[\"a\", b\"b\", \"c\" \"c\", True, None]\ndef foo(a: ValidResponses):\n    pass\nfoo(\"a\")\nfoo(b\"b\")\nfoo(\"cc\")\nfoo(True)\nfoo(None)\n# This should generate an error because 'b'\n# isn't a valid literal value.",
        "detail": "packages.pyright-internal.src.tests.samples.literals1",
        "documentation": {}
    },
    {
        "label": "invalidType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals1",
        "description": "packages.pyright-internal.src.tests.samples.literals1",
        "peekOfCode": "invalidType = 3  # type: Literal[3.4]\n# This should generate an error because 2\n# is not a valid literal value.\nmismatch = 2  # type: Literal[3, 4, '5']\na: Literal[3] = -(-(+++3))\nb: Literal[-2] = +-+2\n# This should generate an error because literals are\n# not instantiable.\nc = Literal[1]()",
        "detail": "packages.pyright-internal.src.tests.samples.literals1",
        "documentation": {}
    },
    {
        "label": "mismatch",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals1",
        "description": "packages.pyright-internal.src.tests.samples.literals1",
        "peekOfCode": "mismatch = 2  # type: Literal[3, 4, '5']\na: Literal[3] = -(-(+++3))\nb: Literal[-2] = +-+2\n# This should generate an error because literals are\n# not instantiable.\nc = Literal[1]()",
        "detail": "packages.pyright-internal.src.tests.samples.literals1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals1",
        "description": "packages.pyright-internal.src.tests.samples.literals1",
        "peekOfCode": "c = Literal[1]()",
        "detail": "packages.pyright-internal.src.tests.samples.literals1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literals2",
        "description": "packages.pyright-internal.src.tests.samples.literals2",
        "peekOfCode": "def func1(x: _T) -> _T:\n    ...\ngrade: LetterGrade = func1(\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.literals2",
        "documentation": {}
    },
    {
        "label": "Number",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals2",
        "description": "packages.pyright-internal.src.tests.samples.literals2",
        "peekOfCode": "Number = Literal[\"One\", \"Two\"]\n# This should generate an error because 'Three' is not\n# allowed in the Number type.\nnumbers_mapping: Dict[Number, int] = {\"One\": 1, \"Two\": 2, \"Three\": 3}\n# This should generate an error because 'Three' is not\n# allowed in the Number type.\na: List[Number] = [\"Three\"]\n# This should generate an error because 'Three' is not\n# allowed in the Number type.\nb: Set[Number] = {\"One\", \"Three\"}",
        "detail": "packages.pyright-internal.src.tests.samples.literals2",
        "documentation": {}
    },
    {
        "label": "LetterGrade",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals2",
        "description": "packages.pyright-internal.src.tests.samples.literals2",
        "peekOfCode": "LetterGrade = Literal[\"A\", \"B\", \"C\", \"D\", \"F\"]\n_T = TypeVar(\"_T\")\ndef func1(x: _T) -> _T:\n    ...\ngrade: LetterGrade = func1(\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.literals2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals2",
        "description": "packages.pyright-internal.src.tests.samples.literals2",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(x: _T) -> _T:\n    ...\ngrade: LetterGrade = func1(\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.literals2",
        "documentation": {}
    },
    {
        "label": "SomeEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.literals3",
        "description": "packages.pyright-internal.src.tests.samples.literals3",
        "peekOfCode": "class SomeEnum(Enum):\n    SOME_ENUM_VALUE1 = \"1\"\n    SOME_ENUM_VALUE2 = \"2\"\n    SOME_ENUM_VALUE3 = \"3\"\nclass Foo:\n    pass\n# This should generate an error because Foo is not an\n# allowed literal value.\na: Literal[\"hi\", Foo()]\n# This should generate an error because SomeEnum is not an",
        "detail": "packages.pyright-internal.src.tests.samples.literals3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.literals3",
        "description": "packages.pyright-internal.src.tests.samples.literals3",
        "peekOfCode": "class Foo:\n    pass\n# This should generate an error because Foo is not an\n# allowed literal value.\na: Literal[\"hi\", Foo()]\n# This should generate an error because SomeEnum is not an\n# allowed literal value.\nb: Literal[\"hi\", SomeEnum]\nL2 = Literal[\"hi\", SomeEnum.SOME_ENUM_VALUE1]\ndef foo(a: int) -> L2:",
        "detail": "packages.pyright-internal.src.tests.samples.literals3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literals3",
        "description": "packages.pyright-internal.src.tests.samples.literals3",
        "peekOfCode": "def foo(a: int) -> L2:\n    if a > 3:\n        return \"hi\"\n    elif a > 4:\n        return SomeEnum.SOME_ENUM_VALUE1\n    elif a > 5:\n        # This should generate an error because it's\n        # not part of the L1 literal.\n        return SomeEnum.SOME_ENUM_VALUE2\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.literals3",
        "documentation": {}
    },
    {
        "label": "L2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals3",
        "description": "packages.pyright-internal.src.tests.samples.literals3",
        "peekOfCode": "L2 = Literal[\"hi\", SomeEnum.SOME_ENUM_VALUE1]\ndef foo(a: int) -> L2:\n    if a > 3:\n        return \"hi\"\n    elif a > 4:\n        return SomeEnum.SOME_ENUM_VALUE1\n    elif a > 5:\n        # This should generate an error because it's\n        # not part of the L1 literal.\n        return SomeEnum.SOME_ENUM_VALUE2",
        "detail": "packages.pyright-internal.src.tests.samples.literals3",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "Numeric = Literal[1, \"3.4\"]\nDerivedLiteral1 = Literal[\"a\", Numeric]\nvar1: DerivedLiteral1 = \"3.4\"\n# This should generate an error.\nvar2: DerivedLiteral1 = \"3.5\"\nNotNumeric = Union[Literal[1, 3], int]\n# This should generate an error because NotNumeric\n# isn't a legal literal.\nDerivedLiteral2: Literal[NotNumeric, 3]\nReadOnlyMode = Literal[\"r\", \"r+\"]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "DerivedLiteral1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "DerivedLiteral1 = Literal[\"a\", Numeric]\nvar1: DerivedLiteral1 = \"3.4\"\n# This should generate an error.\nvar2: DerivedLiteral1 = \"3.5\"\nNotNumeric = Union[Literal[1, 3], int]\n# This should generate an error because NotNumeric\n# isn't a legal literal.\nDerivedLiteral2: Literal[NotNumeric, 3]\nReadOnlyMode = Literal[\"r\", \"r+\"]\nWriteAndTruncateMode = Literal[\"w\", \"w+\", \"wt\", \"w+t\"]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "NotNumeric",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "NotNumeric = Union[Literal[1, 3], int]\n# This should generate an error because NotNumeric\n# isn't a legal literal.\nDerivedLiteral2: Literal[NotNumeric, 3]\nReadOnlyMode = Literal[\"r\", \"r+\"]\nWriteAndTruncateMode = Literal[\"w\", \"w+\", \"wt\", \"w+t\"]\nWriteNoTruncateMode = Literal[\"r+\", \"r+t\"]\nAppendMode = Literal[\"a\", \"a+\", \"at\", \"a+t\"]\nAllModes = Literal[ReadOnlyMode, WriteAndTruncateMode, WriteNoTruncateMode, AppendMode]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "ReadOnlyMode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "ReadOnlyMode = Literal[\"r\", \"r+\"]\nWriteAndTruncateMode = Literal[\"w\", \"w+\", \"wt\", \"w+t\"]\nWriteNoTruncateMode = Literal[\"r+\", \"r+t\"]\nAppendMode = Literal[\"a\", \"a+\", \"at\", \"a+t\"]\nAllModes = Literal[ReadOnlyMode, WriteAndTruncateMode, WriteNoTruncateMode, AppendMode]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "WriteAndTruncateMode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "WriteAndTruncateMode = Literal[\"w\", \"w+\", \"wt\", \"w+t\"]\nWriteNoTruncateMode = Literal[\"r+\", \"r+t\"]\nAppendMode = Literal[\"a\", \"a+\", \"at\", \"a+t\"]\nAllModes = Literal[ReadOnlyMode, WriteAndTruncateMode, WriteNoTruncateMode, AppendMode]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "WriteNoTruncateMode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "WriteNoTruncateMode = Literal[\"r+\", \"r+t\"]\nAppendMode = Literal[\"a\", \"a+\", \"at\", \"a+t\"]\nAllModes = Literal[ReadOnlyMode, WriteAndTruncateMode, WriteNoTruncateMode, AppendMode]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "AppendMode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "AppendMode = Literal[\"a\", \"a+\", \"at\", \"a+t\"]\nAllModes = Literal[ReadOnlyMode, WriteAndTruncateMode, WriteNoTruncateMode, AppendMode]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "AllModes",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals5",
        "description": "packages.pyright-internal.src.tests.samples.literals5",
        "peekOfCode": "AllModes = Literal[ReadOnlyMode, WriteAndTruncateMode, WriteNoTruncateMode, AppendMode]",
        "detail": "packages.pyright-internal.src.tests.samples.literals5",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "def func():\n    ...\n# This should generate an error.\nWrong12 = Literal[func]\nsome_variable = \"foo\"\n# This should generate an error.\nWrong13 = Literal[some_variable]\n# This should generate an error.\nvar1: Literal[3 + 4]\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong1 = Literal[3 + 4]\n# This should generate an error.\nWrong2 = Literal[\"foo\".replace(\"o\", \"b\")]\n# This should generate an error.\nWrong3 = Literal[4 + 3j]\n# This should generate an error.\nWrong4 = Literal[-4 + 2j]\n# This should generate an error.\nWrong5 = Literal[(1, \"foo\", \"bar\")]\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong2 = Literal[\"foo\".replace(\"o\", \"b\")]\n# This should generate an error.\nWrong3 = Literal[4 + 3j]\n# This should generate an error.\nWrong4 = Literal[-4 + 2j]\n# This should generate an error.\nWrong5 = Literal[(1, \"foo\", \"bar\")]\n# This should generate an error.\nWrong6 = Literal[{\"a\": \"b\", \"c\": \"d\"}]\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong3 = Literal[4 + 3j]\n# This should generate an error.\nWrong4 = Literal[-4 + 2j]\n# This should generate an error.\nWrong5 = Literal[(1, \"foo\", \"bar\")]\n# This should generate an error.\nWrong6 = Literal[{\"a\": \"b\", \"c\": \"d\"}]\n# This should generate an error.\nWrong7 = Literal[Path(\"abcd\")]\nT = TypeVar(\"T\")",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong4 = Literal[-4 + 2j]\n# This should generate an error.\nWrong5 = Literal[(1, \"foo\", \"bar\")]\n# This should generate an error.\nWrong6 = Literal[{\"a\": \"b\", \"c\": \"d\"}]\n# This should generate an error.\nWrong7 = Literal[Path(\"abcd\")]\nT = TypeVar(\"T\")\n# This should generate an error.\nWrong8 = Literal[T]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong5 = Literal[(1, \"foo\", \"bar\")]\n# This should generate an error.\nWrong6 = Literal[{\"a\": \"b\", \"c\": \"d\"}]\n# This should generate an error.\nWrong7 = Literal[Path(\"abcd\")]\nT = TypeVar(\"T\")\n# This should generate an error.\nWrong8 = Literal[T]\n# This should generate an error.\nWrong9 = Literal[3.14]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong6 = Literal[{\"a\": \"b\", \"c\": \"d\"}]\n# This should generate an error.\nWrong7 = Literal[Path(\"abcd\")]\nT = TypeVar(\"T\")\n# This should generate an error.\nWrong8 = Literal[T]\n# This should generate an error.\nWrong9 = Literal[3.14]\n# This should generate an error.\nWrong10 = Literal[Any]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong7 = Literal[Path(\"abcd\")]\nT = TypeVar(\"T\")\n# This should generate an error.\nWrong8 = Literal[T]\n# This should generate an error.\nWrong9 = Literal[3.14]\n# This should generate an error.\nWrong10 = Literal[Any]\n# This should generate an error.\nWrong11 = Literal[...]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "T = TypeVar(\"T\")\n# This should generate an error.\nWrong8 = Literal[T]\n# This should generate an error.\nWrong9 = Literal[3.14]\n# This should generate an error.\nWrong10 = Literal[Any]\n# This should generate an error.\nWrong11 = Literal[...]\ndef func():",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong8 = Literal[T]\n# This should generate an error.\nWrong9 = Literal[3.14]\n# This should generate an error.\nWrong10 = Literal[Any]\n# This should generate an error.\nWrong11 = Literal[...]\ndef func():\n    ...\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong9",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong9 = Literal[3.14]\n# This should generate an error.\nWrong10 = Literal[Any]\n# This should generate an error.\nWrong11 = Literal[...]\ndef func():\n    ...\n# This should generate an error.\nWrong12 = Literal[func]\nsome_variable = \"foo\"",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong10",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong10 = Literal[Any]\n# This should generate an error.\nWrong11 = Literal[...]\ndef func():\n    ...\n# This should generate an error.\nWrong12 = Literal[func]\nsome_variable = \"foo\"\n# This should generate an error.\nWrong13 = Literal[some_variable]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong11",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong11 = Literal[...]\ndef func():\n    ...\n# This should generate an error.\nWrong12 = Literal[func]\nsome_variable = \"foo\"\n# This should generate an error.\nWrong13 = Literal[some_variable]\n# This should generate an error.\nvar1: Literal[3 + 4]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong12",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong12 = Literal[func]\nsome_variable = \"foo\"\n# This should generate an error.\nWrong13 = Literal[some_variable]\n# This should generate an error.\nvar1: Literal[3 + 4]\n# This should generate an error.\nvar2: Literal[\"foo\".replace(\"o\", \"b\")]\n# This should generate an error.\nvar3: Literal[4 + 3j]",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "some_variable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "some_variable = \"foo\"\n# This should generate an error.\nWrong13 = Literal[some_variable]\n# This should generate an error.\nvar1: Literal[3 + 4]\n# This should generate an error.\nvar2: Literal[\"foo\".replace(\"o\", \"b\")]\n# This should generate an error.\nvar3: Literal[4 + 3j]\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "Wrong13",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals6",
        "description": "packages.pyright-internal.src.tests.samples.literals6",
        "peekOfCode": "Wrong13 = Literal[some_variable]\n# This should generate an error.\nvar1: Literal[3 + 4]\n# This should generate an error.\nvar2: Literal[\"foo\".replace(\"o\", \"b\")]\n# This should generate an error.\nvar3: Literal[4 + 3j]\n# This should generate an error.\nvar4: Literal[-4 + 2j]\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literals6",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "] = 900001231231231456487987456452132130000000000000000000000000000000\ny2: Literal[\n    900001231231231456487987456452132130000000000000000000000000000001\n] = 900001231231231456487987456452132130000000000000000000000000000001\nreveal_type(\n    y2,\n    expected_text=\"Literal[900001231231231456487987456452132130000000000000000000000000000001]\",\n)\ny3 = y2 + 1\nreveal_type(",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "] = 900001231231231456487987456452132130000000000000000000000000000001\nreveal_type(\n    y2,\n    expected_text=\"Literal[900001231231231456487987456452132130000000000000000000000000000001]\",\n)\ny3 = y2 + 1\nreveal_type(\n    y3,\n    expected_text=\"Literal[900001231231231456487987456452132130000000000000000000000000000002]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "y3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "y3 = y2 + 1\nreveal_type(\n    y3,\n    expected_text=\"Literal[900001231231231456487987456452132130000000000000000000000000000002]\",\n)\ny4 = 0xFFFFFFFFFFF123456789456123456789456123456789456123\nreveal_type(\n    y4,\n    expected_text=\"Literal[1606938044258905427252460960878516708721138816242982137979171]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "y4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "y4 = 0xFFFFFFFFFFF123456789456123456789456123456789456123\nreveal_type(\n    y4,\n    expected_text=\"Literal[1606938044258905427252460960878516708721138816242982137979171]\",\n)\ny5 = 0b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\nreveal_type(y5, expected_text=\"Literal[886151997189943915269204706853563050]\")\ny6 = 0xny7 = y6 * y6",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "y5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "y5 = 0b101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\nreveal_type(y5, expected_text=\"Literal[886151997189943915269204706853563050]\")\ny6 = 0xny7 = y6 * y6",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "y6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "y6 = 0xny7 = y6 * y6",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "y7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literals7",
        "description": "packages.pyright-internal.src.tests.samples.literals7",
        "peekOfCode": "y7 = y6 * y6",
        "detail": "packages.pyright-internal.src.tests.samples.literals7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func1(a: str, b: bytes, c: Literal[\"a\"], d: Literal[\"a\", \"b\"], e: Literal[\"a\", 1]):\n    # This should generate an error.\n    v1: LiteralString = a\n    # This should generate an error.\n    v2: LiteralString = b\n    # This should generate an error.\n    v3: LiteralString = b\"\"\n    v4: LiteralString = \"Hello!\"\n    v5: LiteralString = \"Hello \" + \"Bob\"\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func2(a: str):\n    ...\ndef func3(a: LiteralString):\n    func2(a)\n    a.lower()\n    _ = a + \"hi\" + a.capitalize()\ndef func4(a: LiteralString, parts: Iterable[LiteralString]):\n    v1 = \"\".join(parts)\n    reveal_type(v1, expected_text=\"LiteralString\")\n    v2 = \"\".join([a, a])",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func3(a: LiteralString):\n    func2(a)\n    a.lower()\n    _ = a + \"hi\" + a.capitalize()\ndef func4(a: LiteralString, parts: Iterable[LiteralString]):\n    v1 = \"\".join(parts)\n    reveal_type(v1, expected_text=\"LiteralString\")\n    v2 = \"\".join([a, a])\n    reveal_type(v2, expected_text=\"LiteralString\")\ndef func5(",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func4(a: LiteralString, parts: Iterable[LiteralString]):\n    v1 = \"\".join(parts)\n    reveal_type(v1, expected_text=\"LiteralString\")\n    v2 = \"\".join([a, a])\n    reveal_type(v2, expected_text=\"LiteralString\")\ndef func5(\n    a: LiteralString, b: str, parts: Iterable[tuple[LiteralString, LiteralString]]\n):\n    v1: LiteralString = f\"{a} {a}\"\n    v2: LiteralString = f\"{a}\" f\"{a}\"",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func5(\n    a: LiteralString, b: str, parts: Iterable[tuple[LiteralString, LiteralString]]\n):\n    v1: LiteralString = f\"{a} {a}\"\n    v2: LiteralString = f\"{a}\" f\"{a}\"\n    v3: LiteralString = f\"{'xxx'}\" f\"{'xxx'}\"\n    # This should generate an error because \"b\" is not literal.\n    v4: LiteralString = f\"{a} {b}\"\ndef func6(a: LiteralString):\n    v1 = a.capitalize()",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func6(a: LiteralString):\n    v1 = a.capitalize()\n    v2 = a[0]\n    a = \"hi\"\n    v3: list[str] = \"1 2 3\".split(\" \")\ndef func7(a: Literal[\"a\", \"b\"], b: Literal[\"a\", 1]):\n    v1: LiteralString = f\"{a}\"\n    # This should generate an error because \"b\" is not a string literal.\n    v2: LiteralString = f\"{b}\"",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString1",
        "description": "packages.pyright-internal.src.tests.samples.literalString1",
        "peekOfCode": "def func7(a: Literal[\"a\", \"b\"], b: Literal[\"a\", 1]):\n    v1: LiteralString = f\"{a}\"\n    # This should generate an error because \"b\" is not a string literal.\n    v2: LiteralString = f\"{b}\"",
        "detail": "packages.pyright-internal.src.tests.samples.literalString1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString2",
        "description": "packages.pyright-internal.src.tests.samples.literalString2",
        "peekOfCode": "class Foo(Generic[L]):\n    def __init__(self, value: L) -> None:\n        self.value = value\nfoo = Foo(\"hmm\")",
        "detail": "packages.pyright-internal.src.tests.samples.literalString2",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString2",
        "description": "packages.pyright-internal.src.tests.samples.literalString2",
        "peekOfCode": "L = TypeVar(\"L\", bound=LiteralString)\nclass Foo(Generic[L]):\n    def __init__(self, value: L) -> None:\n        self.value = value\nfoo = Foo(\"hmm\")",
        "detail": "packages.pyright-internal.src.tests.samples.literalString2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.literalString2",
        "description": "packages.pyright-internal.src.tests.samples.literalString2",
        "peekOfCode": "foo = Foo(\"hmm\")",
        "detail": "packages.pyright-internal.src.tests.samples.literalString2",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops1",
        "description": "packages.pyright-internal.src.tests.samples.loops1",
        "peekOfCode": "def bar(a: list):\n    pass\ndef func1():\n    data = None\n    for x in [2, 3]:\n        if not data:\n            data = [1, 2]\n        else:\n            # This should not generate an error because the\n            # type checker should be able to determine that",
        "detail": "packages.pyright-internal.src.tests.samples.loops1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops1",
        "description": "packages.pyright-internal.src.tests.samples.loops1",
        "peekOfCode": "def func1():\n    data = None\n    for x in [2, 3]:\n        if not data:\n            data = [1, 2]\n        else:\n            # This should not generate an error because the\n            # type checker should be able to determine that\n            # data must be a list at this point in the code.\n            bar(data)",
        "detail": "packages.pyright-internal.src.tests.samples.loops1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops1",
        "description": "packages.pyright-internal.src.tests.samples.loops1",
        "peekOfCode": "def func2():\n    data = None\n    while x:\n        if not data:\n            data = [1, 2]\n        else:\n            # This should not generate an error because the\n            # type checker should be able to determine that\n            # data must be a list at this point in the code.\n            bar(data)",
        "detail": "packages.pyright-internal.src.tests.samples.loops1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.loops1",
        "description": "packages.pyright-internal.src.tests.samples.loops1",
        "peekOfCode": "x = 20 + 20\ndef func2():\n    data = None\n    while x:\n        if not data:\n            data = [1, 2]\n        else:\n            # This should not generate an error because the\n            # type checker should be able to determine that\n            # data must be a list at this point in the code.",
        "detail": "packages.pyright-internal.src.tests.samples.loops1",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops10",
        "description": "packages.pyright-internal.src.tests.samples.loops10",
        "peekOfCode": "def fibonacci():\n    a, b = 1, 1\n    while True:\n        yield a\n        a, b = b, a + b\n        reveal_type(a, expected_text=\"int\")\n        reveal_type(b, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops10",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops12",
        "description": "packages.pyright-internal.src.tests.samples.loops12",
        "peekOfCode": "class Foo:\n    def non_property(self) -> int:\n        ...\n    def do_stuff(self, x: int | None):\n        while True:\n            if x is not None:\n                a = x\n            else:\n                a = self.non_property\n            # This should generate an error because the type of \"a\"",
        "detail": "packages.pyright-internal.src.tests.samples.loops12",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops14",
        "description": "packages.pyright-internal.src.tests.samples.loops14",
        "peekOfCode": "class State:\n    def confirm_dialog(self) -> Union[\"State\", bool]:\n        return False\nstate = State()\nreveal_type(state, expected_text=\"State\")\nfor _ in range(1):\n    result = state.confirm_dialog()\n    if isinstance(result, State):\n        reveal_type(state, expected_text=\"State\")\n        reveal_type(result, expected_text=\"State\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops14",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.loops14",
        "description": "packages.pyright-internal.src.tests.samples.loops14",
        "peekOfCode": "state = State()\nreveal_type(state, expected_text=\"State\")\nfor _ in range(1):\n    result = state.confirm_dialog()\n    if isinstance(result, State):\n        reveal_type(state, expected_text=\"State\")\n        reveal_type(result, expected_text=\"State\")\n        state = result\n    else:\n        reveal_type(state, expected_text=\"State\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops14",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops15",
        "description": "packages.pyright-internal.src.tests.samples.loops15",
        "peekOfCode": "def func1(boards: list[list[list[int]]]):\n    for _ in [0]:\n        remain = [[set(line) for line in zip(*b)] for b in boards]\n        boards = [b for b, u in zip(boards, remain) if all(u)]\ndef func2(boards: list[list[list[int]]]):\n    for _ in [1]:\n        remain = [[set(line) for line in b] for b in boards]\n        boards = [b for b, u in zip(boards, remain) if all(u)]\ndef func3(boards: list[list[list[int]]]):\n    for _ in [1]:",
        "detail": "packages.pyright-internal.src.tests.samples.loops15",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops15",
        "description": "packages.pyright-internal.src.tests.samples.loops15",
        "peekOfCode": "def func2(boards: list[list[list[int]]]):\n    for _ in [1]:\n        remain = [[set(line) for line in b] for b in boards]\n        boards = [b for b, u in zip(boards, remain) if all(u)]\ndef func3(boards: list[list[list[int]]]):\n    for _ in [1]:\n        remain = [[set(line) for line in (*b, *zip(*b))] for b in boards]\n        boards = [b for b, u in zip(boards, remain) if all(u)]",
        "detail": "packages.pyright-internal.src.tests.samples.loops15",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops15",
        "description": "packages.pyright-internal.src.tests.samples.loops15",
        "peekOfCode": "def func3(boards: list[list[list[int]]]):\n    for _ in [1]:\n        remain = [[set(line) for line in (*b, *zip(*b))] for b in boards]\n        boards = [b for b, u in zip(boards, remain) if all(u)]",
        "detail": "packages.pyright-internal.src.tests.samples.loops15",
        "documentation": {}
    },
    {
        "label": "get_ipv4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops16",
        "description": "packages.pyright-internal.src.tests.samples.loops16",
        "peekOfCode": "def get_ipv4():\n    try:\n        while 1:\n            ip1, ip2, ip3, ip4 = (\n                randint(1, 255),\n                randint(1, 255),\n                randint(1, 255),\n                randint(1, 255),\n            )\n            if ip1 == 127:",
        "detail": "packages.pyright-internal.src.tests.samples.loops16",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops17",
        "description": "packages.pyright-internal.src.tests.samples.loops17",
        "peekOfCode": "def f(x):\n    e = 0\n    for _ in [0]:\n        e += x\n    reveal_type(e, expected_text=\"Unknown | Literal[0]\")\n    return e",
        "detail": "packages.pyright-internal.src.tests.samples.loops17",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops18",
        "description": "packages.pyright-internal.src.tests.samples.loops18",
        "peekOfCode": "class A:\n    parent: Self | None\nclass B:\n    ...\ndef foo(v: A | B | None) -> Generator[A, None, None]:\n    reveal_type(v)\n    if not isinstance(v, B):\n        reveal_type(v, expected_text=\"A | None\")\n        while v is not None:\n            reveal_type(v, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops18",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops18",
        "description": "packages.pyright-internal.src.tests.samples.loops18",
        "peekOfCode": "class B:\n    ...\ndef foo(v: A | B | None) -> Generator[A, None, None]:\n    reveal_type(v)\n    if not isinstance(v, B):\n        reveal_type(v, expected_text=\"A | None\")\n        while v is not None:\n            reveal_type(v, expected_text=\"A\")\n            yield v\n            v = v.parent",
        "detail": "packages.pyright-internal.src.tests.samples.loops18",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops18",
        "description": "packages.pyright-internal.src.tests.samples.loops18",
        "peekOfCode": "def foo(v: A | B | None) -> Generator[A, None, None]:\n    reveal_type(v)\n    if not isinstance(v, B):\n        reveal_type(v, expected_text=\"A | None\")\n        while v is not None:\n            reveal_type(v, expected_text=\"A\")\n            yield v\n            v = v.parent\n            reveal_type(v, expected_text=\"A | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops18",
        "documentation": {}
    },
    {
        "label": "Results",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops19",
        "description": "packages.pyright-internal.src.tests.samples.loops19",
        "peekOfCode": "class Results:\n    zzz: int\nclass Foo:\n    yyy: int\n    def method1(self, results: list[Results]):\n        abc = None\n        for result in results:\n            if abc is not None and abc.zzz < result.zzz:\n                abc = result",
        "detail": "packages.pyright-internal.src.tests.samples.loops19",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops19",
        "description": "packages.pyright-internal.src.tests.samples.loops19",
        "peekOfCode": "class Foo:\n    yyy: int\n    def method1(self, results: list[Results]):\n        abc = None\n        for result in results:\n            if abc is not None and abc.zzz < result.zzz:\n                abc = result",
        "detail": "packages.pyright-internal.src.tests.samples.loops19",
        "documentation": {}
    },
    {
        "label": "needs_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops2",
        "description": "packages.pyright-internal.src.tests.samples.loops2",
        "peekOfCode": "def needs_str(a: str) -> Tuple[str, str]:\n    ...\ndef xxx():\n    v1 = \"\"\n    v2 = \"\"\n    v3 = \"\"\n    v4 = None\n    _ = v1\n    v3, _ = v3, v2\n    v4 = v3",
        "detail": "packages.pyright-internal.src.tests.samples.loops2",
        "documentation": {}
    },
    {
        "label": "xxx",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops2",
        "description": "packages.pyright-internal.src.tests.samples.loops2",
        "peekOfCode": "def xxx():\n    v1 = \"\"\n    v2 = \"\"\n    v3 = \"\"\n    v4 = None\n    _ = v1\n    v3, _ = v3, v2\n    v4 = v3\n    for _ in range(1):\n        assert v4 is not None",
        "detail": "packages.pyright-internal.src.tests.samples.loops2",
        "documentation": {}
    },
    {
        "label": "linspace",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops20",
        "description": "packages.pyright-internal.src.tests.samples.loops20",
        "peekOfCode": "def linspace(start: float, stop: float, num: int = 50):\n    if num == 1:\n        yield stop\n        return\n    step = (stop - start) / (num - 1)\n    for i in range(num):\n        yield start + step * i\ndef find_zero(f: Callable[[float], float]) -> float:\n    x_0 = 0\n    x_1 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.loops20",
        "documentation": {}
    },
    {
        "label": "find_zero",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops20",
        "description": "packages.pyright-internal.src.tests.samples.loops20",
        "peekOfCode": "def find_zero(f: Callable[[float], float]) -> float:\n    x_0 = 0\n    x_1 = 0\n    f_x_0 = 0\n    f_x_1 = 0\n    while True:\n        if not(isnan(f_x_0)) and isnan(f_x_1):\n            x_tests = list(linspace(x_1, x_0, 25))\n            f_x_tests = (f(x) for x in x_tests)\n            for x, f_x in zip(x_tests, f_x_tests):",
        "detail": "packages.pyright-internal.src.tests.samples.loops20",
        "documentation": {}
    },
    {
        "label": "find_min",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops21",
        "description": "packages.pyright-internal.src.tests.samples.loops21",
        "peekOfCode": "def find_min(nums: list[int]) -> int:\n    low = 0\n    high = len(nums) - 1\n    while low < high:\n        mid = (low + high) // 2\n        if nums[mid] > nums[high]:\n            low = mid + 1\n        elif nums[mid] < nums[high]:\n            high = mid\n        else:",
        "detail": "packages.pyright-internal.src.tests.samples.loops21",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops22",
        "description": "packages.pyright-internal.src.tests.samples.loops22",
        "peekOfCode": "class ListNode:\n    def __init__(self, val: int = 0, next: ListNode | None = None):\n        self.val = val\n        self.next = next\ndef has_cycle(head: ListNode | None) -> bool:\n    fast_head = head\n    while head and fast_head:\n        fast_head = fast_head.next\n        if fast_head:\n            fast_head = fast_head.next",
        "detail": "packages.pyright-internal.src.tests.samples.loops22",
        "documentation": {}
    },
    {
        "label": "has_cycle",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops22",
        "description": "packages.pyright-internal.src.tests.samples.loops22",
        "peekOfCode": "def has_cycle(head: ListNode | None) -> bool:\n    fast_head = head\n    while head and fast_head:\n        fast_head = fast_head.next\n        if fast_head:\n            fast_head = fast_head.next\n    return False",
        "detail": "packages.pyright-internal.src.tests.samples.loops22",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops23",
        "description": "packages.pyright-internal.src.tests.samples.loops23",
        "peekOfCode": "def func():\n    c: Any = None\n    while True:\n        if a:  # type: ignore\n            if c:\n                pass\n        a = c == c.foo",
        "detail": "packages.pyright-internal.src.tests.samples.loops23",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.loops24",
        "description": "packages.pyright-internal.src.tests.samples.loops24",
        "peekOfCode": "var = 0\nwhile True:\n    if var and True:\n        break\n    else:\n        var, _ = var + 1, 0",
        "detail": "packages.pyright-internal.src.tests.samples.loops24",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops26",
        "description": "packages.pyright-internal.src.tests.samples.loops26",
        "peekOfCode": "def func(call: Callable[[], None] | None):\n    while True:\n        while True:\n            if call is None or call():\n                break",
        "detail": "packages.pyright-internal.src.tests.samples.loops26",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops27",
        "description": "packages.pyright-internal.src.tests.samples.loops27",
        "peekOfCode": "def func1(nums: list[int], target: int) -> None:\n    var = nums[0]\n    while True:\n        mid = var\n        if nums[mid] == target:\n            return\n        if var:\n            var = mid\n        else:\n            var = mid",
        "detail": "packages.pyright-internal.src.tests.samples.loops27",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops28",
        "description": "packages.pyright-internal.src.tests.samples.loops28",
        "peekOfCode": "class A:\n    def __init__(self):\n        self.pending: Optional[Dict[Future[Any], int]]\n        self.foo: bool\n    def poll(self):\n        assert self.pending is not None\n        while True:\n            if self.pending:\n                pass\n            ready, _ = futures.wait(self.pending)",
        "detail": "packages.pyright-internal.src.tests.samples.loops28",
        "documentation": {}
    },
    {
        "label": "MyEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops29",
        "description": "packages.pyright-internal.src.tests.samples.loops29",
        "peekOfCode": "class MyEnum(Enum):\n    A = 0\ndef func1(vals: list[MyEnum]):\n    for val1 in vals:\n        val2: MyEnum = val1\n        if val2 == MyEnum.A:\n            pass",
        "detail": "packages.pyright-internal.src.tests.samples.loops29",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops29",
        "description": "packages.pyright-internal.src.tests.samples.loops29",
        "peekOfCode": "def func1(vals: list[MyEnum]):\n    for val1 in vals:\n        val2: MyEnum = val1\n        if val2 == MyEnum.A:\n            pass",
        "detail": "packages.pyright-internal.src.tests.samples.loops29",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.loops5",
        "description": "packages.pyright-internal.src.tests.samples.loops5",
        "peekOfCode": "test = {\"key\": \"value\"}\nwhile True:\n    a = test\n    reveal_type(a, expected_text=\"dict[str, str]\")\n    test = a.copy()\n    reveal_type(test, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops6",
        "description": "packages.pyright-internal.src.tests.samples.loops6",
        "peekOfCode": "class Foo:\n    def new_from_dict(self, param1):\n        return Foo()\n    def method1(self):\n        return {}, {}\n    def method3(self, param3):\n        while True:\n            for key in param3.keys():\n                foo1 = self.new_from_dict({key: None})\n                var1, var2 = foo1.method1()",
        "detail": "packages.pyright-internal.src.tests.samples.loops6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops7",
        "description": "packages.pyright-internal.src.tests.samples.loops7",
        "peekOfCode": "class Foo:\n    name: Optional[str]\n    def correct(self):\n        if self.name is not None:\n            for _ in []:\n                self.name = self.name.replace(\"\", \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.loops7",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops8",
        "description": "packages.pyright-internal.src.tests.samples.loops8",
        "peekOfCode": "def test(parts: Iterable[str]):\n    x: list[str] = []\n    ns = \"\"\n    for part in parts:\n        if ns:\n            ns += \"a\"\n        else:\n            ns += part\n        x.append(ns)",
        "detail": "packages.pyright-internal.src.tests.samples.loops8",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops9",
        "description": "packages.pyright-internal.src.tests.samples.loops9",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\ndef foo(v: A, s: Dict[B, A]) -> object:\n    if not isinstance(v, B):\n        return v\n    u = s.get(v)\n    while isinstance(u, B):\n        v = u",
        "detail": "packages.pyright-internal.src.tests.samples.loops9",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.loops9",
        "description": "packages.pyright-internal.src.tests.samples.loops9",
        "peekOfCode": "class B(A):\n    pass\ndef foo(v: A, s: Dict[B, A]) -> object:\n    if not isinstance(v, B):\n        return v\n    u = s.get(v)\n    while isinstance(u, B):\n        v = u\n        u = s.get(v)\n    x = v if u is None else u",
        "detail": "packages.pyright-internal.src.tests.samples.loops9",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.loops9",
        "description": "packages.pyright-internal.src.tests.samples.loops9",
        "peekOfCode": "def foo(v: A, s: Dict[B, A]) -> object:\n    if not isinstance(v, B):\n        return v\n    u = s.get(v)\n    while isinstance(u, B):\n        v = u\n        u = s.get(v)\n    x = v if u is None else u\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.loops9",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match1",
        "description": "packages.pyright-internal.src.tests.samples.match1",
        "peekOfCode": "class Foo:\n    x: int\nmatch (1, ):\n    case a1, b1 if True:\n        pass\n    case (a2, b2):\n        pass\n    case [a3, b3]:\n        pass\n    case () | []:",
        "detail": "packages.pyright-internal.src.tests.samples.match1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match1",
        "description": "packages.pyright-internal.src.tests.samples.match1",
        "peekOfCode": "def func1():\n    match = Foo()\n    # This should be treated as an expression statement, not a match statement.\n    match.x\ndef func2():\n    match = [3]\n    # This should be treated as an expression statement, not a match statement.\n    match[0]\n    match [0]:\n        case _:",
        "detail": "packages.pyright-internal.src.tests.samples.match1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match1",
        "description": "packages.pyright-internal.src.tests.samples.match1",
        "peekOfCode": "def func2():\n    match = [3]\n    # This should be treated as an expression statement, not a match statement.\n    match[0]\n    match [0]:\n        case _:\n            pass\ndef func3():\n    def match(a: int): ...\n    # This should be treated as a call statement.",
        "detail": "packages.pyright-internal.src.tests.samples.match1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match1",
        "description": "packages.pyright-internal.src.tests.samples.match1",
        "peekOfCode": "def func3():\n    def match(a: int): ...\n    # This should be treated as a call statement.\n    match(0)\n    match (0):\n        case _:\n            pass\ndef func4():\n    match 1, 2, \"3\":\n        case _:",
        "detail": "packages.pyright-internal.src.tests.samples.match1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match1",
        "description": "packages.pyright-internal.src.tests.samples.match1",
        "peekOfCode": "def func4():\n    match 1, 2, \"3\":\n        case _:\n            pass\ndef func5(match: Any):\n    # This should be treated as a list, not a match statement.\n    match[2:8, 2:8] = 0",
        "detail": "packages.pyright-internal.src.tests.samples.match1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match1",
        "description": "packages.pyright-internal.src.tests.samples.match1",
        "peekOfCode": "def func5(match: Any):\n    # This should be treated as a list, not a match statement.\n    match[2:8, 2:8] = 0",
        "detail": "packages.pyright-internal.src.tests.samples.match1",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "class Color(Enum):\n    red = 0\n    green= 1\n    blue = 2\ndef func6(subj: Color):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:\n        case Color.red:\n            pass\n        case Color.green:",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "class ClassA:\n    def method1(self) -> str:\n        match self:\n            case ClassA():\n                return \"\"\ndef func7() -> int:\n    match [10]:\n        case [*values]:\n            return values[0]",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func1(subj: Literal[\"a\", \"b\"], cond: bool):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:\n        case \"a\":\n            pass\n        case \"b\" if cond:\n            pass\ndef func2(subj: object):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func2(subj: object):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:\n        case int():\n            pass\ndef func3(subj: object):\n    match subj:\n        case object():\n            pass\ndef func4(subj: tuple[str] | tuple[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func3(subj: object):\n    match subj:\n        case object():\n            pass\ndef func4(subj: tuple[str] | tuple[int]):\n    match subj[0]:\n        case str():\n            pass\n        case int():\n            pass",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func4(subj: tuple[str] | tuple[int]):\n    match subj[0]:\n        case str():\n            pass\n        case int():\n            pass\ndef func5(subj: Literal[1, 2, 3]):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:\n        case 1 | 2:",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func5(subj: Literal[1, 2, 3]):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:\n        case 1 | 2:\n            pass\nclass Color(Enum):\n    red = 0\n    green= 1\n    blue = 2\ndef func6(subj: Color):",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func6(subj: Color):\n    # This should generate an error if reportMatchNotExhaustive is enabled.\n    match subj:\n        case Color.red:\n            pass\n        case Color.green:\n            pass\nclass ClassA:\n    def method1(self) -> str:\n        match self:",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match10",
        "description": "packages.pyright-internal.src.tests.samples.match10",
        "peekOfCode": "def func7() -> int:\n    match [10]:\n        case [*values]:\n            return values[0]",
        "detail": "packages.pyright-internal.src.tests.samples.match10",
        "documentation": {}
    },
    {
        "label": "SupportsLessThan",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "class SupportsLessThan(Protocol):\n    def __lt__(self, __other: Any) -> bool: ...\n    def __le__(self, __other: Any) -> bool: ...\nSupportsLessThanT = TypeVar(\"SupportsLessThanT\", bound=SupportsLessThan)\ndef sort(seq: List[SupportsLessThanT]) -> List[SupportsLessThanT]:\n    match seq:\n        case [] | [_]:\n            reveal_type(seq, expected_text=\"List[SupportsLessThanT@sort]\")\n            return seq\n        case [x, y] if x <= y:",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "class A(Generic[_T]):\n    a: _T\nclass B: ...\nclass C: ...\nAAlias = A\nAInt = A[int]\nBOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "class B: ...\nclass C: ...\nAAlias = A\nAInt = A[int]\nBOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):\n            pass\n        # This should generate an error because it raises an",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "class C: ...\nAAlias = A\nAInt = A[int]\nBOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):\n            pass\n        # This should generate an error because it raises an\n        # exception at runtime.",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_unknown",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_unknown(value_to_match):\n    match value_to_match:\n        case a1, a2:\n            reveal_type(a1, expected_text=\"Unknown\")\n            reveal_type(a2, expected_text=\"Unknown\")\n        case *b1, b2:\n            reveal_type(b1, expected_text=\"list[Unknown]\")\n            reveal_type(b2, expected_text=\"Unknown\")\n        case c1, *c2:\n            reveal_type(c1, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_list(value_to_match: List[str]):\n    match value_to_match:\n        case a1, a2:\n            reveal_type(a1, expected_text=\"str\")\n            reveal_type(a2, expected_text=\"str\")\n            reveal_type(value_to_match, expected_text=\"List[str]\")\n        case *b1, b2:\n            reveal_type(b1, expected_text=\"list[str]\")\n            reveal_type(b2, expected_text=\"str\")\n            reveal_type(value_to_match, expected_text=\"List[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_open_ended_tuple",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_open_ended_tuple(value_to_match: Tuple[str, ...]):\n    match value_to_match:\n        case a1, a2:\n            reveal_type(a1, expected_text=\"str\")\n            reveal_type(a2, expected_text=\"str\")\n            reveal_type(value_to_match, expected_text=\"tuple[str, str]\")\n        case *b1, b2:\n            reveal_type(b1, expected_text=\"list[str]\")\n            reveal_type(b2, expected_text=\"str\")\n            reveal_type(value_to_match, expected_text=\"Tuple[str, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_definite_tuple",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_definite_tuple(value_to_match: Tuple[int, str, float, complex]):\n    match value_to_match:\n        case a1, a2, a3, a4 if value_to_match[0] == 0:\n            reveal_type(a1, expected_text=\"int\")\n            reveal_type(a2, expected_text=\"str\")\n            reveal_type(a3, expected_text=\"float\")\n            reveal_type(a4, expected_text=\"complex\")\n            reveal_type(value_to_match, expected_text=\"tuple[int, str, float, complex]\")\n        case *b1, b2 if value_to_match[0] == 0:\n            reveal_type(b1, expected_text=\"list[int | str | float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_union",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_union(value_to_match: Union[Tuple[complex, complex], Tuple[int, str, float, complex], List[str], Tuple[float, ...], Any]):\n    match value_to_match:\n        case a1, a2, a3, a4 if value_to_match[0] == 0:\n            reveal_type(a1, expected_text=\"int | str | float | Any\")\n            reveal_type(a2, expected_text=\"str | float | Any\")\n            reveal_type(a3, expected_text=\"float | str | Any\")\n            reveal_type(a4, expected_text=\"complex | str | float | Any\")\n            reveal_type(value_to_match, expected_text=\"tuple[int, str, float, complex] | List[str] | tuple[float, float, float, float] | Any\")\n        case *b1, b2 if value_to_match[0] == 0:\n            reveal_type(b1, expected_text=\"list[complex] | list[int | str | float] | list[str] | list[float] | list[Any]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "sort",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def sort(seq: List[SupportsLessThanT]) -> List[SupportsLessThanT]:\n    match seq:\n        case [] | [_]:\n            reveal_type(seq, expected_text=\"List[SupportsLessThanT@sort]\")\n            return seq\n        case [x, y] if x <= y:\n            reveal_type(seq, expected_text=\"List[SupportsLessThanT@sort]\")\n            return seq\n        case [x, y]:\n            reveal_type(seq, expected_text=\"List[SupportsLessThanT@sort]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_exceptions",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_exceptions(seq: Union[str, bytes, bytearray]):\n    match seq:\n        case [x, y]:\n            reveal_type(x, expected_text=\"Never\")\n            reveal_type(y, expected_text=\"Never\")\n            return seq\ndef test_object(seq: object):\n    match seq:\n        case (a1, a2) as a3:\n            reveal_type(a1, expected_text=\"object\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_object",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_object(seq: object):\n    match seq:\n        case (a1, a2) as a3:\n            reveal_type(a1, expected_text=\"object\")\n            reveal_type(a2, expected_text=\"object\")\n            reveal_type(a3, expected_text=\"Sequence[object]\")\n            reveal_type(seq, expected_text=\"Sequence[object]\")\n        case (*b1, b2) as b3:\n            reveal_type(b1, expected_text=\"list[object]\")\n            reveal_type(b2, expected_text=\"object\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_illegal_type_alias",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):\n            pass\n        # This should generate an error because it raises an\n        # exception at runtime.\n        case AInt(a=i):\n            pass\n        # This should generate an error because it raises an\n        # exception at runtime.",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_negative_narrowing1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_negative_narrowing1(subj: tuple[Literal[0]] | tuple[Literal[1]]):\n    match subj:\n        case (1,*a) | (*a):\n            reveal_type(subj, expected_text=\"tuple[Literal[1]] | tuple[Literal[0]]\")\n            reveal_type(a, expected_text=\"list[int]\")\n        case b:\n            reveal_type(subj, expected_text=\"Never\")\n            reveal_type(b, expected_text=\"Never\")\ndef test_negative_narrowing2(subj: tuple[int, ...]):\n    match subj:",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_negative_narrowing2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_negative_narrowing2(subj: tuple[int, ...]):\n    match subj:\n        case (1,*a):\n            reveal_type(subj, expected_text=\"tuple[int, ...]\")\n            reveal_type(a, expected_text=\"list[int]\")\n        case (b,):\n            reveal_type(subj, expected_text=\"tuple[int]\")\n            reveal_type(b, expected_text=\"int\")\n        case (*c,):\n            reveal_type(subj, expected_text=\"tuple[int, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "test_negative_narrowing3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "def test_negative_narrowing3(subj: tuple[Any, Any]):\n    match subj:\n        case (a, b):\n            reveal_type(a, expected_text=\"Any\")\n            reveal_type(b, expected_text=\"Any\")\n        case x:\n            reveal_type(x, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "SupportsLessThanT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "SupportsLessThanT = TypeVar(\"SupportsLessThanT\", bound=SupportsLessThan)\ndef sort(seq: List[SupportsLessThanT]) -> List[SupportsLessThanT]:\n    match seq:\n        case [] | [_]:\n            reveal_type(seq, expected_text=\"List[SupportsLessThanT@sort]\")\n            return seq\n        case [x, y] if x <= y:\n            reveal_type(seq, expected_text=\"List[SupportsLessThanT@sort]\")\n            return seq\n        case [x, y]:",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "_T = TypeVar('_T')\nclass A(Generic[_T]):\n    a: _T\nclass B: ...\nclass C: ...\nAAlias = A\nAInt = A[int]\nBOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "AAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "AAlias = A\nAInt = A[int]\nBOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):\n            pass\n        # This should generate an error because it raises an\n        # exception at runtime.\n        case AInt(a=i):",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "AInt",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "AInt = A[int]\nBOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):\n            pass\n        # This should generate an error because it raises an\n        # exception at runtime.\n        case AInt(a=i):\n            pass",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "BOrC",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match2",
        "description": "packages.pyright-internal.src.tests.samples.match2",
        "peekOfCode": "BOrC = B | C\ndef test_illegal_type_alias(m: object):\n    match m:\n        case AAlias(a=i):\n            pass\n        # This should generate an error because it raises an\n        # exception at runtime.\n        case AInt(a=i):\n            pass\n        # This should generate an error because it raises an",
        "detail": "packages.pyright-internal.src.tests.samples.match2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class ClassA:\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: int\n    attr_b: str\nclass ClassB(Generic[T]):\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: T\n    attr_b: str\nclass ClassC:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class ClassB(Generic[T]):\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: T\n    attr_b: str\nclass ClassC:\n    ...\nclass ClassD(ClassC):\n    ...\ndef test_unknown(value_to_match):\n    match value_to_match:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class ClassC:\n    ...\nclass ClassD(ClassC):\n    ...\ndef test_unknown(value_to_match):\n    match value_to_match:\n        case ClassA(attr_a=a2) as a1:\n            reveal_type(a1, expected_text=\"ClassA\")\n            reveal_type(a2, expected_text=\"int\")\n            reveal_type(value_to_match, expected_text=\"ClassA\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class ClassD(ClassC):\n    ...\ndef test_unknown(value_to_match):\n    match value_to_match:\n        case ClassA(attr_a=a2) as a1:\n            reveal_type(a1, expected_text=\"ClassA\")\n            reveal_type(a2, expected_text=\"int\")\n            reveal_type(value_to_match, expected_text=\"ClassA\")\n        # This should generate an error because foo isn't instantiable.\n        case foo() as a3:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class Point(Generic[T]):\n    __match_args__ = (\"x\", \"y\")\n    x: T\n    y: T\ndef func1(points: list[Point[float] | Point[complex]]):\n    match points:\n        case [] as a1:\n            reveal_type(a1, expected_text=\"list[Point[float] | Point[complex]]\")\n            reveal_type(points, expected_text=\"list[Point[float] | Point[complex]]\")\n        case [Point(0, 0) as b1]:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "Dataclass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class Dataclass1:\n    val1: int\n    val2: str = field(init=False)\n    val3: complex\n@dataclass\nclass Dataclass2:\n    val1: int\n    val2: str\n    val3: float\ndef func5(subj: object):",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "Dataclass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class Dataclass2:\n    val1: int\n    val2: str\n    val3: float\ndef func5(subj: object):\n    match subj:\n        case Dataclass1(a, b):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"complex\")\n            reveal_type(subj, expected_text=\"Dataclass1\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class Parent(Generic[T]):\n    ...\nclass Child1(Parent[T]):\n    ...\nclass Child2(Parent[T], Generic[T, T2]):\n    ...\ndef func8(subj: Parent[int]):\n    match subj:\n        case Child1() as a1:\n            reveal_type(a1, expected_text=\"Child1[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class Child1(Parent[T]):\n    ...\nclass Child2(Parent[T], Generic[T, T2]):\n    ...\ndef func8(subj: Parent[int]):\n    match subj:\n        case Child1() as a1:\n            reveal_type(a1, expected_text=\"Child1[int]\")\n            reveal_type(subj, expected_text=\"Child1[int]\")\n        case Child2() as b1:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class Child2(Parent[T], Generic[T, T2]):\n    ...\ndef func8(subj: Parent[int]):\n    match subj:\n        case Child1() as a1:\n            reveal_type(a1, expected_text=\"Child1[int]\")\n            reveal_type(subj, expected_text=\"Child1[int]\")\n        case Child2() as b1:\n            reveal_type(b1, expected_text=\"Child2[int, Unknown]\")\n            reveal_type(subj, expected_text=\"Child2[int, Unknown]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "ClassE",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class ClassE(Generic[T]):\n    __match_args__ = (\"x\",)\n    x: list[T]\nclass ClassF(ClassE[T]):\n    pass\ndef func14(subj: ClassE[T]) -> T | None:\n    match subj:\n        case ClassF(a):\n            reveal_type(subj, expected_text=\"ClassF[T@func14]\")\n            reveal_type(a, expected_text=\"list[T@func14]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "ClassF",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "class ClassF(ClassE[T]):\n    pass\ndef func14(subj: ClassE[T]) -> T | None:\n    match subj:\n        case ClassF(a):\n            reveal_type(subj, expected_text=\"ClassF[T@func14]\")\n            reveal_type(a, expected_text=\"list[T@func14]\")\n            return a[0]",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "test_unknown",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def test_unknown(value_to_match):\n    match value_to_match:\n        case ClassA(attr_a=a2) as a1:\n            reveal_type(a1, expected_text=\"ClassA\")\n            reveal_type(a2, expected_text=\"int\")\n            reveal_type(value_to_match, expected_text=\"ClassA\")\n        # This should generate an error because foo isn't instantiable.\n        case foo() as a3:\n            pass\ndef test_any(value_to_match: Any):",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "test_any",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def test_any(value_to_match: Any):\n    match value_to_match:\n        case list() as a1:\n            reveal_type(a1, expected_text=\"list[Unknown]\")\n            reveal_type(value_to_match, expected_text=\"list[Unknown]\")\ndef test_custom_type(value_to_match: ClassA | ClassB[int] | ClassB[str] | ClassC):\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"Never\")\n            reveal_type(value_to_match, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "test_custom_type",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def test_custom_type(value_to_match: ClassA | ClassB[int] | ClassB[str] | ClassC):\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"Never\")\n            reveal_type(value_to_match, expected_text=\"Never\")\n        case ClassA(attr_a=a4, attr_b=a5) as a3:\n            reveal_type(a3, expected_text=\"ClassA\")\n            reveal_type(a4, expected_text=\"int\")\n            reveal_type(a5, expected_text=\"str\")\n            reveal_type(value_to_match, expected_text=\"ClassA\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "test_literal",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def test_literal(value_to_match: Literal[3]):\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"Literal[3]\")\n            reveal_type(value_to_match, expected_text=\"Literal[3]\")\n        case float() as a2:\n            reveal_type(a2, expected_text=\"Never\")\n            reveal_type(value_to_match, expected_text=\"Never\")\n        case str() as a3:\n            reveal_type(a3, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "test_bound_typevar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def test_bound_typevar(value_to_match: TFloat) -> TFloat:\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"int*\")\n            reveal_type(value_to_match, expected_text=\"int*\")\n        case float() as a2:\n            reveal_type(a2, expected_text=\"float*\")\n            reveal_type(value_to_match, expected_text=\"float*\")\n        case str() as a3:\n            reveal_type(a3, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "test_union",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def test_union(\n    value_to_match: Union[TInt, Literal[3], float, str]\n) -> Union[TInt, Literal[3], float, str]:\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"int* | int\")\n            reveal_type(value_to_match, expected_text=\"int* | int\")\n        case float() as a2:\n            reveal_type(a2, expected_text=\"float\")\n            reveal_type(value_to_match, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func1(points: list[Point[float] | Point[complex]]):\n    match points:\n        case [] as a1:\n            reveal_type(a1, expected_text=\"list[Point[float] | Point[complex]]\")\n            reveal_type(points, expected_text=\"list[Point[float] | Point[complex]]\")\n        case [Point(0, 0) as b1]:\n            reveal_type(b1, expected_text=\"Point[float] | Point[complex]\")\n            reveal_type(points, expected_text=\"list[Point[float] | Point[complex]]\")\n        case [Point(c1, c2)]:\n            reveal_type(c1, expected_text=\"float | complex\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func2(subj: object):\n    match subj:\n        case list() as a1:\n            reveal_type(a1, expected_text=\"list[Unknown]\")\n            reveal_type(subj, expected_text=\"list[Unknown]\")\ndef func3(subj: Union[int, str, dict[str, str]]):\n    match subj:\n        case int(x):\n            reveal_type(x, expected_text=\"int\")\n            reveal_type(subj, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func3(subj: Union[int, str, dict[str, str]]):\n    match subj:\n        case int(x):\n            reveal_type(x, expected_text=\"int\")\n            reveal_type(subj, expected_text=\"int\")\n        case str(x):\n            reveal_type(x, expected_text=\"str\")\n            reveal_type(subj, expected_text=\"str\")\n        case dict(x):\n            reveal_type(x, expected_text=\"dict[str, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func4(subj: object):\n    match subj:\n        case int(x):\n            reveal_type(x, expected_text=\"int\")\n            reveal_type(subj, expected_text=\"int\")\n        case str(x):\n            reveal_type(x, expected_text=\"str\")\n            reveal_type(subj, expected_text=\"str\")\n# Test the auto-generation of __match_args__ for dataclass.\n@dataclass",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func5(subj: object):\n    match subj:\n        case Dataclass1(a, b):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"complex\")\n            reveal_type(subj, expected_text=\"Dataclass1\")\n        case Dataclass2(a, b, c):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"str\")\n            reveal_type(c, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func6(subj: object):\n    match subj:\n        case NT1(a, b):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"complex\")\n            reveal_type(subj, expected_text=\"NT1\")\n        case NT2(a, b, c):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"str\")\n            reveal_type(c, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func7(subj: object):\n    match subj:\n        case complex(real=a, imag=b):\n            reveal_type(a, expected_text=\"float\")\n            reveal_type(b, expected_text=\"float\")\nT2 = TypeVar(\"T2\")\nclass Parent(Generic[T]):\n    ...\nclass Child1(Parent[T]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func8(subj: Parent[int]):\n    match subj:\n        case Child1() as a1:\n            reveal_type(a1, expected_text=\"Child1[int]\")\n            reveal_type(subj, expected_text=\"Child1[int]\")\n        case Child2() as b1:\n            reveal_type(b1, expected_text=\"Child2[int, Unknown]\")\n            reveal_type(subj, expected_text=\"Child2[int, Unknown]\")\nT3 = TypeVar(\"T3\")\ndef func9(v: T3) -> Optional[T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func9(v: T3) -> Optional[T3]:\n    match v:\n        case str():\n            reveal_type(v, expected_text=\"str*\")\n            return v\n        case _:\n            return None\nT4 = TypeVar(\"T4\", int, str)\ndef func10(v: T4) -> Optional[T4]:\n    match v:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func10(v: T4) -> Optional[T4]:\n    match v:\n        case str():\n            reveal_type(v, expected_text=\"str*\")\n            return v\n        case int():\n            reveal_type(v, expected_text=\"int*\")\n            return v\n        case list():\n            reveal_type(v, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func11(subj: Any):\n    match subj:\n        case Child1() as a1:\n            reveal_type(a1, expected_text=\"Child1[Unknown]\")\n            reveal_type(subj, expected_text=\"Child1[Unknown]\")\n        case Child2() as b1:\n            reveal_type(b1, expected_text=\"Child2[Unknown, Unknown]\")\n            reveal_type(subj, expected_text=\"Child2[Unknown, Unknown]\")\ndef func12(subj: int, flt_cls: type[float], union_val: float | int):\n    match subj:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func12(subj: int, flt_cls: type[float], union_val: float | int):\n    match subj:\n        # This should generate an error because int doesn't accept two arguments.\n        case int(1, 2):\n            pass\n    match subj:\n        # This should generate an error because float doesn't accept keyword arguments.\n        case float(x=1):\n            pass\n    match subj:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func13(subj: tuple[Literal[0]]):\n    match subj:\n        case tuple((1,)) as a:\n            reveal_type(subj, expected_text=\"Never\")\n            reveal_type(a, expected_text=\"Never\")\n        case tuple((0, 0)) as b:\n            reveal_type(subj, expected_text=\"Never\")\n            reveal_type(b, expected_text=\"Never\")\n        case tuple((0,)) as c:\n            reveal_type(subj, expected_text=\"tuple[Literal[0]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "def func14(subj: ClassE[T]) -> T | None:\n    match subj:\n        case ClassF(a):\n            reveal_type(subj, expected_text=\"ClassF[T@func14]\")\n            reveal_type(a, expected_text=\"list[T@func14]\")\n            return a[0]",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "foo = 3\nT = TypeVar(\"T\")\nclass ClassA:\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: int\n    attr_b: str\nclass ClassB(Generic[T]):\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: T\n    attr_b: str",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "T = TypeVar(\"T\")\nclass ClassA:\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: int\n    attr_b: str\nclass ClassB(Generic[T]):\n    __match_args__ = (\"attr_a\", \"attr_b\")\n    attr_a: T\n    attr_b: str\nclass ClassC:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "TFloat",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "TFloat = TypeVar(\"TFloat\", bound=float)\ndef test_bound_typevar(value_to_match: TFloat) -> TFloat:\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"int*\")\n            reveal_type(value_to_match, expected_text=\"int*\")\n        case float() as a2:\n            reveal_type(a2, expected_text=\"float*\")\n            reveal_type(value_to_match, expected_text=\"float*\")\n        case str() as a3:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "TInt",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "TInt = TypeVar(\"TInt\", bound=int)\ndef test_union(\n    value_to_match: Union[TInt, Literal[3], float, str]\n) -> Union[TInt, Literal[3], float, str]:\n    match value_to_match:\n        case int() as a1:\n            reveal_type(a1, expected_text=\"int* | int\")\n            reveal_type(value_to_match, expected_text=\"int* | int\")\n        case float() as a2:\n            reveal_type(a2, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Point(Generic[T]):\n    __match_args__ = (\"x\", \"y\")\n    x: T\n    y: T\ndef func1(points: list[Point[float] | Point[complex]]):\n    match points:\n        case [] as a1:\n            reveal_type(a1, expected_text=\"list[Point[float] | Point[complex]]\")\n            reveal_type(points, expected_text=\"list[Point[float] | Point[complex]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "NT1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "NT1 = NamedTuple(\"NT1\", [(\"val1\", int), (\"val2\", complex)])\nNT2 = NamedTuple(\"NT2\", [(\"val1\", int), (\"val2\", str), (\"val3\", float)])\ndef func6(subj: object):\n    match subj:\n        case NT1(a, b):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"complex\")\n            reveal_type(subj, expected_text=\"NT1\")\n        case NT2(a, b, c):\n            reveal_type(a, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "NT2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "NT2 = NamedTuple(\"NT2\", [(\"val1\", int), (\"val2\", str), (\"val3\", float)])\ndef func6(subj: object):\n    match subj:\n        case NT1(a, b):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"complex\")\n            reveal_type(subj, expected_text=\"NT1\")\n        case NT2(a, b, c):\n            reveal_type(a, expected_text=\"int\")\n            reveal_type(b, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "T2 = TypeVar(\"T2\")\nclass Parent(Generic[T]):\n    ...\nclass Child1(Parent[T]):\n    ...\nclass Child2(Parent[T], Generic[T, T2]):\n    ...\ndef func8(subj: Parent[int]):\n    match subj:\n        case Child1() as a1:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "T3 = TypeVar(\"T3\")\ndef func9(v: T3) -> Optional[T3]:\n    match v:\n        case str():\n            reveal_type(v, expected_text=\"str*\")\n            return v\n        case _:\n            return None\nT4 = TypeVar(\"T4\", int, str)\ndef func10(v: T4) -> Optional[T4]:",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match3",
        "description": "packages.pyright-internal.src.tests.samples.match3",
        "peekOfCode": "T4 = TypeVar(\"T4\", int, str)\ndef func10(v: T4) -> Optional[T4]:\n    match v:\n        case str():\n            reveal_type(v, expected_text=\"str*\")\n            return v\n        case int():\n            reveal_type(v, expected_text=\"int*\")\n            return v\n        case list():",
        "detail": "packages.pyright-internal.src.tests.samples.match3",
        "documentation": {}
    },
    {
        "label": "MyEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "class MyEnum(Enum):\n    V1 = 0\n    V2 = 1\nclass MyClass:\n    class_var_1: \"MyClass\"\n    def __eq__(self, object: \"MyClass\") -> bool: ...\ndef test_unknown(value_to_match):\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "class MyClass:\n    class_var_1: \"MyClass\"\n    def __eq__(self, object: \"MyClass\") -> bool: ...\ndef test_unknown(value_to_match):\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Unknown\")\n            reveal_type(value_to_match, expected_text=\"Unknown\")\ndef test_enum(value_to_match: MyEnum):\n    match value_to_match:",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "Medal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "class Medal(Enum):\n    gold = 1\n    silver = 2\n    bronze = 3\nclass Color(Enum):\n    red = 1\n    blue = 2\n    green = 3\ndef test_enum_narrowing(m: Union[Medal, Color, int]):\n    match m:",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "class Color(Enum):\n    red = 1\n    blue = 2\n    green = 3\ndef test_enum_narrowing(m: Union[Medal, Color, int]):\n    match m:\n        case Medal.gold as a1:\n            reveal_type(a1, expected_text='Literal[Medal.gold]')\n            reveal_type(m, expected_text='Literal[Medal.gold]')\n        case Medal.silver as b1:",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "class Foo(Enum):\n    bar = auto()\n    def __str__(self) -> str:\n        match self:\n            case Foo.bar:\n                return \"bar\"\n            case x:\n                reveal_type(x, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "handle_reply",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "def handle_reply(reply: Tuple[HTTPStatus, str] | Tuple[HTTPStatus]):\n    match reply:\n        case (HTTPStatus.OK as a1, a2):\n            reveal_type(a1, expected_text=\"Literal[HTTPStatus.OK]\")\n            reveal_type(a2, expected_text=\"str\")\n        case (HTTPStatus.NOT_FOUND as d1, ):\n            reveal_type(d1, expected_text=\"Literal[HTTPStatus.NOT_FOUND]\")\nclass MyEnum(Enum):\n    V1 = 0\n    V2 = 1",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "test_unknown",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "def test_unknown(value_to_match):\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Unknown\")\n            reveal_type(value_to_match, expected_text=\"Unknown\")\ndef test_enum(value_to_match: MyEnum):\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Literal[MyEnum.V1]\")\n            reveal_type(value_to_match, expected_text=\"Literal[MyEnum.V1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "test_enum",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "def test_enum(value_to_match: MyEnum):\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Literal[MyEnum.V1]\")\n            reveal_type(value_to_match, expected_text=\"Literal[MyEnum.V1]\")\ndef test_class_var(value_to_match: str):\n    match value_to_match:\n        case MyClass.class_var_1 as a1:\n            reveal_type(a1, expected_text=\"Never\")\n            reveal_type(value_to_match, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "test_class_var",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "def test_class_var(value_to_match: str):\n    match value_to_match:\n        case MyClass.class_var_1 as a1:\n            reveal_type(a1, expected_text=\"Never\")\n            reveal_type(value_to_match, expected_text=\"Never\")\nTInt = TypeVar(\"TInt\", bound=MyEnum)\ndef test_union(value_to_match: Union[TInt, MyEnum]) -> Union[TInt, MyEnum]:\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Literal[MyEnum.V1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "test_union",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "def test_union(value_to_match: Union[TInt, MyEnum]) -> Union[TInt, MyEnum]:\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Literal[MyEnum.V1]\")\n            reveal_type(value_to_match, expected_text=\"Literal[MyEnum.V1]\")\n    return value_to_match\nclass Medal(Enum):\n    gold = 1\n    silver = 2\n    bronze = 3",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "test_enum_narrowing",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "def test_enum_narrowing(m: Union[Medal, Color, int]):\n    match m:\n        case Medal.gold as a1:\n            reveal_type(a1, expected_text='Literal[Medal.gold]')\n            reveal_type(m, expected_text='Literal[Medal.gold]')\n        case Medal.silver as b1:\n            reveal_type(b1, expected_text='Literal[Medal.silver]')\n            reveal_type(m, expected_text='Literal[Medal.silver]')\n        case Color() as c1:\n            reveal_type(c1, expected_text='Color')",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "TInt",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match4",
        "description": "packages.pyright-internal.src.tests.samples.match4",
        "peekOfCode": "TInt = TypeVar(\"TInt\", bound=MyEnum)\ndef test_union(value_to_match: Union[TInt, MyEnum]) -> Union[TInt, MyEnum]:\n    match value_to_match:\n        case MyEnum.V1 as a1:\n            reveal_type(a1, expected_text=\"Literal[MyEnum.V1]\")\n            reveal_type(value_to_match, expected_text=\"Literal[MyEnum.V1]\")\n    return value_to_match\nclass Medal(Enum):\n    gold = 1\n    silver = 2",
        "detail": "packages.pyright-internal.src.tests.samples.match4",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match5",
        "description": "packages.pyright-internal.src.tests.samples.match5",
        "peekOfCode": "class Movie(TypedDict):\n    title: str\n    release_year: int\n    gross_earnings: float\nclass MovieInfo:\n    field_of_interest: Literal[\"release_year\", \"gross_earnings\"]\ndef test_typed_dict(value_to_match: Movie):\n    match value_to_match:\n        case {\"title\": a1, \"release_year\": a2, **a3}:\n            reveal_type(a1, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.match5",
        "documentation": {}
    },
    {
        "label": "MovieInfo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match5",
        "description": "packages.pyright-internal.src.tests.samples.match5",
        "peekOfCode": "class MovieInfo:\n    field_of_interest: Literal[\"release_year\", \"gross_earnings\"]\ndef test_typed_dict(value_to_match: Movie):\n    match value_to_match:\n        case {\"title\": a1, \"release_year\": a2, **a3}:\n            reveal_type(a1, expected_text=\"str\")\n            reveal_type(a2, expected_text=\"int\")\n            reveal_type(a3, expected_text=\"dict[str, Unknown]\")\n            reveal_type(value_to_match, expected_text=\"Movie\")\n        case {3: b1, \"title\": b2}:",
        "detail": "packages.pyright-internal.src.tests.samples.match5",
        "documentation": {}
    },
    {
        "label": "test_unknown",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match5",
        "description": "packages.pyright-internal.src.tests.samples.match5",
        "peekOfCode": "def test_unknown(value_to_match):\n    match value_to_match:\n        case {\"hello\": a1, **a2}:\n            reveal_type(a1, expected_text=\"Unknown\")\n            reveal_type(a2, expected_text=\"dict[Unknown, Unknown]\")\n            reveal_type(value_to_match, expected_text=\"Unknown\")\ndef test_dict(value_to_match: Dict[str | int, str | int]):\n    match value_to_match:\n        case {1: a1}:\n            reveal_type(a1, expected_text=\"str | int\")",
        "detail": "packages.pyright-internal.src.tests.samples.match5",
        "documentation": {}
    },
    {
        "label": "test_dict",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match5",
        "description": "packages.pyright-internal.src.tests.samples.match5",
        "peekOfCode": "def test_dict(value_to_match: Dict[str | int, str | int]):\n    match value_to_match:\n        case {1: a1}:\n            reveal_type(a1, expected_text=\"str | int\")\n            reveal_type(value_to_match, expected_text=\"Dict[str | int, str | int]\")\n        case {\"hi\": b1, \"hi2\": b2, **b3}:\n            reveal_type(b1, expected_text=\"str | int\")\n            reveal_type(b2, expected_text=\"str | int\")\n            reveal_type(b3, expected_text=\"dict[str | int, str | int]\")\n            reveal_type(value_to_match, expected_text=\"Dict[str | int, str | int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.match5",
        "documentation": {}
    },
    {
        "label": "test_typed_dict",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match5",
        "description": "packages.pyright-internal.src.tests.samples.match5",
        "peekOfCode": "def test_typed_dict(value_to_match: Movie):\n    match value_to_match:\n        case {\"title\": a1, \"release_year\": a2, **a3}:\n            reveal_type(a1, expected_text=\"str\")\n            reveal_type(a2, expected_text=\"int\")\n            reveal_type(a3, expected_text=\"dict[str, Unknown]\")\n            reveal_type(value_to_match, expected_text=\"Movie\")\n        case {3: b1, \"title\": b2}:\n            reveal_type(b1, expected_text=\"Never\")\n            reveal_type(b2, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.match5",
        "documentation": {}
    },
    {
        "label": "test_union",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match5",
        "description": "packages.pyright-internal.src.tests.samples.match5",
        "peekOfCode": "def test_union(value_to_match: Dict[str | int, str | int] | Movie | str):\n    match value_to_match:\n        case {3: a1}:\n            reveal_type(a1, expected_text=\"str | int\")\n            reveal_type(value_to_match, expected_text=\"Dict[str | int, str | int]\")\n        case {\"gross_earnings\": b1}:\n            reveal_type(b1, expected_text=\"str | int | float\")\n            reveal_type(value_to_match, expected_text=\"Dict[str | int, str | int] | Movie\")",
        "detail": "packages.pyright-internal.src.tests.samples.match5",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match6",
        "description": "packages.pyright-internal.src.tests.samples.match6",
        "peekOfCode": "class A(str):\n    ...\ndef test_subclass(a: A):\n    match a:\n        case \"TEST\" as m:\n            reveal_type(m, expected_text=\"A\")\n        case x:\n            reveal_type(x, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.match6",
        "documentation": {}
    },
    {
        "label": "test_unknown",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match6",
        "description": "packages.pyright-internal.src.tests.samples.match6",
        "peekOfCode": "def test_unknown(value_to_match):\n    match value_to_match:\n        case 3 as a1, -3 as a2:\n            reveal_type(a1, expected_text=\"Literal[3]\")\n            reveal_type(a2, expected_text=\"Literal[-3]\")\n            reveal_type(value_to_match, expected_text=\"Unknown\")\n        case 3j as b1, -3 + 5j as b2:\n            reveal_type(b1, expected_text=\"complex\")\n            reveal_type(b2, expected_text=\"complex\")\n            reveal_type(value_to_match, expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.match6",
        "documentation": {}
    },
    {
        "label": "test_tuple",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match6",
        "description": "packages.pyright-internal.src.tests.samples.match6",
        "peekOfCode": "def test_tuple(value_to_match: tuple[int | float | str | complex, ...]):\n    match value_to_match:\n        case (3, -3) as a1:\n            reveal_type(a1, expected_text=\"tuple[Literal[3], Literal[-3]]\")\n            reveal_type(value_to_match, expected_text=\"tuple[Literal[3], Literal[-3]]\")\n        case (3j, -3 + 5j) as b1:\n            reveal_type(b1, expected_text=\"tuple[complex, complex]\")\n            reveal_type(value_to_match, expected_text=\"tuple[complex, complex]\")\ndef test_union(value_to_match: int | float | str | complex | bool | None):\n    match value_to_match:",
        "detail": "packages.pyright-internal.src.tests.samples.match6",
        "documentation": {}
    },
    {
        "label": "test_union",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match6",
        "description": "packages.pyright-internal.src.tests.samples.match6",
        "peekOfCode": "def test_union(value_to_match: int | float | str | complex | bool | None):\n    match value_to_match:\n        case (3 | -3j) as a1:\n            reveal_type(a1, expected_text=\"bool | complex | Literal[3]\")\n            reveal_type(value_to_match, expected_text=\"bool | complex | Literal[3]\")\n        case (True | False | 3.4 | -3 + 3j | None) as b1:\n            reveal_type(b1, expected_text=\"float | complex | bool | None\")\n            reveal_type(value_to_match, expected_text=\"float | complex | bool | None\")\n        case (\"hi\" | 3.4) as c1:\n            reveal_type(c1, expected_text=\"float | Literal['hi']\")",
        "detail": "packages.pyright-internal.src.tests.samples.match6",
        "documentation": {}
    },
    {
        "label": "test_none",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match6",
        "description": "packages.pyright-internal.src.tests.samples.match6",
        "peekOfCode": "def test_none(value_to_match: int | None):\n    match value_to_match:\n        case None as a1:\n            reveal_type(a1, expected_text=\"None\")\n        case a2:\n            reveal_type(a2, expected_text=\"int\")\nclass A(str):\n    ...\ndef test_subclass(a: A):\n    match a:",
        "detail": "packages.pyright-internal.src.tests.samples.match6",
        "documentation": {}
    },
    {
        "label": "test_subclass",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match6",
        "description": "packages.pyright-internal.src.tests.samples.match6",
        "peekOfCode": "def test_subclass(a: A):\n    match a:\n        case \"TEST\" as m:\n            reveal_type(m, expected_text=\"A\")\n        case x:\n            reveal_type(x, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.match6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match7",
        "description": "packages.pyright-internal.src.tests.samples.match7",
        "peekOfCode": "def func1(subj: int | dict[str, str] | tuple[int] | str, cond: bool):\n    match subj:\n        case (3 | \"hi\"):\n            reveal_type(subj, expected_text=\"Literal[3, 'hi']\")\n            return\n        case int(y) if cond:\n            reveal_type(subj, expected_text=\"int\")\n            return\n        case int(y):\n            reveal_type(subj, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.match7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match7",
        "description": "packages.pyright-internal.src.tests.samples.match7",
        "peekOfCode": "def func2(subj: int | str) -> str:\n    match subj:\n        case int():\n            return \"int\"\n    reveal_type(subj, expected_text='str')\n# This should generate an error because there is the potential\n# for fall-through if the guard expressions are false.\ndef func3(subj: int | str) -> str:\n    match subj:\n        case str() if len(subj) > 0:",
        "detail": "packages.pyright-internal.src.tests.samples.match7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match7",
        "description": "packages.pyright-internal.src.tests.samples.match7",
        "peekOfCode": "def func3(subj: int | str) -> str:\n    match subj:\n        case str() if len(subj) > 0:\n            return \"str\"\n        case int() if subj < 0:\n            return \"int\"\n    reveal_type(subj, expected_text='int | str')\ndef func4(subj: int | str) -> str:\n    match subj:\n        case int():",
        "detail": "packages.pyright-internal.src.tests.samples.match7",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match7",
        "description": "packages.pyright-internal.src.tests.samples.match7",
        "peekOfCode": "def func4(subj: int | str) -> str:\n    match subj:\n        case int():\n            return \"int\"\n        case str():\n            return \"str\"\n        case _:\n            # This should be ignored because the pattern has already\n            # been exhaustively matched.\n            pass",
        "detail": "packages.pyright-internal.src.tests.samples.match7",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match8",
        "description": "packages.pyright-internal.src.tests.samples.match8",
        "peekOfCode": "class Point:\n    optional: int | None = field(default=None, kw_only=True)\n    x: int\n    y: int\nobj = Point(1, 2)\nmatch obj:\n    case Point(x, y, optional=opt):\n        reveal_type(x, expected_text=\"int\")\n        reveal_type(y, expected_text=\"int\")\n        reveal_type(opt, expected_text=\"int | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.match8",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.match8",
        "description": "packages.pyright-internal.src.tests.samples.match8",
        "peekOfCode": "obj = Point(1, 2)\nmatch obj:\n    case Point(x, y, optional=opt):\n        reveal_type(x, expected_text=\"int\")\n        reveal_type(y, expected_text=\"int\")\n        reveal_type(opt, expected_text=\"int | None\")\n        distance = (x ** 2 + y ** 2) ** 0.5",
        "detail": "packages.pyright-internal.src.tests.samples.match8",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class A:\n    title: str\nclass B:\n    name: str\nclass C:\n    name: str\ndef func1(r: A | B | C):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='A | B | C')",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class B:\n    name: str\nclass C:\n    name: str\ndef func1(r: A | B | C):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='A | B | C')\n        case object(name=_):\n            reveal_type(r, expected_text='A | B | C')",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class C:\n    name: str\ndef func1(r: A | B | C):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='A | B | C')\n        case object(name=_):\n            reveal_type(r, expected_text='A | B | C')\n        case _:\n            reveal_type(r, expected_text='A | B | C')",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "AFinal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class AFinal:\n    title: str\n@final\nclass BFinal:\n    name: str\n@final\nclass CFinal:\n    name: str\n@final\nclass DFinal:",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "BFinal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class BFinal:\n    name: str\n@final\nclass CFinal:\n    name: str\n@final\nclass DFinal:\n    nothing: str\ndef func2(r: AFinal | BFinal | CFinal | DFinal):\n    match r:",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "CFinal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class CFinal:\n    name: str\n@final\nclass DFinal:\n    nothing: str\ndef func2(r: AFinal | BFinal | CFinal | DFinal):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='AFinal')\n        case object(name=_):",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "DFinal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "class DFinal:\n    nothing: str\ndef func2(r: AFinal | BFinal | CFinal | DFinal):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='AFinal')\n        case object(name=_):\n            reveal_type(r, expected_text='BFinal | CFinal')\n        case _:\n            reveal_type(r, expected_text='DFinal')",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "def func1(r: A | B | C):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='A | B | C')\n        case object(name=_):\n            reveal_type(r, expected_text='A | B | C')\n        case _:\n            reveal_type(r, expected_text='A | B | C')\n@final\nclass AFinal:",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.match9",
        "description": "packages.pyright-internal.src.tests.samples.match9",
        "peekOfCode": "def func2(r: AFinal | BFinal | CFinal | DFinal):\n    match r:\n        case object(title=_):\n            reveal_type(r, expected_text='AFinal')\n        case object(name=_):\n            reveal_type(r, expected_text='BFinal | CFinal')\n        case _:\n            reveal_type(r, expected_text='DFinal')",
        "detail": "packages.pyright-internal.src.tests.samples.match9",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.maxParseDepth1",
        "description": "packages.pyright-internal.src.tests.samples.maxParseDepth1",
        "peekOfCode": "x = 3\nfor _ in range(2):\n    x = (\n        x\n        + x\n        + x\n        + x\n        + x\n        + x\n        + x",
        "detail": "packages.pyright-internal.src.tests.samples.maxParseDepth1",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.maxParseDepth2",
        "description": "packages.pyright-internal.src.tests.samples.maxParseDepth2",
        "peekOfCode": "def func(x: dict[int, Any], y: Any):\n    xn    y.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x.x\n    yn    y.x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]().x[0]()",
        "detail": "packages.pyright-internal.src.tests.samples.maxParseDepth2",
        "documentation": {}
    },
    {
        "label": "Column",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class Column(Generic[_T]):\n    @overload\n    def __get__(self, instance: None, owner: Any) -> \"Column[_T]\":  # type: ignore\n        ...\n    @overload\n    def __get__(self, instance: Any, owner: Any) -> _T:\n        ...\nclass ClassA:\n    bar = Column[str]()\n    @classmethod",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class ClassA:\n    bar = Column[str]()\n    @classmethod\n    def func1(cls):\n        a: Column[str] = cls.bar\nreveal_type(ClassA.bar, expected_text=\"Column[str]\")\nreveal_type(ClassA().bar, expected_text=\"str\")\nclass ClassB:\n    @cached_property\n    def baz(self) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class ClassB:\n    @cached_property\n    def baz(self) -> int:\n        return 3\nc: cached_property[int] = ClassB.baz\nd: int = ClassB().baz\nclass Factory:\n    def __get__(self, obj: Any, cls: Type[_T]) -> _T:\n        return cls()\nclass ClassC:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "Factory",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class Factory:\n    def __get__(self, obj: Any, cls: Type[_T]) -> _T:\n        return cls()\nclass ClassC:\n    instance: Factory\nreveal_type(ClassC.instance, expected_text=\"ClassC\")\nclass GenericDescriptor(Generic[_T]):\n    value: _T\n    def __get__(self, instance: Optional[object], cls: Type[object]) -> _T:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class ClassC:\n    instance: Factory\nreveal_type(ClassC.instance, expected_text=\"ClassC\")\nclass GenericDescriptor(Generic[_T]):\n    value: _T\n    def __get__(self, instance: Optional[object], cls: Type[object]) -> _T:\n        ...\n    def __set__(self, instance: object, value: _T) -> None:\n        ...\nclass ClassD:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "GenericDescriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class GenericDescriptor(Generic[_T]):\n    value: _T\n    def __get__(self, instance: Optional[object], cls: Type[object]) -> _T:\n        ...\n    def __set__(self, instance: object, value: _T) -> None:\n        ...\nclass ClassD:\n    abc: GenericDescriptor[str] = GenericDescriptor()\n    stack: ExitStack\n    def test(self, value: ContextManager[str]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "class ClassD:\n    abc: GenericDescriptor[str] = GenericDescriptor()\n    stack: ExitStack\n    def test(self, value: ContextManager[str]) -> None:\n        self.abc = self.stack.enter_context(value)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Column(Generic[_T]):\n    @overload\n    def __get__(self, instance: None, owner: Any) -> \"Column[_T]\":  # type: ignore\n        ...\n    @overload\n    def __get__(self, instance: Any, owner: Any) -> _T:\n        ...\nclass ClassA:\n    bar = Column[str]()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess1",
        "documentation": {}
    },
    {
        "label": "_IntDescriptorMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "class _IntDescriptorMeta(type):\n    def __get__(self, instance: Any, owner: Any) -> int:\n        return 123\n    def __set__(self, instance: Any, value: str) -> None:\n        pass\nclass IntDescriptorClass(metaclass=_IntDescriptorMeta):\n    ...\nclass X:\n    number_cls = IntDescriptorClass\nreveal_type(X.number_cls, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "IntDescriptorClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "class IntDescriptorClass(metaclass=_IntDescriptorMeta):\n    ...\nclass X:\n    number_cls = IntDescriptorClass\nreveal_type(X.number_cls, expected_text=\"int\")\nreveal_type(X().number_cls, expected_text=\"int\")\n# This should generate an error\nX.number_cls = \"hi\"\nX().number_cls = \"hi\"\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "class X:\n    number_cls = IntDescriptorClass\nreveal_type(X.number_cls, expected_text=\"int\")\nreveal_type(X().number_cls, expected_text=\"int\")\n# This should generate an error\nX.number_cls = \"hi\"\nX().number_cls = \"hi\"\n# This should generate an error\nX.number_cls = 1\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "FlagValue",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "class FlagValue:\n    def __init__(self, func):\n        self.value: bool = bool(func(None))\n    def __set__(self, instance: \"Flags\", value: int):\n        self.value = bool(value)\nclass Flags:\n    @FlagValue\n    def suppress(self):\n        return 2\nflags = Flags()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "Flags",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "class Flags:\n    @FlagValue\n    def suppress(self):\n        return 2\nflags = Flags()\ndef func1(new: Any):\n    flags.suppress = new\ndef func2(new: int):\n    flags.suppress = new\ndef func3(new: bool):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "def func1(new: Any):\n    flags.suppress = new\ndef func2(new: int):\n    flags.suppress = new\ndef func3(new: bool):\n    flags.suppress = new",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "def func2(new: int):\n    flags.suppress = new\ndef func3(new: bool):\n    flags.suppress = new",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "def func3(new: bool):\n    flags.suppress = new",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "X.number_cls",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "X.number_cls = \"hi\"\nX().number_cls = \"hi\"\n# This should generate an error\nX.number_cls = 1\n# This should generate an error\nX().number_cls = 1\nclass FlagValue:\n    def __init__(self, func):\n        self.value: bool = bool(func(None))\n    def __set__(self, instance: \"Flags\", value: int):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "X().number_cls",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "X().number_cls = \"hi\"\n# This should generate an error\nX.number_cls = 1\n# This should generate an error\nX().number_cls = 1\nclass FlagValue:\n    def __init__(self, func):\n        self.value: bool = bool(func(None))\n    def __set__(self, instance: \"Flags\", value: int):\n        self.value = bool(value)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "X.number_cls",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "X.number_cls = 1\n# This should generate an error\nX().number_cls = 1\nclass FlagValue:\n    def __init__(self, func):\n        self.value: bool = bool(func(None))\n    def __set__(self, instance: \"Flags\", value: int):\n        self.value = bool(value)\nclass Flags:\n    @FlagValue",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "X().number_cls",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "X().number_cls = 1\nclass FlagValue:\n    def __init__(self, func):\n        self.value: bool = bool(func(None))\n    def __set__(self, instance: \"Flags\", value: int):\n        self.value = bool(value)\nclass Flags:\n    @FlagValue\n    def suppress(self):\n        return 2",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "flags",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "peekOfCode": "flags = Flags()\ndef func1(new: Any):\n    flags.suppress = new\ndef func2(new: int):\n    flags.suppress = new\ndef func3(new: bool):\n    flags.suppress = new",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess10",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "peekOfCode": "class MyClass:\n    def __init__(self):\n        self.method4 = lambda x: x\n    @method_decorator\n    def method1(self, a: int) -> str:\n        return \"foo\"\n    def method2(self, a: int) -> str:\n        return \"foo\"\n    method3 = method_decorator(method2)\nmc = MyClass()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "peekOfCode": "def method_decorator(\n    method: UnboundMethodThatTakesIntAndReturnsStr,\n) -> UnboundMethodThatTakesIntAndReturnsStr:\n    def wrapper(self: \"MyClass\", a: int) -> str:\n        return \"wrapped \" + method(self, a)\n    return wrapper\nclass MyClass:\n    def __init__(self):\n        self.method4 = lambda x: x\n    @method_decorator",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "documentation": {}
    },
    {
        "label": "UnboundMethodThatTakesIntAndReturnsStr",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "peekOfCode": "UnboundMethodThatTakesIntAndReturnsStr = Callable[[\"MyClass\", int], str]\ndef method_decorator(\n    method: UnboundMethodThatTakesIntAndReturnsStr,\n) -> UnboundMethodThatTakesIntAndReturnsStr:\n    def wrapper(self: \"MyClass\", a: int) -> str:\n        return \"wrapped \" + method(self, a)\n    return wrapper\nclass MyClass:\n    def __init__(self):\n        self.method4 = lambda x: x",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "documentation": {}
    },
    {
        "label": "mc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "peekOfCode": "mc = MyClass()\nmc.method1(1)\nmc.method2(1)\nmc.method3(1)\nmc.method4(1)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess11",
        "documentation": {}
    },
    {
        "label": "MetaClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "peekOfCode": "class MetaClass(type):\n    @overload\n    def __get__(self: Type[T], instance: None, owner: Any) -> Type[T]:\n        ...\n    @overload\n    def __get__(self: Type[T], instance: object, owner: Any) -> T:\n        ...\n    def __get__(\n        self: Type[T], instance: Optional[object], owner: Any\n    ) -> Union[Type[T], T]:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "peekOfCode": "class A(metaclass=MetaClass):\n    ...\nclass B:\n    a = A\nreveal_type(B.a, expected_text=\"Type[A]\")\nreveal_type(B().a, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "peekOfCode": "class B:\n    a = A\nreveal_type(B.a, expected_text=\"Type[A]\")\nreveal_type(B().a, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "peekOfCode": "T = TypeVar(\"T\")\nclass MetaClass(type):\n    @overload\n    def __get__(self: Type[T], instance: None, owner: Any) -> Type[T]:\n        ...\n    @overload\n    def __get__(self: Type[T], instance: object, owner: Any) -> T:\n        ...\n    def __get__(\n        self: Type[T], instance: Optional[object], owner: Any",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess12",
        "documentation": {}
    },
    {
        "label": "MockProducer",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess13",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess13",
        "peekOfCode": "class MockProducer:\n    produce: Type[Mock] = Mock\nreveal_type(MockProducer.produce, expected_text=\"Type[Mock]\")\nreveal_type(MockProducer().produce, expected_text=\"Type[Mock]\")\nreveal_type(MockProducer.produce(), expected_text=\"Mock\")\nreveal_type(MockProducer().produce(), expected_text=\"Mock\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess13",
        "documentation": {}
    },
    {
        "label": "CachedSlotProperty",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "class CachedSlotProperty(Generic[T_contra, V_co]):\n    def __init__(self, name: str, function: Callable[[T_contra], V_co]) -> None:\n        ...\n    @overload\n    def __get__(\n        self: CachedSlotPropertyT, instance: None, owner: type[T_contra]\n    ) -> CachedSlotPropertyT:\n        ...\n    @overload\n    def __get__(self, instance: T_contra, owner: Any) -> V_co:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "class C(Generic[T]):\n    def __init__(self, data: T) -> None:\n        ...\n    @cached_slot_property(\"_prop\")\n    def prop(self) -> int:\n        ...\nclass D(C[float]):\n    ...\nreveal_type(C.prop, expected_text=\"CachedSlotProperty[C[T@C], int]\")\nreveal_type(D.prop, expected_text=\"CachedSlotProperty[D, int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "class D(C[float]):\n    ...\nreveal_type(C.prop, expected_text=\"CachedSlotProperty[C[T@C], int]\")\nreveal_type(D.prop, expected_text=\"CachedSlotProperty[D, int]\")\nc = C(\"\")\nreveal_type(c.prop, expected_text=\"int\")\nd = D(1)\nreveal_type(d.prop, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "cached_slot_property",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "def cached_slot_property(\n    name: str,\n) -> Callable[[Callable[[T_contra], V_co]], CachedSlotProperty[T_contra, V_co]]:\n    ...\nclass C(Generic[T]):\n    def __init__(self, data: T) -> None:\n        ...\n    @cached_slot_property(\"_prop\")\n    def prop(self) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "T = TypeVar(\"T\")\nT_contra = TypeVar(\"T_contra\", contravariant=True)\nV_co = TypeVar(\"V_co\", covariant=True)\nCachedSlotPropertyT = TypeVar(\n    \"CachedSlotPropertyT\", bound=\"CachedSlotProperty[Any, Any]\"\n)\nclass CachedSlotProperty(Generic[T_contra, V_co]):\n    def __init__(self, name: str, function: Callable[[T_contra], V_co]) -> None:\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "T_contra = TypeVar(\"T_contra\", contravariant=True)\nV_co = TypeVar(\"V_co\", covariant=True)\nCachedSlotPropertyT = TypeVar(\n    \"CachedSlotPropertyT\", bound=\"CachedSlotProperty[Any, Any]\"\n)\nclass CachedSlotProperty(Generic[T_contra, V_co]):\n    def __init__(self, name: str, function: Callable[[T_contra], V_co]) -> None:\n        ...\n    @overload\n    def __get__(",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "V_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "V_co = TypeVar(\"V_co\", covariant=True)\nCachedSlotPropertyT = TypeVar(\n    \"CachedSlotPropertyT\", bound=\"CachedSlotProperty[Any, Any]\"\n)\nclass CachedSlotProperty(Generic[T_contra, V_co]):\n    def __init__(self, name: str, function: Callable[[T_contra], V_co]) -> None:\n        ...\n    @overload\n    def __get__(\n        self: CachedSlotPropertyT, instance: None, owner: type[T_contra]",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "CachedSlotPropertyT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "CachedSlotPropertyT = TypeVar(\n    \"CachedSlotPropertyT\", bound=\"CachedSlotProperty[Any, Any]\"\n)\nclass CachedSlotProperty(Generic[T_contra, V_co]):\n    def __init__(self, name: str, function: Callable[[T_contra], V_co]) -> None:\n        ...\n    @overload\n    def __get__(\n        self: CachedSlotPropertyT, instance: None, owner: type[T_contra]\n    ) -> CachedSlotPropertyT:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "c = C(\"\")\nreveal_type(c.prop, expected_text=\"int\")\nd = D(1)\nreveal_type(d.prop, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "peekOfCode": "d = D(1)\nreveal_type(d.prop, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess14",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess15",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess15",
        "peekOfCode": "class A:\n    async def get(self):\n        return self\nclass B(A):\n    pass\nasync def run():\n    val1 = await A().get()\n    reveal_type(val1, expected_text=\"A\")\n    val2 = await B().get()\n    reveal_type(val2, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess15",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess15",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess15",
        "peekOfCode": "class B(A):\n    pass\nasync def run():\n    val1 = await A().get()\n    reveal_type(val1, expected_text=\"A\")\n    val2 = await B().get()\n    reveal_type(val2, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess15",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess16",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess16",
        "peekOfCode": "def func(cls: type[Cls]) -> list[type[Cls]]:\n    return cls.__subclasses__()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess16",
        "documentation": {}
    },
    {
        "label": "Cls",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess16",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess16",
        "peekOfCode": "Cls = TypeVar(\"Cls\")\ndef func(cls: type[Cls]) -> list[type[Cls]]:\n    return cls.__subclasses__()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess16",
        "documentation": {}
    },
    {
        "label": "Obj",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "peekOfCode": "class Obj:\n    @overload\n    def __getattr__(self, name: Literal[\"foo\"]) -> int:\n        ...\n    @overload\n    def __getattr__(self, name: Literal[\"bar\"]) -> str:\n        ...\n    def __getattr__(self, name: str) -> Any:\n        if name == \"foo\":\n            return 1",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "peekOfCode": "obj = Obj()\nb1 = obj.foo\nreveal_type(b1, expected_text=\"int\")\nb2 = getattr(obj, \"foo\")\nreveal_type(b2, expected_text=\"Any\")\nc1 = obj.bar\nreveal_type(c1, expected_text=\"str\")\nc2 = getattr(obj, \"bar\")\nreveal_type(c2, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "peekOfCode": "b1 = obj.foo\nreveal_type(b1, expected_text=\"int\")\nb2 = getattr(obj, \"foo\")\nreveal_type(b2, expected_text=\"Any\")\nc1 = obj.bar\nreveal_type(c1, expected_text=\"str\")\nc2 = getattr(obj, \"bar\")\nreveal_type(c2, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "peekOfCode": "b2 = getattr(obj, \"foo\")\nreveal_type(b2, expected_text=\"Any\")\nc1 = obj.bar\nreveal_type(c1, expected_text=\"str\")\nc2 = getattr(obj, \"bar\")\nreveal_type(c2, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "peekOfCode": "c1 = obj.bar\nreveal_type(c1, expected_text=\"str\")\nc2 = getattr(obj, \"bar\")\nreveal_type(c2, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "peekOfCode": "c2 = getattr(obj, \"bar\")\nreveal_type(c2, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess17",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "peekOfCode": "class A:\n    pass\nclass Descriptor:\n    def __get__(self, instance: object, owner: Any) -> A:\n        return A()\nclass CollectionThing(Generic[_T]):\n    thing: _T\n    def __getitem__(self, key: str) -> _T:\n        return self.thing\n    def __getattr__(self, key: str) -> _T:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "documentation": {}
    },
    {
        "label": "Descriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "peekOfCode": "class Descriptor:\n    def __get__(self, instance: object, owner: Any) -> A:\n        return A()\nclass CollectionThing(Generic[_T]):\n    thing: _T\n    def __getitem__(self, key: str) -> _T:\n        return self.thing\n    def __getattr__(self, key: str) -> _T:\n        return self.thing\nc1: CollectionThing[Descriptor] = CollectionThing()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "documentation": {}
    },
    {
        "label": "CollectionThing",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "peekOfCode": "class CollectionThing(Generic[_T]):\n    thing: _T\n    def __getitem__(self, key: str) -> _T:\n        return self.thing\n    def __getattr__(self, key: str) -> _T:\n        return self.thing\nc1: CollectionThing[Descriptor] = CollectionThing()\nreveal_type(c1[\"key\"], expected_text=\"Descriptor\")\nreveal_type(c1.key, expected_text=\"Descriptor\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass A:\n    pass\nclass Descriptor:\n    def __get__(self, instance: object, owner: Any) -> A:\n        return A()\nclass CollectionThing(Generic[_T]):\n    thing: _T\n    def __getitem__(self, key: str) -> _T:\n        return self.thing",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess18",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "class A:\n    @overload\n    def __getattr__(self, key: Literal[\"a\"]) -> Literal[\"x\"]:\n        ...\n    @overload\n    def __getattr__(self, key: Literal[\"b\"]) -> Literal[4]:\n        ...\n    @overload\n    def __getattr__(self, key: Literal[\"c\"]) -> Literal[\"y\"]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "T = TypeVar(\"T\")\nclass A:\n    @overload\n    def __getattr__(self, key: Literal[\"a\"]) -> Literal[\"x\"]:\n        ...\n    @overload\n    def __getattr__(self, key: Literal[\"b\"]) -> Literal[4]:\n        ...\n    @overload\n    def __getattr__(self, key: Literal[\"c\"]) -> Literal[\"y\"]:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "a = A()\nreveal_type(a.a, expected_text=\"Literal['x']\")\nreveal_type(a.b, expected_text=\"Literal[4]\")\nreveal_type(a.c, expected_text=\"Literal['y']\")\nreveal_type(a.d, expected_text=\"A\")\n# This should generate an error.\nreveal_type(a.e)\n# This should generate an error.\na.a = 4\na.e = \"4\"",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "a.a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "a.a = 4\na.e = \"4\"\n# This should generate an error.\na.e = 4\n# This should generate an error.\na.f = \"4\"\na.f = 4\n# This should generate an error.\ndel a.e\ndel a.g",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "a.e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "a.e = \"4\"\n# This should generate an error.\na.e = 4\n# This should generate an error.\na.f = \"4\"\na.f = 4\n# This should generate an error.\ndel a.e\ndel a.g\ndel a.h",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "a.e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "a.e = 4\n# This should generate an error.\na.f = \"4\"\na.f = 4\n# This should generate an error.\ndel a.e\ndel a.g\ndel a.h",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "a.f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "a.f = \"4\"\na.f = 4\n# This should generate an error.\ndel a.e\ndel a.g\ndel a.h",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "a.f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "peekOfCode": "a.f = 4\n# This should generate an error.\ndel a.e\ndel a.g\ndel a.h",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess19",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "class Foo1:\n    def __init__(self):\n        self.c = lambda s: s\n    def a(self, s: str):\n        return s\n    b = lambda a_inst, s: a_inst.inner_str + s\nsample = Foo1()\na = sample.a(\"\")\nb = sample.b(\"\")\nc = sample.c(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "class Foo2(NamedTuple):\n    a: Callable[[int], int]\nfoo2 = Foo2(a=lambda a: a)\nf = foo2.a(3)\nclass Foo3(TypedDict):\n    a: Callable[[int], int]\nfoo3 = Foo3(a=lambda a: a)\ng = foo3[\"a\"](3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "Foo3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "class Foo3(TypedDict):\n    a: Callable[[int], int]\nfoo3 = Foo3(a=lambda a: a)\ng = foo3[\"a\"](3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "sample = Foo1()\na = sample.a(\"\")\nb = sample.b(\"\")\nc = sample.c(\"\")\nd = Foo1.a(Foo1(), \"\")\ne = Foo1.b(Foo1(), \"\")\n# This class is a data class (because it derives from\n# named tuple), so all variables that appear to be class\n# variables are actually instance variables.\nclass Foo2(NamedTuple):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "a = sample.a(\"\")\nb = sample.b(\"\")\nc = sample.c(\"\")\nd = Foo1.a(Foo1(), \"\")\ne = Foo1.b(Foo1(), \"\")\n# This class is a data class (because it derives from\n# named tuple), so all variables that appear to be class\n# variables are actually instance variables.\nclass Foo2(NamedTuple):\n    a: Callable[[int], int]",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "b = sample.b(\"\")\nc = sample.c(\"\")\nd = Foo1.a(Foo1(), \"\")\ne = Foo1.b(Foo1(), \"\")\n# This class is a data class (because it derives from\n# named tuple), so all variables that appear to be class\n# variables are actually instance variables.\nclass Foo2(NamedTuple):\n    a: Callable[[int], int]\nfoo2 = Foo2(a=lambda a: a)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "c = sample.c(\"\")\nd = Foo1.a(Foo1(), \"\")\ne = Foo1.b(Foo1(), \"\")\n# This class is a data class (because it derives from\n# named tuple), so all variables that appear to be class\n# variables are actually instance variables.\nclass Foo2(NamedTuple):\n    a: Callable[[int], int]\nfoo2 = Foo2(a=lambda a: a)\nf = foo2.a(3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "d = Foo1.a(Foo1(), \"\")\ne = Foo1.b(Foo1(), \"\")\n# This class is a data class (because it derives from\n# named tuple), so all variables that appear to be class\n# variables are actually instance variables.\nclass Foo2(NamedTuple):\n    a: Callable[[int], int]\nfoo2 = Foo2(a=lambda a: a)\nf = foo2.a(3)\nclass Foo3(TypedDict):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "e = Foo1.b(Foo1(), \"\")\n# This class is a data class (because it derives from\n# named tuple), so all variables that appear to be class\n# variables are actually instance variables.\nclass Foo2(NamedTuple):\n    a: Callable[[int], int]\nfoo2 = Foo2(a=lambda a: a)\nf = foo2.a(3)\nclass Foo3(TypedDict):\n    a: Callable[[int], int]",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "foo2 = Foo2(a=lambda a: a)\nf = foo2.a(3)\nclass Foo3(TypedDict):\n    a: Callable[[int], int]\nfoo3 = Foo3(a=lambda a: a)\ng = foo3[\"a\"](3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "f = foo2.a(3)\nclass Foo3(TypedDict):\n    a: Callable[[int], int]\nfoo3 = Foo3(a=lambda a: a)\ng = foo3[\"a\"](3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "foo3 = Foo3(a=lambda a: a)\ng = foo3[\"a\"](3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "peekOfCode": "g = foo3[\"a\"](3)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess20",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess20",
        "peekOfCode": "class ClassA(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self.value: T = value\n    def set_value(self, value: int):\n        # This should generate an error.\n        self.value = value",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess20",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess20",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess20",
        "peekOfCode": "T = TypeVar(\"T\")\nclass ClassA(Generic[T]):\n    def __init__(self, value: T) -> None:\n        self.value: T = value\n    def set_value(self, value: int):\n        # This should generate an error.\n        self.value = value",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess20",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "class A:\n    pi = 3.1415\n    def __init__(self):\n        self.x = 1\nclass B(A):\n    def __init__(self):\n        self.y = \"hi\"\nclass C(B):\n    def method1(self):\n        a = self.x",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "class B(A):\n    def __init__(self):\n        self.y = \"hi\"\nclass C(B):\n    def method1(self):\n        a = self.x\n        require_int(a)\n        # This should generate an error because a should be an int\n        require_str(a)\n        b = self.y",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "class C(B):\n    def method1(self):\n        a = self.x\n        require_int(a)\n        # This should generate an error because a should be an int\n        require_str(a)\n        b = self.y\n        require_str(b)\n        # This should generate an error because b should be an str\n        require_int(b)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "class Parent(Generic[_TParent]):\n    member1: _TParent\nclass Child(Parent[_TChild]):\n    def __init__(self, val: _TChild):\n        self.member1 = val",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "class Child(Parent[_TChild]):\n    def __init__(self, val: _TChild):\n        self.member1 = val",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "require_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "def require_int(val: int):\n    pass\ndef require_str(val: str):\n    pass\ndef require_float(val: float):\n    pass\n_TParent = TypeVar(\"_TParent\")\n_TChild = TypeVar(\"_TChild\")\nclass Parent(Generic[_TParent]):\n    member1: _TParent",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "require_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "def require_str(val: str):\n    pass\ndef require_float(val: float):\n    pass\n_TParent = TypeVar(\"_TParent\")\n_TChild = TypeVar(\"_TChild\")\nclass Parent(Generic[_TParent]):\n    member1: _TParent\nclass Child(Parent[_TChild]):\n    def __init__(self, val: _TChild):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "require_float",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "def require_float(val: float):\n    pass\n_TParent = TypeVar(\"_TParent\")\n_TChild = TypeVar(\"_TChild\")\nclass Parent(Generic[_TParent]):\n    member1: _TParent\nclass Child(Parent[_TChild]):\n    def __init__(self, val: _TChild):\n        self.member1 = val",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "_TParent",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "_TParent = TypeVar(\"_TParent\")\n_TChild = TypeVar(\"_TChild\")\nclass Parent(Generic[_TParent]):\n    member1: _TParent\nclass Child(Parent[_TChild]):\n    def __init__(self, val: _TChild):\n        self.member1 = val",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "_TChild",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "peekOfCode": "_TChild = TypeVar(\"_TChild\")\nclass Parent(Generic[_TParent]):\n    member1: _TParent\nclass Child(Parent[_TChild]):\n    def __init__(self, val: _TChild):\n        self.member1 = val",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess3",
        "documentation": {}
    },
    {
        "label": "HasItemProtocol1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class HasItemProtocol1(Protocol):\n    item: int\nclass Mixin1:\n    def do_stuff(self: HasItemProtocol1):\n        pass\nclass A1(Mixin1):\n    item = 1\nclass B1(Mixin1):\n    item = \"hi\"\nclass C1(Mixin1):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "Mixin1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class Mixin1:\n    def do_stuff(self: HasItemProtocol1):\n        pass\nclass A1(Mixin1):\n    item = 1\nclass B1(Mixin1):\n    item = \"hi\"\nclass C1(Mixin1):\n    pass\nA1().do_stuff()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "A1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class A1(Mixin1):\n    item = 1\nclass B1(Mixin1):\n    item = \"hi\"\nclass C1(Mixin1):\n    pass\nA1().do_stuff()\n# This should generate an error because B1 doesn't\n# match the protocol.\nB1().do_stuff()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "B1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class B1(Mixin1):\n    item = \"hi\"\nclass C1(Mixin1):\n    pass\nA1().do_stuff()\n# This should generate an error because B1 doesn't\n# match the protocol.\nB1().do_stuff()\n# This should generate an error because C1 doesn't\n# match the protocol.",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class C1(Mixin1):\n    pass\nA1().do_stuff()\n# This should generate an error because B1 doesn't\n# match the protocol.\nB1().do_stuff()\n# This should generate an error because C1 doesn't\n# match the protocol.\nC1().do_stuff()\nclass HasItemProtocol2(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "HasItemProtocol2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class HasItemProtocol2(Protocol):\n    def must_have(self) -> None:\n        pass\nclass Mixin2:\n    @classmethod\n    def do_stuff(cls: Type[HasItemProtocol2]):\n        pass\nclass A2(Mixin2):\n    def must_have(self) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "Mixin2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class Mixin2:\n    @classmethod\n    def do_stuff(cls: Type[HasItemProtocol2]):\n        pass\nclass A2(Mixin2):\n    def must_have(self) -> None:\n        pass\nclass B2(Mixin2):\n    pass\nA2.do_stuff()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "A2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class A2(Mixin2):\n    def must_have(self) -> None:\n        pass\nclass B2(Mixin2):\n    pass\nA2.do_stuff()\n# This should generate an error because B2 doesn't\n# match the protocol.\nB2.do_stuff()\nclass Bar:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "B2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class B2(Mixin2):\n    pass\nA2.do_stuff()\n# This should generate an error because B2 doesn't\n# match the protocol.\nB2.do_stuff()\nclass Bar:\n    pass\nclass Foo:\n    @staticmethod",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class Bar:\n    pass\nclass Foo:\n    @staticmethod\n    def get_or_create(context: Bar):\n        return object.__getattribute__(context, \"\")\nTFoo2 = TypeVar(\"TFoo2\", bound=\"Foo2\")\nclass Foo2:\n    @classmethod\n    def bar(cls: type[TFoo2]) -> TFoo2:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class Foo:\n    @staticmethod\n    def get_or_create(context: Bar):\n        return object.__getattribute__(context, \"\")\nTFoo2 = TypeVar(\"TFoo2\", bound=\"Foo2\")\nclass Foo2:\n    @classmethod\n    def bar(cls: type[TFoo2]) -> TFoo2:\n        ...\n    def baz(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class Foo2:\n    @classmethod\n    def bar(cls: type[TFoo2]) -> TFoo2:\n        ...\n    def baz(self) -> None:\n        self.bar()\nclass ClassWithNewOverride:\n    def __new__(cls):\n        return object.__new__(cls)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "ClassWithNewOverride",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "class ClassWithNewOverride:\n    def __new__(cls):\n        return object.__new__(cls)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "TFoo2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "peekOfCode": "TFoo2 = TypeVar(\"TFoo2\", bound=\"Foo2\")\nclass Foo2:\n    @classmethod\n    def bar(cls: type[TFoo2]) -> TFoo2:\n        ...\n    def baz(self) -> None:\n        self.bar()\nclass ClassWithNewOverride:\n    def __new__(cls):\n        return object.__new__(cls)",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess4",
        "documentation": {}
    },
    {
        "label": "IntProvider",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess5",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess5",
        "peekOfCode": "class IntProvider:\n    def __get__(self, instance: object, owner: Any) -> int:\n        return 0\nclass Foo:\n    _int_value_declared: Union[IntProvider, int] = 3\n    _int_value_inferred = 3\n    def __init__(self):\n        pass\n    def get_int_value_1(self) -> int:\n        reveal_type(self._int_value_declared, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess5",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess5",
        "peekOfCode": "class Foo:\n    _int_value_declared: Union[IntProvider, int] = 3\n    _int_value_inferred = 3\n    def __init__(self):\n        pass\n    def get_int_value_1(self) -> int:\n        reveal_type(self._int_value_declared, expected_text=\"int\")\n        return self._int_value_declared\n    def get_int_value_2(self) -> int:\n        reveal_type(self._int_value_inferred, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess5",
        "documentation": {}
    },
    {
        "label": "FooBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "class FooBase:\n    pass\nclass Column(Generic[_T]):\n    def __init__(self: \"Column[_T]\", type: Type[_T]) -> None:\n        ...\n    @overload\n    def __get__(self: \"Column[_T]\", instance: None, type: Any) -> \"Column[_T]\":\n        ...\n    @overload\n    def __get__(self: \"Column[_T]\", instance: FooBase, type: Any) -> _T:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "Column",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "class Column(Generic[_T]):\n    def __init__(self: \"Column[_T]\", type: Type[_T]) -> None:\n        ...\n    @overload\n    def __get__(self: \"Column[_T]\", instance: None, type: Any) -> \"Column[_T]\":\n        ...\n    @overload\n    def __get__(self: \"Column[_T]\", instance: FooBase, type: Any) -> _T:\n        ...\n    def __get__(",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "class Foo(FooBase):\n    bar: Column[str] = Column(str)\n    baz = Column(str)\nFoo.bar\nFoo().bar\nFoo.baz\nFoo().baz\nfoo = Foo()\n# This should generate an error because bar is declared as containing a\n# Column[str], which doesn't provide a __set__ method.",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass FooBase:\n    pass\nclass Column(Generic[_T]):\n    def __init__(self: \"Column[_T]\", type: Type[_T]) -> None:\n        ...\n    @overload\n    def __get__(self: \"Column[_T]\", instance: None, type: Any) -> \"Column[_T]\":\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "foo = Foo()\n# This should generate an error because bar is declared as containing a\n# Column[str], which doesn't provide a __set__ method.\nfoo.bar = \"\"\n# This should generate an error because baz's inferred type is\n# Column[str], which doesn't provide a __set__ method.\nfoo.baz = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "foo.bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "foo.bar = \"\"\n# This should generate an error because baz's inferred type is\n# Column[str], which doesn't provide a __set__ method.\nfoo.baz = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "foo.baz",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "peekOfCode": "foo.baz = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess6",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "class ClassA:\n    def __init__(self):\n        return\n    def __getattr__(self, key: str) -> Callable[[str], str]:\n        return lambda a: a\na = ClassA()\na.foo(\"hi\")\nT = TypeVar(\"T\")\nclass MetaClass(type):\n    def __getattr__(cls, key: str) -> Callable[[T], T]:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "MetaClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "class MetaClass(type):\n    def __getattr__(cls, key: str) -> Callable[[T], T]:\n        return lambda x: x\nclass ClassB(metaclass=MetaClass):\n    pass\nv1 = ClassB.some_function(3)\nreveal_type(v1, expected_text=\"int\")\nv2 = ClassB.some_function(\"hi\")\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "class ClassB(metaclass=MetaClass):\n    pass\nv1 = ClassB.some_function(3)\nreveal_type(v1, expected_text=\"int\")\nv2 = ClassB.some_function(\"hi\")\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "a = ClassA()\na.foo(\"hi\")\nT = TypeVar(\"T\")\nclass MetaClass(type):\n    def __getattr__(cls, key: str) -> Callable[[T], T]:\n        return lambda x: x\nclass ClassB(metaclass=MetaClass):\n    pass\nv1 = ClassB.some_function(3)\nreveal_type(v1, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "T = TypeVar(\"T\")\nclass MetaClass(type):\n    def __getattr__(cls, key: str) -> Callable[[T], T]:\n        return lambda x: x\nclass ClassB(metaclass=MetaClass):\n    pass\nv1 = ClassB.some_function(3)\nreveal_type(v1, expected_text=\"int\")\nv2 = ClassB.some_function(\"hi\")\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "v1 = ClassB.some_function(3)\nreveal_type(v1, expected_text=\"int\")\nv2 = ClassB.some_function(\"hi\")\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "peekOfCode": "v2 = ClassB.some_function(\"hi\")\nreveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess7",
        "documentation": {}
    },
    {
        "label": "Column",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "class Column(Generic[_T]):\n    def __get__(self, instance: object, type: Any) -> _T:\n        ...\n    def __set__(self, instance: object, value: _T) -> _T:\n        ...\n    def __delete__(self, instance: object) -> None:\n        ...\nclass Foo:\n    bar: Column[str] = Column()\n    baz: Column[list[int]] = Column()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "class Foo:\n    bar: Column[str] = Column()\n    baz: Column[list[int]] = Column()\nfoo = Foo()\nv1 = foo.bar\nreveal_type(v1, expected_text=\"str\")\nfoo.bar = \"\"\ndel foo.bar\nv2 = foo.baz\nreveal_type(v2, expected_text=\"list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "Minimal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "class Minimal(Generic[_T, _T_co]):\n    def __init__(self, name: str, func: Callable[[_T], _T_co]):\n        ...\n    @overload\n    def __get__(self, instance: None, owner: Type[_T]) -> \"Minimal[_T, _T_co]\":\n        ...\n    @overload\n    def __get__(self, instance: _T, owner: Type[_T]) -> _T_co:\n        ...\n    def __get__(self, instance: Optional[_T], owner: Type[_T]) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "class B:\n    @minimal_property(\"foo\")\n    def foo(self) -> str:\n        return \"hello\"\nb = B()\nreveal_type(b.foo, expected_text=\"str\")\nreveal_type(B.foo, expected_text=\"Minimal[B, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "minimal_property",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "def minimal_property(\n    name: str,\n) -> Callable[[Callable[[_T], _T_co]], Minimal[_T, _T_co]]:\n    def decorator(func: Callable[[_T], _T_co]) -> Minimal[_T, _T_co]:\n        return Minimal(name, func)\n    return decorator\nclass B:\n    @minimal_property(\"foo\")\n    def foo(self) -> str:\n        return \"hello\"",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_T_co = TypeVar(\"_T_co\", covariant=True)\nclass Column(Generic[_T]):\n    def __get__(self, instance: object, type: Any) -> _T:\n        ...\n    def __set__(self, instance: object, value: _T) -> _T:\n        ...\n    def __delete__(self, instance: object) -> None:\n        ...\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\nclass Column(Generic[_T]):\n    def __get__(self, instance: object, type: Any) -> _T:\n        ...\n    def __set__(self, instance: object, value: _T) -> _T:\n        ...\n    def __delete__(self, instance: object) -> None:\n        ...\nclass Foo:\n    bar: Column[str] = Column()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "foo = Foo()\nv1 = foo.bar\nreveal_type(v1, expected_text=\"str\")\nfoo.bar = \"\"\ndel foo.bar\nv2 = foo.baz\nreveal_type(v2, expected_text=\"list[int]\")\nfoo.baz = [1]\ndel foo.baz\nclass Minimal(Generic[_T, _T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "v1 = foo.bar\nreveal_type(v1, expected_text=\"str\")\nfoo.bar = \"\"\ndel foo.bar\nv2 = foo.baz\nreveal_type(v2, expected_text=\"list[int]\")\nfoo.baz = [1]\ndel foo.baz\nclass Minimal(Generic[_T, _T_co]):\n    def __init__(self, name: str, func: Callable[[_T], _T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "foo.bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "foo.bar = \"\"\ndel foo.bar\nv2 = foo.baz\nreveal_type(v2, expected_text=\"list[int]\")\nfoo.baz = [1]\ndel foo.baz\nclass Minimal(Generic[_T, _T_co]):\n    def __init__(self, name: str, func: Callable[[_T], _T_co]):\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "v2 = foo.baz\nreveal_type(v2, expected_text=\"list[int]\")\nfoo.baz = [1]\ndel foo.baz\nclass Minimal(Generic[_T, _T_co]):\n    def __init__(self, name: str, func: Callable[[_T], _T_co]):\n        ...\n    @overload\n    def __get__(self, instance: None, owner: Type[_T]) -> \"Minimal[_T, _T_co]\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "foo.baz",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "foo.baz = [1]\ndel foo.baz\nclass Minimal(Generic[_T, _T_co]):\n    def __init__(self, name: str, func: Callable[[_T], _T_co]):\n        ...\n    @overload\n    def __get__(self, instance: None, owner: Type[_T]) -> \"Minimal[_T, _T_co]\":\n        ...\n    @overload\n    def __get__(self, instance: _T, owner: Type[_T]) -> _T_co:",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "peekOfCode": "b = B()\nreveal_type(b.foo, expected_text=\"str\")\nreveal_type(B.foo, expected_text=\"Minimal[B, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess8",
        "documentation": {}
    },
    {
        "label": "GetAttrTest",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess9",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess9",
        "peekOfCode": "class GetAttrTest:\n    def __getattr__(self, name: str) -> int:\n        ...\ndef test_get_attr() -> None:\n    a = GetAttrTest()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess9",
        "documentation": {}
    },
    {
        "label": "test_get_attr",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.memberAccess9",
        "description": "packages.pyright-internal.src.tests.samples.memberAccess9",
        "peekOfCode": "def test_get_attr() -> None:\n    a = GetAttrTest()",
        "detail": "packages.pyright-internal.src.tests.samples.memberAccess9",
        "documentation": {}
    },
    {
        "label": "myArray1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass1",
        "description": "packages.pyright-internal.src.tests.samples.metaclass1",
        "peekOfCode": "myArray1 = (c_uint64 * 5)()\nmyArray2: Array[c_uint64] = (c_uint64 * 5)()",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass1",
        "documentation": {}
    },
    {
        "label": "Fruit",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass2",
        "description": "packages.pyright-internal.src.tests.samples.metaclass2",
        "peekOfCode": "class Fruit(Enum):\n    apple = 1\n    orange = 2\n    pear = 3\ndef requires_fruit_mapping(a: Mapping[str, Fruit]):\n    pass\nrequires_fruit_mapping(Fruit.__members__)\naaa = len(Fruit)\nfor i in Fruit:\n    print(i)",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass2",
        "documentation": {}
    },
    {
        "label": "Meta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass2",
        "description": "packages.pyright-internal.src.tests.samples.metaclass2",
        "peekOfCode": "class Meta(type):\n    def foo(cls, some_param: str):\n        pass\nclass MyClass(metaclass=Meta):\n    pass\nMyClass.foo(\"some argument\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass2",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass2",
        "description": "packages.pyright-internal.src.tests.samples.metaclass2",
        "peekOfCode": "class MyClass(metaclass=Meta):\n    pass\nMyClass.foo(\"some argument\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass2",
        "documentation": {}
    },
    {
        "label": "requires_fruit_mapping",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass2",
        "description": "packages.pyright-internal.src.tests.samples.metaclass2",
        "peekOfCode": "def requires_fruit_mapping(a: Mapping[str, Fruit]):\n    pass\nrequires_fruit_mapping(Fruit.__members__)\naaa = len(Fruit)\nfor i in Fruit:\n    print(i)\nclass Meta(type):\n    def foo(cls, some_param: str):\n        pass\nclass MyClass(metaclass=Meta):",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass2",
        "documentation": {}
    },
    {
        "label": "aaa",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass2",
        "description": "packages.pyright-internal.src.tests.samples.metaclass2",
        "peekOfCode": "aaa = len(Fruit)\nfor i in Fruit:\n    print(i)\nclass Meta(type):\n    def foo(cls, some_param: str):\n        pass\nclass MyClass(metaclass=Meta):\n    pass\nMyClass.foo(\"some argument\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass2",
        "documentation": {}
    },
    {
        "label": "Meta1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Meta1(type):\n    pass\nclass Meta2(type):\n    pass\nclass Base1(metaclass=Meta1):\n    pass\nclass Base2(metaclass=Meta2):\n    pass\n# This should generate an error because the two\n# metaclasses conflict.",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Meta2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Meta2(type):\n    pass\nclass Base1(metaclass=Meta1):\n    pass\nclass Base2(metaclass=Meta2):\n    pass\n# This should generate an error because the two\n# metaclasses conflict.\nclass Foobar1(Base1, Base2):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Base1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Base1(metaclass=Meta1):\n    pass\nclass Base2(metaclass=Meta2):\n    pass\n# This should generate an error because the two\n# metaclasses conflict.\nclass Foobar1(Base1, Base2):\n    pass\nclass Meta3(type):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Base2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Base2(metaclass=Meta2):\n    pass\n# This should generate an error because the two\n# metaclasses conflict.\nclass Foobar1(Base1, Base2):\n    pass\nclass Meta3(type):\n    pass\nclass SubMeta3(Meta3):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Foobar1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Foobar1(Base1, Base2):\n    pass\nclass Meta3(type):\n    pass\nclass SubMeta3(Meta3):\n    pass\nclass Base4(metaclass=Meta3):\n    pass\nclass Base5(metaclass=SubMeta3):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Meta3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Meta3(type):\n    pass\nclass SubMeta3(Meta3):\n    pass\nclass Base4(metaclass=Meta3):\n    pass\nclass Base5(metaclass=SubMeta3):\n    pass\nclass Foobar2(Base4, Base5):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "SubMeta3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class SubMeta3(Meta3):\n    pass\nclass Base4(metaclass=Meta3):\n    pass\nclass Base5(metaclass=SubMeta3):\n    pass\nclass Foobar2(Base4, Base5):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Base4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Base4(metaclass=Meta3):\n    pass\nclass Base5(metaclass=SubMeta3):\n    pass\nclass Foobar2(Base4, Base5):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Base5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Base5(metaclass=SubMeta3):\n    pass\nclass Foobar2(Base4, Base5):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "Foobar2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass3",
        "description": "packages.pyright-internal.src.tests.samples.metaclass3",
        "peekOfCode": "class Foobar2(Base4, Base5):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass3",
        "documentation": {}
    },
    {
        "label": "MyMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass4",
        "description": "packages.pyright-internal.src.tests.samples.metaclass4",
        "peekOfCode": "class MyMeta(type):\n    def do_something(self, p1: str, p2: int):\n        pass\nMyCustomClass = MyMeta(\"MyCustomClass\", (object,), {})\nreveal_type(MyCustomClass, expected_text=\"Type[MyCustomClass]\")\nclass DerivedCustomClass(MyCustomClass):\n    pass\nDerivedCustomClass.do_something(\"hi\", 3)\n# This should generate an error because the second\n# argument is the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass4",
        "documentation": {}
    },
    {
        "label": "DerivedCustomClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass4",
        "description": "packages.pyright-internal.src.tests.samples.metaclass4",
        "peekOfCode": "class DerivedCustomClass(MyCustomClass):\n    pass\nDerivedCustomClass.do_something(\"hi\", 3)\n# This should generate an error because the second\n# argument is the wrong type.\nDerivedCustomClass.do_something(\"hi\", \"no\")\ninstance = DerivedCustomClass()",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass4",
        "documentation": {}
    },
    {
        "label": "MyCustomClass",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass4",
        "description": "packages.pyright-internal.src.tests.samples.metaclass4",
        "peekOfCode": "MyCustomClass = MyMeta(\"MyCustomClass\", (object,), {})\nreveal_type(MyCustomClass, expected_text=\"Type[MyCustomClass]\")\nclass DerivedCustomClass(MyCustomClass):\n    pass\nDerivedCustomClass.do_something(\"hi\", 3)\n# This should generate an error because the second\n# argument is the wrong type.\nDerivedCustomClass.do_something(\"hi\", \"no\")\ninstance = DerivedCustomClass()",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass4",
        "documentation": {}
    },
    {
        "label": "instance",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass4",
        "description": "packages.pyright-internal.src.tests.samples.metaclass4",
        "peekOfCode": "instance = DerivedCustomClass()",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass4",
        "documentation": {}
    },
    {
        "label": "MetaFoo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass5",
        "description": "packages.pyright-internal.src.tests.samples.metaclass5",
        "peekOfCode": "class MetaFoo(type):\n    def __eq__(self, a: \"Type[Foo]\") -> str:\n        return \"hi\"\n    def __add__(self, a: \"Type[Foo]\") -> int:\n        return 0\nclass Foo(metaclass=MetaFoo):\n    pass\ndef func1(a: Foo):\n    reveal_type(type(a), expected_text=\"Type[Foo]\")\n    reveal_type(type(\"string1\"), expected_text=\"Type[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass5",
        "description": "packages.pyright-internal.src.tests.samples.metaclass5",
        "peekOfCode": "class Foo(metaclass=MetaFoo):\n    pass\ndef func1(a: Foo):\n    reveal_type(type(a), expected_text=\"Type[Foo]\")\n    reveal_type(type(\"string1\"), expected_text=\"Type[str]\")\n    reveal_type(type(a) == type(\"hi\"), expected_text=\"bool\")\n    reveal_type(type(\"hi\") == type(\"hi\"), expected_text=\"bool\")\n    reveal_type(str != str, expected_text=\"bool\")\n    reveal_type(Foo == type(a), expected_text=\"str\")\n    reveal_type(Foo != type(a), expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass5",
        "description": "packages.pyright-internal.src.tests.samples.metaclass5",
        "peekOfCode": "def func1(a: Foo):\n    reveal_type(type(a), expected_text=\"Type[Foo]\")\n    reveal_type(type(\"string1\"), expected_text=\"Type[str]\")\n    reveal_type(type(a) == type(\"hi\"), expected_text=\"bool\")\n    reveal_type(type(\"hi\") == type(\"hi\"), expected_text=\"bool\")\n    reveal_type(str != str, expected_text=\"bool\")\n    reveal_type(Foo == type(a), expected_text=\"str\")\n    reveal_type(Foo != type(a), expected_text=\"bool\")\n    reveal_type(type(a) == Foo, expected_text=\"str\")\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass6",
        "description": "packages.pyright-internal.src.tests.samples.metaclass6",
        "peekOfCode": "class Foo(str, Enum):\n    bar = \"bar\"\nfor member in Foo:\n    reveal_type(member, expected_text=\"Foo\")\nfoo_members = list(Foo)\nreveal_type(foo_members, expected_text=\"list[Foo]\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass6",
        "documentation": {}
    },
    {
        "label": "foo_members",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass6",
        "description": "packages.pyright-internal.src.tests.samples.metaclass6",
        "peekOfCode": "foo_members = list(Foo)\nreveal_type(foo_members, expected_text=\"list[Foo]\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass6",
        "documentation": {}
    },
    {
        "label": "FactoryMetaClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "class FactoryMetaClass1(type):\n    def __call__(cls, **kwargs):\n        return cls()\nclass BaseFactory1:\n    def __new__(cls, *args, **kwargs):\n        raise RuntimeError(\"You cannot instantiate BaseFactory\")\nclass Factory1(BaseFactory1, metaclass=FactoryMetaClass1):\n    ...\nv1 = Factory1()\nreveal_type(v1, expected_text=\"Factory1\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "BaseFactory1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "class BaseFactory1:\n    def __new__(cls, *args, **kwargs):\n        raise RuntimeError(\"You cannot instantiate BaseFactory\")\nclass Factory1(BaseFactory1, metaclass=FactoryMetaClass1):\n    ...\nv1 = Factory1()\nreveal_type(v1, expected_text=\"Factory1\")\nclass FactoryMetaClass2(type):\n    ...\nclass BaseFactory2:",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "Factory1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "class Factory1(BaseFactory1, metaclass=FactoryMetaClass1):\n    ...\nv1 = Factory1()\nreveal_type(v1, expected_text=\"Factory1\")\nclass FactoryMetaClass2(type):\n    ...\nclass BaseFactory2:\n    def __new__(cls, *args, **kwargs):\n        raise RuntimeError(\"You cannot instantiate BaseFactory\")\nclass Factory2(BaseFactory2, metaclass=FactoryMetaClass2):",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "FactoryMetaClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "class FactoryMetaClass2(type):\n    ...\nclass BaseFactory2:\n    def __new__(cls, *args, **kwargs):\n        raise RuntimeError(\"You cannot instantiate BaseFactory\")\nclass Factory2(BaseFactory2, metaclass=FactoryMetaClass2):\n    ...\nv2 = Factory2()\nreveal_type(v2, expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "BaseFactory2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "class BaseFactory2:\n    def __new__(cls, *args, **kwargs):\n        raise RuntimeError(\"You cannot instantiate BaseFactory\")\nclass Factory2(BaseFactory2, metaclass=FactoryMetaClass2):\n    ...\nv2 = Factory2()\nreveal_type(v2, expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "Factory2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "class Factory2(BaseFactory2, metaclass=FactoryMetaClass2):\n    ...\nv2 = Factory2()\nreveal_type(v2, expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "v1 = Factory1()\nreveal_type(v1, expected_text=\"Factory1\")\nclass FactoryMetaClass2(type):\n    ...\nclass BaseFactory2:\n    def __new__(cls, *args, **kwargs):\n        raise RuntimeError(\"You cannot instantiate BaseFactory\")\nclass Factory2(BaseFactory2, metaclass=FactoryMetaClass2):\n    ...\nv2 = Factory2()",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass7",
        "description": "packages.pyright-internal.src.tests.samples.metaclass7",
        "peekOfCode": "v2 = Factory2()\nreveal_type(v2, expected_text=\"NoReturn\")",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass7",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass8",
        "description": "packages.pyright-internal.src.tests.samples.metaclass8",
        "peekOfCode": "class A(type, Generic[T]):\n    ...\n# This should generate an error because generic metaclasses are not allowed.\nclass B(Generic[T], metaclass=A[T]):\n    ...\nclass C(metaclass=A[Any]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass8",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass8",
        "description": "packages.pyright-internal.src.tests.samples.metaclass8",
        "peekOfCode": "class B(Generic[T], metaclass=A[T]):\n    ...\nclass C(metaclass=A[Any]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass8",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass8",
        "description": "packages.pyright-internal.src.tests.samples.metaclass8",
        "peekOfCode": "class C(metaclass=A[Any]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass8",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass8",
        "description": "packages.pyright-internal.src.tests.samples.metaclass8",
        "peekOfCode": "T = TypeVar(\"T\")\nclass A(type, Generic[T]):\n    ...\n# This should generate an error because generic metaclasses are not allowed.\nclass B(Generic[T], metaclass=A[T]):\n    ...\nclass C(metaclass=A[Any]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass8",
        "documentation": {}
    },
    {
        "label": "Meta1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Meta1(type):\n    def __new__(\n        cls: Type[Self],\n        cls_name: str,\n        bases: Tuple[type, ...],\n        attrs: Dict[str, Any],\n        *,\n        param1: int,\n        param2: str,\n        param3: str = \"\",",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class1_1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class1_1(metaclass=Meta1, param1=1, param2=\"\", param3=\"\"):\n    ...\nclass Class1_2(metaclass=Meta1, param2=\"\", param1=1):\n    ...\n# This should generate an error because param1 is the wrong type.\nclass Class1_3(metaclass=Meta1, param1=\"\", param2=\"\"):\n    ...\n# This should generate an error because param1 and param2 are missing.\nclass Class1_4(metaclass=Meta1):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class1_2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class1_2(metaclass=Meta1, param2=\"\", param1=1):\n    ...\n# This should generate an error because param1 is the wrong type.\nclass Class1_3(metaclass=Meta1, param1=\"\", param2=\"\"):\n    ...\n# This should generate an error because param1 and param2 are missing.\nclass Class1_4(metaclass=Meta1):\n    ...\n# This should generate an error because param4 doesn't exist.\nclass Class1_5(metaclass=Meta1, param2=\"\", param1=1, param4=3):",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class1_3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class1_3(metaclass=Meta1, param1=\"\", param2=\"\"):\n    ...\n# This should generate an error because param1 and param2 are missing.\nclass Class1_4(metaclass=Meta1):\n    ...\n# This should generate an error because param4 doesn't exist.\nclass Class1_5(metaclass=Meta1, param2=\"\", param1=1, param4=3):\n    ...\nclass Meta2(type):\n    def __new__(",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class1_4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class1_4(metaclass=Meta1):\n    ...\n# This should generate an error because param4 doesn't exist.\nclass Class1_5(metaclass=Meta1, param2=\"\", param1=1, param4=3):\n    ...\nclass Meta2(type):\n    def __new__(\n        cls: Type[Self],\n        cls_name: str,\n        bases: Tuple[type, ...],",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class1_5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class1_5(metaclass=Meta1, param2=\"\", param1=1, param4=3):\n    ...\nclass Meta2(type):\n    def __new__(\n        cls: Type[Self],\n        cls_name: str,\n        bases: Tuple[type, ...],\n        attrs: Dict[str, Any],\n        *,\n        param1: int,",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Meta2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Meta2(type):\n    def __new__(\n        cls: Type[Self],\n        cls_name: str,\n        bases: Tuple[type, ...],\n        attrs: Dict[str, Any],\n        *,\n        param1: int,\n        **kwargs: str,\n    ) -> Self:",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class2_1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class2_1(metaclass=Meta2, param1=1, param2=\"\", param3=\"\"):\n    ...\nclass Class2_2(metaclass=Meta2, param2=\"\", param1=1, param20=\"\"):\n    ...\n# This should generate an error because param1 is the wrong type.\nclass Class2_3(metaclass=Meta2, param1=\"\", param2=\"\"):\n    ...\n# This should generate an error because param1 is missing.\nclass Class2_4(metaclass=Meta2):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class2_2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class2_2(metaclass=Meta2, param2=\"\", param1=1, param20=\"\"):\n    ...\n# This should generate an error because param1 is the wrong type.\nclass Class2_3(metaclass=Meta2, param1=\"\", param2=\"\"):\n    ...\n# This should generate an error because param1 is missing.\nclass Class2_4(metaclass=Meta2):\n    ...\n# This should generate an error because param4 is the wrong type.\nclass Class2_5(metaclass=Meta2, param2=\"\", param1=1, param4=3):",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class2_3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class2_3(metaclass=Meta2, param1=\"\", param2=\"\"):\n    ...\n# This should generate an error because param1 is missing.\nclass Class2_4(metaclass=Meta2):\n    ...\n# This should generate an error because param4 is the wrong type.\nclass Class2_5(metaclass=Meta2, param2=\"\", param1=1, param4=3):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class2_4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class2_4(metaclass=Meta2):\n    ...\n# This should generate an error because param4 is the wrong type.\nclass Class2_5(metaclass=Meta2, param2=\"\", param1=1, param4=3):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "Class2_5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.metaclass9",
        "description": "packages.pyright-internal.src.tests.samples.metaclass9",
        "peekOfCode": "class Class2_5(metaclass=Meta2, param2=\"\", param1=1, param4=3):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.metaclass9",
        "documentation": {}
    },
    {
        "label": "ParentClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class ParentClass:\n    def my_method1(self, a: int):\n        return 1\n    def my_method2(self, a: int, b: int):\n        return 1\n    def my_method3(self, a: int, b: int):\n        return 1\n    def my_method4(self, a: int, *b: int):\n        return 1\n    def my_method5(self, a: int, _b: int):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "ChildClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class ChildClass(ParentClass):\n    # This should generate an error because the type of 'a' doesn't match.\n    def my_method1(self, a: str):\n        return 1\n    # This should generate an error because it's missing a param named 'b'.\n    def my_method2(self, a: int):\n        return 1\n    # This should generate an error because the name doesn't match.\n    def my_method3(self, a: int, c: int):\n        return 1",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class A:\n    def test(self, t: Sequence[int]) -> Sequence[str]:\n        ...\nclass GeneralizedArgument(A):\n    def test(self, t: Iterable[int], bbb: str = \"\") -> Sequence[str]:\n        ...\nclass NarrowerArgument(A):\n    # This should generate error because List[int] is narrower\n    # than Iterable[int].\n    def test(self, t: List[int]) -> Sequence[str]:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "GeneralizedArgument",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class GeneralizedArgument(A):\n    def test(self, t: Iterable[int], bbb: str = \"\") -> Sequence[str]:\n        ...\nclass NarrowerArgument(A):\n    # This should generate error because List[int] is narrower\n    # than Iterable[int].\n    def test(self, t: List[int]) -> Sequence[str]:\n        ...\nclass NarrowerReturn(A):\n    def test(self, t: Sequence[int]) -> List[str]:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "NarrowerArgument",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class NarrowerArgument(A):\n    # This should generate error because List[int] is narrower\n    # than Iterable[int].\n    def test(self, t: List[int]) -> Sequence[str]:\n        ...\nclass NarrowerReturn(A):\n    def test(self, t: Sequence[int]) -> List[str]:\n        ...\nclass GeneralizedReturn1(A):\n    # This should generate an error because Iterable[str] is",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "NarrowerReturn",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class NarrowerReturn(A):\n    def test(self, t: Sequence[int]) -> List[str]:\n        ...\nclass GeneralizedReturn1(A):\n    # This should generate an error because Iterable[str] is\n    # wider than Sequence[str].\n    def test(self, t: Sequence[int]) -> Iterable[str]:\n        ...\nclass GeneralizedReturn2(A):\n    # This should generate an error because List[int] is",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "GeneralizedReturn1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class GeneralizedReturn1(A):\n    # This should generate an error because Iterable[str] is\n    # wider than Sequence[str].\n    def test(self, t: Sequence[int]) -> Iterable[str]:\n        ...\nclass GeneralizedReturn2(A):\n    # This should generate an error because List[int] is\n    # incompatible with Sequence[str].\n    def test(self, t: Sequence[int]) -> List[int]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "GeneralizedReturn2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class GeneralizedReturn2(A):\n    # This should generate an error because List[int] is\n    # incompatible with Sequence[str].\n    def test(self, t: Sequence[int]) -> List[int]:\n        ...\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass Base1:\n    def submit(self, fn: Callable[..., _T1], *args: Any, **kwargs: Any) -> List[_T1]:\n        return []",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Base1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Base1:\n    def submit(self, fn: Callable[..., _T1], *args: Any, **kwargs: Any) -> List[_T1]:\n        return []\nclass Base2(Base1):\n    def submit(self, fn: Callable[..., _T2], *args: Any, **kwargs: Any) -> List[_T2]:\n        return []\nclass Foo:\n    pass\n_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T2B = TypeVar(\"_T2B\", bound=Foo)",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Base2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Base2(Base1):\n    def submit(self, fn: Callable[..., _T2], *args: Any, **kwargs: Any) -> List[_T2]:\n        return []\nclass Foo:\n    pass\n_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T2B = TypeVar(\"_T2B\", bound=Foo)\nclass ClassA(Generic[_T2A]):\n    def func1(self) -> Optional[_T2A]:\n        return None",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Foo:\n    pass\n_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T2B = TypeVar(\"_T2B\", bound=Foo)\nclass ClassA(Generic[_T2A]):\n    def func1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop1(self) -> Optional[_T2A]:\n        return None",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class ClassA(Generic[_T2A]):\n    def func1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop2(self) -> Optional[_T2A]:\n        return None\n    @prop2.setter",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class ClassB(ClassA[_T2B]):\n    # This should generate an error because a variable\n    # cannot override a property.\n    prop1: _T2B\n    def func1(self) -> Optional[_T2B]:\n        return None\n    @property\n    def prop2(self) -> _T2B:\n        return self.prop1\n    @prop2.setter",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Base3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Base3:\n    def case(self, value: Any) -> Iterable[Any]:\n        return []\nclass Derived3(Base3):\n    @overload\n    def case(self, value: int) -> Iterable[int]:\n        ...\n    @overload\n    def case(self, value: float) -> Iterable[float]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Derived3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Derived3(Base3):\n    @overload\n    def case(self, value: int) -> Iterable[int]:\n        ...\n    @overload\n    def case(self, value: float) -> Iterable[float]:\n        ...\n    def case(self, value: Any) -> Iterable[Any]:\n        return []\nclass Base4:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Base4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Base4:\n    def a(self) -> int:\n        ...\nclass Base5:\n    def a(self) -> int:\n        ...\nclass C(Base4, Base5):\n    # This should generate two error if reportIncompatibleMethodOverride\n    # is enabled.\n    def a(self) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Base5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class Base5:\n    def a(self) -> int:\n        ...\nclass C(Base4, Base5):\n    # This should generate two error if reportIncompatibleMethodOverride\n    # is enabled.\n    def a(self) -> float:\n        ...\nclass MyObject(TypedDict):\n    values: List[str]",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class C(Base4, Base5):\n    # This should generate two error if reportIncompatibleMethodOverride\n    # is enabled.\n    def a(self) -> float:\n        ...\nclass MyObject(TypedDict):\n    values: List[str]",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "MyObject",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "class MyObject(TypedDict):\n    values: List[str]",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "def decorator(func: Callable[P, None]) -> Callable[P, int]:\n    ...\nclass ParentClass:\n    def my_method1(self, a: int):\n        return 1\n    def my_method2(self, a: int, b: int):\n        return 1\n    def my_method3(self, a: int, b: int):\n        return 1\n    def my_method4(self, a: int, *b: int):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "T_ParentClass",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "T_ParentClass = TypeVar(\"T_ParentClass\", bound=\"ParentClass\")\nP = ParamSpec(\"P\")\ndef decorator(func: Callable[P, None]) -> Callable[P, int]:\n    ...\nclass ParentClass:\n    def my_method1(self, a: int):\n        return 1\n    def my_method2(self, a: int, b: int):\n        return 1\n    def my_method3(self, a: int, b: int):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef decorator(func: Callable[P, None]) -> Callable[P, int]:\n    ...\nclass ParentClass:\n    def my_method1(self, a: int):\n        return 1\n    def my_method2(self, a: int, b: int):\n        return 1\n    def my_method3(self, a: int, b: int):\n        return 1",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "T_ChildClass",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "T_ChildClass = TypeVar(\"T_ChildClass\", bound=\"ChildClass\")\nclass ChildClass(ParentClass):\n    # This should generate an error because the type of 'a' doesn't match.\n    def my_method1(self, a: str):\n        return 1\n    # This should generate an error because it's missing a param named 'b'.\n    def my_method2(self, a: int):\n        return 1\n    # This should generate an error because the name doesn't match.\n    def my_method3(self, a: int, c: int):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass Base1:\n    def submit(self, fn: Callable[..., _T1], *args: Any, **kwargs: Any) -> List[_T1]:\n        return []\nclass Base2(Base1):\n    def submit(self, fn: Callable[..., _T2], *args: Any, **kwargs: Any) -> List[_T2]:\n        return []\nclass Foo:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nclass Base1:\n    def submit(self, fn: Callable[..., _T1], *args: Any, **kwargs: Any) -> List[_T1]:\n        return []\nclass Base2(Base1):\n    def submit(self, fn: Callable[..., _T2], *args: Any, **kwargs: Any) -> List[_T2]:\n        return []\nclass Foo:\n    pass\n_T2A = TypeVar(\"_T2A\", bound=Foo)",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "_T2A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "_T2A = TypeVar(\"_T2A\", bound=Foo)\n_T2B = TypeVar(\"_T2B\", bound=Foo)\nclass ClassA(Generic[_T2A]):\n    def func1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop2(self) -> Optional[_T2A]:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "_T2B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "peekOfCode": "_T2B = TypeVar(\"_T2B\", bound=Foo)\nclass ClassA(Generic[_T2A]):\n    def func1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop1(self) -> Optional[_T2A]:\n        return None\n    @property\n    def prop2(self) -> Optional[_T2A]:\n        return None",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride1",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride2",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride2",
        "peekOfCode": "class Base:\n    def f1(self, *, kwarg0: int) -> None:\n        ...\n    def f2(self, *, kwarg0: int) -> None:\n        ...\n    def f3(self, *, kwarg0: int) -> None:\n        ...\n    def f4(self, *, kwarg0: int) -> None:\n        ...\n    def g1(self, a: int, /, b: str, *, kwarg0: int) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride2",
        "documentation": {}
    },
    {
        "label": "Derived",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride2",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride2",
        "peekOfCode": "class Derived(Base):\n    def f1(self, arg0: int = 0, *, kwarg0: int, kwarg1: int = 0) -> None:\n        ...\n    # This should generate an error because of a positional parameter mismatch.\n    def f2(self, arg0: int, *, kwarg0: int, kwarg1: int = 0) -> None:\n        ...\n    # This should generate an error because of a missing kwarg1.\n    def f3(self, arg0: int = 0, *, kwarg0: int, kwarg1: int) -> None:\n        ...\n    # This should generate an error because kwarg0 is the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride2",
        "documentation": {}
    },
    {
        "label": "A1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class A1:\n    def func1(self, a: int) -> str:\n        ...\nclass A2:\n    def func1(self, a: int, b: int = 3) -> str:\n        ...\n# This should generate an error because func1 is incompatible.\nclass ASub(A1, A2):\n    ...\nclass B1:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "A2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class A2:\n    def func1(self, a: int, b: int = 3) -> str:\n        ...\n# This should generate an error because func1 is incompatible.\nclass ASub(A1, A2):\n    ...\nclass B1:\n    def func1(self) -> int:\n        ...\nclass B2:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "ASub",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class ASub(A1, A2):\n    ...\nclass B1:\n    def func1(self) -> int:\n        ...\nclass B2:\n    def func1(self) -> float:\n        ...\nclass BSub(B1, B2):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "B1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class B1:\n    def func1(self) -> int:\n        ...\nclass B2:\n    def func1(self) -> float:\n        ...\nclass BSub(B1, B2):\n    ...\nclass C1:\n    def func1(self) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "B2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class B2:\n    def func1(self) -> float:\n        ...\nclass BSub(B1, B2):\n    ...\nclass C1:\n    def func1(self) -> float:\n        ...\nclass C2:\n    def func1(self) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "BSub",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class BSub(B1, B2):\n    ...\nclass C1:\n    def func1(self) -> float:\n        ...\nclass C2:\n    def func1(self) -> int:\n        ...\n# This should generate an error because func1 is incompatible.\nclass CSub(C1, C2):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class C1:\n    def func1(self) -> float:\n        ...\nclass C2:\n    def func1(self) -> int:\n        ...\n# This should generate an error because func1 is incompatible.\nclass CSub(C1, C2):\n    ...\nclass D1:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "C2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class C2:\n    def func1(self) -> int:\n        ...\n# This should generate an error because func1 is incompatible.\nclass CSub(C1, C2):\n    ...\nclass D1:\n    def func1(self, a: int) -> None:\n        ...\nclass D2:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "CSub",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class CSub(C1, C2):\n    ...\nclass D1:\n    def func1(self, a: int) -> None:\n        ...\nclass D2:\n    def func1(self, b: int) -> None:\n        ...\n# This should generate an error because func1 is incompatible.\nclass DSub(D1, D2):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "D1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class D1:\n    def func1(self, a: int) -> None:\n        ...\nclass D2:\n    def func1(self, b: int) -> None:\n        ...\n# This should generate an error because func1 is incompatible.\nclass DSub(D1, D2):\n    ...\n_T_E = TypeVar(\"_T_E\")",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "D2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class D2:\n    def func1(self, b: int) -> None:\n        ...\n# This should generate an error because func1 is incompatible.\nclass DSub(D1, D2):\n    ...\n_T_E = TypeVar(\"_T_E\")\nclass E1(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "DSub",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class DSub(D1, D2):\n    ...\n_T_E = TypeVar(\"_T_E\")\nclass E1(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass E2(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass ESub(E1[int], E2[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "E1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class E1(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass E2(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass ESub(E1[int], E2[int]):\n    ...\n_T_F = TypeVar(\"_T_F\")\nclass F1(Generic[_T_F]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "E2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class E2(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass ESub(E1[int], E2[int]):\n    ...\n_T_F = TypeVar(\"_T_F\")\nclass F1(Generic[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F2(F1[_T_F]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "ESub",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class ESub(E1[int], E2[int]):\n    ...\n_T_F = TypeVar(\"_T_F\")\nclass F1(Generic[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F2(F1[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F3(F1[_T_F]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "F1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class F1(Generic[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F2(F1[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F3(F1[_T_F]):\n    ...\nclass FSub1(F3[int], F2[int]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "F2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class F2(F1[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F3(F1[_T_F]):\n    ...\nclass FSub1(F3[int], F2[int]):\n    pass\nclass FSub2(F3[int], F1[int]):\n    pass\nclass FSub3(F2[int], F1[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "F3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class F3(F1[_T_F]):\n    ...\nclass FSub1(F3[int], F2[int]):\n    pass\nclass FSub2(F3[int], F1[int]):\n    pass\nclass FSub3(F2[int], F1[int]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "FSub1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class FSub1(F3[int], F2[int]):\n    pass\nclass FSub2(F3[int], F1[int]):\n    pass\nclass FSub3(F2[int], F1[int]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "FSub2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class FSub2(F3[int], F1[int]):\n    pass\nclass FSub3(F2[int], F1[int]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "FSub3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "class FSub3(F2[int], F1[int]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "_T_E",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "_T_E = TypeVar(\"_T_E\")\nclass E1(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass E2(Generic[_T_E]):\n    def func1(self, a: _T_E) -> None:\n        ...\nclass ESub(E1[int], E2[int]):\n    ...\n_T_F = TypeVar(\"_T_F\")",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "_T_F",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "peekOfCode": "_T_F = TypeVar(\"_T_F\")\nclass F1(Generic[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F2(F1[_T_F]):\n    def do_stuff(self) -> Iterable[_T_F]:\n        ...\nclass F3(F1[_T_F]):\n    ...\nclass FSub1(F3[int], F2[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride3",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "class Base(Generic[_TSource]):\n    @abstractmethod\n    def method1(\n        self, mapper: Callable[[_TSource, _T1], _TResult], other: \"Base[_T1]\"\n    ) -> \"Base[_TResult]\":\n        raise NotImplementedError\nclass Subclass1(Base[_TSource]):\n    def method1(\n        self, mapper: Callable[[_TSource, _T2], _TResult], other: Base[_T2]\n    ) -> Base[_TResult]:",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "Subclass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "class Subclass1(Base[_TSource]):\n    def method1(\n        self, mapper: Callable[[_TSource, _T2], _TResult], other: Base[_T2]\n    ) -> Base[_TResult]:\n        return Subclass2()\nclass Subclass2(Base[_TSource]):\n    def method1(\n        self, mapper: Callable[[_TSource, _T3], _TResult], other: Base[_T3]\n    ) -> Base[_TResult]:\n        return Subclass2()",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "Subclass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "class Subclass2(Base[_TSource]):\n    def method1(\n        self, mapper: Callable[[_TSource, _T3], _TResult], other: Base[_T3]\n    ) -> Base[_TResult]:\n        return Subclass2()",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "_TSource",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "_TSource = TypeVar(\"_TSource\")\n_TResult = TypeVar(\"_TResult\")\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Base(Generic[_TSource]):\n    @abstractmethod\n    def method1(\n        self, mapper: Callable[[_TSource, _T1], _TResult], other: \"Base[_T1]\"\n    ) -> \"Base[_TResult]\":",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "_TResult",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "_TResult = TypeVar(\"_TResult\")\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Base(Generic[_TSource]):\n    @abstractmethod\n    def method1(\n        self, mapper: Callable[[_TSource, _T1], _TResult], other: \"Base[_T1]\"\n    ) -> \"Base[_TResult]\":\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Base(Generic[_TSource]):\n    @abstractmethod\n    def method1(\n        self, mapper: Callable[[_TSource, _T1], _TResult], other: \"Base[_T1]\"\n    ) -> \"Base[_TResult]\":\n        raise NotImplementedError\nclass Subclass1(Base[_TSource]):",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Base(Generic[_TSource]):\n    @abstractmethod\n    def method1(\n        self, mapper: Callable[[_TSource, _T1], _TResult], other: \"Base[_T1]\"\n    ) -> \"Base[_TResult]\":\n        raise NotImplementedError\nclass Subclass1(Base[_TSource]):\n    def method1(",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "description": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\nclass Base(Generic[_TSource]):\n    @abstractmethod\n    def method1(\n        self, mapper: Callable[[_TSource, _T1], _TResult], other: \"Base[_T1]\"\n    ) -> \"Base[_TResult]\":\n        raise NotImplementedError\nclass Subclass1(Base[_TSource]):\n    def method1(\n        self, mapper: Callable[[_TSource, _T2], _TResult], other: Base[_T2]",
        "detail": "packages.pyright-internal.src.tests.samples.methodOverride4",
        "documentation": {}
    },
    {
        "label": "ParentA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ParentA:\n    pass\nclass ParentB:\n    # This should generate an error because it's missing a super().__init__ call.\n    def __init__(self):\n        pass\nclass ParentBPrime(ParentB):\n    pass\nclass ParentC:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ParentB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ParentB:\n    # This should generate an error because it's missing a super().__init__ call.\n    def __init__(self):\n        pass\nclass ParentBPrime(ParentB):\n    pass\nclass ParentC:\n    pass\n@final\nclass ParentD:",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ParentBPrime",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ParentBPrime(ParentB):\n    pass\nclass ParentC:\n    pass\n@final\nclass ParentD:\n    def __init__(self):\n        pass\n    def __init_subclass__(cls) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ParentC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ParentC:\n    pass\n@final\nclass ParentD:\n    def __init__(self):\n        pass\n    def __init_subclass__(cls) -> None:\n        pass\nclass ChildA(ParentA, ParentB):\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ParentD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ParentD:\n    def __init__(self):\n        pass\n    def __init_subclass__(cls) -> None:\n        pass\nclass ChildA(ParentA, ParentB):\n    # This should generate an error.\n    def __init__(self):\n        pass\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildA(ParentA, ParentB):\n    # This should generate an error.\n    def __init__(self):\n        pass\n    # This should generate an error.\n    def __init_subclass__(cls) -> None:\n        pass\nclass ChildB(ParentA, ParentB):\n    def __init__(self):\n        super().__init__()",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildB(ParentA, ParentB):\n    def __init__(self):\n        super().__init__()\nclass ChildC1(ParentA, ParentB):\n    def __init__(self):\n        ParentB.__init__(self)\nclass ChildC2(ParentA, ParentB):\n    def __init__(self):\n        ParentA.__init__(self)\n        ParentB.__init__(self)",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildC1(ParentA, ParentB):\n    def __init__(self):\n        ParentB.__init__(self)\nclass ChildC2(ParentA, ParentB):\n    def __init__(self):\n        ParentA.__init__(self)\n        ParentB.__init__(self)\nclass ChildCPrime(ParentA, ParentBPrime, ParentC):\n    def __init__(self):\n        super(ParentBPrime).__init__()",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildC2(ParentA, ParentB):\n    def __init__(self):\n        ParentA.__init__(self)\n        ParentB.__init__(self)\nclass ChildCPrime(ParentA, ParentBPrime, ParentC):\n    def __init__(self):\n        super(ParentBPrime).__init__()\nclass ChildD(ParentC):\n    # This should generate an error.\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildCPrime",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildCPrime(ParentA, ParentBPrime, ParentC):\n    def __init__(self):\n        super(ParentBPrime).__init__()\nclass ChildD(ParentC):\n    # This should generate an error.\n    def __init__(self):\n        pass\n@final\nclass ChildE(ParentC):\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildD(ParentC):\n    # This should generate an error.\n    def __init__(self):\n        pass\n@final\nclass ChildE(ParentC):\n    def __init__(self):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "ChildE",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "description": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "peekOfCode": "class ChildE(ParentC):\n    def __init__(self):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.missingSuper1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.module1",
        "description": "packages.pyright-internal.src.tests.samples.module1",
        "peekOfCode": "def func1(a: object):\n    pass\nfunc1(typing)\ndir(typing)",
        "detail": "packages.pyright-internal.src.tests.samples.module1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro1",
        "description": "packages.pyright-internal.src.tests.samples.mro1",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\n# This should generate an error because a valid\n# MRO linearization isn't possible.\nclass C(A, B):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro1",
        "description": "packages.pyright-internal.src.tests.samples.mro1",
        "peekOfCode": "class B(A):\n    pass\n# This should generate an error because a valid\n# MRO linearization isn't possible.\nclass C(A, B):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro1",
        "description": "packages.pyright-internal.src.tests.samples.mro1",
        "peekOfCode": "class C(A, B):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "class A:\n    def foo(self, v1: str):\n        return None\n    def bar(self):\n        return None\nclass B(A):\n    def foo(self, v1: float):\n        return None\nclass C(A):\n    def foo(self, v1: A):",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "class B(A):\n    def foo(self, v1: float):\n        return None\nclass C(A):\n    def foo(self, v1: A):\n        return None\n    def bar(self, v1: float):\n        return None\nclass D(B, C):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "class C(A):\n    def foo(self, v1: A):\n        return None\n    def bar(self, v1: float):\n        return None\nclass D(B, C):\n    pass\na = A()\na.foo(\"hello\")\nb = B()",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "class D(B, C):\n    pass\na = A()\na.foo(\"hello\")\nb = B()\nb.foo(3)\nc = C()\nc.foo(a)\nd = D()\nd.foo(3)",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "a = A()\na.foo(\"hello\")\nb = B()\nb.foo(3)\nc = C()\nc.foo(a)\nd = D()\nd.foo(3)\n# This should generate an error because\n# the bar method from class C should be",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "b = B()\nb.foo(3)\nc = C()\nc.foo(a)\nd = D()\nd.foo(3)\n# This should generate an error because\n# the bar method from class C should be\n# selected before the bar method from A.\nd.bar()",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "c = C()\nc.foo(a)\nd = D()\nd.foo(3)\n# This should generate an error because\n# the bar method from class C should be\n# selected before the bar method from A.\nd.bar()",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.mro2",
        "description": "packages.pyright-internal.src.tests.samples.mro2",
        "peekOfCode": "d = D()\nd.foo(3)\n# This should generate an error because\n# the bar method from class C should be\n# selected before the bar method from A.\nd.bar()",
        "detail": "packages.pyright-internal.src.tests.samples.mro2",
        "documentation": {}
    },
    {
        "label": "Object",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class Object:\n    pass\nclass QualifiedObject(Object):\n    pass\nclass DerivableObject(QualifiedObject):\n    pass\nclass SubclassableObject(Object):\n    pass\nclass InheritingObject(DerivableObject, SubclassableObject):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "QualifiedObject",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class QualifiedObject(Object):\n    pass\nclass DerivableObject(QualifiedObject):\n    pass\nclass SubclassableObject(Object):\n    pass\nclass InheritingObject(DerivableObject, SubclassableObject):\n    pass\nclass Source(QualifiedObject, SubclassableObject):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "DerivableObject",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class DerivableObject(QualifiedObject):\n    pass\nclass SubclassableObject(Object):\n    pass\nclass InheritingObject(DerivableObject, SubclassableObject):\n    pass\nclass Source(QualifiedObject, SubclassableObject):\n    pass\nclass ObjectType(InheritingObject, Source):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "SubclassableObject",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class SubclassableObject(Object):\n    pass\nclass InheritingObject(DerivableObject, SubclassableObject):\n    pass\nclass Source(QualifiedObject, SubclassableObject):\n    pass\nclass ObjectType(InheritingObject, Source):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "InheritingObject",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class InheritingObject(DerivableObject, SubclassableObject):\n    pass\nclass Source(QualifiedObject, SubclassableObject):\n    pass\nclass ObjectType(InheritingObject, Source):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class Source(QualifiedObject, SubclassableObject):\n    pass\nclass ObjectType(InheritingObject, Source):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "ObjectType",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro3",
        "description": "packages.pyright-internal.src.tests.samples.mro3",
        "peekOfCode": "class ObjectType(InheritingObject, Source):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.mro3",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "class Foo1(Generic[T1]):\n    ...\nclass Foo2(Generic[T1]):\n    ...\nclass Bar1(Generic[T1, T2], Foo1[T1], Foo2[T2]):\n    ...\nclass Bar2(Generic[T1, T2], Foo1, Foo2[T2]):\n    ...\n# This should generate an error because a consistent MRO cannot be found.\nclass Bar3(Generic[T1, T2], Foo1, Foo2):",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "class Foo2(Generic[T1]):\n    ...\nclass Bar1(Generic[T1, T2], Foo1[T1], Foo2[T2]):\n    ...\nclass Bar2(Generic[T1, T2], Foo1, Foo2[T2]):\n    ...\n# This should generate an error because a consistent MRO cannot be found.\nclass Bar3(Generic[T1, T2], Foo1, Foo2):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "Bar1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "class Bar1(Generic[T1, T2], Foo1[T1], Foo2[T2]):\n    ...\nclass Bar2(Generic[T1, T2], Foo1, Foo2[T2]):\n    ...\n# This should generate an error because a consistent MRO cannot be found.\nclass Bar3(Generic[T1, T2], Foo1, Foo2):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "Bar2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "class Bar2(Generic[T1, T2], Foo1, Foo2[T2]):\n    ...\n# This should generate an error because a consistent MRO cannot be found.\nclass Bar3(Generic[T1, T2], Foo1, Foo2):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "Bar3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "class Bar3(Generic[T1, T2], Foo1, Foo2):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\nclass Foo1(Generic[T1]):\n    ...\nclass Foo2(Generic[T1]):\n    ...\nclass Bar1(Generic[T1, T2], Foo1[T1], Foo2[T2]):\n    ...\nclass Bar2(Generic[T1, T2], Foo1, Foo2[T2]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.mro4",
        "description": "packages.pyright-internal.src.tests.samples.mro4",
        "peekOfCode": "T2 = TypeVar(\"T2\")\nclass Foo1(Generic[T1]):\n    ...\nclass Foo2(Generic[T1]):\n    ...\nclass Bar1(Generic[T1, T2], Foo1[T1], Foo2[T2]):\n    ...\nclass Bar2(Generic[T1, T2], Foo1, Foo2[T2]):\n    ...\n# This should generate an error because a consistent MRO cannot be found.",
        "detail": "packages.pyright-internal.src.tests.samples.mro4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "peekOfCode": "def func1():\n    global a\ndef func2():\n    global c\ndef func3():\n    a = 3\n    # This should generate an error because a is assigned locally\n    # before its name binding is declared.\n    global a\n    d = 3",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "peekOfCode": "def func2():\n    global c\ndef func3():\n    a = 3\n    # This should generate an error because a is assigned locally\n    # before its name binding is declared.\n    global a\n    d = 3\n    h = 3\n    def func3_1():",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "peekOfCode": "def func3():\n    a = 3\n    # This should generate an error because a is assigned locally\n    # before its name binding is declared.\n    global a\n    d = 3\n    h = 3\n    def func3_1():\n        nonlocal d\n        h = 5",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "peekOfCode": "a = 3\nf = 3\n# This should generate an error because nonlocal bindings aren't\n# allowed at the module level.\nnonlocal b\ndef func1():\n    global a\ndef func2():\n    global c\ndef func3():",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "peekOfCode": "f = 3\n# This should generate an error because nonlocal bindings aren't\n# allowed at the module level.\nnonlocal b\ndef func1():\n    global a\ndef func2():\n    global c\ndef func3():\n    a = 3",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings1",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings2",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings2",
        "peekOfCode": "class Test:\n    def test(self):\n        nonlocal missing_symbol\n        missing_symbol = 4",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings2",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings3",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings3",
        "peekOfCode": "def func():\n    foo: str = \"Hi\"\n    baz: str = \"Hi\"\n    def func_1():\n        global foo\n        # This should generate an error because\n        # the global \"foo\" is typed as a str.\n        foo = \"25\"\n        global bar\n        bar: str = \"Hi\"",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings3",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings3",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings3",
        "peekOfCode": "bar = 24",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings4",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings4",
        "peekOfCode": "def func1():\n    global Enum\n    from enum import Enum\nreveal_type(Enum, expected_text=\"Type[Enum]\")",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings4",
        "documentation": {}
    },
    {
        "label": "func_a",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "def func_a() -> None:\n    a = \"a\"\n    class A:\n        reveal_type(a, expected_text=\"Literal['a']\")\ndef func_b() -> None:\n    b = \"a\"\n    class A:\n        reveal_type(b, expected_text=\"int\")\n        b = \"b\"\n        reveal_type(b, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "func_b",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "def func_b() -> None:\n    b = \"a\"\n    class A:\n        reveal_type(b, expected_text=\"int\")\n        b = \"b\"\n        reveal_type(b, expected_text=\"str\")\n    reveal_type(b, expected_text=\"Literal['a']\")\ndef func_c() -> None:\n    c = \"a\"\n    class A:",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "func_c",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "def func_c() -> None:\n    c = \"a\"\n    class A:\n        nonlocal c\n        reveal_type(c, expected_text=\"Literal['a']\")\n        c = 0\n    reveal_type(c, expected_text=\"int\")\ndef func_d() -> None:\n    d = \"a\"\n    class A:",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "func_d",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "def func_d() -> None:\n    d = \"a\"\n    class A:\n        global d\n        reveal_type(d, expected_text=\"int\")\n        d = \"b\"\n    reveal_type(d, expected_text=\"Literal['a']\")\nreveal_type(a, expected_text=\"Literal[0]\")\nreveal_type(b, expected_text=\"Literal[0]\")\nreveal_type(c, expected_text=\"Literal[0]\")",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "a = 0\nb = 0\nc = 0\nd = 0\ndef func_a() -> None:\n    a = \"a\"\n    class A:\n        reveal_type(a, expected_text=\"Literal['a']\")\ndef func_b() -> None:\n    b = \"a\"",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "b = 0\nc = 0\nd = 0\ndef func_a() -> None:\n    a = \"a\"\n    class A:\n        reveal_type(a, expected_text=\"Literal['a']\")\ndef func_b() -> None:\n    b = \"a\"\n    class A:",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "c = 0\nd = 0\ndef func_a() -> None:\n    a = \"a\"\n    class A:\n        reveal_type(a, expected_text=\"Literal['a']\")\ndef func_b() -> None:\n    b = \"a\"\n    class A:\n        reveal_type(b, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "description": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "peekOfCode": "d = 0\ndef func_a() -> None:\n    a = \"a\"\n    class A:\n        reveal_type(a, expected_text=\"Literal['a']\")\ndef func_b() -> None:\n    b = \"a\"\n    class A:\n        reveal_type(b, expected_text=\"int\")\n        b = \"b\"",
        "detail": "packages.pyright-internal.src.tests.samples.nameBindings5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "def func1(dyn_str: str):\n    NamedTuple7 = namedtuple(\"NamedTuple7\", dyn_str)\n    n = NamedTuple7()\n    a, b = n\n    reveal_type(a, expected_text=\"Any\")\n    reveal_type(b, expected_text=\"Any\")\ndef func2():\n    NamedTuple8 = namedtuple(\"NamedTuple8\", (\"a\", \"b\", \"c\"))\n    n1 = NamedTuple8(a=1, b=2, c=3)\n    a, b, c = n1",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "def func2():\n    NamedTuple8 = namedtuple(\"NamedTuple8\", (\"a\", \"b\", \"c\"))\n    n1 = NamedTuple8(a=1, b=2, c=3)\n    a, b, c = n1\n    reveal_type(a, expected_text=\"Unknown\")\n    reveal_type(b, expected_text=\"Unknown\")\n    reveal_type(c, expected_text=\"Unknown\")\n    # This should generate an error.\n    n2 = NamedTuple8(a=1, b=2)",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple1 = namedtuple(\"NamedTuple1\", \"field1 field2\")\nNamedTuple1(1, 2)\nNamedTuple1(field2=1, field1=2)\n# This should generate an error because there\n# is no field called field3.\nNamedTuple1(field1=1, field2=3, field3=2)\n# This should generate an error because there\n# should be two parameters.\nNamedTuple1(1)\n# This should generate an error because there",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple2 = namedtuple(\"NamedTuple2\", \"field1,    field2\")\nNamedTuple2.__new__.__defaults__ = ([],)\nNamedTuple2()\nNamedTuple2(1)\nNamedTuple2(field1=1, field2=3)\n# This should generate an error because there\n# should be two or fewer parameters.\nNamedTuple2(1, 2, 3)\nNamedTuple3 = NamedTuple(\n    \"NamedTuple3\",",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple2.__new__.__defaults__",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple2.__new__.__defaults__ = ([],)\nNamedTuple2()\nNamedTuple2(1)\nNamedTuple2(field1=1, field2=3)\n# This should generate an error because there\n# should be two or fewer parameters.\nNamedTuple2(1, 2, 3)\nNamedTuple3 = NamedTuple(\n    \"NamedTuple3\",\n    [",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple3 = NamedTuple(\n    \"NamedTuple3\",\n    [\n        (\"field1\", \"str\"),  # 'str' should be treated as forward reference\n        (\"field2\", int),\n    ],\n)\nNamedTuple3(\"hello\", 2)\n# This should generate an error because of a\n# type mismatch.",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple4 = namedtuple(\"NamedTuple4\", \"field1 field2 field3\", defaults=(1, 2))\n# This should generate an error (too few params)\nNamedTuple4()\nNamedTuple4(1)\nNamedTuple4(1, 2, 3)\n# This should generate an error (too many params)\nNamedTuple4(1, 2, 3, 4)\nNamedTuple5 = namedtuple(\n    \"NamedTuple5\", \"field1 field2 field3\", defaults=(1, 2, 3, 4, 5)\n)",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple5 = namedtuple(\n    \"NamedTuple5\", \"field1 field2 field3\", defaults=(1, 2, 3, 4, 5)\n)\nNamedTuple5()\nNamedTuple6 = namedtuple(\"NamedTuple6\", \"field1 field2 field3\", defaults=[1, 2])\nNamedTuple6()\ndef func1(dyn_str: str):\n    NamedTuple7 = namedtuple(\"NamedTuple7\", dyn_str)\n    n = NamedTuple7()\n    a, b = n",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "NamedTuple6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "peekOfCode": "NamedTuple6 = namedtuple(\"NamedTuple6\", \"field1 field2 field3\", defaults=[1, 2])\nNamedTuple6()\ndef func1(dyn_str: str):\n    NamedTuple7 = namedtuple(\"NamedTuple7\", dyn_str)\n    n = NamedTuple7()\n    a, b = n\n    reveal_type(a, expected_text=\"Any\")\n    reveal_type(b, expected_text=\"Any\")\ndef func2():\n    NamedTuple8 = namedtuple(\"NamedTuple8\", (\"a\", \"b\", \"c\"))",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples1",
        "documentation": {}
    },
    {
        "label": "MyDataClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "class MyDataClass(NamedTuple):\n    entry_1: str\n    entry_2: int\nnt1 = MyDataClass(\"yes\", 1)\n(a1, a2) = nt1\na1_1: str = a1\na2_1: int = a2\n# These should generate an error because a1 and a2 are\n# the wrong types.\na1_2: int = a1",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "nt1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "nt1 = MyDataClass(\"yes\", 1)\n(a1, a2) = nt1\na1_1: str = a1\na2_1: int = a2\n# These should generate an error because a1 and a2 are\n# the wrong types.\na1_2: int = a1\na2_2: str = a2\nb1 = nt1[0]\nb2 = nt1[1]",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "b1 = nt1[0]\nb2 = nt1[1]\nb1_1: str = b1\nb2_1: int = b2\n# These should generate an error because a1 and a2 are\n# the wrong types.\nb1_2: int = b1\nb2_2: str = b2\nMyNT = NamedTuple(\"MyNT\", [(\"hi\", int), (\"bye\", str)])\nnt2 = MyNT(3, \"yo\")",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "b2 = nt1[1]\nb1_1: str = b1\nb2_1: int = b2\n# These should generate an error because a1 and a2 are\n# the wrong types.\nb1_2: int = b1\nb2_2: str = b2\nMyNT = NamedTuple(\"MyNT\", [(\"hi\", int), (\"bye\", str)])\nnt2 = MyNT(3, \"yo\")\n(c1, c2) = nt2",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "MyNT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "MyNT = NamedTuple(\"MyNT\", [(\"hi\", int), (\"bye\", str)])\nnt2 = MyNT(3, \"yo\")\n(c1, c2) = nt2\nc1_2: int = c1\nc2_2: str = c2\n# These should generate an error because a1 and a2 are\n# the wrong types.\nc1_1: str = c1\nc2_1: int = c2\nd1 = nt2[0]",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "nt2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "nt2 = MyNT(3, \"yo\")\n(c1, c2) = nt2\nc1_2: int = c1\nc2_2: str = c2\n# These should generate an error because a1 and a2 are\n# the wrong types.\nc1_1: str = c1\nc2_1: int = c2\nd1 = nt2[0]\nd2 = nt2[1]",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "d1 = nt2[0]\nd2 = nt2[1]\nd1_2: int = d1\nd2_2: str = d2\n# These should generate an error because a1 and a2 are\n# the wrong types.\nd1_1: str = d1\nd2_1: int = d2",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "peekOfCode": "d2 = nt2[1]\nd1_2: int = d1\nd2_2: str = d2\n# These should generate an error because a1 and a2 are\n# the wrong types.\nd1_1: str = d1\nd2_1: int = d2",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "peekOfCode": "class A(NamedTuple, object):\n    x: int\nT = TypeVar(\"T\")\nclass B(NamedTuple, Generic[T]):\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "peekOfCode": "class B(NamedTuple, Generic[T]):\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "peekOfCode": "T = TypeVar(\"T\")\nclass B(NamedTuple, Generic[T]):\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples3",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "peekOfCode": "class Class2(Class1):\n    some_class_member = 1\nreveal_type(Class2(name=\"a\"), expected_text=\"Class2\")\nClass3 = NamedTuple(\"Class3\", [(\"name\", str)])\nclass Class4(Class3):\n    some_class_member = 1\nreveal_type(Class4(name=\"a\"), expected_text=\"Class4\")",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "documentation": {}
    },
    {
        "label": "Class4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "peekOfCode": "class Class4(Class3):\n    some_class_member = 1\nreveal_type(Class4(name=\"a\"), expected_text=\"Class4\")",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "peekOfCode": "Class1 = namedtuple(\"Class1\", \"name\")\nclass Class2(Class1):\n    some_class_member = 1\nreveal_type(Class2(name=\"a\"), expected_text=\"Class2\")\nClass3 = NamedTuple(\"Class3\", [(\"name\", str)])\nclass Class4(Class3):\n    some_class_member = 1\nreveal_type(Class4(name=\"a\"), expected_text=\"Class4\")",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "peekOfCode": "Class3 = NamedTuple(\"Class3\", [(\"name\", str)])\nclass Class4(Class3):\n    some_class_member = 1\nreveal_type(Class4(name=\"a\"), expected_text=\"Class4\")",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples4",
        "documentation": {}
    },
    {
        "label": "Fruit",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples5",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples5",
        "peekOfCode": "class Fruit(NamedTuple):\n    name: str\n    cost: float\n    def new_cost(self, new_cost: float):\n        my_name, my_cost = self\n        reveal_type(my_name, expected_text=\"str\")\n        reveal_type(my_cost, expected_text=\"float\")\n        return Fruit(my_name, new_cost)",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples5",
        "documentation": {}
    },
    {
        "label": "NT1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "class NT1(NamedTuple):\n    val1: str\n    val2: int\nnt1 = NT1(\"x\", 0)\n# This should generate an error.\nnt1.val1 = \"\"\nNT2 = NamedTuple(\"NT2\", [(\"val1\", str), (\"val2\", int)])\nnt2 = NT2(\"x\", 0)\n# This should generate an error.\nnt2.val2 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "nt1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "nt1 = NT1(\"x\", 0)\n# This should generate an error.\nnt1.val1 = \"\"\nNT2 = NamedTuple(\"NT2\", [(\"val1\", str), (\"val2\", int)])\nnt2 = NT2(\"x\", 0)\n# This should generate an error.\nnt2.val2 = 3\nNT3 = namedtuple(\"NT3\", [\"val1\", \"val2\"])\nnt3 = NT3(\"x\", 0)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "nt1.val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "nt1.val1 = \"\"\nNT2 = NamedTuple(\"NT2\", [(\"val1\", str), (\"val2\", int)])\nnt2 = NT2(\"x\", 0)\n# This should generate an error.\nnt2.val2 = 3\nNT3 = namedtuple(\"NT3\", [\"val1\", \"val2\"])\nnt3 = NT3(\"x\", 0)\n# This should generate an error.\nnt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "NT2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "NT2 = NamedTuple(\"NT2\", [(\"val1\", str), (\"val2\", int)])\nnt2 = NT2(\"x\", 0)\n# This should generate an error.\nnt2.val2 = 3\nNT3 = namedtuple(\"NT3\", [\"val1\", \"val2\"])\nnt3 = NT3(\"x\", 0)\n# This should generate an error.\nnt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "nt2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "nt2 = NT2(\"x\", 0)\n# This should generate an error.\nnt2.val2 = 3\nNT3 = namedtuple(\"NT3\", [\"val1\", \"val2\"])\nnt3 = NT3(\"x\", 0)\n# This should generate an error.\nnt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "nt2.val2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "nt2.val2 = 3\nNT3 = namedtuple(\"NT3\", [\"val1\", \"val2\"])\nnt3 = NT3(\"x\", 0)\n# This should generate an error.\nnt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "NT3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "NT3 = namedtuple(\"NT3\", [\"val1\", \"val2\"])\nnt3 = NT3(\"x\", 0)\n# This should generate an error.\nnt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "nt3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "nt3 = NT3(\"x\", 0)\n# This should generate an error.\nnt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "nt3.val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "peekOfCode": "nt3.val1 = \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples6",
        "documentation": {}
    },
    {
        "label": "NT1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "peekOfCode": "class NT1(NamedTuple, Generic[_T1]):\n    a: _T1\n    b: int\n    c: list[_T1]\nreveal_type(NT1(3, 4, [\"hi\"]), expected_text=\"NT1[int | str]\")\nreveal_type(NT1(3, 4, []), expected_text=\"NT1[int]\")\nreveal_type(NT1(3.4, 4, [1, 2]), expected_text=\"NT1[float]\")\nreveal_type(NT1(3.4, 4, [2j]), expected_text=\"NT1[complex]\")\nclass NT2(NT1[str]): ...\nreveal_type(NT2(\"\", 4, []), expected_text=\"NT2\")",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "documentation": {}
    },
    {
        "label": "NT2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "peekOfCode": "class NT2(NT1[str]): ...\nreveal_type(NT2(\"\", 4, []), expected_text=\"NT2\")\n# This should generate an error.\nNT2(1, 4, [])",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "description": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass NT1(NamedTuple, Generic[_T1]):\n    a: _T1\n    b: int\n    c: list[_T1]\nreveal_type(NT1(3, 4, [\"hi\"]), expected_text=\"NT1[int | str]\")\nreveal_type(NT1(3, 4, []), expected_text=\"NT1[int]\")\nreveal_type(NT1(3.4, 4, [1, 2]), expected_text=\"NT1[float]\")\nreveal_type(NT1(3.4, 4, [2j]), expected_text=\"NT1[complex]\")\nclass NT2(NT1[str]): ...",
        "detail": "packages.pyright-internal.src.tests.samples.namedTuples7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never1",
        "description": "packages.pyright-internal.src.tests.samples.never1",
        "peekOfCode": "def func1(a: str = \"\"):\n    if not isinstance(a, str):\n        reveal_type(a, expected_text=\"Never\")\n        return [a]\nx1 = func1()\nreveal_type(x1, expected_text=\"list[Unknown] | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.never1",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.never1",
        "description": "packages.pyright-internal.src.tests.samples.never1",
        "peekOfCode": "x1 = func1()\nreveal_type(x1, expected_text=\"list[Unknown] | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.never1",
        "documentation": {}
    },
    {
        "label": "assert_never1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def assert_never1(val: Never) -> NoReturn:\n    raise Exception(\"Should never get here\")\ndef assert_never2(val: NoReturn) -> NoReturn:\n    raise Exception(\"Should never get here\")\n# This should generate an error because Never doesn't accept type arguments.\ndef assert_never3(val: Never[int]):\n    ...\n# This should generate an error because NoReturn doesn't accept type arguments.\ndef assert_never4(val: NoReturn[int]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "assert_never2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def assert_never2(val: NoReturn) -> NoReturn:\n    raise Exception(\"Should never get here\")\n# This should generate an error because Never doesn't accept type arguments.\ndef assert_never3(val: Never[int]):\n    ...\n# This should generate an error because NoReturn doesn't accept type arguments.\ndef assert_never4(val: NoReturn[int]):\n    ...\ndef func1(val: str | int) -> str:\n    if isinstance(val, (str, int)):",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "assert_never3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def assert_never3(val: Never[int]):\n    ...\n# This should generate an error because NoReturn doesn't accept type arguments.\ndef assert_never4(val: NoReturn[int]):\n    ...\ndef func1(val: str | int) -> str:\n    if isinstance(val, (str, int)):\n        return \"str or int\"\n    else:\n        assert_never1(val)",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "assert_never4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def assert_never4(val: NoReturn[int]):\n    ...\ndef func1(val: str | int) -> str:\n    if isinstance(val, (str, int)):\n        return \"str or int\"\n    else:\n        assert_never1(val)\ndef func2(val: str | int) -> str:\n    if isinstance(val, (str, int)):\n        return \"str or int\"",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def func1(val: str | int) -> str:\n    if isinstance(val, (str, int)):\n        return \"str or int\"\n    else:\n        assert_never1(val)\ndef func2(val: str | int) -> str:\n    if isinstance(val, (str, int)):\n        return \"str or int\"\n    else:\n        assert_never2(val)",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def func2(val: str | int) -> str:\n    if isinstance(val, (str, int)):\n        return \"str or int\"\n    else:\n        assert_never2(val)\ndef func3():\n    # This should generate an error because of the missing argument.\n    assert_never1()\nreveal_type(assert_never1, expected_text=\"(val: Never) -> NoReturn\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.never2",
        "description": "packages.pyright-internal.src.tests.samples.never2",
        "peekOfCode": "def func3():\n    # This should generate an error because of the missing argument.\n    assert_never1()\nreveal_type(assert_never1, expected_text=\"(val: Never) -> NoReturn\")\n# This should generate an error.\nassert_never1(1)",
        "detail": "packages.pyright-internal.src.tests.samples.never2",
        "documentation": {}
    },
    {
        "label": "must_take_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.newType1",
        "description": "packages.pyright-internal.src.tests.samples.newType1",
        "peekOfCode": "def must_take_string(p1: str):\n    pass\nmust_take_string(MyString(\"hello\"))\ndef must_take_my_string(p1: MyString):\n    pass\nmust_take_my_string(MyString(\"hello\"))\n# This should generate an error because 'hello'\n# isn't a valid MyString.\nmust_take_my_string(\"hello\")\n_T = TypeVar(\"_T\")",
        "detail": "packages.pyright-internal.src.tests.samples.newType1",
        "documentation": {}
    },
    {
        "label": "must_take_my_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.newType1",
        "description": "packages.pyright-internal.src.tests.samples.newType1",
        "peekOfCode": "def must_take_my_string(p1: MyString):\n    pass\nmust_take_my_string(MyString(\"hello\"))\n# This should generate an error because 'hello'\n# isn't a valid MyString.\nmust_take_my_string(\"hello\")\n_T = TypeVar(\"_T\")\ndef func1(x: Type[_T]) -> Type[_T]:\n    return x\nMyString2 = NewType(\"MyString2\", func1(str))",
        "detail": "packages.pyright-internal.src.tests.samples.newType1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.newType1",
        "description": "packages.pyright-internal.src.tests.samples.newType1",
        "peekOfCode": "def func1(x: Type[_T]) -> Type[_T]:\n    return x\nMyString2 = NewType(\"MyString2\", func1(str))",
        "detail": "packages.pyright-internal.src.tests.samples.newType1",
        "documentation": {}
    },
    {
        "label": "MyString",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType1",
        "description": "packages.pyright-internal.src.tests.samples.newType1",
        "peekOfCode": "MyString = NewType(\"MyString\", str)\ndef must_take_string(p1: str):\n    pass\nmust_take_string(MyString(\"hello\"))\ndef must_take_my_string(p1: MyString):\n    pass\nmust_take_my_string(MyString(\"hello\"))\n# This should generate an error because 'hello'\n# isn't a valid MyString.\nmust_take_my_string(\"hello\")",
        "detail": "packages.pyright-internal.src.tests.samples.newType1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType1",
        "description": "packages.pyright-internal.src.tests.samples.newType1",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef func1(x: Type[_T]) -> Type[_T]:\n    return x\nMyString2 = NewType(\"MyString2\", func1(str))",
        "detail": "packages.pyright-internal.src.tests.samples.newType1",
        "documentation": {}
    },
    {
        "label": "MyString2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType1",
        "description": "packages.pyright-internal.src.tests.samples.newType1",
        "peekOfCode": "MyString2 = NewType(\"MyString2\", func1(str))",
        "detail": "packages.pyright-internal.src.tests.samples.newType1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "class A(X1):\n    ...\nclass B(X2, A):\n    ...\n# This should generate an error because the first arg is not a string.\nX3 = type(34, (object,))\n# This should generate an error because the second arg is not a tuple of class types.\nX4 = type(\"X4\", 34)\n# This should generate an error because the second arg is not a tuple of class types.\nX5 = type(\"X5\", (3,))",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "class B(X2, A):\n    ...\n# This should generate an error because the first arg is not a string.\nX3 = type(34, (object,))\n# This should generate an error because the second arg is not a tuple of class types.\nX4 = type(\"X4\", 34)\n# This should generate an error because the second arg is not a tuple of class types.\nX5 = type(\"X5\", (3,))\nX6 = type(\"\", tuple({str}), {})\nX7 = type(\"\", (float, str), {})",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X1 = type(\"X1\", (object,), {})\nX2 = type(\"X2\", (object,), {})\nclass A(X1):\n    ...\nclass B(X2, A):\n    ...\n# This should generate an error because the first arg is not a string.\nX3 = type(34, (object,))\n# This should generate an error because the second arg is not a tuple of class types.\nX4 = type(\"X4\", 34)",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X2 = type(\"X2\", (object,), {})\nclass A(X1):\n    ...\nclass B(X2, A):\n    ...\n# This should generate an error because the first arg is not a string.\nX3 = type(34, (object,))\n# This should generate an error because the second arg is not a tuple of class types.\nX4 = type(\"X4\", 34)\n# This should generate an error because the second arg is not a tuple of class types.",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X3 = type(34, (object,))\n# This should generate an error because the second arg is not a tuple of class types.\nX4 = type(\"X4\", 34)\n# This should generate an error because the second arg is not a tuple of class types.\nX5 = type(\"X5\", (3,))\nX6 = type(\"\", tuple({str}), {})\nX7 = type(\"\", (float, str), {})",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X4 = type(\"X4\", 34)\n# This should generate an error because the second arg is not a tuple of class types.\nX5 = type(\"X5\", (3,))\nX6 = type(\"\", tuple({str}), {})\nX7 = type(\"\", (float, str), {})",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X5 = type(\"X5\", (3,))\nX6 = type(\"\", tuple({str}), {})\nX7 = type(\"\", (float, str), {})",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X6 = type(\"\", tuple({str}), {})\nX7 = type(\"\", (float, str), {})",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "X7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType2",
        "description": "packages.pyright-internal.src.tests.samples.newType2",
        "peekOfCode": "X7 = type(\"\", (float, str), {})",
        "detail": "packages.pyright-internal.src.tests.samples.newType2",
        "documentation": {}
    },
    {
        "label": "require_user_id",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "def require_user_id(a: UserId):\n    ...\nrequire_user_id(var2)\n# this should generate an error.\nrequire_user_id(2)\nvar5 = 4 + var2\nvar6 = var2 * 2",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "UserId",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "UserId = NewType(\"UserId\", int)\n# This should generate an error because the constructor\n# requires a single int.\nvar1 = UserId()\nvar2 = UserId(2)\n# This should generate an error because the constructor\n# requires a single int.\nvar3 = UserId(\"2\")\n# This should generate an error because the constructor\n# requires a single int.",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "var1 = UserId()\nvar2 = UserId(2)\n# This should generate an error because the constructor\n# requires a single int.\nvar3 = UserId(\"2\")\n# This should generate an error because the constructor\n# requires a single int.\nvar4 = UserId(2, 3)\ndef require_user_id(a: UserId):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "var2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "var2 = UserId(2)\n# This should generate an error because the constructor\n# requires a single int.\nvar3 = UserId(\"2\")\n# This should generate an error because the constructor\n# requires a single int.\nvar4 = UserId(2, 3)\ndef require_user_id(a: UserId):\n    ...\nrequire_user_id(var2)",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "var3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "var3 = UserId(\"2\")\n# This should generate an error because the constructor\n# requires a single int.\nvar4 = UserId(2, 3)\ndef require_user_id(a: UserId):\n    ...\nrequire_user_id(var2)\n# this should generate an error.\nrequire_user_id(2)\nvar5 = 4 + var2",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "var4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "var4 = UserId(2, 3)\ndef require_user_id(a: UserId):\n    ...\nrequire_user_id(var2)\n# this should generate an error.\nrequire_user_id(2)\nvar5 = 4 + var2\nvar6 = var2 * 2",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "var5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "var5 = 4 + var2\nvar6 = var2 * 2",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "var6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType3",
        "description": "packages.pyright-internal.src.tests.samples.newType3",
        "peekOfCode": "var6 = var2 * 2",
        "detail": "packages.pyright-internal.src.tests.samples.newType3",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType4",
        "description": "packages.pyright-internal.src.tests.samples.newType4",
        "peekOfCode": "A = NewType(\"A\", Union[int, str])\nB = NewType(\"B\", Literal[1])\nC = NewType(\"B\", Sized)",
        "detail": "packages.pyright-internal.src.tests.samples.newType4",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType4",
        "description": "packages.pyright-internal.src.tests.samples.newType4",
        "peekOfCode": "B = NewType(\"B\", Literal[1])\nC = NewType(\"B\", Sized)",
        "detail": "packages.pyright-internal.src.tests.samples.newType4",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.newType4",
        "description": "packages.pyright-internal.src.tests.samples.newType4",
        "peekOfCode": "C = NewType(\"B\", Sized)",
        "detail": "packages.pyright-internal.src.tests.samples.newType4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.none1",
        "description": "packages.pyright-internal.src.tests.samples.none1",
        "peekOfCode": "def func1(a: Optional[int]):\n    a.__class__\n    a.__doc__\ndef func2(x: type[None]):\n    ...\nfunc2(None.__class__)\nfunc2(type(None))\nreveal_type(type(None).__name__, expected_text=\"str\")\n_ = type(None) == type(None)",
        "detail": "packages.pyright-internal.src.tests.samples.none1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.none1",
        "description": "packages.pyright-internal.src.tests.samples.none1",
        "peekOfCode": "def func2(x: type[None]):\n    ...\nfunc2(None.__class__)\nfunc2(type(None))\nreveal_type(type(None).__name__, expected_text=\"str\")\n_ = type(None) == type(None)",
        "detail": "packages.pyright-internal.src.tests.samples.none1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.none1",
        "description": "packages.pyright-internal.src.tests.samples.none1",
        "peekOfCode": "c = None\nc.__class__\nc.__doc__\ndef func1(a: Optional[int]):\n    a.__class__\n    a.__doc__\ndef func2(x: type[None]):\n    ...\nfunc2(None.__class__)\nfunc2(type(None))",
        "detail": "packages.pyright-internal.src.tests.samples.none1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.none1",
        "description": "packages.pyright-internal.src.tests.samples.none1",
        "peekOfCode": "_ = type(None) == type(None)",
        "detail": "packages.pyright-internal.src.tests.samples.none1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.none2",
        "description": "packages.pyright-internal.src.tests.samples.none2",
        "peekOfCode": "def func1(a: Type[None]) -> Type[str] | Type[None]:\n    reveal_type(a, expected_text=\"Type[None]\")\n    # This should generate an error because None is\n    # not compatible with Type[None].\n    return None\nval1 = func1(type(None))\nif val1 is not None:\n    reveal_type(val1, expected_text=\"Type[str] | Type[None]\")\n# This should generate an error because None isn't\n# assignable to Type[None].",
        "detail": "packages.pyright-internal.src.tests.samples.none2",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.none2",
        "description": "packages.pyright-internal.src.tests.samples.none2",
        "peekOfCode": "val1 = func1(type(None))\nif val1 is not None:\n    reveal_type(val1, expected_text=\"Type[str] | Type[None]\")\n# This should generate an error because None isn't\n# assignable to Type[None].\nval2 = func1(None)",
        "detail": "packages.pyright-internal.src.tests.samples.none2",
        "documentation": {}
    },
    {
        "label": "val2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.none2",
        "description": "packages.pyright-internal.src.tests.samples.none2",
        "peekOfCode": "val2 = func1(None)",
        "detail": "packages.pyright-internal.src.tests.samples.none2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "class A:\n    def __init__(self) -> NoReturn:\n        ...\ndef func8() -> NoReturn:\n    A()\nclass B:\n    def __new__(cls) -> NoReturn:\n        ...\ndef func9() -> NoReturn:\n    B()",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "class B:\n    def __new__(cls) -> NoReturn:\n        ...\ndef func9() -> NoReturn:\n    B()\nclass C:\n    def __call__(self) -> NoReturn:\n        ...\ndef func10() -> NoReturn:\n    C()()",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "class C:\n    def __call__(self) -> NoReturn:\n        ...\ndef func10() -> NoReturn:\n    C()()\n@overload\ndef func11() -> NoReturn:\n    ...\n@overload\ndef func11(x: int) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func1() -> NoReturn:\n    pass\ndef func2(x: bool) -> NoReturn:\n    if x:\n        # This should generate an error because the function\n        # explicitly returns a value.\n        return 4\n    raise Exception()\ndef func3() -> NoReturn:\n    raise Exception()",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func2(x: bool) -> NoReturn:\n    if x:\n        # This should generate an error because the function\n        # explicitly returns a value.\n        return 4\n    raise Exception()\ndef func3() -> NoReturn:\n    raise Exception()\ndef func4(x: bool) -> str:\n    if x:",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func3() -> NoReturn:\n    raise Exception()\ndef func4(x: bool) -> str:\n    if x:\n        return \"hello\"\n    else:\n        func3()\n# This should generate an error because a generator\n# function must return an iterable type.\ndef func5(x: bool) -> NoReturn:",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func4(x: bool) -> str:\n    if x:\n        return \"hello\"\n    else:\n        func3()\n# This should generate an error because a generator\n# function must return an iterable type.\ndef func5(x: bool) -> NoReturn:\n    if x:\n        # This should generate an error because the function",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func5(x: bool) -> NoReturn:\n    if x:\n        # This should generate an error because the function\n        # explicitly yields a value.\n        yield 4\n    raise Exception()\nx1: Callable[[bool], bool] = func2\nasync def func6() -> NoReturn:\n    ...\nasync def func7() -> NoReturn:",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func8() -> NoReturn:\n    A()\nclass B:\n    def __new__(cls) -> NoReturn:\n        ...\ndef func9() -> NoReturn:\n    B()\nclass C:\n    def __call__(self) -> NoReturn:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func9() -> NoReturn:\n    B()\nclass C:\n    def __call__(self) -> NoReturn:\n        ...\ndef func10() -> NoReturn:\n    C()()\n@overload\ndef func11() -> NoReturn:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func10() -> NoReturn:\n    C()()\n@overload\ndef func11() -> NoReturn:\n    ...\n@overload\ndef func11(x: int) -> None:\n    ...\ndef func11(x: int = 0) -> NoReturn | None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func11() -> NoReturn:\n    ...\n@overload\ndef func11(x: int) -> None:\n    ...\ndef func11(x: int = 0) -> NoReturn | None:\n    ...\ndef func12() -> NoReturn:\n    func11()\ndef func13() -> NoReturn:",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func11(x: int) -> None:\n    ...\ndef func11(x: int = 0) -> NoReturn | None:\n    ...\ndef func12() -> NoReturn:\n    func11()\ndef func13() -> NoReturn:\n    # This should generate an error.\n    func11(0)",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func11(x: int = 0) -> NoReturn | None:\n    ...\ndef func12() -> NoReturn:\n    func11()\ndef func13() -> NoReturn:\n    # This should generate an error.\n    func11(0)",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func12() -> NoReturn:\n    func11()\ndef func13() -> NoReturn:\n    # This should generate an error.\n    func11(0)",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn1",
        "description": "packages.pyright-internal.src.tests.samples.noreturn1",
        "peekOfCode": "def func13() -> NoReturn:\n    # This should generate an error.\n    func11(0)",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn2",
        "description": "packages.pyright-internal.src.tests.samples.noreturn2",
        "peekOfCode": "class B(object):\n    def always_noreturn(self) -> NoReturn:\n        f()\n    def sometimes_noreturn(self) -> NoReturn:\n        raise TypeError\nclass C(object):\n    def always_noreturn(self) -> NoReturn:\n        f()\n    def sometimes_noreturn(self) -> int:\n        return 0",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn2",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn2",
        "description": "packages.pyright-internal.src.tests.samples.noreturn2",
        "peekOfCode": "class C(object):\n    def always_noreturn(self) -> NoReturn:\n        f()\n    def sometimes_noreturn(self) -> int:\n        return 0\nclass A(object):\n    def __init__(self):\n        # Note the union type declaration here.\n        self._B_or_C: Union[B, C] = B()\n    def m3(self) -> NoReturn:",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn2",
        "description": "packages.pyright-internal.src.tests.samples.noreturn2",
        "peekOfCode": "class A(object):\n    def __init__(self):\n        # Note the union type declaration here.\n        self._B_or_C: Union[B, C] = B()\n    def m3(self) -> NoReturn:\n        self._B_or_C.always_noreturn()\n    def m4(self) -> int:\n        x = self._B_or_C.sometimes_noreturn()\n        return x",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn2",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn2",
        "description": "packages.pyright-internal.src.tests.samples.noreturn2",
        "peekOfCode": "def f() -> NoReturn:\n    raise TypeError\nclass B(object):\n    def always_noreturn(self) -> NoReturn:\n        f()\n    def sometimes_noreturn(self) -> NoReturn:\n        raise TypeError\nclass C(object):\n    def always_noreturn(self) -> NoReturn:\n        f()",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn2",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn3",
        "description": "packages.pyright-internal.src.tests.samples.noreturn3",
        "peekOfCode": "class MyClass:\n    def no_return(\n        self,\n    ) -> NoReturn:\n        ...\ndef client_code() -> NoReturn:\n    instance = MyClass()\n    instance.no_return()",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn3",
        "documentation": {}
    },
    {
        "label": "client_code",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn3",
        "description": "packages.pyright-internal.src.tests.samples.noreturn3",
        "peekOfCode": "def client_code() -> NoReturn:\n    instance = MyClass()\n    instance.no_return()",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn4",
        "description": "packages.pyright-internal.src.tests.samples.noreturn4",
        "peekOfCode": "def func1(x: Callable[[NoReturn], None]):\n    ...\ndef func2(x: int) -> NoReturn:\n    ...\ndef func3(x: _T) -> _T:\n    return x\ndef func4(x: NoReturn):\n    v1: object = x\n    v2: int = x\n    v3: str | int = x",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn4",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn4",
        "description": "packages.pyright-internal.src.tests.samples.noreturn4",
        "peekOfCode": "def func2(x: int) -> NoReturn:\n    ...\ndef func3(x: _T) -> _T:\n    return x\ndef func4(x: NoReturn):\n    v1: object = x\n    v2: int = x\n    v3: str | int = x\n    v4: None = x\n    v5: Callable[[int, str], str] = x",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn4",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn4",
        "description": "packages.pyright-internal.src.tests.samples.noreturn4",
        "peekOfCode": "def func3(x: _T) -> _T:\n    return x\ndef func4(x: NoReturn):\n    v1: object = x\n    v2: int = x\n    v3: str | int = x\n    v4: None = x\n    v5: Callable[[int, str], str] = x\n    func1(func2)\n    func3(x)",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn4",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn4",
        "description": "packages.pyright-internal.src.tests.samples.noreturn4",
        "peekOfCode": "def func4(x: NoReturn):\n    v1: object = x\n    v2: int = x\n    v3: str | int = x\n    v4: None = x\n    v5: Callable[[int, str], str] = x\n    func1(func2)\n    func3(x)",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn4",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.noreturn4",
        "description": "packages.pyright-internal.src.tests.samples.noreturn4",
        "peekOfCode": "_T = TypeVar(\"_T\", int, str)\ndef func1(x: Callable[[NoReturn], None]):\n    ...\ndef func2(x: int) -> NoReturn:\n    ...\ndef func3(x: _T) -> _T:\n    return x\ndef func4(x: NoReturn):\n    v1: object = x\n    v2: int = x",
        "detail": "packages.pyright-internal.src.tests.samples.noreturn4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "class A(object):\n    def __eq__(self, Foo):\n        return \"equal\"\nclass B(object):\n    def __ne__(self, Bar):\n        return self\n    def __lt__(self, Bar):\n        return \"string\"\n    def __gt__(self, Bar):\n        return \"string\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "class B(object):\n    def __ne__(self, Bar):\n        return self\n    def __lt__(self, Bar):\n        return \"string\"\n    def __gt__(self, Bar):\n        return \"string\"\n    def __ge__(self, Bar):\n        return \"string\"\n    def __le__(self, Bar):",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "class C:\n    def __getattr__(self, name: str, /):\n        if name == \"__add__\":\n            return lambda _: 0\na = C()\na.__add__\n# This should generate an error because __getattr__ is not used\n# when looking up operator overload methods.\nb = a + 0\nclass D:",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "class D:\n    def __init__(self):\n        self.__add__ = lambda x: x\nd = D()\n# This should generate an error because __add__ is not a class variable.\n_ = d + d\nclass E:\n    __slots__ = (\"__add__\",)\n    def __init__(self):\n        self.__add__ = lambda x: x",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "class E:\n    __slots__ = (\"__add__\",)\n    def __init__(self):\n        self.__add__ = lambda x: x\ne = E()\n_ = e + e",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "needs_a_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "def needs_a_string(val: str):\n    pass\ndef needs_a_string_or_bool(val: Union[bool, str]):\n    pass\ndef test():\n    a = A()\n    needs_a_string(a == a)\n    # This should generate an error because there\n    # is no __ne__ operator defined, so a bool\n    # value will result.",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "needs_a_string_or_bool",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "def needs_a_string_or_bool(val: Union[bool, str]):\n    pass\ndef test():\n    a = A()\n    needs_a_string(a == a)\n    # This should generate an error because there\n    # is no __ne__ operator defined, so a bool\n    # value will result.\n    needs_a_string(a != a)\n    if True:",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "def test():\n    a = A()\n    needs_a_string(a == a)\n    # This should generate an error because there\n    # is no __ne__ operator defined, so a bool\n    # value will result.\n    needs_a_string(a != a)\n    if True:\n        a = B()\n    # At this point, a should be of type Union[Foo, Bar],",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "a = C()\na.__add__\n# This should generate an error because __getattr__ is not used\n# when looking up operator overload methods.\nb = a + 0\nclass D:\n    def __init__(self):\n        self.__add__ = lambda x: x\nd = D()\n# This should generate an error because __add__ is not a class variable.",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "b = a + 0\nclass D:\n    def __init__(self):\n        self.__add__ = lambda x: x\nd = D()\n# This should generate an error because __add__ is not a class variable.\n_ = d + d\nclass E:\n    __slots__ = (\"__add__\",)\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "d = D()\n# This should generate an error because __add__ is not a class variable.\n_ = d + d\nclass E:\n    __slots__ = (\"__add__\",)\n    def __init__(self):\n        self.__add__ = lambda x: x\ne = E()\n_ = e + e",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "_ = d + d\nclass E:\n    __slots__ = (\"__add__\",)\n    def __init__(self):\n        self.__add__ = lambda x: x\ne = E()\n_ = e + e",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "e = E()\n_ = e + e",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators1",
        "description": "packages.pyright-internal.src.tests.samples.operators1",
        "peekOfCode": "_ = e + e",
        "detail": "packages.pyright-internal.src.tests.samples.operators1",
        "documentation": {}
    },
    {
        "label": "requires_bool",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "def requires_bool(val: bool):\n    pass\ndate1 = datetime.now()\ndate2 = datetime.now()\ndate3 = datetime.now()\nfoo1 = date1 < date2 <= date3\nrequires_bool(foo1)\nint1 = 3\nfoo2 = 2 < int1 < 5\nrequires_bool(foo2)",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "date1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "date1 = datetime.now()\ndate2 = datetime.now()\ndate3 = datetime.now()\nfoo1 = date1 < date2 <= date3\nrequires_bool(foo1)\nint1 = 3\nfoo2 = 2 < int1 < 5\nrequires_bool(foo2)\n# This should generate an error because\n# int and datetime cannot be compared.",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "date2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "date2 = datetime.now()\ndate3 = datetime.now()\nfoo1 = date1 < date2 <= date3\nrequires_bool(foo1)\nint1 = 3\nfoo2 = 2 < int1 < 5\nrequires_bool(foo2)\n# This should generate an error because\n# int and datetime cannot be compared.\nfoo3 = date1 < date2 < 3",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "date3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "date3 = datetime.now()\nfoo1 = date1 < date2 <= date3\nrequires_bool(foo1)\nint1 = 3\nfoo2 = 2 < int1 < 5\nrequires_bool(foo2)\n# This should generate an error because\n# int and datetime cannot be compared.\nfoo3 = date1 < date2 < 3\nfoo4 = (date1 < date2) < 3",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "foo1 = date1 < date2 <= date3\nrequires_bool(foo1)\nint1 = 3\nfoo2 = 2 < int1 < 5\nrequires_bool(foo2)\n# This should generate an error because\n# int and datetime cannot be compared.\nfoo3 = date1 < date2 < 3\nfoo4 = (date1 < date2) < 3\nfoo5 = \"1\" == \"1\" in \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "int1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "int1 = 3\nfoo2 = 2 < int1 < 5\nrequires_bool(foo2)\n# This should generate an error because\n# int and datetime cannot be compared.\nfoo3 = date1 < date2 < 3\nfoo4 = (date1 < date2) < 3\nfoo5 = \"1\" == \"1\" in \"1\"\nfoo6 = \"1\" in \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "foo2 = 2 < int1 < 5\nrequires_bool(foo2)\n# This should generate an error because\n# int and datetime cannot be compared.\nfoo3 = date1 < date2 < 3\nfoo4 = (date1 < date2) < 3\nfoo5 = \"1\" == \"1\" in \"1\"\nfoo6 = \"1\" in \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "foo3 = date1 < date2 < 3\nfoo4 = (date1 < date2) < 3\nfoo5 = \"1\" == \"1\" in \"1\"\nfoo6 = \"1\" in \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "foo4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "foo4 = (date1 < date2) < 3\nfoo5 = \"1\" == \"1\" in \"1\"\nfoo6 = \"1\" in \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "foo5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "foo5 = \"1\" == \"1\" in \"1\"\nfoo6 = \"1\" in \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "foo6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators2",
        "description": "packages.pyright-internal.src.tests.samples.operators2",
        "peekOfCode": "foo6 = \"1\" in \"1\" == \"1\"",
        "detail": "packages.pyright-internal.src.tests.samples.operators2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators4",
        "description": "packages.pyright-internal.src.tests.samples.operators4",
        "peekOfCode": "class A:\n    pass\nclass B:\n    def __rmul__(self, a: A):\n        pass\n    def __rmatmul__(self, a: A):\n        pass\n    def __matmul__(self, a: A):\n        pass\na, b = A(), B()",
        "detail": "packages.pyright-internal.src.tests.samples.operators4",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.operators4",
        "description": "packages.pyright-internal.src.tests.samples.operators4",
        "peekOfCode": "class B:\n    def __rmul__(self, a: A):\n        pass\n    def __rmatmul__(self, a: A):\n        pass\n    def __matmul__(self, a: A):\n        pass\na, b = A(), B()\nv1 = a @ b\nv2 = b @ a",
        "detail": "packages.pyright-internal.src.tests.samples.operators4",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators4",
        "description": "packages.pyright-internal.src.tests.samples.operators4",
        "peekOfCode": "v1 = a @ b\nv2 = b @ a",
        "detail": "packages.pyright-internal.src.tests.samples.operators4",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators4",
        "description": "packages.pyright-internal.src.tests.samples.operators4",
        "peekOfCode": "v2 = b @ a",
        "detail": "packages.pyright-internal.src.tests.samples.operators4",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators6",
        "description": "packages.pyright-internal.src.tests.samples.operators6",
        "peekOfCode": "v1 = ctypes.POINTER(ctypes.c_bool) * 3\nreveal_type(v1, expected_text=\"Type[Array[_Pointer[c_bool]]]\")\nv2 = 3 * ctypes.POINTER(ctypes.c_bool)\nreveal_type(v2, expected_text=\"Type[Array[_Pointer[c_bool]]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.operators6",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators6",
        "description": "packages.pyright-internal.src.tests.samples.operators6",
        "peekOfCode": "v2 = 3 * ctypes.POINTER(ctypes.c_bool)\nreveal_type(v2, expected_text=\"Type[Array[_Pointer[c_bool]]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.operators6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators7",
        "description": "packages.pyright-internal.src.tests.samples.operators7",
        "peekOfCode": "def func1(n: _TInt) -> _TInt:\n    x = n + 1\n    reveal_type(x, expected_text=\"int\")\n    # This should generate an error.\n    return x\n_TIntOrStr = TypeVar(\"_TIntOrStr\", int, str)\ndef func2(n: _TIntOrStr) -> _TIntOrStr:\n    x = n + n\n    reveal_type(x, expected_text=\"int* | str*\")\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.operators7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators7",
        "description": "packages.pyright-internal.src.tests.samples.operators7",
        "peekOfCode": "def func2(n: _TIntOrStr) -> _TIntOrStr:\n    x = n + n\n    reveal_type(x, expected_text=\"int* | str*\")\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.operators7",
        "documentation": {}
    },
    {
        "label": "_TInt",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators7",
        "description": "packages.pyright-internal.src.tests.samples.operators7",
        "peekOfCode": "_TInt = TypeVar(\"_TInt\", bound=int)\ndef func1(n: _TInt) -> _TInt:\n    x = n + 1\n    reveal_type(x, expected_text=\"int\")\n    # This should generate an error.\n    return x\n_TIntOrStr = TypeVar(\"_TIntOrStr\", int, str)\ndef func2(n: _TIntOrStr) -> _TIntOrStr:\n    x = n + n\n    reveal_type(x, expected_text=\"int* | str*\")",
        "detail": "packages.pyright-internal.src.tests.samples.operators7",
        "documentation": {}
    },
    {
        "label": "_TIntOrStr",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators7",
        "description": "packages.pyright-internal.src.tests.samples.operators7",
        "peekOfCode": "_TIntOrStr = TypeVar(\"_TIntOrStr\", int, str)\ndef func2(n: _TIntOrStr) -> _TIntOrStr:\n    x = n + n\n    reveal_type(x, expected_text=\"int* | str*\")\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.operators7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "def func1(a: Literal[1, 2], b: Literal[0, 4], c: Literal[3, 4]):\n    c1 = a * b + c\n    reveal_type(c1, expected_text=\"Literal[3, 4, 7, 8, 11, 12]\")\n    c2 = a // 0\n    reveal_type(c2, expected_text=\"int\")\n    c3 = a % 0\n    reveal_type(c3, expected_text=\"int\")\n    c4 = ((a * 1000) % 39) // c\n    reveal_type(c4, expected_text=\"Literal[8, 6, 3, 2]\")\n    c5 = a + True",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "def func2(cond: bool):\n    c1 = \"Hi \" + (\"Steve\" if cond else \"Amy\")\n    reveal_type(c1, expected_text=\"Literal['Hi Steve', 'Hi Amy']\")\ndef func3(cond: bool):\n    c1 = b\"Hi \" + (b\"Steve\" if cond else b\"Amy\")\n    reveal_type(c1, expected_text=\"Literal[b'Hi Steve', b'Hi Amy']\")\ndef func4(a: Literal[True], b: Literal[False]):\n    c1 = a and b\n    reveal_type(c1, expected_text=\"Literal[False]\")\n    c2 = a and a",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "def func3(cond: bool):\n    c1 = b\"Hi \" + (b\"Steve\" if cond else b\"Amy\")\n    reveal_type(c1, expected_text=\"Literal[b'Hi Steve', b'Hi Amy']\")\ndef func4(a: Literal[True], b: Literal[False]):\n    c1 = a and b\n    reveal_type(c1, expected_text=\"Literal[False]\")\n    c2 = a and a\n    reveal_type(c2, expected_text=\"Literal[True]\")\n    c3 = a or b\n    reveal_type(c3, expected_text=\"Literal[True]\")",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "def func4(a: Literal[True], b: Literal[False]):\n    c1 = a and b\n    reveal_type(c1, expected_text=\"Literal[False]\")\n    c2 = a and a\n    reveal_type(c2, expected_text=\"Literal[True]\")\n    c3 = a or b\n    reveal_type(c3, expected_text=\"Literal[True]\")\n    c4 = not a\n    reveal_type(c4, expected_text=\"Literal[False]\")\n    c5 = not b",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "def func5(\n    a: mode, b: mode, c: mode, d: mode, e: mode, f: mode, g: mode, h: mode, i: mode\n):\n    # Make sure this degenerate case falls back to \"LiteralString\".\n    reveal_type(a + b + c + d + e + f + g + h + i, expected_text=\"LiteralString\")\ndef func6(x: Literal[1, 3, 5, 7, 11, 13]):\n    y = x\n    y *= x\n    reveal_type(\n        y,",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "def func6(x: Literal[1, 3, 5, 7, 11, 13]):\n    y = x\n    y *= x\n    reveal_type(\n        y,\n        expected_text=\"Literal[1, 3, 5, 7, 11, 13, 9, 15, 21, 33, 39, 25, 35, 55, 65, 49, 77, 91, 121, 143, 169]\",\n    )\n    y *= x\n    reveal_type(y, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "mode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.operators8",
        "description": "packages.pyright-internal.src.tests.samples.operators8",
        "peekOfCode": "mode = Literal[\n    \"a\",\n    \"b\",\n    \"c\",\n    \"d\",\n    \"e\",\n    \"f\",\n    \"g\",\n    \"h\",\n    \"i\",",
        "detail": "packages.pyright-internal.src.tests.samples.operators8",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "class Foo:\n    def __init__(self):\n        self.value = 3\n    def do_stuff(self):\n        pass\n    def __enter__(self):\n        return 3\n    def __exit__(\n        self,\n        t: Optional[type] = None,",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "def foo():\n    pass\nb = None\nif 1:\n    b = foo\n# If \"reportOptionalCall\" is enabled,\n# this should generate an error.\nb()\nc = None\nif 1:",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "a = None\nif 1:\n    a = Foo()\n# If \"reportOptionalMemberAccess\" is enabled,\n# this should generate an error.\na.value = 3\ndef foo():\n    pass\nb = None\nif 1:",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "a.value",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "a.value = 3\ndef foo():\n    pass\nb = None\nif 1:\n    b = foo\n# If \"reportOptionalCall\" is enabled,\n# this should generate an error.\nb()\nc = None",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "b = None\nif 1:\n    b = foo\n# If \"reportOptionalCall\" is enabled,\n# this should generate an error.\nb()\nc = None\nif 1:\n    c = [3, 4, 5]\n# If \"reportOptionalSubscript\" is enabled,",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "c = None\nif 1:\n    c = [3, 4, 5]\n# If \"reportOptionalSubscript\" is enabled,\n# this should generate an error.\nc[2]\n# If \"reportOptionalIterable\" is enabled,\n# this should generate an error.\nfor val in c:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "cm = None\nif 1:\n    cm = Foo()\nwith cm as val:\n    pass\n# If \"reportOptionalOperand\" is enabled,\n# this should generate 3 errors.\ne = None\nif 1:\n    e = 4",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "e = None\nif 1:\n    e = 4\nv1 = e + 4\nv2 = e < 5\nv3 = not e",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "v1 = e + 4\nv2 = e < 5\nv3 = not e",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "v2 = e < 5\nv3 = not e",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.optional1",
        "description": "packages.pyright-internal.src.tests.samples.optional1",
        "peekOfCode": "v3 = not e",
        "detail": "packages.pyright-internal.src.tests.samples.optional1",
        "documentation": {}
    },
    {
        "label": "Cmp",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.optional2",
        "description": "packages.pyright-internal.src.tests.samples.optional2",
        "peekOfCode": "class Cmp:\n    def __eq__(self, other: \"Optional[Cmp]\") -> bool:\n        ...\n    def __lt__(self, other: \"Optional[Cmp]\") -> bool:\n        ...\n    def __gt__(self, other: \"Cmp\") -> bool:\n        ...\ndef valid(value: Optional[Cmp], needed: Cmp):\n    x = value >= needed\n    y = value == needed",
        "detail": "packages.pyright-internal.src.tests.samples.optional2",
        "documentation": {}
    },
    {
        "label": "valid",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.optional2",
        "description": "packages.pyright-internal.src.tests.samples.optional2",
        "peekOfCode": "def valid(value: Optional[Cmp], needed: Cmp):\n    x = value >= needed\n    y = value == needed\n    # This should generate an error if reportOptionalOperand is enabled.\n    z = value <= needed",
        "detail": "packages.pyright-internal.src.tests.samples.optional2",
        "documentation": {}
    },
    {
        "label": "from_json_timestamp",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload1",
        "description": "packages.pyright-internal.src.tests.samples.overload1",
        "peekOfCode": "def from_json_timestamp(ts: int) -> datetime:\n    ...\n@overload\ndef from_json_timestamp(ts: None) -> None:\n    ...\ndef from_json_timestamp(ts: Optional[int]) -> Optional[datetime]:\n    return (\n        None\n        if ts is None\n        else (datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(milliseconds=ts))",
        "detail": "packages.pyright-internal.src.tests.samples.overload1",
        "documentation": {}
    },
    {
        "label": "from_json_timestamp",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload1",
        "description": "packages.pyright-internal.src.tests.samples.overload1",
        "peekOfCode": "def from_json_timestamp(ts: None) -> None:\n    ...\ndef from_json_timestamp(ts: Optional[int]) -> Optional[datetime]:\n    return (\n        None\n        if ts is None\n        else (datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(milliseconds=ts))\n    )\nresult1: datetime = from_json_timestamp(2418049)\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.overload1",
        "documentation": {}
    },
    {
        "label": "from_json_timestamp",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload1",
        "description": "packages.pyright-internal.src.tests.samples.overload1",
        "peekOfCode": "def from_json_timestamp(ts: Optional[int]) -> Optional[datetime]:\n    return (\n        None\n        if ts is None\n        else (datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(milliseconds=ts))\n    )\nresult1: datetime = from_json_timestamp(2418049)\n# This should generate an error\nresult2: datetime = from_json_timestamp(None)\nresult3: None = from_json_timestamp(None)",
        "detail": "packages.pyright-internal.src.tests.samples.overload1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload1",
        "description": "packages.pyright-internal.src.tests.samples.overload1",
        "peekOfCode": "def func1(x: int) -> int:\n    ...\n@overload\ndef func1(x: float) -> float:\n    ...\ndef func1(x):\n    return x\nreveal_type(func1(abs(0.0)), expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload1",
        "description": "packages.pyright-internal.src.tests.samples.overload1",
        "peekOfCode": "def func1(x: float) -> float:\n    ...\ndef func1(x):\n    return x\nreveal_type(func1(abs(0.0)), expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload1",
        "description": "packages.pyright-internal.src.tests.samples.overload1",
        "peekOfCode": "def func1(x):\n    return x\nreveal_type(func1(abs(0.0)), expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "def func1(__iter1: Iterable[_T1]) -> Tuple[_T1]:\n    ...\n@overload\ndef func1(__iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> Tuple[_T1, _T2]:\n    ...\n# This should generate an error because this overload overlaps\n# with the first one and returns a different type.\n@overload\ndef func1(*iterables: Iterable[_T1]) -> Tuple[_T1, ...]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "def func1(__iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> Tuple[_T1, _T2]:\n    ...\n# This should generate an error because this overload overlaps\n# with the first one and returns a different type.\n@overload\ndef func1(*iterables: Iterable[_T1]) -> Tuple[_T1, ...]:\n    ...\ndef func1(*iterables: Iterable[_T1]) -> Tuple[_T1, ...]:\n    ...\ndef func2(x: Iterable[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "def func1(*iterables: Iterable[_T1]) -> Tuple[_T1, ...]:\n    ...\ndef func1(*iterables: Iterable[_T1]) -> Tuple[_T1, ...]:\n    ...\ndef func2(x: Iterable[int]):\n    v1 = func1(x)\n    reveal_type(v1, expected_text=\"Tuple[int]\")\n    v2 = func1(x, x)\n    reveal_type(v2, expected_text=\"Tuple[int, int]\")\n    y = [x, x, x, x]",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "def func1(*iterables: Iterable[_T1]) -> Tuple[_T1, ...]:\n    ...\ndef func2(x: Iterable[int]):\n    v1 = func1(x)\n    reveal_type(v1, expected_text=\"Tuple[int]\")\n    v2 = func1(x, x)\n    reveal_type(v2, expected_text=\"Tuple[int, int]\")\n    y = [x, x, x, x]\n    v3 = func1(*y)\n    reveal_type(v3, expected_text=\"Tuple[int, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "def func2(x: Iterable[int]):\n    v1 = func1(x)\n    reveal_type(v1, expected_text=\"Tuple[int]\")\n    v2 = func1(x, x)\n    reveal_type(v2, expected_text=\"Tuple[int, int]\")\n    y = [x, x, x, x]\n    v3 = func1(*y)\n    reveal_type(v3, expected_text=\"Tuple[int, ...]\")\n    z = (x, x)\n    v4 = func1(*z)",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\n@overload\ndef func1(__iter1: Iterable[_T1]) -> Tuple[_T1]:\n    ...\n@overload\ndef func1(__iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> Tuple[_T1, _T2]:\n    ...\n# This should generate an error because this overload overlaps\n# with the first one and returns a different type.",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload10",
        "description": "packages.pyright-internal.src.tests.samples.overload10",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\n@overload\ndef func1(__iter1: Iterable[_T1]) -> Tuple[_T1]:\n    ...\n@overload\ndef func1(__iter1: Iterable[_T1], __iter2: Iterable[_T2]) -> Tuple[_T1, _T2]:\n    ...\n# This should generate an error because this overload overlaps\n# with the first one and returns a different type.\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload10",
        "documentation": {}
    },
    {
        "label": "Base1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload11",
        "description": "packages.pyright-internal.src.tests.samples.overload11",
        "peekOfCode": "class Base1:\n    def foo(self, x: int) -> int:\n        return x\nclass Derived1(Base1):\n    @overload\n    def foo(self, x: int) -> int:\n        ...\n    @overload\n    def foo(self, x: str) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload11",
        "documentation": {}
    },
    {
        "label": "Derived1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload11",
        "description": "packages.pyright-internal.src.tests.samples.overload11",
        "peekOfCode": "class Derived1(Base1):\n    @overload\n    def foo(self, x: int) -> int:\n        ...\n    @overload\n    def foo(self, x: str) -> str:\n        ...\n    def foo(self, x: int | str) -> int | str:\n        return x\nclass Base2:",
        "detail": "packages.pyright-internal.src.tests.samples.overload11",
        "documentation": {}
    },
    {
        "label": "Base2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload11",
        "description": "packages.pyright-internal.src.tests.samples.overload11",
        "peekOfCode": "class Base2:\n    def foo(self, x: int | str) -> int | str:\n        return x\nclass Derived2(Base2):\n    @overload\n    def foo(self, x: int) -> int:\n        ...\n    @overload\n    def foo(self, x: str) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload11",
        "documentation": {}
    },
    {
        "label": "Derived2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload11",
        "description": "packages.pyright-internal.src.tests.samples.overload11",
        "peekOfCode": "class Derived2(Base2):\n    @overload\n    def foo(self, x: int) -> int:\n        ...\n    @overload\n    def foo(self, x: str) -> str:\n        ...\n    def foo(self, x: int | str) -> int | str:\n        return x\nclass Base3:",
        "detail": "packages.pyright-internal.src.tests.samples.overload11",
        "documentation": {}
    },
    {
        "label": "Base3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload11",
        "description": "packages.pyright-internal.src.tests.samples.overload11",
        "peekOfCode": "class Base3:\n    def foo(self, x: int) -> int:\n        return x\nclass Derived3(Base3):\n    @overload\n    def foo(self, x: float) -> float:\n        ...\n    @overload\n    def foo(self, x: str) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload11",
        "documentation": {}
    },
    {
        "label": "Derived3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload11",
        "description": "packages.pyright-internal.src.tests.samples.overload11",
        "peekOfCode": "class Derived3(Base3):\n    @overload\n    def foo(self, x: float) -> float:\n        ...\n    @overload\n    def foo(self, x: str) -> str:\n        ...\n    # This should generate an error because no overloaded signature\n    # is compatible with the base method, nor is the implementation.\n    def foo(self, x: int | str | float) -> int | str | float:",
        "detail": "packages.pyright-internal.src.tests.samples.overload11",
        "documentation": {}
    },
    {
        "label": "requires_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload2",
        "description": "packages.pyright-internal.src.tests.samples.overload2",
        "peekOfCode": "def requires_str(a: str):\n    pass\ndef requires_int(a: int):\n    pass\nasync def test_function():\n    should_be_str = await func(\"2\")\n    requires_str(should_be_str)\n    should_be_int = await func(2)\n    requires_int(should_be_int)",
        "detail": "packages.pyright-internal.src.tests.samples.overload2",
        "documentation": {}
    },
    {
        "label": "requires_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload2",
        "description": "packages.pyright-internal.src.tests.samples.overload2",
        "peekOfCode": "def requires_int(a: int):\n    pass\nasync def test_function():\n    should_be_str = await func(\"2\")\n    requires_str(should_be_str)\n    should_be_int = await func(2)\n    requires_int(should_be_int)",
        "detail": "packages.pyright-internal.src.tests.samples.overload2",
        "documentation": {}
    },
    {
        "label": "mouse_event",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload3",
        "description": "packages.pyright-internal.src.tests.samples.overload3",
        "peekOfCode": "def mouse_event(x1: int, y1: int) -> int:\n    ...\n@overload\ndef mouse_event(x1: int, y1: int, x2: int, y2: int) -> Tuple[int, int]:\n    ...\ndef mouse_event(\n    x1: int, y1: int, x2: Optional[int] = None, y2: Optional[int] = None\n) -> Union[int, Tuple[int, int]]:\n    return 1\n# This should generate an error because it doesn't match either",
        "detail": "packages.pyright-internal.src.tests.samples.overload3",
        "documentation": {}
    },
    {
        "label": "mouse_event",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload3",
        "description": "packages.pyright-internal.src.tests.samples.overload3",
        "peekOfCode": "def mouse_event(x1: int, y1: int, x2: int, y2: int) -> Tuple[int, int]:\n    ...\ndef mouse_event(\n    x1: int, y1: int, x2: Optional[int] = None, y2: Optional[int] = None\n) -> Union[int, Tuple[int, int]]:\n    return 1\n# This should generate an error because it doesn't match either\n# of the @overload versions, even though it does match the\n# version of the function that omits the @overload.\nt = mouse_event(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.overload3",
        "documentation": {}
    },
    {
        "label": "mouse_event",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload3",
        "description": "packages.pyright-internal.src.tests.samples.overload3",
        "peekOfCode": "def mouse_event(\n    x1: int, y1: int, x2: Optional[int] = None, y2: Optional[int] = None\n) -> Union[int, Tuple[int, int]]:\n    return 1\n# This should generate an error because it doesn't match either\n# of the @overload versions, even though it does match the\n# version of the function that omits the @overload.\nt = mouse_event(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.overload3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload3",
        "description": "packages.pyright-internal.src.tests.samples.overload3",
        "peekOfCode": "T = TypeVar(\"T\")\n@overload\ndef mouse_event(x1: int, y1: int) -> int:\n    ...\n@overload\ndef mouse_event(x1: int, y1: int, x2: int, y2: int) -> Tuple[int, int]:\n    ...\ndef mouse_event(\n    x1: int, y1: int, x2: Optional[int] = None, y2: Optional[int] = None\n) -> Union[int, Tuple[int, int]]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload3",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload3",
        "description": "packages.pyright-internal.src.tests.samples.overload3",
        "peekOfCode": "t = mouse_event(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.overload3",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload4",
        "description": "packages.pyright-internal.src.tests.samples.overload4",
        "peekOfCode": "class ClassA:\n    # This should generate an error because there is no implementation.\n    @overload\n    def foo3(self) -> None:\n        ...\n    @overload\n    def foo3(self, a: int) -> None:\n        ...\nclass ClassB(Protocol):\n    # An implementation should not be required in a protocol class.",
        "detail": "packages.pyright-internal.src.tests.samples.overload4",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload4",
        "description": "packages.pyright-internal.src.tests.samples.overload4",
        "peekOfCode": "class ClassB(Protocol):\n    # An implementation should not be required in a protocol class.\n    @overload\n    def foo(self) -> None:\n        ...\n    @overload\n    def foo(self, name: str) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload4",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload4",
        "description": "packages.pyright-internal.src.tests.samples.overload4",
        "peekOfCode": "def foo1() -> None:\n    ...\ndef foo1() -> None:\n    ...\n# This should generate an error because there is only one overload.\n@overload\ndef foo2(a: int) -> None:\n    ...\ndef foo2(a: int) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.overload4",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload4",
        "description": "packages.pyright-internal.src.tests.samples.overload4",
        "peekOfCode": "def foo1() -> None:\n    ...\n# This should generate an error because there is only one overload.\n@overload\ndef foo2(a: int) -> None:\n    ...\ndef foo2(a: int) -> None:\n    pass\nclass ClassA:\n    # This should generate an error because there is no implementation.",
        "detail": "packages.pyright-internal.src.tests.samples.overload4",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload4",
        "description": "packages.pyright-internal.src.tests.samples.overload4",
        "peekOfCode": "def foo2(a: int) -> None:\n    ...\ndef foo2(a: int) -> None:\n    pass\nclass ClassA:\n    # This should generate an error because there is no implementation.\n    @overload\n    def foo3(self) -> None:\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload4",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload4",
        "description": "packages.pyright-internal.src.tests.samples.overload4",
        "peekOfCode": "def foo2(a: int) -> None:\n    pass\nclass ClassA:\n    # This should generate an error because there is no implementation.\n    @overload\n    def foo3(self) -> None:\n        ...\n    @overload\n    def foo3(self, a: int) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload4",
        "documentation": {}
    },
    {
        "label": "GenericClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class GenericClass(Generic[_T1, _T2]):\n    @overload\n    def method1(self, a: _T1, b: Tuple[_T2, ...]) -> int:\n        ...\n    @overload\n    def method1(self, a: _T1, b: Tuple[Any, ...]) -> int:\n        ...\n    def method1(self, *args: Any, **kwargs: Any) -> Any:\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class Parent:\n    ...\nclass Child(Parent):\n    ...\n# Test 1: Literal subtype\n@overload\ndef func10(x: Literal[3]) -> int:\n    ...\n@overload\ndef func10(x: int) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class Child(Parent):\n    ...\n# Test 1: Literal subtype\n@overload\ndef func10(x: Literal[3]) -> int:\n    ...\n@overload\ndef func10(x: int) -> str:\n    ...\ndef func10(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class ClassA(Generic[_T1]):\n    @overload\n    def __call__(self, f: _T1) -> _T1:\n        ...\n    @overload\n    def __call__(self, f: _T1 | None) -> _T1:\n        ...\n    def __call__(self, f: _T1 | None) -> _T1:\n        ...\nclass ClassB:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class ClassB:\n    @overload\n    def __call__(self, f: _T1) -> _T1:\n        ...\n    # This should generate an error because the overload is overlapped.\n    @overload\n    def __call__(self, f: _T1 | None) -> _T1:\n        ...\n    def __call__(self, f: _T1 | None) -> _T1:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class ClassC:\n    @overload\n    def method1(self, x: Type[Any]) -> bool:\n        ...\n    @overload\n    def method1(self, x: Any) -> str | bool:\n        ...\n    def method1(self, x: Any) -> Any:\n        ...\nclass ClassD:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "class ClassD:\n    @overload\n    def method1(self, x: type) -> bool:\n        ...\n    @overload\n    def method1(self, x: Any) -> str | bool:\n        ...\n    def method1(self, x: Any) -> Any:\n        ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func1(a: float, b: Optional[float], c: Optional[bool] = None) -> int:\n    ...\n# This should generate an error because the overload is obscured.\n@overload\ndef func1(a: int, b: int) -> int:\n    ...\n@overload\ndef func1(a: int, b: int, *, named: int = 3) -> int:\n    ...\n# This should generate an error because the overload is obscured.",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func1(a: int, b: int) -> int:\n    ...\n@overload\ndef func1(a: int, b: int, *, named: int = 3) -> int:\n    ...\n# This should generate an error because the overload is obscured.\n@overload\ndef func1(a: int, b: int, *, named: int) -> int:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func1(a: int, b: int, *, named: int = 3) -> int:\n    ...\n# This should generate an error because the overload is obscured.\n@overload\ndef func1(a: int, b: int, *, named: int) -> int:\n    ...\n@overload\ndef func1(a: complex, b: int) -> int:\n    ...\ndef func1(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func1(a: int, b: int, *, named: int) -> int:\n    ...\n@overload\ndef func1(a: complex, b: int) -> int:\n    ...\ndef func1(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func2(a: int, b: Any) -> int:\n    \"\"\"Overload\"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func1(a: complex, b: int) -> int:\n    ...\ndef func1(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func2(a: int, b: Any) -> int:\n    \"\"\"Overload\"\"\"\n# This should generate an error because the overload is obscured.\n@overload\ndef func2(a: int, b: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func1(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func2(a: int, b: Any) -> int:\n    \"\"\"Overload\"\"\"\n# This should generate an error because the overload is obscured.\n@overload\ndef func2(a: int, b: int) -> int:\n    \"\"\"Overload\"\"\"\ndef func2(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func2(a: int, b: Any) -> int:\n    \"\"\"Overload\"\"\"\n# This should generate an error because the overload is obscured.\n@overload\ndef func2(a: int, b: int) -> int:\n    \"\"\"Overload\"\"\"\ndef func2(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func3(a: int, b: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func2(a: int, b: int) -> int:\n    \"\"\"Overload\"\"\"\ndef func2(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func3(a: int, b: int) -> int:\n    ...\n@overload\ndef func3(a: int, b: int, **c: Any) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func2(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func3(a: int, b: int) -> int:\n    ...\n@overload\ndef func3(a: int, b: int, **c: Any) -> int:\n    ...\n@overload\ndef func3(a: int, b: Any) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func3(a: int, b: int) -> int:\n    ...\n@overload\ndef func3(a: int, b: int, **c: Any) -> int:\n    ...\n@overload\ndef func3(a: int, b: Any) -> int:\n    ...\ndef func3(*args: Any, **kwargs: Any) -> Any:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func3(a: int, b: int, **c: Any) -> int:\n    ...\n@overload\ndef func3(a: int, b: Any) -> int:\n    ...\ndef func3(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func4(a: int, *, c: int, b: int) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func3(a: int, b: Any) -> int:\n    ...\ndef func3(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func4(a: int, *, c: int, b: int) -> int:\n    ...\n# This should generate an error because the overload is obscured.\n@overload\ndef func4(a: int, *, b: int, c: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func3(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func4(a: int, *, c: int, b: int) -> int:\n    ...\n# This should generate an error because the overload is obscured.\n@overload\ndef func4(a: int, *, b: int, c: int) -> int:\n    ...\ndef func4(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func4(a: int, *, c: int, b: int) -> int:\n    ...\n# This should generate an error because the overload is obscured.\n@overload\ndef func4(a: int, *, b: int, c: int) -> int:\n    ...\ndef func4(*args: Any, **kwargs: Any) -> Any:\n    pass\n# This should generate an error because the overload is overlapping\n# in an unsafe way (i.e. returns an incompatible type).",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func4(a: int, *, b: int, c: int) -> int:\n    ...\ndef func4(*args: Any, **kwargs: Any) -> Any:\n    pass\n# This should generate an error because the overload is overlapping\n# in an unsafe way (i.e. returns an incompatible type).\n@overload\ndef func5(a: int, b: int) -> int:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func4(*args: Any, **kwargs: Any) -> Any:\n    pass\n# This should generate an error because the overload is overlapping\n# in an unsafe way (i.e. returns an incompatible type).\n@overload\ndef func5(a: int, b: int) -> int:\n    ...\n@overload\ndef func5(a: float, b: float = 3.4, *c: int, d: float = 4.5) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func5(a: int, b: int) -> int:\n    ...\n@overload\ndef func5(a: float, b: float = 3.4, *c: int, d: float = 4.5) -> str:\n    ...\ndef func5(*args: Any, **kwargs: Any) -> Any:\n    pass\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass GenericClass(Generic[_T1, _T2]):",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func5(a: float, b: float = 3.4, *c: int, d: float = 4.5) -> str:\n    ...\ndef func5(*args: Any, **kwargs: Any) -> Any:\n    pass\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass GenericClass(Generic[_T1, _T2]):\n    @overload\n    def method1(self, a: _T1, b: Tuple[_T2, ...]) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func5(*args: Any, **kwargs: Any) -> Any:\n    pass\n_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass GenericClass(Generic[_T1, _T2]):\n    @overload\n    def method1(self, a: _T1, b: Tuple[_T2, ...]) -> int:\n        ...\n    @overload\n    def method1(self, a: _T1, b: Tuple[Any, ...]) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func10(x: Literal[3]) -> int:\n    ...\n@overload\ndef func10(x: int) -> str:\n    ...\ndef func10(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 2: Subclass subtype\n@overload\ndef func11(x: Child) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func10(x: int) -> str:\n    ...\ndef func10(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 2: Subclass subtype\n@overload\ndef func11(x: Child) -> str:\n    ...\n@overload\ndef func11(x: Parent) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func10(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 2: Subclass subtype\n@overload\ndef func11(x: Child) -> str:\n    ...\n@overload\ndef func11(x: Parent) -> int:\n    ...\ndef func11(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func11(x: Child) -> str:\n    ...\n@overload\ndef func11(x: Parent) -> int:\n    ...\ndef func11(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 3: Implicit subtype\n@overload\ndef func12(x: int) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func11(x: Parent) -> int:\n    ...\ndef func11(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 3: Implicit subtype\n@overload\ndef func12(x: int) -> str:\n    ...\n@overload\ndef func12(x: float) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func11(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 3: Implicit subtype\n@overload\ndef func12(x: int) -> str:\n    ...\n@overload\ndef func12(x: float) -> int:\n    ...\ndef func12(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func12(x: int) -> str:\n    ...\n@overload\ndef func12(x: float) -> int:\n    ...\ndef func12(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 4: Union subtype\n@overload\ndef func13(x: int) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func12(x: float) -> int:\n    ...\ndef func12(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 4: Union subtype\n@overload\ndef func13(x: int) -> str:\n    ...\n@overload\ndef func13(x: Union[int, str]) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func12(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 4: Union subtype\n@overload\ndef func13(x: int) -> str:\n    ...\n@overload\ndef func13(x: Union[int, str]) -> int:\n    ...\ndef func13(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func13(x: int) -> str:\n    ...\n@overload\ndef func13(x: Union[int, str]) -> int:\n    ...\ndef func13(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 5: non-matching keyword argument\n@overload\ndef func14(x: int, *, cls: str, **kwargs: Any) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func13(x: Union[int, str]) -> int:\n    ...\ndef func13(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 5: non-matching keyword argument\n@overload\ndef func14(x: int, *, cls: str, **kwargs: Any) -> int:\n    ...\n@overload\ndef func14(x: int, **kwargs: Any) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func13(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 5: non-matching keyword argument\n@overload\ndef func14(x: int, *, cls: str, **kwargs: Any) -> int:\n    ...\n@overload\ndef func14(x: int, **kwargs: Any) -> str:\n    ...\ndef func14(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func14(x: int, *, cls: str, **kwargs: Any) -> int:\n    ...\n@overload\ndef func14(x: int, **kwargs: Any) -> str:\n    ...\ndef func14(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 6: non-matching keyword argument (shouldn't generate error)\n@overload\ndef func15(cls: str, **kwargs: Any) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func14(x: int, **kwargs: Any) -> str:\n    ...\ndef func14(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 6: non-matching keyword argument (shouldn't generate error)\n@overload\ndef func15(cls: str, **kwargs: Any) -> int:\n    ...\n@overload\ndef func15(**kwargs: Any) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func14(*args: Any, **kwargs: Any) -> Any:\n    pass\n# Test 6: non-matching keyword argument (shouldn't generate error)\n@overload\ndef func15(cls: str, **kwargs: Any) -> int:\n    ...\n@overload\ndef func15(**kwargs: Any) -> str:\n    ...\ndef func15(*args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func15(cls: str, **kwargs: Any) -> int:\n    ...\n@overload\ndef func15(**kwargs: Any) -> str:\n    ...\ndef func15(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func16(var: None) -> List[Any]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func15(**kwargs: Any) -> str:\n    ...\ndef func15(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func16(var: None) -> List[Any]:\n    ...\n@overload\ndef func16(var: _T1) -> List[_T1]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func15(*args: Any, **kwargs: Any) -> Any:\n    pass\n@overload\ndef func16(var: None) -> List[Any]:\n    ...\n@overload\ndef func16(var: _T1) -> List[_T1]:\n    ...\ndef func16(var: Union[_T1, None]) -> List[_T1] | List[Any]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func16(var: None) -> List[Any]:\n    ...\n@overload\ndef func16(var: _T1) -> List[_T1]:\n    ...\ndef func16(var: Union[_T1, None]) -> List[_T1] | List[Any]:\n    ...\n@overload\ndef func17(a: int, b: List[int]) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func16(var: _T1) -> List[_T1]:\n    ...\ndef func16(var: Union[_T1, None]) -> List[_T1] | List[Any]:\n    ...\n@overload\ndef func17(a: int, b: List[int]) -> int:\n    ...\n@overload\ndef func17(a: int, b: List[_T1]) -> _T1:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func16(var: Union[_T1, None]) -> List[_T1] | List[Any]:\n    ...\n@overload\ndef func17(a: int, b: List[int]) -> int:\n    ...\n@overload\ndef func17(a: int, b: List[_T1]) -> _T1:\n    ...\ndef func17(*args: Any, **kwargs: Any) -> Any:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func17",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func17(a: int, b: List[int]) -> int:\n    ...\n@overload\ndef func17(a: int, b: List[_T1]) -> _T1:\n    ...\ndef func17(*args: Any, **kwargs: Any) -> Any:\n    pass\nclass ClassA(Generic[_T1]):\n    @overload\n    def __call__(self, f: _T1) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func17",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func17(a: int, b: List[_T1]) -> _T1:\n    ...\ndef func17(*args: Any, **kwargs: Any) -> Any:\n    pass\nclass ClassA(Generic[_T1]):\n    @overload\n    def __call__(self, f: _T1) -> _T1:\n        ...\n    @overload\n    def __call__(self, f: _T1 | None) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func17",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func17(*args: Any, **kwargs: Any) -> Any:\n    pass\nclass ClassA(Generic[_T1]):\n    @overload\n    def __call__(self, f: _T1) -> _T1:\n        ...\n    @overload\n    def __call__(self, f: _T1 | None) -> _T1:\n        ...\n    def __call__(self, f: _T1 | None) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func18",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func18(s: Sequence[_T1], extra: Literal[False]) -> list[_T1]: ...\n@overload\ndef func18(s: Sequence[_T1], extra: Literal[True]) -> list[_T1] | tuple[_T1]: ...\n@overload\ndef func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]: ...\ndef func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func18",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func18(s: Sequence[_T1], extra: Literal[True]) -> list[_T1] | tuple[_T1]: ...\n@overload\ndef func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]: ...\ndef func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func18",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]: ...\ndef func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "func18",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "def func18(s: Sequence[_T1], extra: bool) -> list[_T1] | tuple[_T1]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass GenericClass(Generic[_T1, _T2]):\n    @overload\n    def method1(self, a: _T1, b: Tuple[_T2, ...]) -> int:\n        ...\n    @overload\n    def method1(self, a: _T1, b: Tuple[Any, ...]) -> int:\n        ...\n    def method1(self, *args: Any, **kwargs: Any) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload5",
        "description": "packages.pyright-internal.src.tests.samples.overload5",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nclass GenericClass(Generic[_T1, _T2]):\n    @overload\n    def method1(self, a: _T1, b: Tuple[_T2, ...]) -> int:\n        ...\n    @overload\n    def method1(self, a: _T1, b: Tuple[Any, ...]) -> int:\n        ...\n    def method1(self, *args: Any, **kwargs: Any) -> Any:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload5",
        "documentation": {}
    },
    {
        "label": "SupportsRound1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "class SupportsRound1(Protocol[_T_co]):\n    @overload\n    def __round__(self) -> int:\n        ...\n    @overload\n    def __round__(self, ndigits: int) -> _T_co:\n        ...\n    # This should generate an error because the return type isn't compatible.\n    def __round__(self, ndigits: int = 0) -> _T_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "Proto1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "class Proto1:\n    def __round__(self, ndigits: int) -> \"Fraction\":\n        ...\ndef round1(number: SupportsRound1[Any]) -> int:\n    ...\nv_proto1 = Proto1()\n# This should generate an error\nv_round1 = round1(v_proto1)\nclass Proto2:\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "Proto2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "class Proto2:\n    @overload\n    def __round__(self, ndigits: int) -> \"Fraction\":\n        ...\n    @overload\n    def __round__(self, ndigits: None = ...) -> int:\n        ...\n    def __round__(self, ndigits: Optional[int] = None) -> Union[\"Fraction\", int]:\n        ...\ndef round2(number: SupportsRound1[Any]) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "round1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "def round1(number: SupportsRound1[Any]) -> int:\n    ...\nv_proto1 = Proto1()\n# This should generate an error\nv_round1 = round1(v_proto1)\nclass Proto2:\n    @overload\n    def __round__(self, ndigits: int) -> \"Fraction\":\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "round2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "def round2(number: SupportsRound1[Any]) -> int:\n    ...\nv_proto2 = Proto2()\nv_round2 = round2(v_proto2)",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "v1 = round(Fraction(1))\n_T_co = TypeVar(\"_T_co\", covariant=True)\n_T = TypeVar(\"_T\")\nclass SupportsRound1(Protocol[_T_co]):\n    @overload\n    def __round__(self) -> int:\n        ...\n    @overload\n    def __round__(self, ndigits: int) -> _T_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\n_T = TypeVar(\"_T\")\nclass SupportsRound1(Protocol[_T_co]):\n    @overload\n    def __round__(self) -> int:\n        ...\n    @overload\n    def __round__(self, ndigits: int) -> _T_co:\n        ...\n    # This should generate an error because the return type isn't compatible.",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass SupportsRound1(Protocol[_T_co]):\n    @overload\n    def __round__(self) -> int:\n        ...\n    @overload\n    def __round__(self, ndigits: int) -> _T_co:\n        ...\n    # This should generate an error because the return type isn't compatible.\n    def __round__(self, ndigits: int = 0) -> _T_co:",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "v_proto1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "v_proto1 = Proto1()\n# This should generate an error\nv_round1 = round1(v_proto1)\nclass Proto2:\n    @overload\n    def __round__(self, ndigits: int) -> \"Fraction\":\n        ...\n    @overload\n    def __round__(self, ndigits: None = ...) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "v_round1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "v_round1 = round1(v_proto1)\nclass Proto2:\n    @overload\n    def __round__(self, ndigits: int) -> \"Fraction\":\n        ...\n    @overload\n    def __round__(self, ndigits: None = ...) -> int:\n        ...\n    def __round__(self, ndigits: Optional[int] = None) -> Union[\"Fraction\", int]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "v_proto2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "v_proto2 = Proto2()\nv_round2 = round2(v_proto2)",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "v_round2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload6",
        "description": "packages.pyright-internal.src.tests.samples.overload6",
        "peekOfCode": "v_round2 = round2(v_proto2)",
        "detail": "packages.pyright-internal.src.tests.samples.overload6",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class A:\n    @overload\n    def method4(self, a: None) -> None:\n        ...\n    @overload\n    def method4(self, a: List[_T]) -> _T:\n        ...\n    def method4(self, a: Optional[List[_T]]) -> Optional[_T]:\n        ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class ClassA(Generic[_T1]):\n    @overload\n    def method1(self: \"ClassA[None]\") -> None:\n        ...\n    @overload\n    def method1(self, value: _T1) -> None:\n        ...\n    def method1(self, value: Any = None) -> None:\n        ...\nclass ClassB:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class ClassB:\n    ...\nclass ClassC:\n    ...\n_T2 = TypeVar(\"_T2\", ClassB, ClassC)\n@overload\ndef func7(cls: Type[ClassB], var: int) -> ClassB:\n    ...\n@overload\ndef func7(cls: Type[ClassC], var: str) -> ClassC:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class ClassC:\n    ...\n_T2 = TypeVar(\"_T2\", ClassB, ClassC)\n@overload\ndef func7(cls: Type[ClassB], var: int) -> ClassB:\n    ...\n@overload\ndef func7(cls: Type[ClassC], var: str) -> ClassC:\n    ...\ndef func7(cls: Type[_T2], var: Union[int, str]) -> _T2:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class Foo:\n    ...\n_T4 = TypeVar(\"_T4\", bound=Foo)\n@overload\ndef func9() -> None:\n    ...\n@overload\ndef func9(bar: _T4) -> _T4:\n    ...\ndef func9(bar: Optional[_T4] = None) -> Optional[_T4]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class X:\n    ...\n_T6 = TypeVar(\"_T6\", bound=Type[X])\n@overload\ndef func11(var: _T6) -> _T6:\n    ...\n@overload\ndef func11(var: int) -> int:\n    ...\ndef func11(var: Union[_T6, int]) -> Union[_T6, int]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "Wrapper1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class Wrapper1(Generic[_T14]):\n    ...\n@overload\ndef func14(target: Callable[..., Awaitable[_T14]]) -> Wrapper1[_T14]:\n    ...\n@overload\ndef func14(target: Callable[..., _T14]) -> Wrapper1[_T14]:\n    ...\ndef func14(\n    target: Callable[..., Awaitable[_T14]] | Callable[..., _T14]",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "Builds",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class Builds(Protocol[T1]):\n    _target_: str\nclass BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):\n        ...\nclass ClassD(Protocol):\n    @overload\n    def __call__(\n        self,\n        x: Callable[P, R],",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "BuildsWithSig",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):\n        ...\nclass ClassD(Protocol):\n    @overload\n    def __call__(\n        self,\n        x: Callable[P, R],\n        *,\n        sig: Literal[True] = ...,",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "class ClassD(Protocol):\n    @overload\n    def __call__(\n        self,\n        x: Callable[P, R],\n        *,\n        sig: Literal[True] = ...,\n    ) -> BuildsWithSig[Type[R], P]:\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func1(a: int) -> str:\n    ...\n# This should generate an error because its return parameter\n# type is incompatible.\n@overload\ndef func1(a: str) -> int:\n    ...\ndef func1(a: str) -> str:\n    return a\n# This should generate an error because the parameter \"b\" is missing",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func1(a: str) -> int:\n    ...\ndef func1(a: str) -> str:\n    return a\n# This should generate an error because the parameter \"b\" is missing\n# from the implementation.\n@overload\ndef func2(a: int, b: str = ...) -> str:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func1(a: str) -> str:\n    return a\n# This should generate an error because the parameter \"b\" is missing\n# from the implementation.\n@overload\ndef func2(a: int, b: str = ...) -> str:\n    ...\n@overload\ndef func2(a: None) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func2(a: int, b: str = ...) -> str:\n    ...\n@overload\ndef func2(a: None) -> str:\n    ...\ndef func2(a: Optional[int]) -> str:\n    ...\n@overload\ndef func3(a: int, *, b: Literal[\"r\"]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func2(a: None) -> str:\n    ...\ndef func2(a: Optional[int]) -> str:\n    ...\n@overload\ndef func3(a: int, *, b: Literal[\"r\"]) -> str:\n    ...\n@overload\ndef func3(a: int, *, b: Literal[\"b\"]) -> bytes:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func2(a: Optional[int]) -> str:\n    ...\n@overload\ndef func3(a: int, *, b: Literal[\"r\"]) -> str:\n    ...\n@overload\ndef func3(a: int, *, b: Literal[\"b\"]) -> bytes:\n    ...\ndef func3(*args: Any, **kwargs: Any) -> Any:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func3(a: int, *, b: Literal[\"r\"]) -> str:\n    ...\n@overload\ndef func3(a: int, *, b: Literal[\"b\"]) -> bytes:\n    ...\ndef func3(*args: Any, **kwargs: Any) -> Any:\n    ...\n_T = TypeVar(\"_T\")\n@overload\ndef func4(a: None) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func3(a: int, *, b: Literal[\"b\"]) -> bytes:\n    ...\ndef func3(*args: Any, **kwargs: Any) -> Any:\n    ...\n_T = TypeVar(\"_T\")\n@overload\ndef func4(a: None) -> None:\n    ...\n@overload\ndef func4(a: List[_T]) -> _T:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func3(*args: Any, **kwargs: Any) -> Any:\n    ...\n_T = TypeVar(\"_T\")\n@overload\ndef func4(a: None) -> None:\n    ...\n@overload\ndef func4(a: List[_T]) -> _T:\n    ...\ndef func4(a: Optional[List[_T]]) -> Optional[_T]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func4(a: None) -> None:\n    ...\n@overload\ndef func4(a: List[_T]) -> _T:\n    ...\ndef func4(a: Optional[List[_T]]) -> Optional[_T]:\n    ...\nclass A:\n    @overload\n    def method4(self, a: None) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func4(a: List[_T]) -> _T:\n    ...\ndef func4(a: Optional[List[_T]]) -> Optional[_T]:\n    ...\nclass A:\n    @overload\n    def method4(self, a: None) -> None:\n        ...\n    @overload\n    def method4(self, a: List[_T]) -> _T:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func4(a: Optional[List[_T]]) -> Optional[_T]:\n    ...\nclass A:\n    @overload\n    def method4(self, a: None) -> None:\n        ...\n    @overload\n    def method4(self, a: List[_T]) -> _T:\n        ...\n    def method4(self, a: Optional[List[_T]]) -> Optional[_T]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func5(a: List[_T]) -> _T:\n    ...\n@overload\ndef func5(a: None) -> None:\n    ...\n# This should generate an error because List is not compatible with Dict.\ndef func5(a: Optional[Dict[Any, Any]]) -> Optional[Any]:\n    ...\n@overload\ndef func6(foo: int, /) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func5(a: None) -> None:\n    ...\n# This should generate an error because List is not compatible with Dict.\ndef func5(a: Optional[Dict[Any, Any]]) -> Optional[Any]:\n    ...\n@overload\ndef func6(foo: int, /) -> int:\n    ...\n@overload\ndef func6(bar: str, /) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func5(a: Optional[Dict[Any, Any]]) -> Optional[Any]:\n    ...\n@overload\ndef func6(foo: int, /) -> int:\n    ...\n@overload\ndef func6(bar: str, /) -> int:\n    ...\ndef func6(p0: Union[int, str], /) -> int:\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func6(foo: int, /) -> int:\n    ...\n@overload\ndef func6(bar: str, /) -> int:\n    ...\ndef func6(p0: Union[int, str], /) -> int:\n    return 3\n_T1 = TypeVar(\"_T1\")\nclass ClassA(Generic[_T1]):\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func6(bar: str, /) -> int:\n    ...\ndef func6(p0: Union[int, str], /) -> int:\n    return 3\n_T1 = TypeVar(\"_T1\")\nclass ClassA(Generic[_T1]):\n    @overload\n    def method1(self: \"ClassA[None]\") -> None:\n        ...\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func6(p0: Union[int, str], /) -> int:\n    return 3\n_T1 = TypeVar(\"_T1\")\nclass ClassA(Generic[_T1]):\n    @overload\n    def method1(self: \"ClassA[None]\") -> None:\n        ...\n    @overload\n    def method1(self, value: _T1) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func7(cls: Type[ClassB], var: int) -> ClassB:\n    ...\n@overload\ndef func7(cls: Type[ClassC], var: str) -> ClassC:\n    ...\ndef func7(cls: Type[_T2], var: Union[int, str]) -> _T2:\n    return cls()\n_T3 = TypeVar(\"_T3\")\n@overload\ndef func8(foo: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func7(cls: Type[ClassC], var: str) -> ClassC:\n    ...\ndef func7(cls: Type[_T2], var: Union[int, str]) -> _T2:\n    return cls()\n_T3 = TypeVar(\"_T3\")\n@overload\ndef func8(foo: int) -> int:\n    ...\n@overload\ndef func8(foo: _T3) -> Tuple[_T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func7(cls: Type[_T2], var: Union[int, str]) -> _T2:\n    return cls()\n_T3 = TypeVar(\"_T3\")\n@overload\ndef func8(foo: int) -> int:\n    ...\n@overload\ndef func8(foo: _T3) -> Tuple[_T3]:\n    ...\ndef func8(foo: Union[_T3, int]) -> Union[Tuple[_T3], int]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func8(foo: int) -> int:\n    ...\n@overload\ndef func8(foo: _T3) -> Tuple[_T3]:\n    ...\ndef func8(foo: Union[_T3, int]) -> Union[Tuple[_T3], int]:\n    ...\nclass Foo:\n    ...\n_T4 = TypeVar(\"_T4\", bound=Foo)",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func8(foo: _T3) -> Tuple[_T3]:\n    ...\ndef func8(foo: Union[_T3, int]) -> Union[Tuple[_T3], int]:\n    ...\nclass Foo:\n    ...\n_T4 = TypeVar(\"_T4\", bound=Foo)\n@overload\ndef func9() -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func8(foo: Union[_T3, int]) -> Union[Tuple[_T3], int]:\n    ...\nclass Foo:\n    ...\n_T4 = TypeVar(\"_T4\", bound=Foo)\n@overload\ndef func9() -> None:\n    ...\n@overload\ndef func9(bar: _T4) -> _T4:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func9() -> None:\n    ...\n@overload\ndef func9(bar: _T4) -> _T4:\n    ...\ndef func9(bar: Optional[_T4] = None) -> Optional[_T4]:\n    raise NotImplementedError\n_T5 = TypeVar(\"_T5\", int, str)\n@overload\ndef func10(option: Literal[\"a\"], var: str) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func9(bar: _T4) -> _T4:\n    ...\ndef func9(bar: Optional[_T4] = None) -> Optional[_T4]:\n    raise NotImplementedError\n_T5 = TypeVar(\"_T5\", int, str)\n@overload\ndef func10(option: Literal[\"a\"], var: str) -> str:\n    ...\n@overload\ndef func10(option: Literal[\"b\"], var: int) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func9(bar: Optional[_T4] = None) -> Optional[_T4]:\n    raise NotImplementedError\n_T5 = TypeVar(\"_T5\", int, str)\n@overload\ndef func10(option: Literal[\"a\"], var: str) -> str:\n    ...\n@overload\ndef func10(option: Literal[\"b\"], var: int) -> str:\n    ...\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func10(option: Literal[\"a\"], var: str) -> str:\n    ...\n@overload\ndef func10(option: Literal[\"b\"], var: int) -> str:\n    ...\n# This should generate an error.\ndef func10(option: Literal[\"a\", \"b\"], var: _T5) -> _T5:\n    ...\nclass X:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func10(option: Literal[\"b\"], var: int) -> str:\n    ...\n# This should generate an error.\ndef func10(option: Literal[\"a\", \"b\"], var: _T5) -> _T5:\n    ...\nclass X:\n    ...\n_T6 = TypeVar(\"_T6\", bound=Type[X])\n@overload\ndef func11(var: _T6) -> _T6:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func10(option: Literal[\"a\", \"b\"], var: _T5) -> _T5:\n    ...\nclass X:\n    ...\n_T6 = TypeVar(\"_T6\", bound=Type[X])\n@overload\ndef func11(var: _T6) -> _T6:\n    ...\n@overload\ndef func11(var: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func11(var: _T6) -> _T6:\n    ...\n@overload\ndef func11(var: int) -> int:\n    ...\ndef func11(var: Union[_T6, int]) -> Union[_T6, int]:\n    ...\n_T7 = TypeVar(\"_T7\")\n_T8 = TypeVar(\"_T8\")\n_T9 = TypeVar(\"_T9\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func11(var: int) -> int:\n    ...\ndef func11(var: Union[_T6, int]) -> Union[_T6, int]:\n    ...\n_T7 = TypeVar(\"_T7\")\n_T8 = TypeVar(\"_T8\")\n_T9 = TypeVar(\"_T9\")\n@overload\ndef func12(func: Callable[[_T7], _T8], iterable: Iterable[_T7], /) -> Iterable[_T8]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func11(var: Union[_T6, int]) -> Union[_T6, int]:\n    ...\n_T7 = TypeVar(\"_T7\")\n_T8 = TypeVar(\"_T8\")\n_T9 = TypeVar(\"_T9\")\n@overload\ndef func12(func: Callable[[_T7], _T8], iterable: Iterable[_T7], /) -> Iterable[_T8]:\n    ...\n@overload\ndef func12(",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func12(func: Callable[[_T7], _T8], iterable: Iterable[_T7], /) -> Iterable[_T8]:\n    ...\n@overload\ndef func12(\n    func: Callable[[_T7], _T8], iterable: Iterable[_T7], /, default_value: _T9\n) -> Iterable[_T8 | _T9]:\n    ...\ndef func12(\n    func: Callable[[_T7], _T8],\n    iterable: Iterable[_T7],",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func12(\n    func: Callable[[_T7], _T8], iterable: Iterable[_T7], /, default_value: _T9\n) -> Iterable[_T8 | _T9]:\n    ...\ndef func12(\n    func: Callable[[_T7], _T8],\n    iterable: Iterable[_T7],\n    /,\n    default_value: _T9 = None,\n) -> Iterable[_T8 | _T9]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func12(\n    func: Callable[[_T7], _T8],\n    iterable: Iterable[_T7],\n    /,\n    default_value: _T9 = None,\n) -> Iterable[_T8 | _T9]:\n    ...\n@overload\ndef func13(x: int) -> NoReturn:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func13(x: int) -> NoReturn:\n    ...\n@overload\ndef func13(x: str) -> str | NoReturn:\n    ...\ndef func13(x: int | str) -> str:\n    ...\n_T14 = TypeVar(\"_T14\")\nclass Wrapper1(Generic[_T14]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func13(x: str) -> str | NoReturn:\n    ...\ndef func13(x: int | str) -> str:\n    ...\n_T14 = TypeVar(\"_T14\")\nclass Wrapper1(Generic[_T14]):\n    ...\n@overload\ndef func14(target: Callable[..., Awaitable[_T14]]) -> Wrapper1[_T14]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func13(x: int | str) -> str:\n    ...\n_T14 = TypeVar(\"_T14\")\nclass Wrapper1(Generic[_T14]):\n    ...\n@overload\ndef func14(target: Callable[..., Awaitable[_T14]]) -> Wrapper1[_T14]:\n    ...\n@overload\ndef func14(target: Callable[..., _T14]) -> Wrapper1[_T14]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func14(target: Callable[..., Awaitable[_T14]]) -> Wrapper1[_T14]:\n    ...\n@overload\ndef func14(target: Callable[..., _T14]) -> Wrapper1[_T14]:\n    ...\ndef func14(\n    target: Callable[..., Awaitable[_T14]] | Callable[..., _T14]\n) -> Wrapper1[_T14]:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func14(target: Callable[..., _T14]) -> Wrapper1[_T14]:\n    ...\ndef func14(\n    target: Callable[..., Awaitable[_T14]] | Callable[..., _T14]\n) -> Wrapper1[_T14]:\n    ...\n@overload\ndef func15(client_id: str, client_secret: str, /) -> None:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func14(\n    target: Callable[..., Awaitable[_T14]] | Callable[..., _T14]\n) -> Wrapper1[_T14]:\n    ...\n@overload\ndef func15(client_id: str, client_secret: str, /) -> None:\n    ...\n@overload\ndef func15(client_id: str, client_secret: str) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func15(client_id: str, client_secret: str, /) -> None:\n    ...\n@overload\ndef func15(client_id: str, client_secret: str) -> None:\n    ...\n# This should generate an error because some of the keyword arguments are not present.\ndef func15(*creds: str) -> None:\n    pass\nT1 = TypeVar(\"T1\", covariant=True)\nT2 = TypeVar(\"T2\", bound=Callable[..., Any])",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func15(client_id: str, client_secret: str) -> None:\n    ...\n# This should generate an error because some of the keyword arguments are not present.\ndef func15(*creds: str) -> None:\n    pass\nT1 = TypeVar(\"T1\", covariant=True)\nT2 = TypeVar(\"T2\", bound=Callable[..., Any])\nR = TypeVar(\"R\")\nP = ParamSpec(\"P\")\nclass Builds(Protocol[T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "func15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "def func15(*creds: str) -> None:\n    pass\nT1 = TypeVar(\"T1\", covariant=True)\nT2 = TypeVar(\"T2\", bound=Callable[..., Any])\nR = TypeVar(\"R\")\nP = ParamSpec(\"P\")\nclass Builds(Protocol[T1]):\n    _target_: str\nclass BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T = TypeVar(\"_T\")\n@overload\ndef func4(a: None) -> None:\n    ...\n@overload\ndef func4(a: List[_T]) -> _T:\n    ...\ndef func4(a: Optional[List[_T]]) -> Optional[_T]:\n    ...\nclass A:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass ClassA(Generic[_T1]):\n    @overload\n    def method1(self: \"ClassA[None]\") -> None:\n        ...\n    @overload\n    def method1(self, value: _T1) -> None:\n        ...\n    def method1(self, value: Any = None) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", ClassB, ClassC)\n@overload\ndef func7(cls: Type[ClassB], var: int) -> ClassB:\n    ...\n@overload\ndef func7(cls: Type[ClassC], var: str) -> ClassC:\n    ...\ndef func7(cls: Type[_T2], var: Union[int, str]) -> _T2:\n    return cls()\n_T3 = TypeVar(\"_T3\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\n@overload\ndef func8(foo: int) -> int:\n    ...\n@overload\ndef func8(foo: _T3) -> Tuple[_T3]:\n    ...\ndef func8(foo: Union[_T3, int]) -> Union[Tuple[_T3], int]:\n    ...\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T4 = TypeVar(\"_T4\", bound=Foo)\n@overload\ndef func9() -> None:\n    ...\n@overload\ndef func9(bar: _T4) -> _T4:\n    ...\ndef func9(bar: Optional[_T4] = None) -> Optional[_T4]:\n    raise NotImplementedError\n_T5 = TypeVar(\"_T5\", int, str)",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T5 = TypeVar(\"_T5\", int, str)\n@overload\ndef func10(option: Literal[\"a\"], var: str) -> str:\n    ...\n@overload\ndef func10(option: Literal[\"b\"], var: int) -> str:\n    ...\n# This should generate an error.\ndef func10(option: Literal[\"a\", \"b\"], var: _T5) -> _T5:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T6 = TypeVar(\"_T6\", bound=Type[X])\n@overload\ndef func11(var: _T6) -> _T6:\n    ...\n@overload\ndef func11(var: int) -> int:\n    ...\ndef func11(var: Union[_T6, int]) -> Union[_T6, int]:\n    ...\n_T7 = TypeVar(\"_T7\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T7 = TypeVar(\"_T7\")\n_T8 = TypeVar(\"_T8\")\n_T9 = TypeVar(\"_T9\")\n@overload\ndef func12(func: Callable[[_T7], _T8], iterable: Iterable[_T7], /) -> Iterable[_T8]:\n    ...\n@overload\ndef func12(\n    func: Callable[[_T7], _T8], iterable: Iterable[_T7], /, default_value: _T9\n) -> Iterable[_T8 | _T9]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T8 = TypeVar(\"_T8\")\n_T9 = TypeVar(\"_T9\")\n@overload\ndef func12(func: Callable[[_T7], _T8], iterable: Iterable[_T7], /) -> Iterable[_T8]:\n    ...\n@overload\ndef func12(\n    func: Callable[[_T7], _T8], iterable: Iterable[_T7], /, default_value: _T9\n) -> Iterable[_T8 | _T9]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T9",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T9 = TypeVar(\"_T9\")\n@overload\ndef func12(func: Callable[[_T7], _T8], iterable: Iterable[_T7], /) -> Iterable[_T8]:\n    ...\n@overload\ndef func12(\n    func: Callable[[_T7], _T8], iterable: Iterable[_T7], /, default_value: _T9\n) -> Iterable[_T8 | _T9]:\n    ...\ndef func12(",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "_T14",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "_T14 = TypeVar(\"_T14\")\nclass Wrapper1(Generic[_T14]):\n    ...\n@overload\ndef func14(target: Callable[..., Awaitable[_T14]]) -> Wrapper1[_T14]:\n    ...\n@overload\ndef func14(target: Callable[..., _T14]) -> Wrapper1[_T14]:\n    ...\ndef func14(",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "T1 = TypeVar(\"T1\", covariant=True)\nT2 = TypeVar(\"T2\", bound=Callable[..., Any])\nR = TypeVar(\"R\")\nP = ParamSpec(\"P\")\nclass Builds(Protocol[T1]):\n    _target_: str\nclass BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):\n        ...\nclass ClassD(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=Callable[..., Any])\nR = TypeVar(\"R\")\nP = ParamSpec(\"P\")\nclass Builds(Protocol[T1]):\n    _target_: str\nclass BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):\n        ...\nclass ClassD(Protocol):\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "R = TypeVar(\"R\")\nP = ParamSpec(\"P\")\nclass Builds(Protocol[T1]):\n    _target_: str\nclass BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):\n        ...\nclass ClassD(Protocol):\n    @overload\n    def __call__(",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload7",
        "description": "packages.pyright-internal.src.tests.samples.overload7",
        "peekOfCode": "P = ParamSpec(\"P\")\nclass Builds(Protocol[T1]):\n    _target_: str\nclass BuildsWithSig(Builds[T1], Protocol[T1, P]):\n    def __init__(self, *args: P.args, **kwds: P.kwargs):\n        ...\nclass ClassD(Protocol):\n    @overload\n    def __call__(\n        self,",
        "detail": "packages.pyright-internal.src.tests.samples.overload7",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "class A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\n_T1 = TypeVar(\"_T1\", bound=B)\n@overload\ndef overloaded1(x: A) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "class B:\n    ...\nclass C:\n    ...\n_T1 = TypeVar(\"_T1\", bound=B)\n@overload\ndef overloaded1(x: A) -> str:\n    ...\n@overload\ndef overloaded1(x: _T1) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "class C:\n    ...\n_T1 = TypeVar(\"_T1\", bound=B)\n@overload\ndef overloaded1(x: A) -> str:\n    ...\n@overload\ndef overloaded1(x: _T1) -> _T1:\n    ...\ndef overloaded1(x: Union[A, B]) -> Union[str, B]:",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded1(x: A) -> str:\n    ...\n@overload\ndef overloaded1(x: _T1) -> _T1:\n    ...\ndef overloaded1(x: Union[A, B]) -> Union[str, B]:\n    ...\ndef func1(a: Union[A, B], b: Union[A, B, C]):\n    v1 = overloaded1(a)\n    reveal_type(v1, expected_text=\"str | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded1(x: _T1) -> _T1:\n    ...\ndef overloaded1(x: Union[A, B]) -> Union[str, B]:\n    ...\ndef func1(a: Union[A, B], b: Union[A, B, C]):\n    v1 = overloaded1(a)\n    reveal_type(v1, expected_text=\"str | B\")\n    # This should generate an error because C is not allowed\n    # for the first argument.\n    v2 = overloaded1(b)",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded1(x: Union[A, B]) -> Union[str, B]:\n    ...\ndef func1(a: Union[A, B], b: Union[A, B, C]):\n    v1 = overloaded1(a)\n    reveal_type(v1, expected_text=\"str | B\")\n    # This should generate an error because C is not allowed\n    # for the first argument.\n    v2 = overloaded1(b)\nLargeUnion = Literal[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", 1, 2, 3, 4, 5, 6, 7, 8]\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def func1(a: Union[A, B], b: Union[A, B, C]):\n    v1 = overloaded1(a)\n    reveal_type(v1, expected_text=\"str | B\")\n    # This should generate an error because C is not allowed\n    # for the first argument.\n    v2 = overloaded1(b)\nLargeUnion = Literal[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", 1, 2, 3, 4, 5, 6, 7, 8]\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[2]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded2(a: LargeUnion, b: Literal[2]) -> str:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[3]) -> str:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[4]) -> float:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[9]) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded2(a: LargeUnion, b: Literal[3]) -> str:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[4]) -> float:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[9]) -> float:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[10]) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded2(a: LargeUnion, b: Literal[4]) -> float:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[9]) -> float:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[10]) -> float:\n    ...\ndef overloaded2(\n    a: LargeUnion, b: Union[LargeUnion, Literal[9, 10]]",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded2(a: LargeUnion, b: Literal[9]) -> float:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[10]) -> float:\n    ...\ndef overloaded2(\n    a: LargeUnion, b: Union[LargeUnion, Literal[9, 10]]\n) -> Union[str, float]:\n    ...\ndef func2(a: LargeUnion, b: Literal[2, 3, 4], c: Literal[2, 3, 4, 9, 10]):",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded2(a: LargeUnion, b: Literal[10]) -> float:\n    ...\ndef overloaded2(\n    a: LargeUnion, b: Union[LargeUnion, Literal[9, 10]]\n) -> Union[str, float]:\n    ...\ndef func2(a: LargeUnion, b: Literal[2, 3, 4], c: Literal[2, 3, 4, 9, 10]):\n    v1 = overloaded2(\"a\", 2)\n    reveal_type(v1, expected_text=\"str\")\n    v2 = overloaded2(a, b)",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded2(\n    a: LargeUnion, b: Union[LargeUnion, Literal[9, 10]]\n) -> Union[str, float]:\n    ...\ndef func2(a: LargeUnion, b: Literal[2, 3, 4], c: Literal[2, 3, 4, 9, 10]):\n    v1 = overloaded2(\"a\", 2)\n    reveal_type(v1, expected_text=\"str\")\n    v2 = overloaded2(a, b)\n    reveal_type(v2, expected_text=\"str | float\")\n    # This should generate an error because the expansion of union types",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def func2(a: LargeUnion, b: Literal[2, 3, 4], c: Literal[2, 3, 4, 9, 10]):\n    v1 = overloaded2(\"a\", 2)\n    reveal_type(v1, expected_text=\"str\")\n    v2 = overloaded2(a, b)\n    reveal_type(v2, expected_text=\"str | float\")\n    # This should generate an error because the expansion of union types\n    # will exceed the max number of expansions (64).\n    v3 = overloaded2(a, c)\n    reveal_type(v2, expected_text=\"str | float\")\n_T2 = TypeVar(\"_T2\", str, bytes)",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded3(x: str) -> str:\n    ...\n@overload\ndef overloaded3(x: bytes) -> bytes:\n    ...\ndef overloaded3(x: str | bytes) -> str | bytes:\n    ...\ndef func3(y: _T2):\n    overloaded3(y)\n_T3 = TypeVar(\"_T3\")",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded3(x: bytes) -> bytes:\n    ...\ndef overloaded3(x: str | bytes) -> str | bytes:\n    ...\ndef func3(y: _T2):\n    overloaded3(y)\n_T3 = TypeVar(\"_T3\")\ndef func5(a: _T3) -> _T3:\n    return a\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded3(x: str | bytes) -> str | bytes:\n    ...\ndef func3(y: _T2):\n    overloaded3(y)\n_T3 = TypeVar(\"_T3\")\ndef func5(a: _T3) -> _T3:\n    return a\n@overload\ndef overloaded4(b: str) -> str: ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def func3(y: _T2):\n    overloaded3(y)\n_T3 = TypeVar(\"_T3\")\ndef func5(a: _T3) -> _T3:\n    return a\n@overload\ndef overloaded4(b: str) -> str: ...\n@overload\ndef overloaded4(b: int) -> int: ...\ndef overloaded4(b: Union[str, int]) -> Union[str, int]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def func5(a: _T3) -> _T3:\n    return a\n@overload\ndef overloaded4(b: str) -> str: ...\n@overload\ndef overloaded4(b: int) -> int: ...\ndef overloaded4(b: Union[str, int]) -> Union[str, int]: ...\ndef func6(x: Union[str, int]) -> None:\n    y: Union[str, int] = overloaded4(func5(x))",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded4(b: str) -> str: ...\n@overload\ndef overloaded4(b: int) -> int: ...\ndef overloaded4(b: Union[str, int]) -> Union[str, int]: ...\ndef func6(x: Union[str, int]) -> None:\n    y: Union[str, int] = overloaded4(func5(x))",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded4(b: int) -> int: ...\ndef overloaded4(b: Union[str, int]) -> Union[str, int]: ...\ndef func6(x: Union[str, int]) -> None:\n    y: Union[str, int] = overloaded4(func5(x))",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "overloaded4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def overloaded4(b: Union[str, int]) -> Union[str, int]: ...\ndef func6(x: Union[str, int]) -> None:\n    y: Union[str, int] = overloaded4(func5(x))",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "def func6(x: Union[str, int]) -> None:\n    y: Union[str, int] = overloaded4(func5(x))",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=B)\n@overload\ndef overloaded1(x: A) -> str:\n    ...\n@overload\ndef overloaded1(x: _T1) -> _T1:\n    ...\ndef overloaded1(x: Union[A, B]) -> Union[str, B]:\n    ...\ndef func1(a: Union[A, B], b: Union[A, B, C]):",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "LargeUnion",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "LargeUnion = Literal[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", 1, 2, 3, 4, 5, 6, 7, 8]\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[2]) -> str:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[3]) -> str:\n    ...\n@overload\ndef overloaded2(a: LargeUnion, b: Literal[4]) -> float:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", str, bytes)\n@overload\ndef overloaded3(x: str) -> str:\n    ...\n@overload\ndef overloaded3(x: bytes) -> bytes:\n    ...\ndef overloaded3(x: str | bytes) -> str | bytes:\n    ...\ndef func3(y: _T2):",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.overload8",
        "description": "packages.pyright-internal.src.tests.samples.overload8",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\ndef func5(a: _T3) -> _T3:\n    return a\n@overload\ndef overloaded4(b: str) -> str: ...\n@overload\ndef overloaded4(b: int) -> int: ...\ndef overloaded4(b: Union[str, int]) -> Union[str, int]: ...\ndef func6(x: Union[str, int]) -> None:\n    y: Union[str, int] = overloaded4(func5(x))",
        "detail": "packages.pyright-internal.src.tests.samples.overload8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload9",
        "description": "packages.pyright-internal.src.tests.samples.overload9",
        "peekOfCode": "def func1(x: int) -> int:\n    ...\n# This should generate an error.\n@overload\ndef func1(x: str) -> str:\n    return x\ndef func1(x: Union[int, str]) -> Union[int, str]:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.overload9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload9",
        "description": "packages.pyright-internal.src.tests.samples.overload9",
        "peekOfCode": "def func1(x: str) -> str:\n    return x\ndef func1(x: Union[int, str]) -> Union[int, str]:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.overload9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.overload9",
        "description": "packages.pyright-internal.src.tests.samples.overload9",
        "peekOfCode": "def func1(x: Union[int, str]) -> Union[int, str]:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.overload9",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.override1",
        "description": "packages.pyright-internal.src.tests.samples.override1",
        "peekOfCode": "class ClassA:\n    def method1(self) -> None:\n        pass\nclass ClassB:\n    def method3(self) -> None:\n        pass\n    @overload\n    def method5(self, x: int) -> int: ...\n    @overload\n    def method5(self, x: str) -> str: ...",
        "detail": "packages.pyright-internal.src.tests.samples.override1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.override1",
        "description": "packages.pyright-internal.src.tests.samples.override1",
        "peekOfCode": "class ClassB:\n    def method3(self) -> None:\n        pass\n    @overload\n    def method5(self, x: int) -> int: ...\n    @overload\n    def method5(self, x: str) -> str: ...\n    def method5(self, x: int | str) -> int | str:\n        ...\nclass ClassC(ClassA, ClassB):",
        "detail": "packages.pyright-internal.src.tests.samples.override1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.override1",
        "description": "packages.pyright-internal.src.tests.samples.override1",
        "peekOfCode": "class ClassC(ClassA, ClassB):\n    @override\n    def method1(self) -> None:\n        pass\n    def method2(self) -> None:\n        pass\n    @override\n    def method3(self) -> None:\n        pass\n    @override",
        "detail": "packages.pyright-internal.src.tests.samples.override1",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.override1",
        "description": "packages.pyright-internal.src.tests.samples.override1",
        "peekOfCode": "class ClassD(Any):\n    ...\nclass ClassE(ClassD):\n    @override\n    def method1(self) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.override1",
        "documentation": {}
    },
    {
        "label": "ClassE",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.override1",
        "description": "packages.pyright-internal.src.tests.samples.override1",
        "peekOfCode": "class ClassE(ClassD):\n    @override\n    def method1(self) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.override1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.parameters1",
        "description": "packages.pyright-internal.src.tests.samples.parameters1",
        "peekOfCode": "class A:\n    # This should generate an error if reportMissingParameterType is enabled\n    # because 'y' is missing a type annotation.\n    def method1(self, x: int, _, y) -> int:\n        ...\n    def method2(self, x, y):\n        # type: (int, int) -> int\n        ...\ndef g(__p: int, x: int, y: str):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.parameters1",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.parameters1",
        "description": "packages.pyright-internal.src.tests.samples.parameters1",
        "peekOfCode": "def g(__p: int, x: int, y: str):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.parameters1",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "class Parent:\n    def __init__(self, a: int, b: str):\n        ...\n    def func1(self, a: int, b: str) -> float:\n        ...\nclass Child(Parent):\n    def __init__(self, a, b):\n        reveal_type(a, expected_text=\"int\")\n        reveal_type(b, expected_text=\"str\")\n    def func1(self, a, b):",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "class Child(Parent):\n    def __init__(self, a, b):\n        reveal_type(a, expected_text=\"int\")\n        reveal_type(b, expected_text=\"str\")\n    def func1(self, a, b):\n        reveal_type(self, expected_text=\"Self@Child\")\n        reveal_type(a, expected_text=\"int\")\n        reveal_type(b, expected_text=\"str\")\n        return a\ndef func2(a, b=0, c=None):",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "_Undefined",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "class _Undefined: pass\nUndefined = _Undefined()\ndef func4(a=1, b=None, c=Undefined):\n    reveal_type(a, expected_text=\"int\")\n    reveal_type(b, expected_text=\"Unknown | None\")\n    reveal_type(c, expected_text=\"_Undefined | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "def func2(a, b=0, c=None):\n    reveal_type(a, expected_text=\"Unknown\")\n    reveal_type(b, expected_text=\"int\")\n    reveal_type(c, expected_text=\"Unknown | None\")\ndef func3(a=(1, 2), b=[1,2], c={1: 2}):\n    reveal_type(a, expected_text=\"Unknown\")\n    reveal_type(b, expected_text=\"Unknown\")\n    reveal_type(c, expected_text=\"Unknown\")\nclass _Undefined: pass\nUndefined = _Undefined()",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "def func3(a=(1, 2), b=[1,2], c={1: 2}):\n    reveal_type(a, expected_text=\"Unknown\")\n    reveal_type(b, expected_text=\"Unknown\")\n    reveal_type(c, expected_text=\"Unknown\")\nclass _Undefined: pass\nUndefined = _Undefined()\ndef func4(a=1, b=None, c=Undefined):\n    reveal_type(a, expected_text=\"int\")\n    reveal_type(b, expected_text=\"Unknown | None\")\n    reveal_type(c, expected_text=\"_Undefined | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "def func4(a=1, b=None, c=Undefined):\n    reveal_type(a, expected_text=\"int\")\n    reveal_type(b, expected_text=\"Unknown | None\")\n    reveal_type(c, expected_text=\"_Undefined | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "Undefined",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramInference1",
        "description": "packages.pyright-internal.src.tests.samples.paramInference1",
        "peekOfCode": "Undefined = _Undefined()\ndef func4(a=1, b=None, c=Undefined):\n    reveal_type(a, expected_text=\"int\")\n    reveal_type(b, expected_text=\"Unknown | None\")\n    reveal_type(c, expected_text=\"_Undefined | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramInference1",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramNames1",
        "description": "packages.pyright-internal.src.tests.samples.paramNames1",
        "peekOfCode": "class Class1:\n    # This should generate an error or warning if the setting\n    # is enabled because it's missing a \"self\" parameter.\n    def foo1():\n        return 3\n    # This should generate an error or warning if the setting\n    # is enabled because \"self\" is misspelled.\n    def foo2(seeeelf):\n        return 4\n    # This should generate an error or warning if the setting",
        "detail": "packages.pyright-internal.src.tests.samples.paramNames1",
        "documentation": {}
    },
    {
        "label": "Metaclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramNames1",
        "description": "packages.pyright-internal.src.tests.samples.paramNames1",
        "peekOfCode": "class Metaclass(type):\n    # This should not generate a error because the class derives\n    # from type and is assumed to be a metaclass.\n    def foo1(cls):\n        return 3",
        "detail": "packages.pyright-internal.src.tests.samples.paramNames1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramNames1",
        "description": "packages.pyright-internal.src.tests.samples.paramNames1",
        "peekOfCode": "def foo():\n    pass\nclass Class1:\n    # This should generate an error or warning if the setting\n    # is enabled because it's missing a \"self\" parameter.\n    def foo1():\n        return 3\n    # This should generate an error or warning if the setting\n    # is enabled because \"self\" is misspelled.\n    def foo2(seeeelf):",
        "detail": "packages.pyright-internal.src.tests.samples.paramNames1",
        "documentation": {}
    },
    {
        "label": "SomeWrapper",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "class SomeWrapper(Protocol[P]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs):\n        ...\n# This should generate an error because P cannot be used with other\n# type arguments.\ndef func2(x: SomeWrapper[P, int]):\n    pass\n# This should generate an error because P cannot be used with other\n# type arguments.\ndef func3(x: SomeWrapper[[P, int]]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "def foo(a: TParams) -> int:\n    return 1\na = 3\n# This should generate an error.\nb = cast(TParams, a)\nfoo(1)\ndef func1(x: Callable[TParams, Any]):\n    # This should generate an error.\n    c: List[TParams] = []\n    d: Callable[TParams, int]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "def func1(x: Callable[TParams, Any]):\n    # This should generate an error.\n    c: List[TParams] = []\n    d: Callable[TParams, int]\n    # This should generate an error.\n    e: Callable[TParams, TParams]\n    # This should generate an error.\n    f: Callable[[TParams], int]\n    # This should generate an error.\n    g: Tuple[TParams]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "def func2(x: SomeWrapper[P, int]):\n    pass\n# This should generate an error because P cannot be used with other\n# type arguments.\ndef func3(x: SomeWrapper[[P, int]]):\n    pass\ndef func4(x: SomeWrapper[P]):\n    pass\n# This form is considered an error.\ndef func5(x: SomeWrapper[[P]]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "def func3(x: SomeWrapper[[P, int]]):\n    pass\ndef func4(x: SomeWrapper[P]):\n    pass\n# This form is considered an error.\ndef func5(x: SomeWrapper[[P]]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "def func4(x: SomeWrapper[P]):\n    pass\n# This form is considered an error.\ndef func5(x: SomeWrapper[[P]]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "def func5(x: SomeWrapper[[P]]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "TParams",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "TParams = ParamSpec(\"TParams\")\n# This should generate an error because ParamSpecs\n# can't be used as a type annotation.\ndef foo(a: TParams) -> int:\n    return 1\na = 3\n# This should generate an error.\nb = cast(TParams, a)\nfoo(1)\ndef func1(x: Callable[TParams, Any]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "a = 3\n# This should generate an error.\nb = cast(TParams, a)\nfoo(1)\ndef func1(x: Callable[TParams, Any]):\n    # This should generate an error.\n    c: List[TParams] = []\n    d: Callable[TParams, int]\n    # This should generate an error.\n    e: Callable[TParams, TParams]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "b = cast(TParams, a)\nfoo(1)\ndef func1(x: Callable[TParams, Any]):\n    # This should generate an error.\n    c: List[TParams] = []\n    d: Callable[TParams, int]\n    # This should generate an error.\n    e: Callable[TParams, TParams]\n    # This should generate an error.\n    f: Callable[[TParams], int]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "peekOfCode": "P = ParamSpec(\"P\")\nclass SomeWrapper(Protocol[P]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs):\n        ...\n# This should generate an error because P cannot be used with other\n# type arguments.\ndef func2(x: SomeWrapper[P, int]):\n    pass\n# This should generate an error because P cannot be used with other\n# type arguments.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec1",
        "documentation": {}
    },
    {
        "label": "HasLock",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "class HasLock(Protocol):\n    _lock: RLock\nS = TypeVar(\"S\", bound=HasLock)\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\ndef with_lock(func: Callable[Concatenate[S, P], R]) -> Callable[Concatenate[S, P], R]:\n    @functools.wraps(func)\n    def wrapper(self: S, *args: P.args, **kwargs: P.kwargs) -> R:\n        with self._lock:\n            return func(self, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "class MyClass:\n    def __init__(self):\n        self._lock = RLock()\n    @with_lock\n    def test_1(self, param1: int) -> str:\n        ...\n    @with_lock\n    def test_2(self) -> str:\n        ...\n@with_lock",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "with_lock",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "def with_lock(func: Callable[Concatenate[S, P], R]) -> Callable[Concatenate[S, P], R]:\n    @functools.wraps(func)\n    def wrapper(self: S, *args: P.args, **kwargs: P.kwargs) -> R:\n        with self._lock:\n            return func(self, *args, **kwargs)\n    return wrapper\nclass MyClass:\n    def __init__(self):\n        self._lock = RLock()\n    @with_lock",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "test_3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "def test_3(cls: MyClass, param1: int) -> str:\n    ...\ntestClass = MyClass()\nres1 = testClass.test_1(42)\nreveal_type(res1, expected_text=\"str\")\nres2 = testClass.test_2()\nreveal_type(res2, expected_text=\"str\")\nres3 = test_3(testClass, 42)\nreveal_type(res3, expected_text=\"str\")\nres4: Callable[[MyClass, int], str] = with_lock(test_3)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "S = TypeVar(\"S\", bound=HasLock)\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\")\ndef with_lock(func: Callable[Concatenate[S, P], R]) -> Callable[Concatenate[S, P], R]:\n    @functools.wraps(func)\n    def wrapper(self: S, *args: P.args, **kwargs: P.kwargs) -> R:\n        with self._lock:\n            return func(self, *args, **kwargs)\n    return wrapper\nclass MyClass:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\ndef with_lock(func: Callable[Concatenate[S, P], R]) -> Callable[Concatenate[S, P], R]:\n    @functools.wraps(func)\n    def wrapper(self: S, *args: P.args, **kwargs: P.kwargs) -> R:\n        with self._lock:\n            return func(self, *args, **kwargs)\n    return wrapper\nclass MyClass:\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "R = TypeVar(\"R\")\ndef with_lock(func: Callable[Concatenate[S, P], R]) -> Callable[Concatenate[S, P], R]:\n    @functools.wraps(func)\n    def wrapper(self: S, *args: P.args, **kwargs: P.kwargs) -> R:\n        with self._lock:\n            return func(self, *args, **kwargs)\n    return wrapper\nclass MyClass:\n    def __init__(self):\n        self._lock = RLock()",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "testClass",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "testClass = MyClass()\nres1 = testClass.test_1(42)\nreveal_type(res1, expected_text=\"str\")\nres2 = testClass.test_2()\nreveal_type(res2, expected_text=\"str\")\nres3 = test_3(testClass, 42)\nreveal_type(res3, expected_text=\"str\")\nres4: Callable[[MyClass, int], str] = with_lock(test_3)\nreveal_type(res4, expected_text=\"(MyClass, int) -> str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "res1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "res1 = testClass.test_1(42)\nreveal_type(res1, expected_text=\"str\")\nres2 = testClass.test_2()\nreveal_type(res2, expected_text=\"str\")\nres3 = test_3(testClass, 42)\nreveal_type(res3, expected_text=\"str\")\nres4: Callable[[MyClass, int], str] = with_lock(test_3)\nreveal_type(res4, expected_text=\"(MyClass, int) -> str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "res2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "res2 = testClass.test_2()\nreveal_type(res2, expected_text=\"str\")\nres3 = test_3(testClass, 42)\nreveal_type(res3, expected_text=\"str\")\nres4: Callable[[MyClass, int], str] = with_lock(test_3)\nreveal_type(res4, expected_text=\"(MyClass, int) -> str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "res3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "peekOfCode": "res3 = test_3(testClass, 42)\nreveal_type(res3, expected_text=\"str\")\nres4: Callable[[MyClass, int], str] = with_lock(test_3)\nreveal_type(res4, expected_text=\"(MyClass, int) -> str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec10",
        "documentation": {}
    },
    {
        "label": "MyDecorator",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "peekOfCode": "class MyDecorator(Generic[_P, _R]):\n    def __init__(self, function: Callable[_P, _R]):\n        self.function = function\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        print(\"Inside Function Call\")\n        return self.function(*args, **kwargs)\n    def do_stuff(self, name: str, *args: _P.args, **kwargs: _P.kwargs) -> int:\n        return 0\n@MyDecorator\ndef my_func1(x: int, y: int, *, z: int):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "documentation": {}
    },
    {
        "label": "my_func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "peekOfCode": "def my_func1(x: int, y: int, *, z: int):\n    return x + y\nmy_func1(6, 6, z=6)\n@MyDecorator\ndef my_func2(*, a: int):\n    pass\nmy_func2.do_stuff(\"hi\", a=4)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "documentation": {}
    },
    {
        "label": "my_func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "peekOfCode": "def my_func2(*, a: int):\n    pass\nmy_func2.do_stuff(\"hi\", a=4)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "documentation": {}
    },
    {
        "label": "_P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "peekOfCode": "_P = ParamSpec(\"_P\")\n_R = TypeVar(\"_R\")\nclass MyDecorator(Generic[_P, _R]):\n    def __init__(self, function: Callable[_P, _R]):\n        self.function = function\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        print(\"Inside Function Call\")\n        return self.function(*args, **kwargs)\n    def do_stuff(self, name: str, *args: _P.args, **kwargs: _P.kwargs) -> int:\n        return 0",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "documentation": {}
    },
    {
        "label": "_R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "peekOfCode": "_R = TypeVar(\"_R\")\nclass MyDecorator(Generic[_P, _R]):\n    def __init__(self, function: Callable[_P, _R]):\n        self.function = function\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        print(\"Inside Function Call\")\n        return self.function(*args, **kwargs)\n    def do_stuff(self, name: str, *args: _P.args, **kwargs: _P.kwargs) -> int:\n        return 0\n@MyDecorator",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec11",
        "documentation": {}
    },
    {
        "label": "puts_p_into_scope",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "peekOfCode": "def puts_p_into_scope(f: Callable[P, int]) -> None:\n    def inner1(*args: P.args, **kwargs: P.kwargs) -> None:\n        pass\n    def inner2(*args: \"P.args\", **kwargs: P.kwargs) -> None:\n        pass\n    def inner3(*args: P.args, **kwargs: \"P.kwargs\") -> None:\n        pass\n    def inner4(*args: \"P.args\", **kwargs: \"P.kwargs\") -> None:\n        pass\n    def inner5(*args: Annotated[P.args, \"\"], **kwargs: \"P.kwargs\") -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "documentation": {}
    },
    {
        "label": "out_of_scope",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "peekOfCode": "def out_of_scope(*args: P.args, **kwargs: P.kwargs) -> None:\n    pass\n# This should generate an error because ParamSpec isn't allowed in this context\nout_of_scope_var2: P = 12\n# This should generate an error because P isn't allowed in this context.\nout_of_scope_var3: P.args = 12",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\ndef puts_p_into_scope(f: Callable[P, int]) -> None:\n    def inner1(*args: P.args, **kwargs: P.kwargs) -> None:\n        pass\n    def inner2(*args: \"P.args\", **kwargs: P.kwargs) -> None:\n        pass\n    def inner3(*args: P.args, **kwargs: \"P.kwargs\") -> None:\n        pass\n    def inner4(*args: \"P.args\", **kwargs: \"P.kwargs\") -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "peekOfCode": "R = TypeVar(\"R\")\ndef puts_p_into_scope(f: Callable[P, int]) -> None:\n    def inner1(*args: P.args, **kwargs: P.kwargs) -> None:\n        pass\n    def inner2(*args: \"P.args\", **kwargs: P.kwargs) -> None:\n        pass\n    def inner3(*args: P.args, **kwargs: \"P.kwargs\") -> None:\n        pass\n    def inner4(*args: \"P.args\", **kwargs: \"P.kwargs\") -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec12",
        "documentation": {}
    },
    {
        "label": "RemoteResponse",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "class RemoteResponse(Generic[_T]):\n    ...\nclass RemoteFunction(Generic[_P, _R]):\n    def __init__(self, func: Callable[_P, _R]) -> None:\n        ...\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        ...\n    def remote(self, *args: _P.args, **kwargs: _P.kwargs) -> RemoteResponse[_R]:\n        ...\nr1 = RemoteFunction(func2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "RemoteFunction",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "class RemoteFunction(Generic[_P, _R]):\n    def __init__(self, func: Callable[_P, _R]) -> None:\n        ...\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        ...\n    def remote(self, *args: _P.args, **kwargs: _P.kwargs) -> RemoteResponse[_R]:\n        ...\nr1 = RemoteFunction(func2)\nreveal_type(r1, expected_text=\"RemoteFunction[(a: str, b: List[int]), str]\")\nv2 = r1(\"hi\", [])",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "class ClassA:\n    ...\nCheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]\nasync def my_check_func(obj: ClassA, a: int, b: str) -> bool:\n    print(a, b)\n    return str(a) == b\nasync def takes_check_func(\n    check_func: CheckFunc[_P], *args: _P.args, **kwargs: _P.kwargs\n):\n    await check_func(ClassA(), *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "def func1(func: Callable[_P, _R]) -> AddIntParam[_P, _R]:\n    ...\ndef func2(a: str, b: List[int]) -> str:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")\n# This should generate an error because 'int' isn't assignable to\n# ParamSpec _P.\nX = AddIntParam[int, int]\nclass RemoteResponse(Generic[_T]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "def func2(a: str, b: List[int]) -> str:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")\n# This should generate an error because 'int' isn't assignable to\n# ParamSpec _P.\nX = AddIntParam[int, int]\nclass RemoteResponse(Generic[_T]):\n    ...\nclass RemoteFunction(Generic[_P, _R]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "remote",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "def remote(func: Callable[_P, _R]) -> RemoteFunction[_P, _R]:\n    ...\nv4 = remote(func2)\nreveal_type(v4, expected_text=\"RemoteFunction[(a: str, b: List[int]), str]\")\nCoro = Coroutine[Any, Any, _T]\nCoroFunc = Callable[_P, Coro[_T]]\nclass ClassA:\n    ...\nCheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]\nasync def my_check_func(obj: ClassA, a: int, b: str) -> bool:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "_P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "_P = ParamSpec(\"_P\")\n_R = TypeVar(\"_R\")\n_T = TypeVar(\"_T\")\nAddIntParam = Callable[Concatenate[int, _P], _T]\ndef func1(func: Callable[_P, _R]) -> AddIntParam[_P, _R]:\n    ...\ndef func2(a: str, b: List[int]) -> str:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "_R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "_R = TypeVar(\"_R\")\n_T = TypeVar(\"_T\")\nAddIntParam = Callable[Concatenate[int, _P], _T]\ndef func1(func: Callable[_P, _R]) -> AddIntParam[_P, _R]:\n    ...\ndef func2(a: str, b: List[int]) -> str:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")\n# This should generate an error because 'int' isn't assignable to",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "_T = TypeVar(\"_T\")\nAddIntParam = Callable[Concatenate[int, _P], _T]\ndef func1(func: Callable[_P, _R]) -> AddIntParam[_P, _R]:\n    ...\ndef func2(a: str, b: List[int]) -> str:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")\n# This should generate an error because 'int' isn't assignable to\n# ParamSpec _P.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "AddIntParam",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "AddIntParam = Callable[Concatenate[int, _P], _T]\ndef func1(func: Callable[_P, _R]) -> AddIntParam[_P, _R]:\n    ...\ndef func2(a: str, b: List[int]) -> str:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")\n# This should generate an error because 'int' isn't assignable to\n# ParamSpec _P.\nX = AddIntParam[int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "v1 = func1(func2)\nreveal_type(v1, expected_text=\"(int, a: str, b: List[int]) -> str\")\n# This should generate an error because 'int' isn't assignable to\n# ParamSpec _P.\nX = AddIntParam[int, int]\nclass RemoteResponse(Generic[_T]):\n    ...\nclass RemoteFunction(Generic[_P, _R]):\n    def __init__(self, func: Callable[_P, _R]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "X = AddIntParam[int, int]\nclass RemoteResponse(Generic[_T]):\n    ...\nclass RemoteFunction(Generic[_P, _R]):\n    def __init__(self, func: Callable[_P, _R]) -> None:\n        ...\n    def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R:\n        ...\n    def remote(self, *args: _P.args, **kwargs: _P.kwargs) -> RemoteResponse[_R]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "r1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "r1 = RemoteFunction(func2)\nreveal_type(r1, expected_text=\"RemoteFunction[(a: str, b: List[int]), str]\")\nv2 = r1(\"hi\", [])\nreveal_type(v2, expected_text=\"str\")\nv3 = r1.remote(\"hi\", [])\nreveal_type(v3, expected_text=\"RemoteResponse[str]\")\n# This should generate an error\nr1(1, [])\n# This should generate an error\nr1(\"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "v2 = r1(\"hi\", [])\nreveal_type(v2, expected_text=\"str\")\nv3 = r1.remote(\"hi\", [])\nreveal_type(v3, expected_text=\"RemoteResponse[str]\")\n# This should generate an error\nr1(1, [])\n# This should generate an error\nr1(\"hi\")\n# This should generate an error\nr1.remote(1, [])",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "v3 = r1.remote(\"hi\", [])\nreveal_type(v3, expected_text=\"RemoteResponse[str]\")\n# This should generate an error\nr1(1, [])\n# This should generate an error\nr1(\"hi\")\n# This should generate an error\nr1.remote(1, [])\n# This should generate an error because 'int' is not assignable\n# to ParamSpec _P.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "A = RemoteFunction[int, int]\ndef remote(func: Callable[_P, _R]) -> RemoteFunction[_P, _R]:\n    ...\nv4 = remote(func2)\nreveal_type(v4, expected_text=\"RemoteFunction[(a: str, b: List[int]), str]\")\nCoro = Coroutine[Any, Any, _T]\nCoroFunc = Callable[_P, Coro[_T]]\nclass ClassA:\n    ...\nCheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "v4 = remote(func2)\nreveal_type(v4, expected_text=\"RemoteFunction[(a: str, b: List[int]), str]\")\nCoro = Coroutine[Any, Any, _T]\nCoroFunc = Callable[_P, Coro[_T]]\nclass ClassA:\n    ...\nCheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]\nasync def my_check_func(obj: ClassA, a: int, b: str) -> bool:\n    print(a, b)\n    return str(a) == b",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "Coro",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "Coro = Coroutine[Any, Any, _T]\nCoroFunc = Callable[_P, Coro[_T]]\nclass ClassA:\n    ...\nCheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]\nasync def my_check_func(obj: ClassA, a: int, b: str) -> bool:\n    print(a, b)\n    return str(a) == b\nasync def takes_check_func(\n    check_func: CheckFunc[_P], *args: _P.args, **kwargs: _P.kwargs",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "CoroFunc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "CoroFunc = Callable[_P, Coro[_T]]\nclass ClassA:\n    ...\nCheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]\nasync def my_check_func(obj: ClassA, a: int, b: str) -> bool:\n    print(a, b)\n    return str(a) == b\nasync def takes_check_func(\n    check_func: CheckFunc[_P], *args: _P.args, **kwargs: _P.kwargs\n):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "CheckFunc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "peekOfCode": "CheckFunc = CoroFunc[Concatenate[ClassA, _P], bool]\nasync def my_check_func(obj: ClassA, a: int, b: str) -> bool:\n    print(a, b)\n    return str(a) == b\nasync def takes_check_func(\n    check_func: CheckFunc[_P], *args: _P.args, **kwargs: _P.kwargs\n):\n    await check_func(ClassA(), *args, **kwargs)\nasyncio.run(takes_check_func(my_check_func, 1, \"2\"))\n# This should generate an error because the signature doesn't match.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec13",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "peekOfCode": "class Foo:\n    @rounder\n    @classmethod\n    def identity_cls(cls, val: float) -> float:\n        return val\n    @rounder\n    @staticmethod\n    def identity_static(val: float) -> float:\n        return val\nreveal_type(Foo.identity_cls(1.2), expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "documentation": {}
    },
    {
        "label": "rounder",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "peekOfCode": "def rounder(func: Callable[P, float]) -> Callable[P, int]:\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> int:\n        return round(func(*args, **kwargs))\n    return wrapper\nclass Foo:\n    @rounder\n    @classmethod\n    def identity_cls(cls, val: float) -> float:\n        return val\n    @rounder",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef rounder(func: Callable[P, float]) -> Callable[P, int]:\n    def wrapper(*args: P.args, **kwargs: P.kwargs) -> int:\n        return round(func(*args, **kwargs))\n    return wrapper\nclass Foo:\n    @rounder\n    @classmethod\n    def identity_cls(cls, val: float) -> float:\n        return val",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec14",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "class Foo(Generic[P, T]):\n    def __init__(self, func: Callable[P, T]) -> None:\n        ...\ndef foo(foo: Foo[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func(a: int) -> str:\n    ...\na = Foo(func)\nreveal_type(a, expected_text=\"Foo[(a: int), str]\")\nc = foo(a, 2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "def foo(foo: Foo[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func(a: int) -> str:\n    ...\na = Foo(func)\nreveal_type(a, expected_text=\"Foo[(a: int), str]\")\nc = foo(a, 2)\nreveal_type(c, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "def func(a: int) -> str:\n    ...\na = Foo(func)\nreveal_type(a, expected_text=\"Foo[(a: int), str]\")\nc = foo(a, 2)\nreveal_type(c, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nclass Foo(Generic[P, T]):\n    def __init__(self, func: Callable[P, T]) -> None:\n        ...\ndef foo(foo: Foo[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func(a: int) -> str:\n    ...\na = Foo(func)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Foo(Generic[P, T]):\n    def __init__(self, func: Callable[P, T]) -> None:\n        ...\ndef foo(foo: Foo[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func(a: int) -> str:\n    ...\na = Foo(func)\nreveal_type(a, expected_text=\"Foo[(a: int), str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "a = Foo(func)\nreveal_type(a, expected_text=\"Foo[(a: int), str]\")\nc = foo(a, 2)\nreveal_type(c, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "peekOfCode": "c = foo(a, 2)\nreveal_type(c, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec15",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "class Foo(Generic[P, T, Q, U]):\n    ...\ndef foo(func: Callable[Concatenate[Callable[P, T], Q], U]) -> Foo[P, T, Q, U]:\n    ...\n@foo\ndef bar(func: Callable[[int], float], a: str) -> bool:\n    ...\nreveal_type(bar, expected_text=\"Foo[(int), float, (a: str), bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "def foo(func: Callable[Concatenate[Callable[P, T], Q], U]) -> Foo[P, T, Q, U]:\n    ...\n@foo\ndef bar(func: Callable[[int], float], a: str) -> bool:\n    ...\nreveal_type(bar, expected_text=\"Foo[(int), float, (a: str), bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "def bar(func: Callable[[int], float], a: str) -> bool:\n    ...\nreveal_type(bar, expected_text=\"Foo[(int), float, (a: str), bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "P = ParamSpec(\"P\")\nQ = ParamSpec(\"Q\")\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\nclass Foo(Generic[P, T, Q, U]):\n    ...\ndef foo(func: Callable[Concatenate[Callable[P, T], Q], U]) -> Foo[P, T, Q, U]:\n    ...\n@foo\ndef bar(func: Callable[[int], float], a: str) -> bool:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "Q",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "Q = ParamSpec(\"Q\")\nT = TypeVar(\"T\")\nU = TypeVar(\"U\")\nclass Foo(Generic[P, T, Q, U]):\n    ...\ndef foo(func: Callable[Concatenate[Callable[P, T], Q], U]) -> Foo[P, T, Q, U]:\n    ...\n@foo\ndef bar(func: Callable[[int], float], a: str) -> bool:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\nclass Foo(Generic[P, T, Q, U]):\n    ...\ndef foo(func: Callable[Concatenate[Callable[P, T], Q], U]) -> Foo[P, T, Q, U]:\n    ...\n@foo\ndef bar(func: Callable[[int], float], a: str) -> bool:\n    ...\nreveal_type(bar, expected_text=\"Foo[(int), float, (a: str), bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "peekOfCode": "U = TypeVar(\"U\")\nclass Foo(Generic[P, T, Q, U]):\n    ...\ndef foo(func: Callable[Concatenate[Callable[P, T], Q], U]) -> Foo[P, T, Q, U]:\n    ...\n@foo\ndef bar(func: Callable[[int], float], a: str) -> bool:\n    ...\nreveal_type(bar, expected_text=\"Foo[(int), float, (a: str), bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec16",
        "documentation": {}
    },
    {
        "label": "repr_func_call",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "peekOfCode": "def repr_func_call(func: Callable[P, object], *args: P.args, **kwargs: P.kwargs) -> str:\n    arg_reprs = [repr(arg) for arg in args]\n    arg_reprs.extend(k + \"=\" + repr(v) for k, v in kwargs.items())\n    return func.__name__ + \"(\" + \", \".join(arg_reprs) + \")\"\ndef print(\n    *values: object,\n    sep: str | None = ...,\n    end: str | None = ...,\n) -> None: ...\nrepr_func_call(print)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "documentation": {}
    },
    {
        "label": "print",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "peekOfCode": "def print(\n    *values: object,\n    sep: str | None = ...,\n    end: str | None = ...,\n) -> None: ...\nrepr_func_call(print)\ndef add_values(a: int, b: int):\n    ...\ndef foo(*args: Any, **kwargs: Any):\n    repr_func_call(add_values, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "documentation": {}
    },
    {
        "label": "add_values",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "peekOfCode": "def add_values(a: int, b: int):\n    ...\ndef foo(*args: Any, **kwargs: Any):\n    repr_func_call(add_values, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "peekOfCode": "def foo(*args: Any, **kwargs: Any):\n    repr_func_call(add_values, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef repr_func_call(func: Callable[P, object], *args: P.args, **kwargs: P.kwargs) -> str:\n    arg_reprs = [repr(arg) for arg in args]\n    arg_reprs.extend(k + \"=\" + repr(v) for k, v in kwargs.items())\n    return func.__name__ + \"(\" + \", \".join(arg_reprs) + \")\"\ndef print(\n    *values: object,\n    sep: str | None = ...,\n    end: str | None = ...,\n) -> None: ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec17",
        "documentation": {}
    },
    {
        "label": "FooWithConcatenate",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "class FooWithConcatenate(Protocol[P]):\n    def __call__(self, x: int, /, *args: P.args, **kwargs: P.kwargs) -> int:\n        ...\ndef func_with_protocol(cb: FooWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx2 = func_with_protocol(callback)\nreveal_type(x2, expected_text=\"(b: str, c: str) -> bool\")\nclass CallbackPos(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "CallbackPos",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "class CallbackPos(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\ndef invoke_pos(cb: CallbackPos[P], /, *args: P.args, **kwargs: P.kwargs) -> None:\n    cb(*args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "def callback(a: int, b: str, c: str) -> int:\n    ...\nFooCallableWithConcatenate = Callable[Concatenate[int, P], int]\ndef func_with_callable(cb: FooCallableWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx1 = func_with_callable(callback)\nreveal_type(x1, expected_text=\"(b: str, c: str) -> bool\")\nclass FooWithConcatenate(Protocol[P]):\n    def __call__(self, x: int, /, *args: P.args, **kwargs: P.kwargs) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "func_with_callable",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "def func_with_callable(cb: FooCallableWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx1 = func_with_callable(callback)\nreveal_type(x1, expected_text=\"(b: str, c: str) -> bool\")\nclass FooWithConcatenate(Protocol[P]):\n    def __call__(self, x: int, /, *args: P.args, **kwargs: P.kwargs) -> int:\n        ...\ndef func_with_protocol(cb: FooWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx2 = func_with_protocol(callback)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "func_with_protocol",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "def func_with_protocol(cb: FooWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx2 = func_with_protocol(callback)\nreveal_type(x2, expected_text=\"(b: str, c: str) -> bool\")\nclass CallbackPos(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\ndef invoke_pos(cb: CallbackPos[P], /, *args: P.args, **kwargs: P.kwargs) -> None:\n    cb(*args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "invoke_pos",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "def invoke_pos(cb: CallbackPos[P], /, *args: P.args, **kwargs: P.kwargs) -> None:\n    cb(*args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef callback(a: int, b: str, c: str) -> int:\n    ...\nFooCallableWithConcatenate = Callable[Concatenate[int, P], int]\ndef func_with_callable(cb: FooCallableWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx1 = func_with_callable(callback)\nreveal_type(x1, expected_text=\"(b: str, c: str) -> bool\")\nclass FooWithConcatenate(Protocol[P]):\n    def __call__(self, x: int, /, *args: P.args, **kwargs: P.kwargs) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "FooCallableWithConcatenate",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "FooCallableWithConcatenate = Callable[Concatenate[int, P], int]\ndef func_with_callable(cb: FooCallableWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx1 = func_with_callable(callback)\nreveal_type(x1, expected_text=\"(b: str, c: str) -> bool\")\nclass FooWithConcatenate(Protocol[P]):\n    def __call__(self, x: int, /, *args: P.args, **kwargs: P.kwargs) -> int:\n        ...\ndef func_with_protocol(cb: FooWithConcatenate[P]) -> Callable[P, bool]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "x1 = func_with_callable(callback)\nreveal_type(x1, expected_text=\"(b: str, c: str) -> bool\")\nclass FooWithConcatenate(Protocol[P]):\n    def __call__(self, x: int, /, *args: P.args, **kwargs: P.kwargs) -> int:\n        ...\ndef func_with_protocol(cb: FooWithConcatenate[P]) -> Callable[P, bool]:\n    ...\nx2 = func_with_protocol(callback)\nreveal_type(x2, expected_text=\"(b: str, c: str) -> bool\")\nclass CallbackPos(Protocol[P]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "peekOfCode": "x2 = func_with_protocol(callback)\nreveal_type(x2, expected_text=\"(b: str, c: str) -> bool\")\nclass CallbackPos(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\ndef invoke_pos(cb: CallbackPos[P], /, *args: P.args, **kwargs: P.kwargs) -> None:\n    cb(*args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec18",
        "documentation": {}
    },
    {
        "label": "Command1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "class Command1(Generic[P]):\n    def __init__(self, handler: CommandHandler1[P]) -> None:\n        ...\nclass Application1:\n    def func1(self, handler: CommandHandler1[P]) -> Command1[P]:\n        return Command1(handler)\n    def func2(\n        self,\n        handler: CommandHandler1[P],\n    ) -> Callable[[CommandHandler1[P]], Command1[P]]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "Application1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "class Application1:\n    def func1(self, handler: CommandHandler1[P]) -> Command1[P]:\n        return Command1(handler)\n    def func2(\n        self,\n        handler: CommandHandler1[P],\n    ) -> Callable[[CommandHandler1[P]], Command1[P]]:\n        def decorator(handler: CommandHandler1[P]) -> Command1[P]:\n            return self.func1(handler)\n        return decorator",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "CommandHandler2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "class CommandHandler2(Protocol[P]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> dict[str, Any]:\n        ...\nclass Command2(Generic[P]):\n    def __init__(self, handler: CommandHandler2[P]) -> None:\n        ...\nclass Application2:\n    def func1(self, handler: CommandHandler2[P]) -> Command2[P]:\n        return Command2(handler)\n    def func2(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "Command2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "class Command2(Generic[P]):\n    def __init__(self, handler: CommandHandler2[P]) -> None:\n        ...\nclass Application2:\n    def func1(self, handler: CommandHandler2[P]) -> Command2[P]:\n        return Command2(handler)\n    def func2(\n        self,\n        handler: CommandHandler2[P],\n    ) -> Callable[[CommandHandler2[P]], Command2[P]]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "Application2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "class Application2:\n    def func1(self, handler: CommandHandler2[P]) -> Command2[P]:\n        return Command2(handler)\n    def func2(\n        self,\n        handler: CommandHandler2[P],\n    ) -> Callable[[CommandHandler2[P]], Command2[P]]:\n        def decorator(handler: CommandHandler2[P]) -> Command2[P]:\n            return self.func1(handler)\n        return decorator",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "HandlerProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "class HandlerProtocol(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nlist_of_handler_protocols: list[HandlerProtocol[...]] = []",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "def handler(arg1: int, arg2: str) -> dict[str, Any]:\n    ...\nv1: CommandHandler2 = handler\ndef func1_1(x: CommandHandler1[str]):\n    x(3, \"hi\")\ndef func1_2(x: CommandHandler1[[str, int]]):\n    x(3, \"hi\", 3)\ndef func2_1(x: CommandHandler2[str]):\n    x(\"hi\")\ndef func2_2(x: CommandHandler2[[str, int]]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "func1_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "def func1_1(x: CommandHandler1[str]):\n    x(3, \"hi\")\ndef func1_2(x: CommandHandler1[[str, int]]):\n    x(3, \"hi\", 3)\ndef func2_1(x: CommandHandler2[str]):\n    x(\"hi\")\ndef func2_2(x: CommandHandler2[[str, int]]):\n    x(\"hi\", 3)\nHandlerAlias = Callable[P, None]\nlist_of_handlers: list[HandlerAlias[...]] = []",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "func1_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "def func1_2(x: CommandHandler1[[str, int]]):\n    x(3, \"hi\", 3)\ndef func2_1(x: CommandHandler2[str]):\n    x(\"hi\")\ndef func2_2(x: CommandHandler2[[str, int]]):\n    x(\"hi\", 3)\nHandlerAlias = Callable[P, None]\nlist_of_handlers: list[HandlerAlias[...]] = []\nclass HandlerProtocol(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "func2_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "def func2_1(x: CommandHandler2[str]):\n    x(\"hi\")\ndef func2_2(x: CommandHandler2[[str, int]]):\n    x(\"hi\", 3)\nHandlerAlias = Callable[P, None]\nlist_of_handlers: list[HandlerAlias[...]] = []\nclass HandlerProtocol(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nlist_of_handler_protocols: list[HandlerProtocol[...]] = []",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "func2_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "def func2_2(x: CommandHandler2[[str, int]]):\n    x(\"hi\", 3)\nHandlerAlias = Callable[P, None]\nlist_of_handlers: list[HandlerAlias[...]] = []\nclass HandlerProtocol(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nlist_of_handler_protocols: list[HandlerProtocol[...]] = []",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "P = ParamSpec(\"P\")\n# Example 1: Callable generic type alias\nCommandHandler1 = Callable[Concatenate[int, P], dict[str, Any]]\nclass Command1(Generic[P]):\n    def __init__(self, handler: CommandHandler1[P]) -> None:\n        ...\nclass Application1:\n    def func1(self, handler: CommandHandler1[P]) -> Command1[P]:\n        return Command1(handler)\n    def func2(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "CommandHandler1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "CommandHandler1 = Callable[Concatenate[int, P], dict[str, Any]]\nclass Command1(Generic[P]):\n    def __init__(self, handler: CommandHandler1[P]) -> None:\n        ...\nclass Application1:\n    def func1(self, handler: CommandHandler1[P]) -> Command1[P]:\n        return Command1(handler)\n    def func2(\n        self,\n        handler: CommandHandler1[P],",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "HandlerAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "peekOfCode": "HandlerAlias = Callable[P, None]\nlist_of_handlers: list[HandlerAlias[...]] = []\nclass HandlerProtocol(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nlist_of_handler_protocols: list[HandlerProtocol[...]] = []",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec19",
        "documentation": {}
    },
    {
        "label": "awaitable_wrapper",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "peekOfCode": "def awaitable_wrapper(\n    a: Callable[TParams, TReturn]\n) -> Callable[TParams, Awaitable[TReturn]]:\n    def foo_internal(\n        *args: TParams.args, **kwargs: TParams.kwargs\n    ) -> Awaitable[TReturn]:\n        ft: \"Future[TReturn]\" = Future()\n        ft.set_result(a(*args, **kwargs))\n        return ft\n    return foo_internal",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "peekOfCode": "def bar(a: int, b: str) -> float:\n    return 2.3\nasync def bbb() -> float:\n    return await bar(2, \"3\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "documentation": {}
    },
    {
        "label": "TParams",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "peekOfCode": "TParams = ParamSpec(\"TParams\")\nTReturn = TypeVar(\"TReturn\")\ndef awaitable_wrapper(\n    a: Callable[TParams, TReturn]\n) -> Callable[TParams, Awaitable[TReturn]]:\n    def foo_internal(\n        *args: TParams.args, **kwargs: TParams.kwargs\n    ) -> Awaitable[TReturn]:\n        ft: \"Future[TReturn]\" = Future()\n        ft.set_result(a(*args, **kwargs))",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "documentation": {}
    },
    {
        "label": "TReturn",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "peekOfCode": "TReturn = TypeVar(\"TReturn\")\ndef awaitable_wrapper(\n    a: Callable[TParams, TReturn]\n) -> Callable[TParams, Awaitable[TReturn]]:\n    def foo_internal(\n        *args: TParams.args, **kwargs: TParams.kwargs\n    ) -> Awaitable[TReturn]:\n        ft: \"Future[TReturn]\" = Future()\n        ft.set_result(a(*args, **kwargs))\n        return ft",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec2",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "class X(Generic[T, P1]):\n    f: Callable[P1, int]\n    x: T\ndef x1(x: X[int, P2]) -> str:\n    ...\ndef x2(x: X[int, Concatenate[int, P2]]) -> str:\n    ...\ndef X3(x: X[int, [int, bool]]) -> str:\n    ...\ndef x4(x: X[int, ...]) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "class Y(Generic[P2]):\n    def __init__(self, cb: Callable[P2, Any]) -> None:\n        ...\n    def m1(self) -> X[int, Concatenate[float, P2]]:\n        ...\ny1 = Y(x4)\nreveal_type(y1, expected_text=\"Y[(x: X[int, (...)])]\")\ny2 = y1.m1()\nreveal_type(y2, expected_text=\"X[int, (float, x: X[int, (...)])]\")\nclass Z(Generic[P1]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "Z",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "class Z(Generic[P1]):\n    f: Callable[P1, int]\ndef z1(x: Z[[int, str, bool]]) -> str:\n    ...\ndef z2(x: Z[int, str, bool]) -> str:\n    ...\n# This should generate an error.\ndef z3(x: Z[[int, [str], bool]]) -> str:\n    ...\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def x1(x: X[int, P2]) -> str:\n    ...\ndef x2(x: X[int, Concatenate[int, P2]]) -> str:\n    ...\ndef X3(x: X[int, [int, bool]]) -> str:\n    ...\ndef x4(x: X[int, ...]) -> str:\n    ...\n# This should generate an error because \"int\" can't be bound to a ParamSpec.\ndef x5(x: X[int, int]) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def x2(x: X[int, Concatenate[int, P2]]) -> str:\n    ...\ndef X3(x: X[int, [int, bool]]) -> str:\n    ...\ndef x4(x: X[int, ...]) -> str:\n    ...\n# This should generate an error because \"int\" can't be bound to a ParamSpec.\ndef x5(x: X[int, int]) -> str:\n    ...\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "X3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def X3(x: X[int, [int, bool]]) -> str:\n    ...\ndef x4(x: X[int, ...]) -> str:\n    ...\n# This should generate an error because \"int\" can't be bound to a ParamSpec.\ndef x5(x: X[int, int]) -> str:\n    ...\n# This should generate an error.\ndef x6(x: X[..., ...]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "x4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def x4(x: X[int, ...]) -> str:\n    ...\n# This should generate an error because \"int\" can't be bound to a ParamSpec.\ndef x5(x: X[int, int]) -> str:\n    ...\n# This should generate an error.\ndef x6(x: X[..., ...]) -> str:\n    ...\n# This should generate an error.\ndef x7(x: X[[int], [int, int]]) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "x5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def x5(x: X[int, int]) -> str:\n    ...\n# This should generate an error.\ndef x6(x: X[..., ...]) -> str:\n    ...\n# This should generate an error.\ndef x7(x: X[[int], [int, int]]) -> str:\n    ...\nclass Y(Generic[P2]):\n    def __init__(self, cb: Callable[P2, Any]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "x6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def x6(x: X[..., ...]) -> str:\n    ...\n# This should generate an error.\ndef x7(x: X[[int], [int, int]]) -> str:\n    ...\nclass Y(Generic[P2]):\n    def __init__(self, cb: Callable[P2, Any]) -> None:\n        ...\n    def m1(self) -> X[int, Concatenate[float, P2]]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "x7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def x7(x: X[[int], [int, int]]) -> str:\n    ...\nclass Y(Generic[P2]):\n    def __init__(self, cb: Callable[P2, Any]) -> None:\n        ...\n    def m1(self) -> X[int, Concatenate[float, P2]]:\n        ...\ny1 = Y(x4)\nreveal_type(y1, expected_text=\"Y[(x: X[int, (...)])]\")\ny2 = y1.m1()",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "z1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def z1(x: Z[[int, str, bool]]) -> str:\n    ...\ndef z2(x: Z[int, str, bool]) -> str:\n    ...\n# This should generate an error.\ndef z3(x: Z[[int, [str], bool]]) -> str:\n    ...\n# This should generate an error.\ndef z4(x: Z[[[int, str, bool]]]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "z2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def z2(x: Z[int, str, bool]) -> str:\n    ...\n# This should generate an error.\ndef z3(x: Z[[int, [str], bool]]) -> str:\n    ...\n# This should generate an error.\ndef z4(x: Z[[[int, str, bool]]]) -> str:\n    ...\n# This should generate an error.\ndef z5(x: Z[[...]]) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "z3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def z3(x: Z[[int, [str], bool]]) -> str:\n    ...\n# This should generate an error.\ndef z4(x: Z[[[int, str, bool]]]) -> str:\n    ...\n# This should generate an error.\ndef z5(x: Z[[...]]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "z4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def z4(x: Z[[[int, str, bool]]]) -> str:\n    ...\n# This should generate an error.\ndef z5(x: Z[[...]]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "z5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "def z5(x: Z[[...]]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "T = TypeVar(\"T\")\nP1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\")\nclass X(Generic[T, P1]):\n    f: Callable[P1, int]\n    x: T\ndef x1(x: X[int, P2]) -> str:\n    ...\ndef x2(x: X[int, Concatenate[int, P2]]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "P1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\")\nclass X(Generic[T, P1]):\n    f: Callable[P1, int]\n    x: T\ndef x1(x: X[int, P2]) -> str:\n    ...\ndef x2(x: X[int, Concatenate[int, P2]]) -> str:\n    ...\ndef X3(x: X[int, [int, bool]]) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "P2 = ParamSpec(\"P2\")\nclass X(Generic[T, P1]):\n    f: Callable[P1, int]\n    x: T\ndef x1(x: X[int, P2]) -> str:\n    ...\ndef x2(x: X[int, Concatenate[int, P2]]) -> str:\n    ...\ndef X3(x: X[int, [int, bool]]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "y1 = Y(x4)\nreveal_type(y1, expected_text=\"Y[(x: X[int, (...)])]\")\ny2 = y1.m1()\nreveal_type(y2, expected_text=\"X[int, (float, x: X[int, (...)])]\")\nclass Z(Generic[P1]):\n    f: Callable[P1, int]\ndef z1(x: Z[[int, str, bool]]) -> str:\n    ...\ndef z2(x: Z[int, str, bool]) -> str:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "peekOfCode": "y2 = y1.m1()\nreveal_type(y2, expected_text=\"X[int, (float, x: X[int, (...)])]\")\nclass Z(Generic[P1]):\n    f: Callable[P1, int]\ndef z1(x: Z[[int, str, bool]]) -> str:\n    ...\ndef z2(x: Z[int, str, bool]) -> str:\n    ...\n# This should generate an error.\ndef z3(x: Z[[int, [str], bool]]) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec20",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "class Context:\n    ...\nclass Response:\n    ...\nclass ContextCallback(Protocol[P1]):\n    def __call__(\n        self, ctx: Context, /, *args: P1.args, **kwargs: P1.kwargs\n    ) -> Response:\n        ...\ndef call_context_callback(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "class Response:\n    ...\nclass ContextCallback(Protocol[P1]):\n    def __call__(\n        self, ctx: Context, /, *args: P1.args, **kwargs: P1.kwargs\n    ) -> Response:\n        ...\ndef call_context_callback(\n    callback: ContextCallback[P3], /, *args: P3.args, **kwargs: P3.kwargs\n) -> Response:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "ContextCallback",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "class ContextCallback(Protocol[P1]):\n    def __call__(\n        self, ctx: Context, /, *args: P1.args, **kwargs: P1.kwargs\n    ) -> Response:\n        ...\ndef call_context_callback(\n    callback: ContextCallback[P3], /, *args: P3.args, **kwargs: P3.kwargs\n) -> Response:\n    ...\nclass IntContextCallback(Protocol[P2]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "IntContextCallback",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "class IntContextCallback(Protocol[P2]):\n    def __call__(\n        self, ctx: Context, value: int, /, *args: P2.args, **kwargs: P2.kwargs\n    ) -> Response:\n        ...\ndef call_int_context_callback(\n    callback: IntContextCallback[P4], value: int, /, *args: P4.args, **kwargs: P4.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)\nP5 = ParamSpec(\"P5\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "call_context_callback",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "def call_context_callback(\n    callback: ContextCallback[P3], /, *args: P3.args, **kwargs: P3.kwargs\n) -> Response:\n    ...\nclass IntContextCallback(Protocol[P2]):\n    def __call__(\n        self, ctx: Context, value: int, /, *args: P2.args, **kwargs: P2.kwargs\n    ) -> Response:\n        ...\ndef call_int_context_callback(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "call_int_context_callback",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "def call_int_context_callback(\n    callback: IntContextCallback[P4], value: int, /, *args: P4.args, **kwargs: P4.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)\nP5 = ParamSpec(\"P5\")\nP6 = ParamSpec(\"P6\")\nP7 = ParamSpec(\"P7\")\nContextCallable = Callable[Concatenate[Context, P5], Response]\nIntContextCallable = Callable[Concatenate[Context, int, P6], Response]\ndef call_int_context_callable(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "call_int_context_callable",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "def call_int_context_callable(\n    callback: IntContextCallable[P7], value: int, /, *args: P7.args, **kwargs: P7.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\")\nP3 = ParamSpec(\"P3\")\nP4 = ParamSpec(\"P4\")\nclass Context:\n    ...\nclass Response:\n    ...\nclass ContextCallback(Protocol[P1]):\n    def __call__(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P2 = ParamSpec(\"P2\")\nP3 = ParamSpec(\"P3\")\nP4 = ParamSpec(\"P4\")\nclass Context:\n    ...\nclass Response:\n    ...\nclass ContextCallback(Protocol[P1]):\n    def __call__(\n        self, ctx: Context, /, *args: P1.args, **kwargs: P1.kwargs",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P3 = ParamSpec(\"P3\")\nP4 = ParamSpec(\"P4\")\nclass Context:\n    ...\nclass Response:\n    ...\nclass ContextCallback(Protocol[P1]):\n    def __call__(\n        self, ctx: Context, /, *args: P1.args, **kwargs: P1.kwargs\n    ) -> Response:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P4 = ParamSpec(\"P4\")\nclass Context:\n    ...\nclass Response:\n    ...\nclass ContextCallback(Protocol[P1]):\n    def __call__(\n        self, ctx: Context, /, *args: P1.args, **kwargs: P1.kwargs\n    ) -> Response:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P5 = ParamSpec(\"P5\")\nP6 = ParamSpec(\"P6\")\nP7 = ParamSpec(\"P7\")\nContextCallable = Callable[Concatenate[Context, P5], Response]\nIntContextCallable = Callable[Concatenate[Context, int, P6], Response]\ndef call_int_context_callable(\n    callback: IntContextCallable[P7], value: int, /, *args: P7.args, **kwargs: P7.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P6 = ParamSpec(\"P6\")\nP7 = ParamSpec(\"P7\")\nContextCallable = Callable[Concatenate[Context, P5], Response]\nIntContextCallable = Callable[Concatenate[Context, int, P6], Response]\ndef call_int_context_callable(\n    callback: IntContextCallable[P7], value: int, /, *args: P7.args, **kwargs: P7.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "P7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "P7 = ParamSpec(\"P7\")\nContextCallable = Callable[Concatenate[Context, P5], Response]\nIntContextCallable = Callable[Concatenate[Context, int, P6], Response]\ndef call_int_context_callable(\n    callback: IntContextCallable[P7], value: int, /, *args: P7.args, **kwargs: P7.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "ContextCallable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "ContextCallable = Callable[Concatenate[Context, P5], Response]\nIntContextCallable = Callable[Concatenate[Context, int, P6], Response]\ndef call_int_context_callable(\n    callback: IntContextCallable[P7], value: int, /, *args: P7.args, **kwargs: P7.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "IntContextCallable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "peekOfCode": "IntContextCallable = Callable[Concatenate[Context, int, P6], Response]\ndef call_int_context_callable(\n    callback: IntContextCallable[P7], value: int, /, *args: P7.args, **kwargs: P7.kwargs\n) -> Response:\n    return call_context_callback(callback, value, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec21",
        "documentation": {}
    },
    {
        "label": "MyPartial",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "peekOfCode": "class MyPartial(Generic[P, OUT]):\n    def __init__(self, first: int, func: Callable[Concatenate[int, P], OUT]) -> None:\n        self.first = first\n        self.func = func\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> OUT:\n        ...\nclass MyPartialCreator(Generic[P, OUT]):\n    def __init__(self, func: Callable[Concatenate[int, P], OUT]):\n        self.func = func\n    def create_partial(self, first: int) -> Callable[P, OUT]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "documentation": {}
    },
    {
        "label": "MyPartialCreator",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "peekOfCode": "class MyPartialCreator(Generic[P, OUT]):\n    def __init__(self, func: Callable[Concatenate[int, P], OUT]):\n        self.func = func\n    def create_partial(self, first: int) -> Callable[P, OUT]:\n        return MyPartial[P, OUT](first=first, func=self.func)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "peekOfCode": "P = ParamSpec(\"P\")\nOUT = TypeVar(\"OUT\")\nclass MyPartial(Generic[P, OUT]):\n    def __init__(self, first: int, func: Callable[Concatenate[int, P], OUT]) -> None:\n        self.first = first\n        self.func = func\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> OUT:\n        ...\nclass MyPartialCreator(Generic[P, OUT]):\n    def __init__(self, func: Callable[Concatenate[int, P], OUT]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "documentation": {}
    },
    {
        "label": "OUT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "peekOfCode": "OUT = TypeVar(\"OUT\")\nclass MyPartial(Generic[P, OUT]):\n    def __init__(self, first: int, func: Callable[Concatenate[int, P], OUT]) -> None:\n        self.first = first\n        self.func = func\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> OUT:\n        ...\nclass MyPartialCreator(Generic[P, OUT]):\n    def __init__(self, func: Callable[Concatenate[int, P], OUT]):\n        self.func = func",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec22",
        "documentation": {}
    },
    {
        "label": "is_inty",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "peekOfCode": "def is_inty(f: Callable[Pi, object]) -> Callable[Pi, int]:\n    ...\nPo = ParamSpec(\"Po\")\nT = TypeVar(\"T\")\ndef outer(f: Callable[Concatenate[str, Po], object]):\n    x = is_inty(f)\n    reveal_type(x, expected_text=\"(str, **Po@outer) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "peekOfCode": "def outer(f: Callable[Concatenate[str, Po], object]):\n    x = is_inty(f)\n    reveal_type(x, expected_text=\"(str, **Po@outer) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "documentation": {}
    },
    {
        "label": "Pi",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "peekOfCode": "Pi = ParamSpec(\"Pi\")\ndef is_inty(f: Callable[Pi, object]) -> Callable[Pi, int]:\n    ...\nPo = ParamSpec(\"Po\")\nT = TypeVar(\"T\")\ndef outer(f: Callable[Concatenate[str, Po], object]):\n    x = is_inty(f)\n    reveal_type(x, expected_text=\"(str, **Po@outer) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "documentation": {}
    },
    {
        "label": "Po",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "peekOfCode": "Po = ParamSpec(\"Po\")\nT = TypeVar(\"T\")\ndef outer(f: Callable[Concatenate[str, Po], object]):\n    x = is_inty(f)\n    reveal_type(x, expected_text=\"(str, **Po@outer) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "peekOfCode": "T = TypeVar(\"T\")\ndef outer(f: Callable[Concatenate[str, Po], object]):\n    x = is_inty(f)\n    reveal_type(x, expected_text=\"(str, **Po@outer) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec23",
        "documentation": {}
    },
    {
        "label": "_callable_cache",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "class _callable_cache(Protocol[P, T]):\n    foo: int = 0\n    val: T\n    def __init__(self, val: T) -> None:\n        self.val = val\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.val\nclass _wrapped_cache(_callable_cache[P, T], Generic[O, P, T]):\n    @overload\n    def __get__(  # type: ignore",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "_wrapped_cache",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "class _wrapped_cache(_callable_cache[P, T], Generic[O, P, T]):\n    @overload\n    def __get__(  # type: ignore\n        self, instance: None, owner: type[O]\n    ) -> _callable_cache[Concatenate[O, P], T]:\n        ...\n    @overload\n    def __get__(self, instance: O, owner: type[O]) -> Self:\n        ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "class A:\n    @cache\n    def in_class(self, a: int, b: str) -> str:\n        ...\nreveal_type(not_in_class, expected_text=\"_wrapped_cache[Any, (a: int, b: str), str]\")\nnot_in_class(1, \"\")\na = A()\nreveal_type(a.in_class, expected_text=\"_wrapped_cache[A, (a: int, b: str), str]\")\na.in_class(1, \"\")\nreveal_type(A.in_class, expected_text=\"_callable_cache[(A, a: int, b: str), str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "def cache(fn: Callable[Concatenate[A, P], T]) -> _wrapped_cache[A, P, T]:  # type: ignore\n    ...\n@overload\ndef cache(fn: Callable[P, T]) -> _wrapped_cache[Any, P, T]:\n    ...\n@cache\ndef not_in_class(a: int, b: str) -> str:\n    ...\nclass A:\n    @cache",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "cache",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "def cache(fn: Callable[P, T]) -> _wrapped_cache[Any, P, T]:\n    ...\n@cache\ndef not_in_class(a: int, b: str) -> str:\n    ...\nclass A:\n    @cache\n    def in_class(self, a: int, b: str) -> str:\n        ...\nreveal_type(not_in_class, expected_text=\"_wrapped_cache[Any, (a: int, b: str), str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "not_in_class",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "def not_in_class(a: int, b: str) -> str:\n    ...\nclass A:\n    @cache\n    def in_class(self, a: int, b: str) -> str:\n        ...\nreveal_type(not_in_class, expected_text=\"_wrapped_cache[Any, (a: int, b: str), str]\")\nnot_in_class(1, \"\")\na = A()\nreveal_type(a.in_class, expected_text=\"_wrapped_cache[A, (a: int, b: str), str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "T = TypeVar(\"T\")\nO = TypeVar(\"O\")\nP = ParamSpec(\"P\")\nclass _callable_cache(Protocol[P, T]):\n    foo: int = 0\n    val: T\n    def __init__(self, val: T) -> None:\n        self.val = val\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.val",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "O",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "O = TypeVar(\"O\")\nP = ParamSpec(\"P\")\nclass _callable_cache(Protocol[P, T]):\n    foo: int = 0\n    val: T\n    def __init__(self, val: T) -> None:\n        self.val = val\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.val\nclass _wrapped_cache(_callable_cache[P, T], Generic[O, P, T]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "P = ParamSpec(\"P\")\nclass _callable_cache(Protocol[P, T]):\n    foo: int = 0\n    val: T\n    def __init__(self, val: T) -> None:\n        self.val = val\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.val\nclass _wrapped_cache(_callable_cache[P, T], Generic[O, P, T]):\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "peekOfCode": "a = A()\nreveal_type(a.in_class, expected_text=\"_wrapped_cache[A, (a: int, b: str), str]\")\na.in_class(1, \"\")\nreveal_type(A.in_class, expected_text=\"_callable_cache[(A, a: int, b: str), str]\")\nA.in_class(a, 1, \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec24",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "class Context:\n    ...\nCommandHandler = Callable[Concatenate[Context, P], Any]\nclass Command(Generic[P]):\n    def __init__(\n        self,\n        handler: CommandHandler[P],\n    ) -> None:\n        ...\ndef handler_no_args(ctx: Context) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "class Command(Generic[P]):\n    def __init__(\n        self,\n        handler: CommandHandler[P],\n    ) -> None:\n        ...\ndef handler_no_args(ctx: Context) -> None:\n    ...\ndef handler_one_arg(ctx: Context, a: int) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "handler_no_args",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "def handler_no_args(ctx: Context) -> None:\n    ...\ndef handler_one_arg(ctx: Context, a: int) -> None:\n    ...\ncmd_no_args = Command(handler_no_args)\nreveal_type(cmd_no_args, expected_text=\"Command[()]\")\ncmd_one_arg = Command(handler_one_arg)\nreveal_type(cmd_one_arg, expected_text=\"Command[(a: int)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "handler_one_arg",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "def handler_one_arg(ctx: Context, a: int) -> None:\n    ...\ncmd_no_args = Command(handler_no_args)\nreveal_type(cmd_no_args, expected_text=\"Command[()]\")\ncmd_one_arg = Command(handler_one_arg)\nreveal_type(cmd_one_arg, expected_text=\"Command[(a: int)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "P = ParamSpec(\"P\")\nclass Context:\n    ...\nCommandHandler = Callable[Concatenate[Context, P], Any]\nclass Command(Generic[P]):\n    def __init__(\n        self,\n        handler: CommandHandler[P],\n    ) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "CommandHandler",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "CommandHandler = Callable[Concatenate[Context, P], Any]\nclass Command(Generic[P]):\n    def __init__(\n        self,\n        handler: CommandHandler[P],\n    ) -> None:\n        ...\ndef handler_no_args(ctx: Context) -> None:\n    ...\ndef handler_one_arg(ctx: Context, a: int) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "cmd_no_args",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "cmd_no_args = Command(handler_no_args)\nreveal_type(cmd_no_args, expected_text=\"Command[()]\")\ncmd_one_arg = Command(handler_one_arg)\nreveal_type(cmd_one_arg, expected_text=\"Command[(a: int)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "cmd_one_arg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "peekOfCode": "cmd_one_arg = Command(handler_one_arg)\nreveal_type(cmd_one_arg, expected_text=\"Command[(a: int)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec25",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "peekOfCode": "class A(Generic[P]):\n    def __init__(self, func: Callable[P, Any]) -> None:\n        ...\ndef func1(baz: A[Concatenate[int, P]]) -> A[P]:\n    ...\ndef test(a: int, b: str) -> str:\n    ...\nval1 = A(test)\nreveal_type(val1, expected_text=\"A[(a: int, b: str)]\")\nval2 = func1(val1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "peekOfCode": "def func1(baz: A[Concatenate[int, P]]) -> A[P]:\n    ...\ndef test(a: int, b: str) -> str:\n    ...\nval1 = A(test)\nreveal_type(val1, expected_text=\"A[(a: int, b: str)]\")\nval2 = func1(val1)\nreveal_type(val2, expected_text=\"A[(b: str)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "peekOfCode": "def test(a: int, b: str) -> str:\n    ...\nval1 = A(test)\nreveal_type(val1, expected_text=\"A[(a: int, b: str)]\")\nval2 = func1(val1)\nreveal_type(val2, expected_text=\"A[(b: str)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "peekOfCode": "P = ParamSpec(\"P\")\nclass A(Generic[P]):\n    def __init__(self, func: Callable[P, Any]) -> None:\n        ...\ndef func1(baz: A[Concatenate[int, P]]) -> A[P]:\n    ...\ndef test(a: int, b: str) -> str:\n    ...\nval1 = A(test)\nreveal_type(val1, expected_text=\"A[(a: int, b: str)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "peekOfCode": "val1 = A(test)\nreveal_type(val1, expected_text=\"A[(a: int, b: str)]\")\nval2 = func1(val1)\nreveal_type(val2, expected_text=\"A[(b: str)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "documentation": {}
    },
    {
        "label": "val2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "peekOfCode": "val2 = func1(val1)\nreveal_type(val2, expected_text=\"A[(b: str)]\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec26",
        "documentation": {}
    },
    {
        "label": "Handler",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "class Handler(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nclass ConcatHandler(Protocol[P]):\n    def __call__(self, a: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nConcatCallableHandler: TypeAlias = Callable[Concatenate[int, P], None]\nhandler_callable1: Callable[..., None] = func1\nconcat_handler_callable1: ConcatCallableHandler[...] = func1\n# This should generate an error because the first param of func2 is not int.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "ConcatHandler",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "class ConcatHandler(Protocol[P]):\n    def __call__(self, a: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nConcatCallableHandler: TypeAlias = Callable[Concatenate[int, P], None]\nhandler_callable1: Callable[..., None] = func1\nconcat_handler_callable1: ConcatCallableHandler[...] = func1\n# This should generate an error because the first param of func2 is not int.\nconcat_handler_callable2: ConcatCallableHandler[...] = func2\nhandler1: Handler[...] = func1\nconcat_handler1: ConcatHandler[...] = func1",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "class Command(Generic[P]):\n    def __init__(self, handler: Handler[P]) -> None:\n        self.handler: Handler[P] = handler\ncommands: list[Command[...]] = []\ndef do_something(int_handler: Handler[int], var_args_handler: Handler[P], /) -> None:\n    int_command = Command(int_handler)\n    commands.append(int_command)\n    var_args_command = Command(var_args_handler)\n    commands.append(var_args_command)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "def func1(a: int, b: str) -> None:\n    ...\ndef func2(a: str, b: str) -> None:\n    ...\nclass Handler(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nclass ConcatHandler(Protocol[P]):\n    def __call__(self, a: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "def func2(a: str, b: str) -> None:\n    ...\nclass Handler(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nclass ConcatHandler(Protocol[P]):\n    def __call__(self, a: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nConcatCallableHandler: TypeAlias = Callable[Concatenate[int, P], None]\nhandler_callable1: Callable[..., None] = func1",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "def do_something(int_handler: Handler[int], var_args_handler: Handler[P], /) -> None:\n    int_command = Command(int_handler)\n    commands.append(int_command)\n    var_args_command = Command(var_args_handler)\n    commands.append(var_args_command)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef func1(a: int, b: str) -> None:\n    ...\ndef func2(a: str, b: str) -> None:\n    ...\nclass Handler(Protocol[P]):\n    def __call__(self, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\nclass ConcatHandler(Protocol[P]):\n    def __call__(self, a: int, /, *args: P.args, **kwargs: P.kwargs) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec27",
        "documentation": {}
    },
    {
        "label": "_GenerativeType",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "class _GenerativeType(Protocol):\n    def _generate(self: \"_Self\") -> \"_Self\":\n        ...\ndef generative(\n    fn: Callable[Concatenate[_Self, _Args], None]\n) -> Callable[Concatenate[_Self, _Args], _Self]:\n    @decorator\n    def _generative(\n        fn: Callable[Concatenate[_Self, _Args], None],\n        self: _Self,",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "def decorator(\n    target: Callable[Concatenate[_Fn, _Args], _Ret]\n) -> Callable[[_Fn], Callable[_Args, _Ret]]:\n    ...\nclass _GenerativeType(Protocol):\n    def _generate(self: \"_Self\") -> \"_Self\":\n        ...\ndef generative(\n    fn: Callable[Concatenate[_Self, _Args], None]\n) -> Callable[Concatenate[_Self, _Args], _Self]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "generative",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "def generative(\n    fn: Callable[Concatenate[_Self, _Args], None]\n) -> Callable[Concatenate[_Self, _Args], _Self]:\n    @decorator\n    def _generative(\n        fn: Callable[Concatenate[_Self, _Args], None],\n        self: _Self,\n        *args: _Args.args,\n        **kw: _Args.kwargs\n    ) -> _Self:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "_Fn",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "_Fn = TypeVar(\"_Fn\", bound=Callable[..., Any])\n_Ret = TypeVar(\"_Ret\")\n_Args = ParamSpec(\"_Args\")\n_Self = TypeVar(\"_Self\", bound=\"_GenerativeType\")\ndef decorator(\n    target: Callable[Concatenate[_Fn, _Args], _Ret]\n) -> Callable[[_Fn], Callable[_Args, _Ret]]:\n    ...\nclass _GenerativeType(Protocol):\n    def _generate(self: \"_Self\") -> \"_Self\":",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "_Ret",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "_Ret = TypeVar(\"_Ret\")\n_Args = ParamSpec(\"_Args\")\n_Self = TypeVar(\"_Self\", bound=\"_GenerativeType\")\ndef decorator(\n    target: Callable[Concatenate[_Fn, _Args], _Ret]\n) -> Callable[[_Fn], Callable[_Args, _Ret]]:\n    ...\nclass _GenerativeType(Protocol):\n    def _generate(self: \"_Self\") -> \"_Self\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "_Args",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "_Args = ParamSpec(\"_Args\")\n_Self = TypeVar(\"_Self\", bound=\"_GenerativeType\")\ndef decorator(\n    target: Callable[Concatenate[_Fn, _Args], _Ret]\n) -> Callable[[_Fn], Callable[_Args, _Ret]]:\n    ...\nclass _GenerativeType(Protocol):\n    def _generate(self: \"_Self\") -> \"_Self\":\n        ...\ndef generative(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "_Self",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "peekOfCode": "_Self = TypeVar(\"_Self\", bound=\"_GenerativeType\")\ndef decorator(\n    target: Callable[Concatenate[_Fn, _Args], _Ret]\n) -> Callable[[_Fn], Callable[_Args, _Ret]]:\n    ...\nclass _GenerativeType(Protocol):\n    def _generate(self: \"_Self\") -> \"_Self\":\n        ...\ndef generative(\n    fn: Callable[Concatenate[_Self, _Args], None]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec28",
        "documentation": {}
    },
    {
        "label": "decorator1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "peekOfCode": "def decorator1(f: Callable[P, None]) -> Callable[P, None]:\n    def inner(var: int, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.\n    return inner\ndef decorator2(f: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "documentation": {}
    },
    {
        "label": "decorator2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "peekOfCode": "def decorator2(f: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.\n    return inner\ndef decorator3(f: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def inner(var: str, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "documentation": {}
    },
    {
        "label": "decorator3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "peekOfCode": "def decorator3(f: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def inner(var: str, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.\n    return inner\ndef decorator4(f: Callable[P, None]) -> Callable[Concatenate[str, P], None]:\n    def inner(var: str, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "documentation": {}
    },
    {
        "label": "decorator4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "peekOfCode": "def decorator4(f: Callable[P, None]) -> Callable[Concatenate[str, P], None]:\n    def inner(var: str, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef decorator1(f: Callable[P, None]) -> Callable[P, None]:\n    def inner(var: int, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.\n    return inner\ndef decorator2(f: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    # This should generate an error because the concatenated parameters don't match.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec29",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "class Foo(Generic[Ps, R]):\n    def __init__(self, func: Callable[Ps, R]):\n        self.func = func\ndef transform_foo(f: Callable[Ps, R]) -> Foo[Ps, R]:\n    return Foo(f)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "add_logging",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "def add_logging(f: Callable[Ps, R]) -> Callable[Ps, Awaitable[R]]:\n    async def inner(*args: Ps.args, **kwargs: Ps.kwargs) -> R:\n        await log_to_database()\n        return f(*args, **kwargs)\n    return inner\n@add_logging\ndef foo(x: int, y: str) -> int:\n    return x + 7\nasync def my_async_function():\n    await foo(1, \"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "def foo(x: int, y: str) -> int:\n    return x + 7\nasync def my_async_function():\n    await foo(1, \"A\")\n    # This should generate an error because\n    # the first parameter is not an int.\n    await foo(\"B\", \"2\")\n@overload\ndef bar(x: int) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "def bar(x: int) -> None:\n    ...\n@overload\ndef bar(x: str) -> str:\n    ...\ndef bar(x: Union[int, str]) -> Optional[str]:\n    if isinstance(x, int):\n        return None\n    else:\n        return x",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "def bar(x: str) -> str:\n    ...\ndef bar(x: Union[int, str]) -> Optional[str]:\n    if isinstance(x, int):\n        return None\n    else:\n        return x\n# This should generate an error because ParamSpec cannot\n# be used with an overloaded function.\nx = add_logging(bar)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "def bar(x: Union[int, str]) -> Optional[str]:\n    if isinstance(x, int):\n        return None\n    else:\n        return x\n# This should generate an error because ParamSpec cannot\n# be used with an overloaded function.\nx = add_logging(bar)\nclass Foo(Generic[Ps, R]):\n    def __init__(self, func: Callable[Ps, R]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "transform_foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "def transform_foo(f: Callable[Ps, R]) -> Foo[Ps, R]:\n    return Foo(f)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "Ps",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "Ps = ParamSpec(\"Ps\")\nR = TypeVar(\"R\")\nasync def log_to_database():\n    ...\ndef add_logging(f: Callable[Ps, R]) -> Callable[Ps, Awaitable[R]]:\n    async def inner(*args: Ps.args, **kwargs: Ps.kwargs) -> R:\n        await log_to_database()\n        return f(*args, **kwargs)\n    return inner\n@add_logging",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "R = TypeVar(\"R\")\nasync def log_to_database():\n    ...\ndef add_logging(f: Callable[Ps, R]) -> Callable[Ps, Awaitable[R]]:\n    async def inner(*args: Ps.args, **kwargs: Ps.kwargs) -> R:\n        await log_to_database()\n        return f(*args, **kwargs)\n    return inner\n@add_logging\ndef foo(x: int, y: str) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "peekOfCode": "x = add_logging(bar)\nclass Foo(Generic[Ps, R]):\n    def __init__(self, func: Callable[Ps, R]):\n        self.func = func\ndef transform_foo(f: Callable[Ps, R]) -> Foo[Ps, R]:\n    return Foo(f)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec3",
        "documentation": {}
    },
    {
        "label": "error_decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "peekOfCode": "def error_decorator(\n    error_codes: None = None,\n) -> Callable[[Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R]]:\n    ...\n@overload\ndef error_decorator(\n    error_codes: list[str],\n) -> Callable[\n    [Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R | None]\n]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "documentation": {}
    },
    {
        "label": "error_decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "peekOfCode": "def error_decorator(\n    error_codes: list[str],\n) -> Callable[\n    [Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R | None]\n]:\n    ...\ndef error_decorator(\n    error_codes: list[str] | None = None,\n) -> Callable[\n    [Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R | None]",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "documentation": {}
    },
    {
        "label": "error_decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "peekOfCode": "def error_decorator(\n    error_codes: list[str] | None = None,\n) -> Callable[\n    [Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R | None]\n]:\n    \"\"\"Filter specific errors and raise custom exception for remaining once.\"\"\"\n    def decorator(\n        func: Callable[Concatenate[_T, _P], _R]\n    ) -> Callable[Concatenate[_T, _P], _R | None]:\n        def wrapper(self: _T, *args: _P.args, **kwargs: _P.kwargs) -> _R | None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_R = TypeVar(\"_R\")\n_P = ParamSpec(\"_P\")\n@overload\ndef error_decorator(\n    error_codes: None = None,\n) -> Callable[[Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R]]:\n    ...\n@overload\ndef error_decorator(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "documentation": {}
    },
    {
        "label": "_R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "peekOfCode": "_R = TypeVar(\"_R\")\n_P = ParamSpec(\"_P\")\n@overload\ndef error_decorator(\n    error_codes: None = None,\n) -> Callable[[Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R]]:\n    ...\n@overload\ndef error_decorator(\n    error_codes: list[str],",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "documentation": {}
    },
    {
        "label": "_P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "peekOfCode": "_P = ParamSpec(\"_P\")\n@overload\ndef error_decorator(\n    error_codes: None = None,\n) -> Callable[[Callable[Concatenate[_T, _P], _R]], Callable[Concatenate[_T, _P], _R]]:\n    ...\n@overload\ndef error_decorator(\n    error_codes: list[str],\n) -> Callable[",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec30",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "peekOfCode": "def func1(f: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func2(a: Any) -> None:\n    reveal_type(func1(a, 1), expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "peekOfCode": "def func2(a: Any) -> None:\n    reveal_type(func1(a, 1), expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "peekOfCode": "T = TypeVar(\"T\")\nP = ParamSpec(\"P\")\ndef func1(f: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func2(a: Any) -> None:\n    reveal_type(func1(a, 1), expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef func1(f: Callable[P, T], *args: P.args, **kwargs: P.kwargs) -> T:\n    ...\ndef func2(a: Any) -> None:\n    reveal_type(func1(a, 1), expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec31",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "peekOfCode": "class Class1(Generic[P, T2]):\n    def __init__(self, fn: Callable[P, T2], *args: P.args, **kwargs: P.kwargs) -> None:\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n    def __call__(self) -> T2:\n        return self.fn(*self.args, **self.kwargs)\n# This should generate an error because arguments x and k are missing.\nClass1(add_k)\n# This should generate an error because arguments x has the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "peekOfCode": "class Class2(Generic[P, T1, T2]):\n    def __init__(\n        self, fn: Callable[Concatenate[T1, P], T2], *args: P.args, **kwargs: P.kwargs\n    ) -> None:\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n    def __call__(self, value: T1) -> T2:\n        return self.fn(value, *self.args, **self.kwargs)\n# This should generate an error because argument x is missing.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "documentation": {}
    },
    {
        "label": "add_k",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "peekOfCode": "def add_k(x: int, k: int) -> int:\n    return x + k\nclass Class1(Generic[P, T2]):\n    def __init__(self, fn: Callable[P, T2], *args: P.args, **kwargs: P.kwargs) -> None:\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n    def __call__(self) -> T2:\n        return self.fn(*self.args, **self.kwargs)\n# This should generate an error because arguments x and k are missing.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "peekOfCode": "P = ParamSpec(\"P\")\nT1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\ndef add_k(x: int, k: int) -> int:\n    return x + k\nclass Class1(Generic[P, T2]):\n    def __init__(self, fn: Callable[P, T2], *args: P.args, **kwargs: P.kwargs) -> None:\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\ndef add_k(x: int, k: int) -> int:\n    return x + k\nclass Class1(Generic[P, T2]):\n    def __init__(self, fn: Callable[P, T2], *args: P.args, **kwargs: P.kwargs) -> None:\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n    def __call__(self) -> T2:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "peekOfCode": "T2 = TypeVar(\"T2\")\ndef add_k(x: int, k: int) -> int:\n    return x + k\nclass Class1(Generic[P, T2]):\n    def __init__(self, fn: Callable[P, T2], *args: P.args, **kwargs: P.kwargs) -> None:\n        self.fn = fn\n        self.args = args\n        self.kwargs = kwargs\n    def __call__(self) -> T2:\n        return self.fn(*self.args, **self.kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec32",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "peekOfCode": "def func1(func: Callable[P, int]) -> Callable[P, int]:\n    def inner_func(x: int) -> int:\n        # This should generate a type error.\n        return func()\n    # This should generate a type error.\n    return inner_func\ndef func2(\n    func: Callable[Concatenate[int, P], int]\n) -> Callable[Concatenate[int, P], int]:\n    def inner_func(x: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "peekOfCode": "def func2(\n    func: Callable[Concatenate[int, P], int]\n) -> Callable[Concatenate[int, P], int]:\n    def inner_func(x: int) -> int:\n        # This should generate a type error.\n        return func(x)\n    # This should generate a type error.\n    return inner_func",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef func1(func: Callable[P, int]) -> Callable[P, int]:\n    def inner_func(x: int) -> int:\n        # This should generate a type error.\n        return func()\n    # This should generate a type error.\n    return inner_func\ndef func2(\n    func: Callable[Concatenate[int, P], int]\n) -> Callable[Concatenate[int, P], int]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec33",
        "documentation": {}
    },
    {
        "label": "deprecated",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "peekOfCode": "def deprecated(instead: Optional[str] = None) -> Callable[[Callable[P, T]], Callable[P, T]]:\n    def actual_decorator(func: Callable[P, T]) -> Callable[P, T]:\n        @functools.wraps(func)\n        def decorated(*args: P.args, **kwargs: P.kwargs) -> T:\n            warnings.simplefilter('always', DeprecationWarning)  # turn off filter\n            if instead:\n                fmt = \"{0.__name__} is deprecated, use {1} instead.\"\n            else:\n                fmt = '{0.__name__} is deprecated.'\n            warnings.warn(fmt.format(func, instead), stacklevel=3, category=DeprecationWarning)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "peekOfCode": "T = TypeVar('T')\nP = ParamSpec('P')\ndef deprecated(instead: Optional[str] = None) -> Callable[[Callable[P, T]], Callable[P, T]]:\n    def actual_decorator(func: Callable[P, T]) -> Callable[P, T]:\n        @functools.wraps(func)\n        def decorated(*args: P.args, **kwargs: P.kwargs) -> T:\n            warnings.simplefilter('always', DeprecationWarning)  # turn off filter\n            if instead:\n                fmt = \"{0.__name__} is deprecated, use {1} instead.\"\n            else:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "peekOfCode": "P = ParamSpec('P')\ndef deprecated(instead: Optional[str] = None) -> Callable[[Callable[P, T]], Callable[P, T]]:\n    def actual_decorator(func: Callable[P, T]) -> Callable[P, T]:\n        @functools.wraps(func)\n        def decorated(*args: P.args, **kwargs: P.kwargs) -> T:\n            warnings.simplefilter('always', DeprecationWarning)  # turn off filter\n            if instead:\n                fmt = \"{0.__name__} is deprecated, use {1} instead.\"\n            else:\n                fmt = '{0.__name__} is deprecated.'",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec34",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "peekOfCode": "def func1(x: Callable[P, int], y: Callable[P, int]) -> Callable[P, bool]:\n    ...\ndef a1(p0: int) -> int:\n    ...\ndef a2(p0: int, p2: str) -> int:\n    ...\nfunc1(a1, a1)\nfunc1(a2, a2)\n# This should generate an error because a1 and a2 are not compatible.\nfunc1(a1, a2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "peekOfCode": "def a1(p0: int) -> int:\n    ...\ndef a2(p0: int, p2: str) -> int:\n    ...\nfunc1(a1, a1)\nfunc1(a2, a2)\n# This should generate an error because a1 and a2 are not compatible.\nfunc1(a1, a2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "peekOfCode": "def a2(p0: int, p2: str) -> int:\n    ...\nfunc1(a1, a1)\nfunc1(a2, a2)\n# This should generate an error because a1 and a2 are not compatible.\nfunc1(a1, a2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef func1(x: Callable[P, int], y: Callable[P, int]) -> Callable[P, bool]:\n    ...\ndef a1(p0: int) -> int:\n    ...\ndef a2(p0: int, p2: str) -> int:\n    ...\nfunc1(a1, a1)\nfunc1(a2, a2)\n# This should generate an error because a1 and a2 are not compatible.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec35",
        "documentation": {}
    },
    {
        "label": "TakesFunctionWithArguments",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "peekOfCode": "class TakesFunctionWithArguments(Protocol):\n    def __call__(\n        self, func: Callable[P, T], *args: P.args, **kwargs: P.kwargs\n    ) -> Future[T]:\n        ...\n@contextlib.contextmanager\ndef submit_wrapper() -> Iterator[TakesFunctionWithArguments]:\n    with ThreadPoolExecutor() as pool:\n        def my_submit(\n            func: Callable[P, T], *args: P.args, **kwargs: P.kwargs",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "documentation": {}
    },
    {
        "label": "submit_wrapper",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "peekOfCode": "def submit_wrapper() -> Iterator[TakesFunctionWithArguments]:\n    with ThreadPoolExecutor() as pool:\n        def my_submit(\n            func: Callable[P, T], *args: P.args, **kwargs: P.kwargs\n        ) -> Future[T]:\n            return pool.submit(func, *args, **kwargs)\n        yield my_submit\ndef foo(a: int, b: int, c: int) -> int:\n    return a + b + c\nwith submit_wrapper() as submit:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "peekOfCode": "def foo(a: int, b: int, c: int) -> int:\n    return a + b + c\nwith submit_wrapper() as submit:\n    submit(foo, a=1, b=2, c=3)\n    submit(foo, 1, 2, 3)\n    # This should generate an error.\n    submit(foo, a=1, b=2, d=3)\n    # This should generate an error.\n    submit(foo, 1, 2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "peekOfCode": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nclass TakesFunctionWithArguments(Protocol):\n    def __call__(\n        self, func: Callable[P, T], *args: P.args, **kwargs: P.kwargs\n    ) -> Future[T]:\n        ...\n@contextlib.contextmanager\ndef submit_wrapper() -> Iterator[TakesFunctionWithArguments]:\n    with ThreadPoolExecutor() as pool:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "peekOfCode": "T = TypeVar(\"T\")\nclass TakesFunctionWithArguments(Protocol):\n    def __call__(\n        self, func: Callable[P, T], *args: P.args, **kwargs: P.kwargs\n    ) -> Future[T]:\n        ...\n@contextlib.contextmanager\ndef submit_wrapper() -> Iterator[TakesFunctionWithArguments]:\n    with ThreadPoolExecutor() as pool:\n        def my_submit(",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec36",
        "documentation": {}
    },
    {
        "label": "BulkFactory",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "peekOfCode": "class BulkFactory(Protocol[T]):\n    def __call__(\n        self,\n        n: int,\n        /,\n        *args: Any,\n        **kwargs: Any,\n    ) -> List[T]:\n        ...\ndef make_n(maker: Callable[P, T]) -> BulkFactory[T]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "documentation": {}
    },
    {
        "label": "make_n",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "peekOfCode": "def make_n(maker: Callable[P, T]) -> BulkFactory[T]:\n    def inner(n: int, /, *args: P.args, **kwargs: P.kwargs) -> List[T]:\n        return [maker(*args, **kwargs) for _ in range(n)]\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "peekOfCode": "T = TypeVar(\"T\")\nP = ParamSpec(\"P\")\nclass BulkFactory(Protocol[T]):\n    def __call__(\n        self,\n        n: int,\n        /,\n        *args: Any,\n        **kwargs: Any,\n    ) -> List[T]:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "peekOfCode": "P = ParamSpec(\"P\")\nclass BulkFactory(Protocol[T]):\n    def __call__(\n        self,\n        n: int,\n        /,\n        *args: Any,\n        **kwargs: Any,\n    ) -> List[T]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec37",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "peekOfCode": "class Foo(Generic[P, T]):\n    def __init__(self, callback: Callable[P, T]):\n        self.callback = callback\n    def method(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.callback(*args, **kwargs)\ndef func(obj: object, **kwargs: object) -> object:\n    ...\nreveal_type(Foo(func).method, expected_text=\"(obj: object, **kwargs: object) -> object\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "peekOfCode": "def func(obj: object, **kwargs: object) -> object:\n    ...\nreveal_type(Foo(func).method, expected_text=\"(obj: object, **kwargs: object) -> object\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "peekOfCode": "P = ParamSpec(\"P\")\nT = TypeVar(\"T\")\nclass Foo(Generic[P, T]):\n    def __init__(self, callback: Callable[P, T]):\n        self.callback = callback\n    def method(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.callback(*args, **kwargs)\ndef func(obj: object, **kwargs: object) -> object:\n    ...\nreveal_type(Foo(func).method, expected_text=\"(obj: object, **kwargs: object) -> object\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Foo(Generic[P, T]):\n    def __init__(self, callback: Callable[P, T]):\n        self.callback = callback\n    def method(self, *args: P.args, **kwargs: P.kwargs) -> T:\n        return self.callback(*args, **kwargs)\ndef func(obj: object, **kwargs: object) -> object:\n    ...\nreveal_type(Foo(func).method, expected_text=\"(obj: object, **kwargs: object) -> object\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec38",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "class Request:\n    ...\ndef with_request(f: Callable[Concatenate[Request, P], R]) -> Callable[P, R]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n        return f(Request(), *args, **kwargs)\n    return inner\n@with_request\ndef takes_int_str(request: Request, x: int, y: str) -> int:\n    # use request\n    return x + 7",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "with_request",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def with_request(f: Callable[Concatenate[Request, P], R]) -> Callable[P, R]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n        return f(Request(), *args, **kwargs)\n    return inner\n@with_request\ndef takes_int_str(request: Request, x: int, y: str) -> int:\n    # use request\n    return x + 7\ntakes_int_str(1, \"A\")\n# This should generate an error because the first arg",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "takes_int_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def takes_int_str(request: Request, x: int, y: str) -> int:\n    # use request\n    return x + 7\ntakes_int_str(1, \"A\")\n# This should generate an error because the first arg\n# is the incorrect type.\ntakes_int_str(\"B\", \"A\")\n# This should generate an error because there are too\n# many parameters.\ntakes_int_str(1, \"A\", 2)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "decorator1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def decorator1(f: Callable[Concatenate[P, P], int]) -> Callable[P, int]:\n    ...\n# This should generate an error because the last type arg\n# for Concatenate should be a ParamSpec.\ndef decorator2(f: Callable[Concatenate[int, int], int]) -> Callable[P, int]:\n    ...\n# This should generate an error because Concatenate is missing\n# its type arguments.\ndef decorator3(f: Callable[Concatenate, int]) -> Callable[P, int]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "decorator2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def decorator2(f: Callable[Concatenate[int, int], int]) -> Callable[P, int]:\n    ...\n# This should generate an error because Concatenate is missing\n# its type arguments.\ndef decorator3(f: Callable[Concatenate, int]) -> Callable[P, int]:\n    ...\ndef decorator4(func: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def wrapper(x: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\n    return wrapper",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "decorator3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def decorator3(f: Callable[Concatenate, int]) -> Callable[P, int]:\n    ...\ndef decorator4(func: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def wrapper(x: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\n    return wrapper\ndef func1(func: Callable[Concatenate[int, P], None]) -> Callable[P, None]:\n    ...\ndef func2(a: int, b: str, c: str) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "decorator4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def decorator4(func: Callable[P, None]) -> Callable[Concatenate[int, P], None]:\n    def wrapper(x: int, /, *args: P.args, **kwargs: P.kwargs) -> None:\n        ...\n    return wrapper\ndef func1(func: Callable[Concatenate[int, P], None]) -> Callable[P, None]:\n    ...\ndef func2(a: int, b: str, c: str) -> None:\n    ...\ndef func3(a: int, /, b: str, c: str) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func1(func: Callable[Concatenate[int, P], None]) -> Callable[P, None]:\n    ...\ndef func2(a: int, b: str, c: str) -> None:\n    ...\ndef func3(a: int, /, b: str, c: str) -> None:\n    ...\ndef func4(a: int, b: str, /, c: str) -> None:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(b: str, c: str) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func2(a: int, b: str, c: str) -> None:\n    ...\ndef func3(a: int, /, b: str, c: str) -> None:\n    ...\ndef func4(a: int, b: str, /, c: str) -> None:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(b: str, c: str) -> None\")\nv2 = func1(func3)\nreveal_type(v2, expected_text=\"(b: str, c: str) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func3(a: int, /, b: str, c: str) -> None:\n    ...\ndef func4(a: int, b: str, /, c: str) -> None:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(b: str, c: str) -> None\")\nv2 = func1(func3)\nreveal_type(v2, expected_text=\"(b: str, c: str) -> None\")\nv3 = func1(func4)\nreveal_type(v3, expected_text=\"(b: str, /, c: str) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func4(a: int, b: str, /, c: str) -> None:\n    ...\nv1 = func1(func2)\nreveal_type(v1, expected_text=\"(b: str, c: str) -> None\")\nv2 = func1(func3)\nreveal_type(v2, expected_text=\"(b: str, c: str) -> None\")\nv3 = func1(func4)\nreveal_type(v3, expected_text=\"(b: str, /, c: str) -> None\")\ndef func5(__fn: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func5(__fn: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:\n    ...\ndef func6(name: str, *args: str):\n    ...\nv5 = func5(func6, \"a\", \"b\", \"c\")\n# This should generate an error because 1 isn't assignable to str.\nv6 = func5(func6, \"a\", \"b\", \"c\", 1)\ndef func7(name: str, **kwargs: str):\n    ...\nv7 = func5(func7, \"a\", b=\"b\", c=\"c\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func6(name: str, *args: str):\n    ...\nv5 = func5(func6, \"a\", \"b\", \"c\")\n# This should generate an error because 1 isn't assignable to str.\nv6 = func5(func6, \"a\", \"b\", \"c\", 1)\ndef func7(name: str, **kwargs: str):\n    ...\nv7 = func5(func7, \"a\", b=\"b\", c=\"c\")\n# This should generate an error because 1 isn't assignable to str.\nv8 = func5(func7, \"a\", b=\"b\", c=1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "def func7(name: str, **kwargs: str):\n    ...\nv7 = func5(func7, \"a\", b=\"b\", c=\"c\")\n# This should generate an error because 1 isn't assignable to str.\nv8 = func5(func7, \"a\", b=\"b\", c=1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\nclass Request:\n    ...\ndef with_request(f: Callable[Concatenate[Request, P], R]) -> Callable[P, R]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n        return f(Request(), *args, **kwargs)\n    return inner\n@with_request\ndef takes_int_str(request: Request, x: int, y: str) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "R = TypeVar(\"R\")\nclass Request:\n    ...\ndef with_request(f: Callable[Concatenate[Request, P], R]) -> Callable[P, R]:\n    def inner(*args: P.args, **kwargs: P.kwargs) -> R:\n        return f(Request(), *args, **kwargs)\n    return inner\n@with_request\ndef takes_int_str(request: Request, x: int, y: str) -> int:\n    # use request",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v1 = func1(func2)\nreveal_type(v1, expected_text=\"(b: str, c: str) -> None\")\nv2 = func1(func3)\nreveal_type(v2, expected_text=\"(b: str, c: str) -> None\")\nv3 = func1(func4)\nreveal_type(v3, expected_text=\"(b: str, /, c: str) -> None\")\ndef func5(__fn: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:\n    ...\ndef func6(name: str, *args: str):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v2 = func1(func3)\nreveal_type(v2, expected_text=\"(b: str, c: str) -> None\")\nv3 = func1(func4)\nreveal_type(v3, expected_text=\"(b: str, /, c: str) -> None\")\ndef func5(__fn: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:\n    ...\ndef func6(name: str, *args: str):\n    ...\nv5 = func5(func6, \"a\", \"b\", \"c\")\n# This should generate an error because 1 isn't assignable to str.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v3 = func1(func4)\nreveal_type(v3, expected_text=\"(b: str, /, c: str) -> None\")\ndef func5(__fn: Callable[P, R], *args: P.args, **kwargs: P.kwargs) -> R:\n    ...\ndef func6(name: str, *args: str):\n    ...\nv5 = func5(func6, \"a\", \"b\", \"c\")\n# This should generate an error because 1 isn't assignable to str.\nv6 = func5(func6, \"a\", \"b\", \"c\", 1)\ndef func7(name: str, **kwargs: str):",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v5 = func5(func6, \"a\", \"b\", \"c\")\n# This should generate an error because 1 isn't assignable to str.\nv6 = func5(func6, \"a\", \"b\", \"c\", 1)\ndef func7(name: str, **kwargs: str):\n    ...\nv7 = func5(func7, \"a\", b=\"b\", c=\"c\")\n# This should generate an error because 1 isn't assignable to str.\nv8 = func5(func7, \"a\", b=\"b\", c=1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v6 = func5(func6, \"a\", \"b\", \"c\", 1)\ndef func7(name: str, **kwargs: str):\n    ...\nv7 = func5(func7, \"a\", b=\"b\", c=\"c\")\n# This should generate an error because 1 isn't assignable to str.\nv8 = func5(func7, \"a\", b=\"b\", c=1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v7 = func5(func7, \"a\", b=\"b\", c=\"c\")\n# This should generate an error because 1 isn't assignable to str.\nv8 = func5(func7, \"a\", b=\"b\", c=1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "v8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "peekOfCode": "v8 = func5(func7, \"a\", b=\"b\", c=1)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec4",
        "documentation": {}
    },
    {
        "label": "decorator",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "def decorator(fn: Callable[P, R]) -> Callable[P, R]:\n    return fn\ndef foo(*, value: str) -> None:\n    ...\nbar = decorator(foo)\nreveal_type(bar, expected_text=\"(*, value: str) -> None\")\ndef baz(value: str, /) -> None:\n    ...\nqux = decorator(baz)\nreveal_type(qux, expected_text=\"(value: str, /) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "def foo(*, value: str) -> None:\n    ...\nbar = decorator(foo)\nreveal_type(bar, expected_text=\"(*, value: str) -> None\")\ndef baz(value: str, /) -> None:\n    ...\nqux = decorator(baz)\nreveal_type(qux, expected_text=\"(value: str, /) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "def baz(value: str, /) -> None:\n    ...\nqux = decorator(baz)\nreveal_type(qux, expected_text=\"(value: str, /) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\")\ndef decorator(fn: Callable[P, R]) -> Callable[P, R]:\n    return fn\ndef foo(*, value: str) -> None:\n    ...\nbar = decorator(foo)\nreveal_type(bar, expected_text=\"(*, value: str) -> None\")\ndef baz(value: str, /) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "R = TypeVar(\"R\")\ndef decorator(fn: Callable[P, R]) -> Callable[P, R]:\n    return fn\ndef foo(*, value: str) -> None:\n    ...\nbar = decorator(foo)\nreveal_type(bar, expected_text=\"(*, value: str) -> None\")\ndef baz(value: str, /) -> None:\n    ...\nqux = decorator(baz)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "bar = decorator(foo)\nreveal_type(bar, expected_text=\"(*, value: str) -> None\")\ndef baz(value: str, /) -> None:\n    ...\nqux = decorator(baz)\nreveal_type(qux, expected_text=\"(value: str, /) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "qux",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "peekOfCode": "qux = decorator(baz)\nreveal_type(qux, expected_text=\"(value: str, /) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec5",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "peekOfCode": "def foo(fn: Callable[P, V]) -> Callable[P, V]:\n    ...\ndef bar(baz: str, qux: str = \"\") -> str:\n    ...\nfoo(bar)(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "peekOfCode": "def bar(baz: str, qux: str = \"\") -> str:\n    ...\nfoo(bar)(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "peekOfCode": "V = TypeVar(\"V\")\nP = ParamSpec(\"P\")\ndef foo(fn: Callable[P, V]) -> Callable[P, V]:\n    ...\ndef bar(baz: str, qux: str = \"\") -> str:\n    ...\nfoo(bar)(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef foo(fn: Callable[P, V]) -> Callable[P, V]:\n    ...\ndef bar(baz: str, qux: str = \"\") -> str:\n    ...\nfoo(bar)(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec6",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "peekOfCode": "class Baz(Generic[T]):\n    def qux(self, v: T) -> None:\n        ...\nbaz: Baz[int] = Baz()\nreveal_type(baz.qux, expected_text=\"(v: int) -> None\")\nreveal_type(foo(baz.qux), expected_text=\"(v: int) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "peekOfCode": "def foo(f: Callable[P, T]) -> Callable[P, T]:\n    ...\nclass Baz(Generic[T]):\n    def qux(self, v: T) -> None:\n        ...\nbaz: Baz[int] = Baz()\nreveal_type(baz.qux, expected_text=\"(v: int) -> None\")\nreveal_type(foo(baz.qux), expected_text=\"(v: int) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "peekOfCode": "T = TypeVar(\"T\")\nP = ParamSpec(\"P\")\ndef foo(f: Callable[P, T]) -> Callable[P, T]:\n    ...\nclass Baz(Generic[T]):\n    def qux(self, v: T) -> None:\n        ...\nbaz: Baz[int] = Baz()\nreveal_type(baz.qux, expected_text=\"(v: int) -> None\")\nreveal_type(foo(baz.qux), expected_text=\"(v: int) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef foo(f: Callable[P, T]) -> Callable[P, T]:\n    ...\nclass Baz(Generic[T]):\n    def qux(self, v: T) -> None:\n        ...\nbaz: Baz[int] = Baz()\nreveal_type(baz.qux, expected_text=\"(v: int) -> None\")\nreveal_type(foo(baz.qux), expected_text=\"(v: int) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec7",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "peekOfCode": "def add(f: Callable[P, int]) -> Callable[Concatenate[str, P], None]:\n    def func1(s: str, *args: P.args, **kwargs: P.kwargs) -> None:  # Accepted\n        pass\n    # Parameter 's' and 't' should generate an error according to PEP 612\n    def func2(*args: P.args, s: str, t: int, **kwargs: P.kwargs) -> None:  # Rejected\n        pass\n    return func1  # Accepted\ndef remove(f: Callable[Concatenate[int, P], int]) -> Callable[P, None]:\n    def foo(*args: P.args, **kwargs: P.kwargs) -> None:\n        f(1, *args, **kwargs)  # Accepted",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "documentation": {}
    },
    {
        "label": "remove",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "peekOfCode": "def remove(f: Callable[Concatenate[int, P], int]) -> Callable[P, None]:\n    def foo(*args: P.args, **kwargs: P.kwargs) -> None:\n        f(1, *args, **kwargs)  # Accepted\n        # Should generate an error because positional parameter\n        # after *args is not allowed.\n        f(*args, 1, **kwargs)  # Rejected\n        # Should generate an error because positional parameter\n        # is missing.\n        f(*args, **kwargs)  # Rejected\n    return foo",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "documentation": {}
    },
    {
        "label": "outer",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "peekOfCode": "def outer(f: Callable[P, None]) -> Callable[P, None]:\n    def foo(x: int, *args: P.args, **kwargs: P.kwargs) -> None:\n        f(*args, **kwargs)\n    def bar(*args: P.args, **kwargs: P.kwargs) -> None:\n        foo(1, *args, **kwargs)  # Accepted\n        # This should generate an error because keyword parameters\n        # are not allowed in this situation.\n        foo(x=1, *args, **kwargs)  # Rejected\n    return bar",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef add(f: Callable[P, int]) -> Callable[Concatenate[str, P], None]:\n    def func1(s: str, *args: P.args, **kwargs: P.kwargs) -> None:  # Accepted\n        pass\n    # Parameter 's' and 't' should generate an error according to PEP 612\n    def func2(*args: P.args, s: str, t: int, **kwargs: P.kwargs) -> None:  # Rejected\n        pass\n    return func1  # Accepted\ndef remove(f: Callable[Concatenate[int, P], int]) -> Callable[P, None]:\n    def foo(*args: P.args, **kwargs: P.kwargs) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec8",
        "documentation": {}
    },
    {
        "label": "twice",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "peekOfCode": "def twice(f: Callable[P, int], *args: P.args, **kwargs: P.kwargs) -> int:\n    return f(*args, **kwargs) + f(*args, **kwargs)\ndef a_int_b_str(a: int, b: str) -> int:\n    return 1\ntwice(a_int_b_str, 1, \"A\")  # Accepted\ntwice(a_int_b_str, b=\"A\", a=1)  # Accepted\ntwice(a_int_b_str, 1, b=\"hi\")  # Accepted\n# This should generate an error because b is a incorrect type.\ntwice(a_int_b_str, 1, b=2)  # Rejected\n# This should generate an error because a is a incorrect type.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "documentation": {}
    },
    {
        "label": "a_int_b_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "peekOfCode": "def a_int_b_str(a: int, b: str) -> int:\n    return 1\ntwice(a_int_b_str, 1, \"A\")  # Accepted\ntwice(a_int_b_str, b=\"A\", a=1)  # Accepted\ntwice(a_int_b_str, 1, b=\"hi\")  # Accepted\n# This should generate an error because b is a incorrect type.\ntwice(a_int_b_str, 1, b=2)  # Rejected\n# This should generate an error because a is a incorrect type.\ntwice(a_int_b_str, \"1\", b=\"2\")  # Rejected\n# This should generate an error because c is unknown.",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "peekOfCode": "def func1(func: Callable[P, Any], *args: P.args, **kwargs: P.kwargs):\n    pass\ndef func2(func: Callable[P, Any], *args: P.args, **kwargs: P.kwargs):\n    func1(func, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "peekOfCode": "def func2(func: Callable[P, Any], *args: P.args, **kwargs: P.kwargs):\n    func1(func, *args, **kwargs)",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "description": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "peekOfCode": "P = ParamSpec(\"P\")\ndef twice(f: Callable[P, int], *args: P.args, **kwargs: P.kwargs) -> int:\n    return f(*args, **kwargs) + f(*args, **kwargs)\ndef a_int_b_str(a: int, b: str) -> int:\n    return 1\ntwice(a_int_b_str, 1, \"A\")  # Accepted\ntwice(a_int_b_str, b=\"A\", a=1)  # Accepted\ntwice(a_int_b_str, 1, b=\"hi\")  # Accepted\n# This should generate an error because b is a incorrect type.\ntwice(a_int_b_str, 1, b=2)  # Rejected",
        "detail": "packages.pyright-internal.src.tests.samples.paramSpec9",
        "documentation": {}
    },
    {
        "label": "Parent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramType1",
        "description": "packages.pyright-internal.src.tests.samples.paramType1",
        "peekOfCode": "class Parent:\n    pass\n_T = TypeVar(\"_T\")\n_TChild1 = TypeVar(\"_TChild1\", bound=\"Child1\")\nclass Child1:\n    def m1(self: \"Child1\"):\n        ...\n    # This should generate an error.\n    def m2(self: Parent):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramType1",
        "documentation": {}
    },
    {
        "label": "Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramType1",
        "description": "packages.pyright-internal.src.tests.samples.paramType1",
        "peekOfCode": "class Child1:\n    def m1(self: \"Child1\"):\n        ...\n    # This should generate an error.\n    def m2(self: Parent):\n        ...\n    # This should generate an error.\n    def m3(self: Type[\"Child1\"]):\n        ...\n    def m4(self: _TChild1) -> _TChild1:",
        "detail": "packages.pyright-internal.src.tests.samples.paramType1",
        "documentation": {}
    },
    {
        "label": "MyMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.paramType1",
        "description": "packages.pyright-internal.src.tests.samples.paramType1",
        "peekOfCode": "class MyMeta(type):\n    def m1(self: Type[_T]) -> Iterator[_T]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramType1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramType1",
        "description": "packages.pyright-internal.src.tests.samples.paramType1",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_TChild1 = TypeVar(\"_TChild1\", bound=\"Child1\")\nclass Child1:\n    def m1(self: \"Child1\"):\n        ...\n    # This should generate an error.\n    def m2(self: Parent):\n        ...\n    # This should generate an error.\n    def m3(self: Type[\"Child1\"]):",
        "detail": "packages.pyright-internal.src.tests.samples.paramType1",
        "documentation": {}
    },
    {
        "label": "_TChild1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.paramType1",
        "description": "packages.pyright-internal.src.tests.samples.paramType1",
        "peekOfCode": "_TChild1 = TypeVar(\"_TChild1\", bound=\"Child1\")\nclass Child1:\n    def m1(self: \"Child1\"):\n        ...\n    # This should generate an error.\n    def m2(self: Parent):\n        ...\n    # This should generate an error.\n    def m3(self: Type[\"Child1\"]):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.paramType1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.parserRecovery1",
        "description": "packages.pyright-internal.src.tests.samples.parserRecovery1",
        "peekOfCode": "def func1(input: str):\n    if input[0] == \"[\":\ndef func2(ch: str):",
        "detail": "packages.pyright-internal.src.tests.samples.parserRecovery1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.parserRecovery1",
        "description": "packages.pyright-internal.src.tests.samples.parserRecovery1",
        "peekOfCode": "def func2(ch: str):",
        "detail": "packages.pyright-internal.src.tests.samples.parserRecovery1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.parserRecovery2",
        "description": "packages.pyright-internal.src.tests.samples.parserRecovery2",
        "peekOfCode": "def func1(input: str):\n    if input[0] == \"[\":\n    def func2(ch: str):",
        "detail": "packages.pyright-internal.src.tests.samples.parserRecovery2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.parserRecovery3",
        "description": "packages.pyright-internal.src.tests.samples.parserRecovery3",
        "peekOfCode": "def func1(input: str):\n    if True:\n        if False:\n            if False:\ndef func2(ch: str):",
        "detail": "packages.pyright-internal.src.tests.samples.parserRecovery3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.parserRecovery3",
        "description": "packages.pyright-internal.src.tests.samples.parserRecovery3",
        "peekOfCode": "def func2(ch: str):",
        "detail": "packages.pyright-internal.src.tests.samples.parserRecovery3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func1():\n    \"\"\"func1\"\"\"\n    return 0\np1_0 = partial(func1)\nreveal_type(p1_0(), expected_text=\"Literal[0]\")\n# This should generate an error.\np1_0(\"\")\n# This should generate an error.\np1_1 = partial(func1, \"\", \"\")\ndef func2(name: str, number: int) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func2(name: str, number: int) -> None:\n    \"\"\"func2\"\"\"\n    pass\np2_0 = partial(func2)\nreveal_type(p2_0(\"\", 3), expected_text=\"None\")\n# This should generate an error.\np2_0()\n# This should generate an error.\np2_0(\"\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func3(name: str, /, number: int):\n    return 0\np3_0 = partial(func3)\nreveal_type(p3_0(\"\", 3), expected_text=\"Literal[0]\")\n# This should generate an error.\np3_0(name=\"\", number=3)\np3_1 = partial(func3, \"\")\np3_1(3)\np3_1(number=3)\ndef func4(name: str, *, number: int):",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func4(name: str, *, number: int):\n    return 0\np4_0 = partial(func4)\n# This should generate an error.\np4_0(\"\", 3)\np4_0(\"\", number=3)\ndef func5(name: _T1, number: _T1) -> _T1:\n    return name\np5_0 = partial(func5)\nreveal_type(p5_0(3, 3), expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func5(name: _T1, number: _T1) -> _T1:\n    return name\np5_0 = partial(func5)\nreveal_type(p5_0(3, 3), expected_text=\"int\")\nreveal_type(p5_0(\"3\", \"3\"), expected_text=\"str\")\np5_1 = partial(func5, 2)\np5_1(3)\n# This should generate an error.\np5_1(\"3\")\ndef func6(a: int, name: _T1, number: _T1) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func6(a: int, name: _T1, number: _T1) -> _T1:\n    return name\np6_0 = partial(func6, 3, 4)\nreveal_type(p6_0(3), expected_text=\"int\")\ndef func7(a: int, name: float, *args: str):\n    return 0\np7_0 = partial(func7, 3, 3, \"\", \"\", \"\")\np7_0(\"\", \"\")\n# This should generate an error.\np7_0(3)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func7(a: int, name: float, *args: str):\n    return 0\np7_0 = partial(func7, 3, 3, \"\", \"\", \"\")\np7_0(\"\", \"\")\n# This should generate an error.\np7_0(3)\np7_1 = partial(func7)\np7_1(3, 0)\np7_1(3, 0, \"\", \"\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "def func8(a: int, name: str, **kwargs: int):\n    return 0\np8_0 = partial(func8, 3, \"\")\np8_0()\np8_0(foo=3)\n# This should generate an error.\np8_0(foo=\"\")\np8_1 = partial(func8)\np8_1(3, \"\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\ndef func1():\n    \"\"\"func1\"\"\"\n    return 0\np1_0 = partial(func1)\nreveal_type(p1_0(), expected_text=\"Literal[0]\")\n# This should generate an error.\np1_0(\"\")\n# This should generate an error.\np1_1 = partial(func1, \"\", \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p1_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p1_0 = partial(func1)\nreveal_type(p1_0(), expected_text=\"Literal[0]\")\n# This should generate an error.\np1_0(\"\")\n# This should generate an error.\np1_1 = partial(func1, \"\", \"\")\ndef func2(name: str, number: int) -> None:\n    \"\"\"func2\"\"\"\n    pass\np2_0 = partial(func2)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p1_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p1_1 = partial(func1, \"\", \"\")\ndef func2(name: str, number: int) -> None:\n    \"\"\"func2\"\"\"\n    pass\np2_0 = partial(func2)\nreveal_type(p2_0(\"\", 3), expected_text=\"None\")\n# This should generate an error.\np2_0()\n# This should generate an error.\np2_0(\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p2_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p2_0 = partial(func2)\nreveal_type(p2_0(\"\", 3), expected_text=\"None\")\n# This should generate an error.\np2_0()\n# This should generate an error.\np2_0(\"\")\n# This should generate an error.\np2_0(\"\", 3, 3)\n# This should generate an error.\np2_0(\"\", 3, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p2_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p2_1 = partial(func2, \"\")\n# This should generate an error.\np2_1()\np2_1(3)\np2_1(number=3)\n# This should generate an error.\np2_1(3, number=3)\np2_2 = partial(func2, number=3)\np2_2(\"\")\np2_3 = partial(func2, number=3, name=\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p2_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p2_2 = partial(func2, number=3)\np2_2(\"\")\np2_3 = partial(func2, number=3, name=\"\")\np2_3()\ndef func3(name: str, /, number: int):\n    return 0\np3_0 = partial(func3)\nreveal_type(p3_0(\"\", 3), expected_text=\"Literal[0]\")\n# This should generate an error.\np3_0(name=\"\", number=3)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p2_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p2_3 = partial(func2, number=3, name=\"\")\np2_3()\ndef func3(name: str, /, number: int):\n    return 0\np3_0 = partial(func3)\nreveal_type(p3_0(\"\", 3), expected_text=\"Literal[0]\")\n# This should generate an error.\np3_0(name=\"\", number=3)\np3_1 = partial(func3, \"\")\np3_1(3)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p3_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p3_0 = partial(func3)\nreveal_type(p3_0(\"\", 3), expected_text=\"Literal[0]\")\n# This should generate an error.\np3_0(name=\"\", number=3)\np3_1 = partial(func3, \"\")\np3_1(3)\np3_1(number=3)\ndef func4(name: str, *, number: int):\n    return 0\np4_0 = partial(func4)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p3_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p3_1 = partial(func3, \"\")\np3_1(3)\np3_1(number=3)\ndef func4(name: str, *, number: int):\n    return 0\np4_0 = partial(func4)\n# This should generate an error.\np4_0(\"\", 3)\np4_0(\"\", number=3)\ndef func5(name: _T1, number: _T1) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p4_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p4_0 = partial(func4)\n# This should generate an error.\np4_0(\"\", 3)\np4_0(\"\", number=3)\ndef func5(name: _T1, number: _T1) -> _T1:\n    return name\np5_0 = partial(func5)\nreveal_type(p5_0(3, 3), expected_text=\"int\")\nreveal_type(p5_0(\"3\", \"3\"), expected_text=\"str\")\np5_1 = partial(func5, 2)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p5_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p5_0 = partial(func5)\nreveal_type(p5_0(3, 3), expected_text=\"int\")\nreveal_type(p5_0(\"3\", \"3\"), expected_text=\"str\")\np5_1 = partial(func5, 2)\np5_1(3)\n# This should generate an error.\np5_1(\"3\")\ndef func6(a: int, name: _T1, number: _T1) -> _T1:\n    return name\np6_0 = partial(func6, 3, 4)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p5_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p5_1 = partial(func5, 2)\np5_1(3)\n# This should generate an error.\np5_1(\"3\")\ndef func6(a: int, name: _T1, number: _T1) -> _T1:\n    return name\np6_0 = partial(func6, 3, 4)\nreveal_type(p6_0(3), expected_text=\"int\")\ndef func7(a: int, name: float, *args: str):\n    return 0",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p6_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p6_0 = partial(func6, 3, 4)\nreveal_type(p6_0(3), expected_text=\"int\")\ndef func7(a: int, name: float, *args: str):\n    return 0\np7_0 = partial(func7, 3, 3, \"\", \"\", \"\")\np7_0(\"\", \"\")\n# This should generate an error.\np7_0(3)\np7_1 = partial(func7)\np7_1(3, 0)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p7_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p7_0 = partial(func7, 3, 3, \"\", \"\", \"\")\np7_0(\"\", \"\")\n# This should generate an error.\np7_0(3)\np7_1 = partial(func7)\np7_1(3, 0)\np7_1(3, 0, \"\", \"\")\n# This should generate an error.\np7_1(3, 0, foo=3)\ndef func8(a: int, name: str, **kwargs: int):",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p7_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p7_1 = partial(func7)\np7_1(3, 0)\np7_1(3, 0, \"\", \"\")\n# This should generate an error.\np7_1(3, 0, foo=3)\ndef func8(a: int, name: str, **kwargs: int):\n    return 0\np8_0 = partial(func8, 3, \"\")\np8_0()\np8_0(foo=3)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p8_0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p8_0 = partial(func8, 3, \"\")\np8_0()\np8_0(foo=3)\n# This should generate an error.\np8_0(foo=\"\")\np8_1 = partial(func8)\np8_1(3, \"\")\n# This should generate an error.\np8_1(3)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "p8_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.partial1",
        "description": "packages.pyright-internal.src.tests.samples.partial1",
        "peekOfCode": "p8_1 = partial(func8)\np8_1(3, \"\")\n# This should generate an error.\np8_1(3)\n# This should generate an error.\np8_1(3, \"\", 5)\np8_1(3, \"\", foo=4, bar=5)",
        "detail": "packages.pyright-internal.src.tests.samples.partial1",
        "documentation": {}
    },
    {
        "label": "Proto1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.partial2",
        "description": "packages.pyright-internal.src.tests.samples.partial2",
        "peekOfCode": "class Proto1(Protocol):\n    def __call__(self, x: str) -> str:\n        ...\nfunc2: Proto1 = partial(func1, 3, 4, x=\"a\")\nfunc2()\nfunc2(x=\"b\")\nclass Proto2(Protocol):\n    def __call__(self, b: int) -> str:\n        ...\nfunc3: Proto2 = partial(func1, 3, b=3, x=\"a\")",
        "detail": "packages.pyright-internal.src.tests.samples.partial2",
        "documentation": {}
    },
    {
        "label": "Proto2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.partial2",
        "description": "packages.pyright-internal.src.tests.samples.partial2",
        "peekOfCode": "class Proto2(Protocol):\n    def __call__(self, b: int) -> str:\n        ...\nfunc3: Proto2 = partial(func1, 3, b=3, x=\"a\")\nfunc3()\nfunc3(x=\"b\")\nfunc3(b=3)\nfunc3(x=\"b\", b=3)\nfunc3(b=3, x=\"b\")",
        "detail": "packages.pyright-internal.src.tests.samples.partial2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.partial2",
        "description": "packages.pyright-internal.src.tests.samples.partial2",
        "peekOfCode": "def func1(a: int, b: int, x: str) -> str:\n    return x\nclass Proto1(Protocol):\n    def __call__(self, x: str) -> str:\n        ...\nfunc2: Proto1 = partial(func1, 3, 4, x=\"a\")\nfunc2()\nfunc2(x=\"b\")\nclass Proto2(Protocol):\n    def __call__(self, b: int) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.partial2",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "class Foo(object):\n    _my_var1 = 1\n    _my_var2 = _my_var1\n    def foo(self):\n        a = _Test\n        return self._my_var1\n# This should generate an error\na = _TestClass()\nb = TestClass()\na = _Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "TestSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "class TestSubclass(TestClass):\n    def blah(self):\n        return self._prot1\n    def blah2(self):\n        # This should generate an error\n        return self.__priv1\nclass MyTuple(NamedTuple):\n    field1: int\n    field2: str\n# This should not generate an error because _replace is declared",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "MyTuple",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "class MyTuple(NamedTuple):\n    field1: int\n    field2: str\n# This should not generate an error because _replace is declared\n# within a stub file and is presumably part of the public interface\n# contract.\nMyTuple(1, \"2\")._replace(field1=3)",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "_Test",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "_Test = 1\nclass Foo(object):\n    _my_var1 = 1\n    _my_var2 = _my_var1\n    def foo(self):\n        a = _Test\n        return self._my_var1\n# This should generate an error\na = _TestClass()\nb = TestClass()",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "a = _TestClass()\nb = TestClass()\na = _Foo()\n# This should generate an error\nc = b.__priv1\nd = Foo()\n# This should generate an error\ne = d._my_var1\nf = _Test\nclass TestSubclass(TestClass):",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "b = TestClass()\na = _Foo()\n# This should generate an error\nc = b.__priv1\nd = Foo()\n# This should generate an error\ne = d._my_var1\nf = _Test\nclass TestSubclass(TestClass):\n    def blah(self):",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "a = _Foo()\n# This should generate an error\nc = b.__priv1\nd = Foo()\n# This should generate an error\ne = d._my_var1\nf = _Test\nclass TestSubclass(TestClass):\n    def blah(self):\n        return self._prot1",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "c = b.__priv1\nd = Foo()\n# This should generate an error\ne = d._my_var1\nf = _Test\nclass TestSubclass(TestClass):\n    def blah(self):\n        return self._prot1\n    def blah2(self):\n        # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "d = Foo()\n# This should generate an error\ne = d._my_var1\nf = _Test\nclass TestSubclass(TestClass):\n    def blah(self):\n        return self._prot1\n    def blah2(self):\n        # This should generate an error\n        return self.__priv1",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "e = d._my_var1\nf = _Test\nclass TestSubclass(TestClass):\n    def blah(self):\n        return self._prot1\n    def blah2(self):\n        # This should generate an error\n        return self.__priv1\nclass MyTuple(NamedTuple):\n    field1: int",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.private1",
        "description": "packages.pyright-internal.src.tests.samples.private1",
        "peekOfCode": "f = _Test\nclass TestSubclass(TestClass):\n    def blah(self):\n        return self._prot1\n    def blah2(self):\n        # This should generate an error\n        return self.__priv1\nclass MyTuple(NamedTuple):\n    field1: int\n    field2: str",
        "detail": "packages.pyright-internal.src.tests.samples.private1",
        "documentation": {}
    },
    {
        "label": "_TestClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.private2",
        "description": "packages.pyright-internal.src.tests.samples.private2",
        "peekOfCode": "class _TestClass(object):\n    pass\nclass TestClass(object):\n    def __init__(self):\n        self.__priv1 = 1\n        self._prot1 = 1",
        "detail": "packages.pyright-internal.src.tests.samples.private2",
        "documentation": {}
    },
    {
        "label": "TestClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.private2",
        "description": "packages.pyright-internal.src.tests.samples.private2",
        "peekOfCode": "class TestClass(object):\n    def __init__(self):\n        self.__priv1 = 1\n        self._prot1 = 1",
        "detail": "packages.pyright-internal.src.tests.samples.private2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "class ClassA(object):\n    @property\n    def read_only_prop(self):\n        return 1\n    @property\n    def read_write_prop(self):\n        return \"hello\"\n    @read_write_prop.setter\n    def read_write_prop(self, value: str):\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "ClassWithProperty",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "class ClassWithProperty:\n    @property\n    def name(self) -> str:\n        return \"bar\"\np1: property = ClassA.read_only_prop\np2: property = ClassA.read_write_prop\np3: property = ClassA.deletable_prop",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "a = ClassA()\nClassA.read_only_prop.fget(ClassA())\nClassA.read_write_prop.fset(ClassA(), \"\")\nClassA.deletable_prop.fdel(ClassA())\nval = a.read_only_prop\nreveal_type(ClassA.read_only_prop, expected_text=\"property\")\nreveal_type(ClassA.read_only_prop.__doc__, expected_text=\"str | None\")\n# This should generate an error because this\n# property has no setter.\na.read_only_prop = val",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "val",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "val = a.read_only_prop\nreveal_type(ClassA.read_only_prop, expected_text=\"property\")\nreveal_type(ClassA.read_only_prop.__doc__, expected_text=\"str | None\")\n# This should generate an error because this\n# property has no setter.\na.read_only_prop = val\n# This should generate an error because this\n# property has no deleter.\ndel a.read_only_prop\nval = a.read_write_prop",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "a.read_only_prop",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "a.read_only_prop = val\n# This should generate an error because this\n# property has no deleter.\ndel a.read_only_prop\nval = a.read_write_prop\na.read_write_prop = \"hello\"\n# This should generate an error because the type\n# is incorrect.\na.read_write_prop = ClassA()\n# This should generate an error because this",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "val",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "val = a.read_write_prop\na.read_write_prop = \"hello\"\n# This should generate an error because the type\n# is incorrect.\na.read_write_prop = ClassA()\n# This should generate an error because this\n# property has no deleter.\ndel a.read_write_prop\nval = a.deletable_prop\n# This should generate an error because this",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "a.read_write_prop",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "a.read_write_prop = \"hello\"\n# This should generate an error because the type\n# is incorrect.\na.read_write_prop = ClassA()\n# This should generate an error because this\n# property has no deleter.\ndel a.read_write_prop\nval = a.deletable_prop\n# This should generate an error because this\n# property has no setter.",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "a.read_write_prop",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "a.read_write_prop = ClassA()\n# This should generate an error because this\n# property has no deleter.\ndel a.read_write_prop\nval = a.deletable_prop\n# This should generate an error because this\n# property has no setter.\na.deletable_prop = val\ndel a.deletable_prop\nclass ClassWithProperty:",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "val",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "val = a.deletable_prop\n# This should generate an error because this\n# property has no setter.\na.deletable_prop = val\ndel a.deletable_prop\nclass ClassWithProperty:\n    @property\n    def name(self) -> str:\n        return \"bar\"\np1: property = ClassA.read_only_prop",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "a.deletable_prop",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties1",
        "description": "packages.pyright-internal.src.tests.samples.properties1",
        "peekOfCode": "a.deletable_prop = val\ndel a.deletable_prop\nclass ClassWithProperty:\n    @property\n    def name(self) -> str:\n        return \"bar\"\np1: property = ClassA.read_only_prop\np2: property = ClassA.read_write_prop\np3: property = ClassA.deletable_prop",
        "detail": "packages.pyright-internal.src.tests.samples.properties1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties10",
        "description": "packages.pyright-internal.src.tests.samples.properties10",
        "peekOfCode": "class C:\n    def __init__(self):\n        self._x = None\n    @property\n    def x(self):\n        return self._x\n    @x.setter\n    def x(self, value):\n        self._x = value\nc = C()",
        "detail": "packages.pyright-internal.src.tests.samples.properties10",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties10",
        "description": "packages.pyright-internal.src.tests.samples.properties10",
        "peekOfCode": "c = C()\nreveal_type(c.x, expected_text=\"Unknown | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties10",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties11",
        "description": "packages.pyright-internal.src.tests.samples.properties11",
        "peekOfCode": "class Class1:\n    @classmethod\n    @property\n    def prop1(cls) -> str:\n        return \"\"\n    @classmethod\n    @prop1.setter\n    def prop1(cls, value: str):\n        pass\nreveal_type(Class1.prop1, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties11",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties11",
        "description": "packages.pyright-internal.src.tests.samples.properties11",
        "peekOfCode": "class Class2:\n    @classmethod\n    @property\n    def prop1(cls: Type[T]) -> Type[T]:\n        return cls\nclass Class3(Class2):\n    ...\nreveal_type(Class2.prop1, expected_text=\"Type[Class2]\")\nreveal_type(Class3.prop1, expected_text=\"Type[Class3]\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties11",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties11",
        "description": "packages.pyright-internal.src.tests.samples.properties11",
        "peekOfCode": "class Class3(Class2):\n    ...\nreveal_type(Class2.prop1, expected_text=\"Type[Class2]\")\nreveal_type(Class3.prop1, expected_text=\"Type[Class3]\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties11",
        "documentation": {}
    },
    {
        "label": "Class1.prop1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties11",
        "description": "packages.pyright-internal.src.tests.samples.properties11",
        "peekOfCode": "Class1.prop1 = \"hi\"\n# This should generate an error\nClass1.prop1 = 1\nT = TypeVar(\"T\", bound=\"Class2\")\nclass Class2:\n    @classmethod\n    @property\n    def prop1(cls: Type[T]) -> Type[T]:\n        return cls\nclass Class3(Class2):",
        "detail": "packages.pyright-internal.src.tests.samples.properties11",
        "documentation": {}
    },
    {
        "label": "Class1.prop1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties11",
        "description": "packages.pyright-internal.src.tests.samples.properties11",
        "peekOfCode": "Class1.prop1 = 1\nT = TypeVar(\"T\", bound=\"Class2\")\nclass Class2:\n    @classmethod\n    @property\n    def prop1(cls: Type[T]) -> Type[T]:\n        return cls\nclass Class3(Class2):\n    ...\nreveal_type(Class2.prop1, expected_text=\"Type[Class2]\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties11",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties11",
        "description": "packages.pyright-internal.src.tests.samples.properties11",
        "peekOfCode": "T = TypeVar(\"T\", bound=\"Class2\")\nclass Class2:\n    @classmethod\n    @property\n    def prop1(cls: Type[T]) -> Type[T]:\n        return cls\nclass Class3(Class2):\n    ...\nreveal_type(Class2.prop1, expected_text=\"Type[Class2]\")\nreveal_type(Class3.prop1, expected_text=\"Type[Class3]\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties11",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties12",
        "description": "packages.pyright-internal.src.tests.samples.properties12",
        "peekOfCode": "class Rectangle:\n    def __init__(self, length: int, width: int) -> None:\n        self._length = length\n        self._width = width\n    @property\n    @cache\n    def area(self) -> int:\n        return self._length * self._width\ndef is_large_rectangle(rec: Rectangle) -> bool:\n    print(rec.area)",
        "detail": "packages.pyright-internal.src.tests.samples.properties12",
        "documentation": {}
    },
    {
        "label": "is_large_rectangle",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.properties12",
        "description": "packages.pyright-internal.src.tests.samples.properties12",
        "peekOfCode": "def is_large_rectangle(rec: Rectangle) -> bool:\n    print(rec.area)\n    return rec.area >= 100\nrec = Rectangle(10, 10)\nprint(is_large_rectangle(rec))",
        "detail": "packages.pyright-internal.src.tests.samples.properties12",
        "documentation": {}
    },
    {
        "label": "rec",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties12",
        "description": "packages.pyright-internal.src.tests.samples.properties12",
        "peekOfCode": "rec = Rectangle(10, 10)\nprint(is_large_rectangle(rec))",
        "detail": "packages.pyright-internal.src.tests.samples.properties12",
        "documentation": {}
    },
    {
        "label": "MyMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties13",
        "description": "packages.pyright-internal.src.tests.samples.properties13",
        "peekOfCode": "class MyMeta(type):\n    @property\n    def something(cls) -> \"Base\":\n        return Base(1234)\nclass Base(metaclass=MyMeta):\n    def __new__(cls, arg) -> \"Base\":\n        ...\nreveal_type(Base.something, expected_text=\"Base\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties13",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties13",
        "description": "packages.pyright-internal.src.tests.samples.properties13",
        "peekOfCode": "class Base(metaclass=MyMeta):\n    def __new__(cls, arg) -> \"Base\":\n        ...\nreveal_type(Base.something, expected_text=\"Base\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties13",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties2",
        "description": "packages.pyright-internal.src.tests.samples.properties2",
        "peekOfCode": "class Foo(abc.ABC):\n    @abc.abstractproperty\n    def x(self) -> int:\n        raise NotImplementedError\n    @x.setter\n    def x(self, value: int):\n        raise NotImplementedError\n    @abc.abstractproperty\n    def y(self) -> float:\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.properties2",
        "documentation": {}
    },
    {
        "label": "requires_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.properties2",
        "description": "packages.pyright-internal.src.tests.samples.properties2",
        "peekOfCode": "def requires_int(x: int):\n    pass\nclass Foo(abc.ABC):\n    @abc.abstractproperty\n    def x(self) -> int:\n        raise NotImplementedError\n    @x.setter\n    def x(self, value: int):\n        raise NotImplementedError\n    @abc.abstractproperty",
        "detail": "packages.pyright-internal.src.tests.samples.properties2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties2",
        "description": "packages.pyright-internal.src.tests.samples.properties2",
        "peekOfCode": "a = Foo()\nrequires_int(a.x)\na.x = 3\n# This should generate an error because a.y is not an int\nrequires_int(a.y)\n# This should generate an error because the assigned type\n# isn't compatible with the setter.\na.x = 4.5",
        "detail": "packages.pyright-internal.src.tests.samples.properties2",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties2",
        "description": "packages.pyright-internal.src.tests.samples.properties2",
        "peekOfCode": "a.x = 3\n# This should generate an error because a.y is not an int\nrequires_int(a.y)\n# This should generate an error because the assigned type\n# isn't compatible with the setter.\na.x = 4.5",
        "detail": "packages.pyright-internal.src.tests.samples.properties2",
        "documentation": {}
    },
    {
        "label": "a.x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties2",
        "description": "packages.pyright-internal.src.tests.samples.properties2",
        "peekOfCode": "a.x = 4.5",
        "detail": "packages.pyright-internal.src.tests.samples.properties2",
        "documentation": {}
    },
    {
        "label": "custom_property1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "class custom_property1(property):\n    pass\nclass Custom1(object):\n    @custom_property1\n    def x(self) -> int:\n        return 3\n    @custom_property1\n    def y(self) -> float:\n        return 3.5\n    @y.setter",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "Custom1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "class Custom1(object):\n    @custom_property1\n    def x(self) -> int:\n        return 3\n    @custom_property1\n    def y(self) -> float:\n        return 3.5\n    @y.setter\n    def y(self, val: float):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "custom_property2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "class custom_property2(property):\n    _custom_func: Callable[..., Any] | None\n    def custom_function(self, _custom_func: Callable[..., Any]):\n        self._custom_func = _custom_func\n        return self\nclass Custom2(object):\n    @custom_property2\n    def x(self) -> int:\n        return 3\n    @custom_property2",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "Custom2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "class Custom2(object):\n    @custom_property2\n    def x(self) -> int:\n        return 3\n    @custom_property2\n    def y(self) -> float:\n        return 3.5\n    @y.setter\n    def y(self, val: float):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "m1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "m1 = Custom1()\na1: int = m1.x\n# This should generate an error because m.x is\n# an int and cannot be assigned to str.\nb1: str = m1.x\nc1: float = m1.y\n# This should generate an error because m.y is\n# a float and cannot be assigned to int.\nd1: int = m1.y\n# This should generate an error because there",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "m1.x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "m1.x = 4\nm1.y = 4\n# This should generate an error because there is\n# no deleter for x.\ndel m1.x\ndel m1.y\nclass custom_property2(property):\n    _custom_func: Callable[..., Any] | None\n    def custom_function(self, _custom_func: Callable[..., Any]):\n        self._custom_func = _custom_func",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "m1.y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "m1.y = 4\n# This should generate an error because there is\n# no deleter for x.\ndel m1.x\ndel m1.y\nclass custom_property2(property):\n    _custom_func: Callable[..., Any] | None\n    def custom_function(self, _custom_func: Callable[..., Any]):\n        self._custom_func = _custom_func\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "m2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "m2 = Custom2()\na2 = m2.y\nreveal_type(a2, expected_text=\"float\")\nm2.y = 4\ndel m2.y",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "a2 = m2.y\nreveal_type(a2, expected_text=\"float\")\nm2.y = 4\ndel m2.y",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "m2.y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties3",
        "description": "packages.pyright-internal.src.tests.samples.properties3",
        "peekOfCode": "m2.y = 4\ndel m2.y",
        "detail": "packages.pyright-internal.src.tests.samples.properties3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties4",
        "description": "packages.pyright-internal.src.tests.samples.properties4",
        "peekOfCode": "class Foo(str):\n    @property\n    def parent(self: _P) -> _P:\n        ...\np = Foo().parent\nreveal_type(p, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties4",
        "documentation": {}
    },
    {
        "label": "_P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties4",
        "description": "packages.pyright-internal.src.tests.samples.properties4",
        "peekOfCode": "_P = TypeVar(\"_P\", bound=str)\nclass Foo(str):\n    @property\n    def parent(self: _P) -> _P:\n        ...\np = Foo().parent\nreveal_type(p, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties4",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties4",
        "description": "packages.pyright-internal.src.tests.samples.properties4",
        "peekOfCode": "p = Foo().parent\nreveal_type(p, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties5",
        "description": "packages.pyright-internal.src.tests.samples.properties5",
        "peekOfCode": "class Foo(Generic[T]):\n    def __init__(self, bar: T):\n        self._bar = bar\n    @property\n    def bar(self) -> T:\n        return self._bar\n    def bar_method(self) -> T:\n        return self._bar\nclass NewInt(int):\n    def new_thing(self):",
        "detail": "packages.pyright-internal.src.tests.samples.properties5",
        "documentation": {}
    },
    {
        "label": "NewInt",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties5",
        "description": "packages.pyright-internal.src.tests.samples.properties5",
        "peekOfCode": "class NewInt(int):\n    def new_thing(self):\n        pass\nclass FooNewInt(Foo[NewInt]):\n    def fizz(self) -> None:\n        self.bar.new_thing()\n        self.bar_method().new_thing()",
        "detail": "packages.pyright-internal.src.tests.samples.properties5",
        "documentation": {}
    },
    {
        "label": "FooNewInt",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties5",
        "description": "packages.pyright-internal.src.tests.samples.properties5",
        "peekOfCode": "class FooNewInt(Foo[NewInt]):\n    def fizz(self) -> None:\n        self.bar.new_thing()\n        self.bar_method().new_thing()",
        "detail": "packages.pyright-internal.src.tests.samples.properties5",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties5",
        "description": "packages.pyright-internal.src.tests.samples.properties5",
        "peekOfCode": "T = TypeVar(\"T\", bound=int)\nclass Foo(Generic[T]):\n    def __init__(self, bar: T):\n        self._bar = bar\n    @property\n    def bar(self) -> T:\n        return self._bar\n    def bar_method(self) -> T:\n        return self._bar\nclass NewInt(int):",
        "detail": "packages.pyright-internal.src.tests.samples.properties5",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties6",
        "description": "packages.pyright-internal.src.tests.samples.properties6",
        "peekOfCode": "class ClassA(Generic[_T]):\n    @property\n    def prop_1(self) -> Optional[float]:\n        return 2\n    @prop_1.setter\n    def prop_1(self, value: int) -> None:\n        pass\n    @property\n    def prop_2(self) -> Optional[int]:\n        return 2",
        "detail": "packages.pyright-internal.src.tests.samples.properties6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties6",
        "description": "packages.pyright-internal.src.tests.samples.properties6",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass ClassA(Generic[_T]):\n    @property\n    def prop_1(self) -> Optional[float]:\n        return 2\n    @prop_1.setter\n    def prop_1(self, value: int) -> None:\n        pass\n    @property\n    def prop_2(self) -> Optional[int]:",
        "detail": "packages.pyright-internal.src.tests.samples.properties6",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "class A:\n    def __init__(self):\n        return\n    @property\n    def value(self):\n        return 42\n    def __getattr__(self, name: str):\n        return 0\nb1 = A.value\n# This should generate an error because __getattr__",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "b1 = A.value\n# This should generate an error because __getattr__\n# is not applied to a class.\nb2 = A.blah\nb3 = A.value.fget\na = A()\nc1 = a.value\nc2 = a.blah\n# This should generate an error because a.value is\n# the property value.",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "b2 = A.blah\nb3 = A.value.fget\na = A()\nc1 = a.value\nc2 = a.blah\n# This should generate an error because a.value is\n# the property value.\nc3 = a.value.fget",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "b3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "b3 = A.value.fget\na = A()\nc1 = a.value\nc2 = a.blah\n# This should generate an error because a.value is\n# the property value.\nc3 = a.value.fget",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "a = A()\nc1 = a.value\nc2 = a.blah\n# This should generate an error because a.value is\n# the property value.\nc3 = a.value.fget",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "c1 = a.value\nc2 = a.blah\n# This should generate an error because a.value is\n# the property value.\nc3 = a.value.fget",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "c2 = a.blah\n# This should generate an error because a.value is\n# the property value.\nc3 = a.value.fget",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "c3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties7",
        "description": "packages.pyright-internal.src.tests.samples.properties7",
        "peekOfCode": "c3 = a.value.fget",
        "detail": "packages.pyright-internal.src.tests.samples.properties7",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties8",
        "description": "packages.pyright-internal.src.tests.samples.properties8",
        "peekOfCode": "class Foo1:\n    @property\n    def legal1(self) -> None:\n        pass\n    # This should generate an error.\n    @property\n    @staticmethod\n    def illegal1() -> None:\n        pass\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.properties8",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.properties9",
        "description": "packages.pyright-internal.src.tests.samples.properties9",
        "peekOfCode": "class ClassA:\n    def __init__(self, converter: Callable[[str, int], int]) -> None:\n        self.converter = converter\n    @property\n    def converter_prop(self) -> Callable[[str, int], int]:\n        return self.converter\ndef str_to_int(arg: str, base: int) -> int:\n    return int(arg, base=base)\nobj = ClassA(str_to_int)\nval1: int = obj.converter(\"123\", 10)",
        "detail": "packages.pyright-internal.src.tests.samples.properties9",
        "documentation": {}
    },
    {
        "label": "str_to_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.properties9",
        "description": "packages.pyright-internal.src.tests.samples.properties9",
        "peekOfCode": "def str_to_int(arg: str, base: int) -> int:\n    return int(arg, base=base)\nobj = ClassA(str_to_int)\nval1: int = obj.converter(\"123\", 10)\nval2: int = obj.converter_prop(\"123\", 10)\nreveal_type(obj.converter, expected_text=\"(str, int) -> int\")\nreveal_type(obj.converter_prop, expected_text=\"(str, int) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties9",
        "documentation": {}
    },
    {
        "label": "obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.properties9",
        "description": "packages.pyright-internal.src.tests.samples.properties9",
        "peekOfCode": "obj = ClassA(str_to_int)\nval1: int = obj.converter(\"123\", 10)\nval2: int = obj.converter_prop(\"123\", 10)\nreveal_type(obj.converter, expected_text=\"(str, int) -> int\")\nreveal_type(obj.converter_prop, expected_text=\"(str, int) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.properties9",
        "documentation": {}
    },
    {
        "label": "Box",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Box(Protocol[T_co]):\n    def content(self) -> T_co:\n        ...\nclass Box_Impl:\n    def content(self) -> int:\n        ...\nbox: Box[float]\nsecond_box: Box[int] = Box_Impl()\n# This should not generate an error due to the covariance of 'Box'.\nbox = second_box",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Box_Impl",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Box_Impl:\n    def content(self) -> int:\n        ...\nbox: Box[float]\nsecond_box: Box[int] = Box_Impl()\n# This should not generate an error due to the covariance of 'Box'.\nbox = second_box\nclass Sender(Protocol[T_contra]):\n    def send(self, data: T_contra) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Sender",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Sender(Protocol[T_contra]):\n    def send(self, data: T_contra) -> int:\n        ...\nclass Sender_Impl:\n    def send(self, data: float) -> int:\n        ...\nsender: Sender[float] = Sender_Impl()\nnew_sender: Sender[int]\n# This should not generate an error because 'Sender' is contravariant.\nnew_sender = sender",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Sender_Impl",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Sender_Impl:\n    def send(self, data: float) -> int:\n        ...\nsender: Sender[float] = Sender_Impl()\nnew_sender: Sender[int]\n# This should not generate an error because 'Sender' is contravariant.\nnew_sender = sender\nclass Proto(Protocol[T]):\n    def m1(self, p0: T) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Proto",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Proto(Protocol[T]):\n    def m1(self, p0: T) -> None:\n        pass\n    attr: T\nclass Proto_Impl:\n    def m1(self, p0: int) -> None:\n        pass\n    attr: int\nclass NotProto2:\n    attr: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Proto_Impl",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Proto_Impl:\n    def m1(self, p0: int) -> None:\n        pass\n    attr: int\nclass NotProto2:\n    attr: int\nvar: Proto[float]\nanother_var: Proto[int] = Proto_Impl()\n# This should generate an error because T is invariant.\nvar = another_var",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "NotProto2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class NotProto2:\n    attr: int\nvar: Proto[float]\nanother_var: Proto[int] = Proto_Impl()\n# This should generate an error because T is invariant.\nvar = another_var\nanother_var2: NotProto2 = NotProto2()\n# This should generate an error because T is invariant.\nvar = another_var2\n# This should generate an error because \"Protocol\" cannot be used",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Abstract1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Abstract1(Protocol[T_contra]):\n    def do(self, x: Optional[T_contra]):\n        ...\nclass Concrete1:\n    def do(self, x: Optional[int]):\n        pass\ndef use_protocol1(a: Abstract1[int]):\n    a.do(1)\nuse_protocol1(Concrete1())\n# This should generate an error because TypeVars cannot",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Concrete1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Concrete1:\n    def do(self, x: Optional[int]):\n        pass\ndef use_protocol1(a: Abstract1[int]):\n    a.do(1)\nuse_protocol1(Concrete1())\n# This should generate an error because TypeVars cannot\n# be defined in both Protocol and Generic.\nclass Proto2(Protocol[T_co], Generic[T_co]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Proto2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Proto2(Protocol[T_co], Generic[T_co]):\n    ...\nclass Proto3(Protocol, Generic[T_co]):\n    ...\n_A = TypeVar(\"_A\", covariant=True)\n_B = TypeVar(\"_B\", covariant=True, bound=int)\nclass ProtoBase1(Protocol[_A, _B]):\n    ...\n# This should generate an error because Protocol must\n# include all of the TypeVars.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Proto3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Proto3(Protocol, Generic[T_co]):\n    ...\n_A = TypeVar(\"_A\", covariant=True)\n_B = TypeVar(\"_B\", covariant=True, bound=int)\nclass ProtoBase1(Protocol[_A, _B]):\n    ...\n# This should generate an error because Protocol must\n# include all of the TypeVars.\nclass Proto4(ProtoBase1[_A, _B], Protocol[_A]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "ProtoBase1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class ProtoBase1(Protocol[_A, _B]):\n    ...\n# This should generate an error because Protocol must\n# include all of the TypeVars.\nclass Proto4(ProtoBase1[_A, _B], Protocol[_A]):\n    ...\nclass ProtoBase2(Protocol[_B]):\n    ...\nclass Proto5(ProtoBase2[_B], Protocol[_A, _B]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Proto4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Proto4(ProtoBase1[_A, _B], Protocol[_A]):\n    ...\nclass ProtoBase2(Protocol[_B]):\n    ...\nclass Proto5(ProtoBase2[_B], Protocol[_A, _B]):\n    ...\np5_1: Proto5[float, int]\n# This should generate an error because the second type argument\n# corresponds to _B, which is bound to int.\np5_2: Proto5[int, float]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "ProtoBase2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class ProtoBase2(Protocol[_B]):\n    ...\nclass Proto5(ProtoBase2[_B], Protocol[_A, _B]):\n    ...\np5_1: Proto5[float, int]\n# This should generate an error because the second type argument\n# corresponds to _B, which is bound to int.\np5_2: Proto5[int, float]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "Proto5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "class Proto5(ProtoBase2[_B], Protocol[_A, _B]):\n    ...\np5_1: Proto5[float, int]\n# This should generate an error because the second type argument\n# corresponds to _B, which is bound to int.\np5_2: Proto5[int, float]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "use_protocol1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "def use_protocol1(a: Abstract1[int]):\n    a.do(1)\nuse_protocol1(Concrete1())\n# This should generate an error because TypeVars cannot\n# be defined in both Protocol and Generic.\nclass Proto2(Protocol[T_co], Generic[T_co]):\n    ...\nclass Proto3(Protocol, Generic[T_co]):\n    ...\n_A = TypeVar(\"_A\", covariant=True)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "T = TypeVar(\"T\")\nT_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\nclass Box(Protocol[T_co]):\n    def content(self) -> T_co:\n        ...\nclass Box_Impl:\n    def content(self) -> int:\n        ...\nbox: Box[float]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "T_co = TypeVar(\"T_co\", covariant=True)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\nclass Box(Protocol[T_co]):\n    def content(self) -> T_co:\n        ...\nclass Box_Impl:\n    def content(self) -> int:\n        ...\nbox: Box[float]\nsecond_box: Box[int] = Box_Impl()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "T_contra = TypeVar(\"T_contra\", contravariant=True)\nclass Box(Protocol[T_co]):\n    def content(self) -> T_co:\n        ...\nclass Box_Impl:\n    def content(self) -> int:\n        ...\nbox: Box[float]\nsecond_box: Box[int] = Box_Impl()\n# This should not generate an error due to the covariance of 'Box'.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "box",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "box = second_box\nclass Sender(Protocol[T_contra]):\n    def send(self, data: T_contra) -> int:\n        ...\nclass Sender_Impl:\n    def send(self, data: float) -> int:\n        ...\nsender: Sender[float] = Sender_Impl()\nnew_sender: Sender[int]\n# This should not generate an error because 'Sender' is contravariant.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "new_sender",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "new_sender = sender\nclass Proto(Protocol[T]):\n    def m1(self, p0: T) -> None:\n        pass\n    attr: T\nclass Proto_Impl:\n    def m1(self, p0: int) -> None:\n        pass\n    attr: int\nclass NotProto2:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "var = another_var\nanother_var2: NotProto2 = NotProto2()\n# This should generate an error because T is invariant.\nvar = another_var2\n# This should generate an error because \"Protocol\" cannot be used\n# as a type argument.\nvar2: List[Protocol] = []\nclass Abstract1(Protocol[T_contra]):\n    def do(self, x: Optional[T_contra]):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "var",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "var = another_var2\n# This should generate an error because \"Protocol\" cannot be used\n# as a type argument.\nvar2: List[Protocol] = []\nclass Abstract1(Protocol[T_contra]):\n    def do(self, x: Optional[T_contra]):\n        ...\nclass Concrete1:\n    def do(self, x: Optional[int]):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "_A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "_A = TypeVar(\"_A\", covariant=True)\n_B = TypeVar(\"_B\", covariant=True, bound=int)\nclass ProtoBase1(Protocol[_A, _B]):\n    ...\n# This should generate an error because Protocol must\n# include all of the TypeVars.\nclass Proto4(ProtoBase1[_A, _B], Protocol[_A]):\n    ...\nclass ProtoBase2(Protocol[_B]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "_B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol1",
        "description": "packages.pyright-internal.src.tests.samples.protocol1",
        "peekOfCode": "_B = TypeVar(\"_B\", covariant=True, bound=int)\nclass ProtoBase1(Protocol[_A, _B]):\n    ...\n# This should generate an error because Protocol must\n# include all of the TypeVars.\nclass Proto4(ProtoBase1[_A, _B], Protocol[_A]):\n    ...\nclass ProtoBase2(Protocol[_B]):\n    ...\nclass Proto5(ProtoBase2[_B], Protocol[_A, _B]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol1",
        "documentation": {}
    },
    {
        "label": "ProtocolBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol10",
        "description": "packages.pyright-internal.src.tests.samples.protocol10",
        "peekOfCode": "class ProtocolBase(Protocol):\n    def a(self) -> None:\n        ...\n    def b(self) -> None:\n        ...\nclass ProtocolExtended(ProtocolBase, Protocol):\n    def c(self) -> None:\n        ...\nclass Base:\n    def a(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol10",
        "documentation": {}
    },
    {
        "label": "ProtocolExtended",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol10",
        "description": "packages.pyright-internal.src.tests.samples.protocol10",
        "peekOfCode": "class ProtocolExtended(ProtocolBase, Protocol):\n    def c(self) -> None:\n        ...\nclass Base:\n    def a(self) -> None:\n        pass\nclass ImplementsBase(Base):\n    def b(self) -> None:\n        pass\nclass ImplementsExtended(ImplementsBase):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol10",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol10",
        "description": "packages.pyright-internal.src.tests.samples.protocol10",
        "peekOfCode": "class Base:\n    def a(self) -> None:\n        pass\nclass ImplementsBase(Base):\n    def b(self) -> None:\n        pass\nclass ImplementsExtended(ImplementsBase):\n    def c(self) -> None:\n        pass\na: ProtocolExtended",
        "detail": "packages.pyright-internal.src.tests.samples.protocol10",
        "documentation": {}
    },
    {
        "label": "ImplementsBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol10",
        "description": "packages.pyright-internal.src.tests.samples.protocol10",
        "peekOfCode": "class ImplementsBase(Base):\n    def b(self) -> None:\n        pass\nclass ImplementsExtended(ImplementsBase):\n    def c(self) -> None:\n        pass\na: ProtocolExtended\na = ImplementsExtended()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol10",
        "documentation": {}
    },
    {
        "label": "ImplementsExtended",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol10",
        "description": "packages.pyright-internal.src.tests.samples.protocol10",
        "peekOfCode": "class ImplementsExtended(ImplementsBase):\n    def c(self) -> None:\n        pass\na: ProtocolExtended\na = ImplementsExtended()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol10",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol10",
        "description": "packages.pyright-internal.src.tests.samples.protocol10",
        "peekOfCode": "a = ImplementsExtended()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol10",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "class Base:\n    pass\n_T1 = TypeVar(\"_T1\")\n_TBase1 = TypeVar(\"_TBase1\", bound=Base)\n_TBase2 = TypeVar(\"_TBase2\", bound=Base)\ndef my_next(__i: Iterator[_T1]) -> _T1:\n    ...\nclass SourceProvider(Generic[_TBase1]):\n    def __iter__(self):\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "SourceProvider",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "class SourceProvider(Generic[_TBase1]):\n    def __iter__(self):\n        return self\nclass ManagedSourceProvider(SourceProvider[_TBase2]):\n    def get(self) -> Optional[_TBase2]:\n        source = my_next(self)\n        return source\n    def __next__(self) -> _TBase2:\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "ManagedSourceProvider",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "class ManagedSourceProvider(SourceProvider[_TBase2]):\n    def get(self) -> Optional[_TBase2]:\n        source = my_next(self)\n        return source\n    def __next__(self) -> _TBase2:\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "my_next",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "def my_next(__i: Iterator[_T1]) -> _T1:\n    ...\nclass SourceProvider(Generic[_TBase1]):\n    def __iter__(self):\n        return self\nclass ManagedSourceProvider(SourceProvider[_TBase2]):\n    def get(self) -> Optional[_TBase2]:\n        source = my_next(self)\n        return source\n    def __next__(self) -> _TBase2:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_TBase1 = TypeVar(\"_TBase1\", bound=Base)\n_TBase2 = TypeVar(\"_TBase2\", bound=Base)\ndef my_next(__i: Iterator[_T1]) -> _T1:\n    ...\nclass SourceProvider(Generic[_TBase1]):\n    def __iter__(self):\n        return self\nclass ManagedSourceProvider(SourceProvider[_TBase2]):\n    def get(self) -> Optional[_TBase2]:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "_TBase1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "_TBase1 = TypeVar(\"_TBase1\", bound=Base)\n_TBase2 = TypeVar(\"_TBase2\", bound=Base)\ndef my_next(__i: Iterator[_T1]) -> _T1:\n    ...\nclass SourceProvider(Generic[_TBase1]):\n    def __iter__(self):\n        return self\nclass ManagedSourceProvider(SourceProvider[_TBase2]):\n    def get(self) -> Optional[_TBase2]:\n        source = my_next(self)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "_TBase2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol11",
        "description": "packages.pyright-internal.src.tests.samples.protocol11",
        "peekOfCode": "_TBase2 = TypeVar(\"_TBase2\", bound=Base)\ndef my_next(__i: Iterator[_T1]) -> _T1:\n    ...\nclass SourceProvider(Generic[_TBase1]):\n    def __iter__(self):\n        return self\nclass ManagedSourceProvider(SourceProvider[_TBase2]):\n    def get(self) -> Optional[_TBase2]:\n        source = my_next(self)\n        return source",
        "detail": "packages.pyright-internal.src.tests.samples.protocol11",
        "documentation": {}
    },
    {
        "label": "BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol12",
        "description": "packages.pyright-internal.src.tests.samples.protocol12",
        "peekOfCode": "class BaseClass:\n    x: int\nclass DerivedClass(BaseClass, Protocol):\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocol12",
        "documentation": {}
    },
    {
        "label": "DerivedClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol12",
        "description": "packages.pyright-internal.src.tests.samples.protocol12",
        "peekOfCode": "class DerivedClass(BaseClass, Protocol):\n    x: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocol12",
        "documentation": {}
    },
    {
        "label": "CollectionProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol13",
        "description": "packages.pyright-internal.src.tests.samples.protocol13",
        "peekOfCode": "class CollectionProtocol(Protocol):\n    def watch(\n        self,\n        *,\n        max_time: Optional[int] = ...,\n        key: Optional[str] = ...,\n    ) -> None:\n        ...\nclass Collection:\n    def watch(self, key: Optional[str] = None, max_time: Optional[int] = None) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol13",
        "documentation": {}
    },
    {
        "label": "Collection",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol13",
        "description": "packages.pyright-internal.src.tests.samples.protocol13",
        "peekOfCode": "class Collection:\n    def watch(self, key: Optional[str] = None, max_time: Optional[int] = None) -> None:\n        ...\n# This should not generate an error even though the \"keys\" and\n# \"max_time\" parameters in Collection.watch are not marked as\n# keyword-only parameters and are not in the same order.\ncol: CollectionProtocol = Collection()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol13",
        "documentation": {}
    },
    {
        "label": "HasParent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "class HasParent(Protocol):\n    def get_parent(self: T) -> T:\n        ...\nGenericNode = TypeVar(\"GenericNode\", bound=HasParent)\ndef generic_get_parent(n: GenericNode) -> GenericNode:\n    return n.get_parent()\nclass ConcreteNode:\n    def get_parent(self) -> \"ConcreteNode\":\n        return self\nnode = ConcreteNode()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "ConcreteNode",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "class ConcreteNode:\n    def get_parent(self) -> \"ConcreteNode\":\n        return self\nnode = ConcreteNode()\nparent = generic_get_parent(node)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "generic_get_parent",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "def generic_get_parent(n: GenericNode) -> GenericNode:\n    return n.get_parent()\nclass ConcreteNode:\n    def get_parent(self) -> \"ConcreteNode\":\n        return self\nnode = ConcreteNode()\nparent = generic_get_parent(node)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "T = TypeVar(\"T\")\nclass HasParent(Protocol):\n    def get_parent(self: T) -> T:\n        ...\nGenericNode = TypeVar(\"GenericNode\", bound=HasParent)\ndef generic_get_parent(n: GenericNode) -> GenericNode:\n    return n.get_parent()\nclass ConcreteNode:\n    def get_parent(self) -> \"ConcreteNode\":\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "GenericNode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "GenericNode = TypeVar(\"GenericNode\", bound=HasParent)\ndef generic_get_parent(n: GenericNode) -> GenericNode:\n    return n.get_parent()\nclass ConcreteNode:\n    def get_parent(self) -> \"ConcreteNode\":\n        return self\nnode = ConcreteNode()\nparent = generic_get_parent(node)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "node",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "node = ConcreteNode()\nparent = generic_get_parent(node)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "parent",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol14",
        "description": "packages.pyright-internal.src.tests.samples.protocol14",
        "peekOfCode": "parent = generic_get_parent(node)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol14",
        "documentation": {}
    },
    {
        "label": "Proto",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol15",
        "description": "packages.pyright-internal.src.tests.samples.protocol15",
        "peekOfCode": "class Proto(Protocol):\n    @property\n    def f(self: T) -> T:\n        ...\n    def m(self, item: T, callback: Callable[[T], str]) -> str:\n        ...\nclass Concrete:\n    @property\n    def f(self: T) -> T:\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.protocol15",
        "documentation": {}
    },
    {
        "label": "Concrete",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol15",
        "description": "packages.pyright-internal.src.tests.samples.protocol15",
        "peekOfCode": "class Concrete:\n    @property\n    def f(self: T) -> T:\n        return self\n    def m(self, item: T, callback: Callable[[T], str]) -> str:\n        ...\nx: Proto = Concrete()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol15",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol15",
        "description": "packages.pyright-internal.src.tests.samples.protocol15",
        "peekOfCode": "T = TypeVar(\"T\")\nclass Proto(Protocol):\n    @property\n    def f(self: T) -> T:\n        ...\n    def m(self, item: T, callback: Callable[[T], str]) -> str:\n        ...\nclass Concrete:\n    @property\n    def f(self: T) -> T:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol15",
        "documentation": {}
    },
    {
        "label": "Session",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol16",
        "description": "packages.pyright-internal.src.tests.samples.protocol16",
        "peekOfCode": "class Session(Protocol):\n    def execute(self, statement: Any, *args: Any, **kwargs: Any) -> None:\n        ...\nclass CoolSession(Protocol):\n    def execute(self, stmt: Any, *args: Any, **kwargs: Any) -> None:\n        ...\ndef func1(arg: Session) -> None:\n    ...\ndef func2(x: CoolSession):\n    # This should generate an error because \"statement\" and \"stmt\" don't match.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol16",
        "documentation": {}
    },
    {
        "label": "CoolSession",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol16",
        "description": "packages.pyright-internal.src.tests.samples.protocol16",
        "peekOfCode": "class CoolSession(Protocol):\n    def execute(self, stmt: Any, *args: Any, **kwargs: Any) -> None:\n        ...\ndef func1(arg: Session) -> None:\n    ...\ndef func2(x: CoolSession):\n    # This should generate an error because \"statement\" and \"stmt\" don't match.\n    func1(x)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol16",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol16",
        "description": "packages.pyright-internal.src.tests.samples.protocol16",
        "peekOfCode": "def func1(arg: Session) -> None:\n    ...\ndef func2(x: CoolSession):\n    # This should generate an error because \"statement\" and \"stmt\" don't match.\n    func1(x)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol16",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol16",
        "description": "packages.pyright-internal.src.tests.samples.protocol16",
        "peekOfCode": "def func2(x: CoolSession):\n    # This should generate an error because \"statement\" and \"stmt\" don't match.\n    func1(x)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol16",
        "documentation": {}
    },
    {
        "label": "Protocol1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol1(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> Union[_T1, _T2]:\n        ...\n    def m2(self) -> _T1:\n        ...\n    def m3(self) -> _T2:\n        ...\n    def m4(self) -> _T3:\n        ...\n# This should generate an error because _T3 should be contravariant",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol2(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> _T1:\n        ...\n    def m2(self) -> _T1:\n        ...\n    def m3(self) -> _T2:\n        ...\nclass Protocol3(Protocol[_T1_co]):\n    def m1(self) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol3(Protocol[_T1_co]):\n    def m1(self) -> None:\n        pass\n# This should generate an error because _T1 should be contravariant.\nclass Protocol4(Protocol[_T1]):\n    def m1(self, p0: _T1) -> None:\n        ...\n# This should generate an error because _T1_co should be contravariant.\nclass Protocol5(Protocol[_T1_co]):\n    # This should generate an error because a covariant TypeVar",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol4(Protocol[_T1]):\n    def m1(self, p0: _T1) -> None:\n        ...\n# This should generate an error because _T1_co should be contravariant.\nclass Protocol5(Protocol[_T1_co]):\n    # This should generate an error because a covariant TypeVar\n    # should not be used as a parameter type.\n    def m1(self, p0: _T1_co) -> None:\n        ...\n# This should generate an error because _T1 should be covariant.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol5(Protocol[_T1_co]):\n    # This should generate an error because a covariant TypeVar\n    # should not be used as a parameter type.\n    def m1(self, p0: _T1_co) -> None:\n        ...\n# This should generate an error because _T1 should be covariant.\nclass Protocol6(Protocol[_T1]):\n    def m1(self) -> _T1:\n        ...\n# This should generate an error because _T1_contra should be covariant.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol6(Protocol[_T1]):\n    def m1(self) -> _T1:\n        ...\n# This should generate an error because _T1_contra should be covariant.\nclass Protocol7(Protocol[_T1_contra]):\n    # This should generate an error because a contravariant TypeVar\n    # should not be used as a return type.\n    def m1(self) -> _T1_contra:\n        ...\nclass Protocol8(Protocol[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol7",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol7(Protocol[_T1_contra]):\n    # This should generate an error because a contravariant TypeVar\n    # should not be used as a return type.\n    def m1(self) -> _T1_contra:\n        ...\nclass Protocol8(Protocol[_T1]):\n    def m1(self) -> _T1:\n        ...\n    def m2(self, p1: _T1) -> None:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol8",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol8(Protocol[_T1]):\n    def m1(self) -> _T1:\n        ...\n    def m2(self, p1: _T1) -> None:\n        pass\nP = ParamSpec(\"P\")\nR = TypeVar(\"R\", covariant=True)\nclass Callback(Protocol[P, R]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Callback",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Callback(Protocol[P, R]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\nclass Protocol9(Protocol[_T1_co]):\n    @property\n    def prop1(self) -> _T1_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "Protocol9",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "class Protocol9(Protocol[_T1_co]):\n    @property\n    def prop1(self) -> _T1_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\", bound=int)\n_T3 = TypeVar(\"_T3\", bytes, str)\n_T1_co = TypeVar(\"_T1_co\", covariant=True)\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\nclass Protocol1(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> Union[_T1, _T2]:\n        ...\n    def m2(self) -> _T1:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=int)\n_T3 = TypeVar(\"_T3\", bytes, str)\n_T1_co = TypeVar(\"_T1_co\", covariant=True)\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\nclass Protocol1(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> Union[_T1, _T2]:\n        ...\n    def m2(self) -> _T1:\n        ...\n    def m3(self) -> _T2:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", bytes, str)\n_T1_co = TypeVar(\"_T1_co\", covariant=True)\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\nclass Protocol1(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> Union[_T1, _T2]:\n        ...\n    def m2(self) -> _T1:\n        ...\n    def m3(self) -> _T2:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "_T1_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "_T1_co = TypeVar(\"_T1_co\", covariant=True)\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\nclass Protocol1(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> Union[_T1, _T2]:\n        ...\n    def m2(self) -> _T1:\n        ...\n    def m3(self) -> _T2:\n        ...\n    def m4(self) -> _T3:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "_T1_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\nclass Protocol1(Protocol[_T1, _T2, _T3]):\n    def m1(self, p0: _T1, p1: _T2, p2: _T3) -> Union[_T1, _T2]:\n        ...\n    def m2(self) -> _T1:\n        ...\n    def m3(self) -> _T2:\n        ...\n    def m4(self) -> _T3:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "P = ParamSpec(\"P\")\nR = TypeVar(\"R\", covariant=True)\nclass Callback(Protocol[P, R]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\nclass Protocol9(Protocol[_T1_co]):\n    @property\n    def prop1(self) -> _T1_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol17",
        "description": "packages.pyright-internal.src.tests.samples.protocol17",
        "peekOfCode": "R = TypeVar(\"R\", covariant=True)\nclass Callback(Protocol[P, R]):\n    def __call__(self, *args: P.args, **kwargs: P.kwargs) -> R:\n        ...\nclass Protocol9(Protocol[_T1_co]):\n    @property\n    def prop1(self) -> _T1_co:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol17",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol18",
        "description": "packages.pyright-internal.src.tests.samples.protocol18",
        "peekOfCode": "class A(Protocol):\n    ...\n# This should generate an error.\nA()\nclass B(A):\n    ...\nB()\nclass C(A, Protocol):\n    ...\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol18",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol18",
        "description": "packages.pyright-internal.src.tests.samples.protocol18",
        "peekOfCode": "class B(A):\n    ...\nB()\nclass C(A, Protocol):\n    ...\n# This should generate an error.\nC()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol18",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol18",
        "description": "packages.pyright-internal.src.tests.samples.protocol18",
        "peekOfCode": "class C(A, Protocol):\n    ...\n# This should generate an error.\nC()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol18",
        "documentation": {}
    },
    {
        "label": "PossibleY",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol19",
        "description": "packages.pyright-internal.src.tests.samples.protocol19",
        "peekOfCode": "class PossibleY:\n    y: Final[int] = 0\nclass Y(Protocol):\n    y: int\ndef funcY(x: Y) -> Y:\n    ...\n# This should generate an error\nfuncY(PossibleY(17))\n@dataclass\nclass PossibleX:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol19",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol19",
        "description": "packages.pyright-internal.src.tests.samples.protocol19",
        "peekOfCode": "class Y(Protocol):\n    y: int\ndef funcY(x: Y) -> Y:\n    ...\n# This should generate an error\nfuncY(PossibleY(17))\n@dataclass\nclass PossibleX:\n    x: int = 0\nclass X(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol19",
        "documentation": {}
    },
    {
        "label": "PossibleX",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol19",
        "description": "packages.pyright-internal.src.tests.samples.protocol19",
        "peekOfCode": "class PossibleX:\n    x: int = 0\nclass X(Protocol):\n    x: Final[int] = field()\ndef funcX(x: X) -> X:\n    ...\n# This should generate an error\nfuncX(PossibleX(17))",
        "detail": "packages.pyright-internal.src.tests.samples.protocol19",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol19",
        "description": "packages.pyright-internal.src.tests.samples.protocol19",
        "peekOfCode": "class X(Protocol):\n    x: Final[int] = field()\ndef funcX(x: X) -> X:\n    ...\n# This should generate an error\nfuncX(PossibleX(17))",
        "detail": "packages.pyright-internal.src.tests.samples.protocol19",
        "documentation": {}
    },
    {
        "label": "funcY",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol19",
        "description": "packages.pyright-internal.src.tests.samples.protocol19",
        "peekOfCode": "def funcY(x: Y) -> Y:\n    ...\n# This should generate an error\nfuncY(PossibleY(17))\n@dataclass\nclass PossibleX:\n    x: int = 0\nclass X(Protocol):\n    x: Final[int] = field()\ndef funcX(x: X) -> X:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol19",
        "documentation": {}
    },
    {
        "label": "funcX",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol19",
        "description": "packages.pyright-internal.src.tests.samples.protocol19",
        "peekOfCode": "def funcX(x: X) -> X:\n    ...\n# This should generate an error\nfuncX(PossibleX(17))",
        "detail": "packages.pyright-internal.src.tests.samples.protocol19",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "class Writer(Protocol[T_contra]):\n    def write(self, data: T_contra) -> None:\n        ...\nclass WriteFile:\n    def write(self, data: bytes) -> None:\n        pass\ndef f(writer: Writer[bytes]):\n    pass\ndef g(writer: Writer[T], v: Optional[T] = None):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "WriteFile",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "class WriteFile:\n    def write(self, data: bytes) -> None:\n        pass\ndef f(writer: Writer[bytes]):\n    pass\ndef g(writer: Writer[T], v: Optional[T] = None):\n    pass\ndef h(writer: Writer[StrLike], v: Optional[StrLike] = None):\n    pass\nw = WriteFile()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "def f(writer: Writer[bytes]):\n    pass\ndef g(writer: Writer[T], v: Optional[T] = None):\n    pass\ndef h(writer: Writer[StrLike], v: Optional[StrLike] = None):\n    pass\nw = WriteFile()\nf(w)\ng(w)\nh(w)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "def g(writer: Writer[T], v: Optional[T] = None):\n    pass\ndef h(writer: Writer[StrLike], v: Optional[StrLike] = None):\n    pass\nw = WriteFile()\nf(w)\ng(w)\nh(w)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "def h(writer: Writer[StrLike], v: Optional[StrLike] = None):\n    pass\nw = WriteFile()\nf(w)\ng(w)\nh(w)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "T = TypeVar(\"T\")\nStrLike = TypeVar(\"StrLike\", str, bytes)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\nclass Writer(Protocol[T_contra]):\n    def write(self, data: T_contra) -> None:\n        ...\nclass WriteFile:\n    def write(self, data: bytes) -> None:\n        pass\ndef f(writer: Writer[bytes]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "StrLike",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "StrLike = TypeVar(\"StrLike\", str, bytes)\nT_contra = TypeVar(\"T_contra\", contravariant=True)\nclass Writer(Protocol[T_contra]):\n    def write(self, data: T_contra) -> None:\n        ...\nclass WriteFile:\n    def write(self, data: bytes) -> None:\n        pass\ndef f(writer: Writer[bytes]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "T_contra = TypeVar(\"T_contra\", contravariant=True)\nclass Writer(Protocol[T_contra]):\n    def write(self, data: T_contra) -> None:\n        ...\nclass WriteFile:\n    def write(self, data: bytes) -> None:\n        pass\ndef f(writer: Writer[bytes]):\n    pass\ndef g(writer: Writer[T], v: Optional[T] = None):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol2",
        "description": "packages.pyright-internal.src.tests.samples.protocol2",
        "peekOfCode": "w = WriteFile()\nf(w)\ng(w)\nh(w)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol2",
        "documentation": {}
    },
    {
        "label": "ClsProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol20",
        "description": "packages.pyright-internal.src.tests.samples.protocol20",
        "peekOfCode": "class ClsProtocol(Protocol):\n    def __init__(self):\n        ...\nT1 = TypeVar(\"T1\", bound=\"ClsProtocol\")\nclass Sample:\n    @classmethod\n    def test(cls: Type[T1]) -> T1:\n        return cls()\nreveal_type(Sample.test(), expected_text=\"Sample\")\nreveal_type(Sample().test(), expected_text=\"Sample\")",
        "detail": "packages.pyright-internal.src.tests.samples.protocol20",
        "documentation": {}
    },
    {
        "label": "Sample",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol20",
        "description": "packages.pyright-internal.src.tests.samples.protocol20",
        "peekOfCode": "class Sample:\n    @classmethod\n    def test(cls: Type[T1]) -> T1:\n        return cls()\nreveal_type(Sample.test(), expected_text=\"Sample\")\nreveal_type(Sample().test(), expected_text=\"Sample\")",
        "detail": "packages.pyright-internal.src.tests.samples.protocol20",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol20",
        "description": "packages.pyright-internal.src.tests.samples.protocol20",
        "peekOfCode": "T1 = TypeVar(\"T1\", bound=\"ClsProtocol\")\nclass Sample:\n    @classmethod\n    def test(cls: Type[T1]) -> T1:\n        return cls()\nreveal_type(Sample.test(), expected_text=\"Sample\")\nreveal_type(Sample().test(), expected_text=\"Sample\")",
        "detail": "packages.pyright-internal.src.tests.samples.protocol20",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol21",
        "description": "packages.pyright-internal.src.tests.samples.protocol21",
        "peekOfCode": "class A(Protocol):\n    @property\n    def name(self) -> str:\n        ...\nclass B:\n    name: str\ndef do_something(a: A, class_a: Type[A]) -> None:\n    val1 = a.name\n    reveal_type(val1, expected_text=\"str\")\n    # This should generate an error because accesses to",
        "detail": "packages.pyright-internal.src.tests.samples.protocol21",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol21",
        "description": "packages.pyright-internal.src.tests.samples.protocol21",
        "peekOfCode": "class B:\n    name: str\ndef do_something(a: A, class_a: Type[A]) -> None:\n    val1 = a.name\n    reveal_type(val1, expected_text=\"str\")\n    # This should generate an error because accesses to\n    # properties from a protocol class are not allowed.\n    val2 = class_a.name\n    val3: A = B()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol21",
        "documentation": {}
    },
    {
        "label": "do_something",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol21",
        "description": "packages.pyright-internal.src.tests.samples.protocol21",
        "peekOfCode": "def do_something(a: A, class_a: Type[A]) -> None:\n    val1 = a.name\n    reveal_type(val1, expected_text=\"str\")\n    # This should generate an error because accesses to\n    # properties from a protocol class are not allowed.\n    val2 = class_a.name\n    val3: A = B()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol21",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "class P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:\n        ...\n# This is right, as `_T1_contra` and `_T2_contra` are only covariant\n# with the argument type.\nclass P2(Protocol[_T1_contra, _T2_contra]):\n    def m1(self, a: Union[_T1_contra, _T2_contra]) -> None:\n        ...\n# This is right, as `_T1` and `_T2` are both covariant with the\n# argument type and the return type.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "class P2(Protocol[_T1_contra, _T2_contra]):\n    def m1(self, a: Union[_T1_contra, _T2_contra]) -> None:\n        ...\n# This is right, as `_T1` and `_T2` are both covariant with the\n# argument type and the return type.\nclass P3(Protocol[_T1, _T2]):\n    def m1(self, a: _T1, b: _T2) -> Union[_T1, _T2]:\n        ...\n# This is right, as `_T1` and `_T2` are both covariant with the\n# argument type and the return type.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "P3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "class P3(Protocol[_T1, _T2]):\n    def m1(self, a: _T1, b: _T2) -> Union[_T1, _T2]:\n        ...\n# This is right, as `_T1` and `_T2` are both covariant with the\n# argument type and the return type.\nclass P4(Protocol[_T1, _T2]):\n    def m2(self, a: Union[_T1, _T2]) -> Tuple[_T1, _T2]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "P4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "class P4(Protocol[_T1, _T2]):\n    def m2(self, a: Union[_T1, _T2]) -> Tuple[_T1, _T2]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T1_co = TypeVar(\"_T1_co\", covariant=True)\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\n_T2 = TypeVar(\"_T2\")\n_T2_co = TypeVar(\"_T2_co\", covariant=True)\n_T2_contra = TypeVar(\"_T2_contra\", contravariant=True)\n# This is right, as `_T1_co` and `_T2_co` are only covariant with\n# return type.\nclass P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "_T1_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "_T1_co = TypeVar(\"_T1_co\", covariant=True)\n_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\n_T2 = TypeVar(\"_T2\")\n_T2_co = TypeVar(\"_T2_co\", covariant=True)\n_T2_contra = TypeVar(\"_T2_contra\", contravariant=True)\n# This is right, as `_T1_co` and `_T2_co` are only covariant with\n# return type.\nclass P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "_T1_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "_T1_contra = TypeVar(\"_T1_contra\", contravariant=True)\n_T2 = TypeVar(\"_T2\")\n_T2_co = TypeVar(\"_T2_co\", covariant=True)\n_T2_contra = TypeVar(\"_T2_contra\", contravariant=True)\n# This is right, as `_T1_co` and `_T2_co` are only covariant with\n# return type.\nclass P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:\n        ...\n# This is right, as `_T1_contra` and `_T2_contra` are only covariant",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\n_T2_co = TypeVar(\"_T2_co\", covariant=True)\n_T2_contra = TypeVar(\"_T2_contra\", contravariant=True)\n# This is right, as `_T1_co` and `_T2_co` are only covariant with\n# return type.\nclass P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:\n        ...\n# This is right, as `_T1_contra` and `_T2_contra` are only covariant\n# with the argument type.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "_T2_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "_T2_co = TypeVar(\"_T2_co\", covariant=True)\n_T2_contra = TypeVar(\"_T2_contra\", contravariant=True)\n# This is right, as `_T1_co` and `_T2_co` are only covariant with\n# return type.\nclass P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:\n        ...\n# This is right, as `_T1_contra` and `_T2_contra` are only covariant\n# with the argument type.\nclass P2(Protocol[_T1_contra, _T2_contra]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "_T2_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol22",
        "description": "packages.pyright-internal.src.tests.samples.protocol22",
        "peekOfCode": "_T2_contra = TypeVar(\"_T2_contra\", contravariant=True)\n# This is right, as `_T1_co` and `_T2_co` are only covariant with\n# return type.\nclass P1(Protocol[_T1_co, _T2_co]):\n    def m1(self) -> Union[_T1_co, _T2_co]:\n        ...\n# This is right, as `_T1_contra` and `_T2_contra` are only covariant\n# with the argument type.\nclass P2(Protocol[_T1_contra, _T2_contra]):\n    def m1(self, a: Union[_T1_contra, _T2_contra]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol22",
        "documentation": {}
    },
    {
        "label": "Proto",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "class Proto(Protocol):\n    @abstractmethod\n    def meth(self) -> int:\n        ...\nclass Concrete:\n    def meth(self) -> int:\n        return 42\ndef func1(cls: Type[Proto]) -> int:\n    return cls().meth()\nfunc1(Concrete)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "Concrete",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "class Concrete:\n    def meth(self) -> int:\n        return 42\ndef func1(cls: Type[Proto]) -> int:\n    return cls().meth()\nfunc1(Concrete)\n# This should generate an error because Proto is a protocol class,\n# not a concrete class type that implements the protocol.\nfunc1(Proto)\nval1: Type[Proto]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "def func1(cls: Type[Proto]) -> int:\n    return cls().meth()\nfunc1(Concrete)\n# This should generate an error because Proto is a protocol class,\n# not a concrete class type that implements the protocol.\nfunc1(Proto)\nval1: Type[Proto]\nval1 = Concrete\nval1().meth()\n# This should generate an error because Proto is a protocol class.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "def func2() -> Type[Proto]:\n    ...\nval1 = func2()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "val1 = Concrete\nval1().meth()\n# This should generate an error because Proto is a protocol class.\nval1 = Proto\ndef func2() -> Type[Proto]:\n    ...\nval1 = func2()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "val1 = Proto\ndef func2() -> Type[Proto]:\n    ...\nval1 = func2()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "val1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol23",
        "description": "packages.pyright-internal.src.tests.samples.protocol23",
        "peekOfCode": "val1 = func2()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol23",
        "documentation": {}
    },
    {
        "label": "ProtoA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class ProtoA(Protocol):\n    def meth(_self, x: int) -> int:\n        ...\nclass ProtoB(Protocol):\n    def meth(_self, self: Any, x: int) -> int:\n        ...\nclass C:\n    def meth(self, x: int) -> int:\n        ...\n# This should generate an error because C.meth isn't compatible",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "ProtoB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class ProtoB(Protocol):\n    def meth(_self, self: Any, x: int) -> int:\n        ...\nclass C:\n    def meth(self, x: int) -> int:\n        ...\n# This should generate an error because C.meth isn't compatible\n# with ProtoA().meth.\na: ProtoA = C\nb: ProtoB = C",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class C:\n    def meth(self, x: int) -> int:\n        ...\n# This should generate an error because C.meth isn't compatible\n# with ProtoA().meth.\na: ProtoA = C\nb: ProtoB = C\nclass ProtoD(Protocol):\n    var1: int\n    @property",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "ProtoD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class ProtoD(Protocol):\n    var1: int\n    @property\n    def var2(self) -> str:\n        ...\nclass E:\n    var1: int\n    var2: str\nclass F:\n    var1: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class E:\n    var1: int\n    var2: str\nclass F:\n    var1: int\n    var2: int\nd: ProtoD = E\n# This should generate an error because var2 is the wrong type.\ne: ProtoD = F\nclass Jumps(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class F:\n    var1: int\n    var2: int\nd: ProtoD = E\n# This should generate an error because var2 is the wrong type.\ne: ProtoD = F\nclass Jumps(Protocol):\n    def jump(self) -> int:\n        ...\nclass Jumper1:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "Jumps",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class Jumps(Protocol):\n    def jump(self) -> int:\n        ...\nclass Jumper1:\n    @classmethod\n    def jump(cls) -> int:\n        ...\nclass Jumper2:\n    def jump(self) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "Jumper1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class Jumper1:\n    @classmethod\n    def jump(cls) -> int:\n        ...\nclass Jumper2:\n    def jump(self) -> int:\n        ...\ndef do_jump(j: Jumps):\n    print(j.jump())\ndo_jump(Jumper1)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "Jumper2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "class Jumper2:\n    def jump(self) -> int:\n        ...\ndef do_jump(j: Jumps):\n    print(j.jump())\ndo_jump(Jumper1)\ndo_jump(Jumper2())",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "do_jump",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol24",
        "description": "packages.pyright-internal.src.tests.samples.protocol24",
        "peekOfCode": "def do_jump(j: Jumps):\n    print(j.jump())\ndo_jump(Jumper1)\ndo_jump(Jumper2())",
        "detail": "packages.pyright-internal.src.tests.samples.protocol24",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol25",
        "description": "packages.pyright-internal.src.tests.samples.protocol25",
        "peekOfCode": "class B:\n    ...\nclass C:\n    def __class_getitem__(cls, __item: Any) -> Any:\n        ...\nclass SupportsClassGetItem(Protocol):\n    __slots__: str | Iterable[str] = ()\n    def __class_getitem__(cls, __item: Any) -> Any:\n        ...\nb1: SupportsClassGetItem = B()  # OK (missing __class_getitem__ is ignored)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol25",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol25",
        "description": "packages.pyright-internal.src.tests.samples.protocol25",
        "peekOfCode": "class C:\n    def __class_getitem__(cls, __item: Any) -> Any:\n        ...\nclass SupportsClassGetItem(Protocol):\n    __slots__: str | Iterable[str] = ()\n    def __class_getitem__(cls, __item: Any) -> Any:\n        ...\nb1: SupportsClassGetItem = B()  # OK (missing __class_getitem__ is ignored)\nc1: SupportsClassGetItem = C()  # OK\n# This should generate an error because __class_getitem__ is not exempt",
        "detail": "packages.pyright-internal.src.tests.samples.protocol25",
        "documentation": {}
    },
    {
        "label": "SupportsClassGetItem",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol25",
        "description": "packages.pyright-internal.src.tests.samples.protocol25",
        "peekOfCode": "class SupportsClassGetItem(Protocol):\n    __slots__: str | Iterable[str] = ()\n    def __class_getitem__(cls, __item: Any) -> Any:\n        ...\nb1: SupportsClassGetItem = B()  # OK (missing __class_getitem__ is ignored)\nc1: SupportsClassGetItem = C()  # OK\n# This should generate an error because __class_getitem__ is not exempt\n# when performing class object protocol matching.\nb2: SupportsClassGetItem = B  # Error\nc2: SupportsClassGetItem = C  # OK",
        "detail": "packages.pyright-internal.src.tests.samples.protocol25",
        "documentation": {}
    },
    {
        "label": "SupportsIndex",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol26",
        "description": "packages.pyright-internal.src.tests.samples.protocol26",
        "peekOfCode": "class SupportsIndex(Protocol):\n    def __index__(self) -> int:\n        ...\nclass TupleLike(Sequence[_T_co]):\n    @overload\n    def __getitem__(self, __x: SupportsIndex) -> _T_co:\n        ...\n    @overload\n    def __getitem__(self, __x: slice) -> TupleLike[_T_co]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol26",
        "documentation": {}
    },
    {
        "label": "TupleLike",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol26",
        "description": "packages.pyright-internal.src.tests.samples.protocol26",
        "peekOfCode": "class TupleLike(Sequence[_T_co]):\n    @overload\n    def __getitem__(self, __x: SupportsIndex) -> _T_co:\n        ...\n    @overload\n    def __getitem__(self, __x: slice) -> TupleLike[_T_co]:\n        ...\n    def __getitem__(self, __x: slice | SupportsIndex) -> _T_co | TupleLike[_T_co]:\n        ...\nclass NestedSequence(Protocol[_T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol26",
        "documentation": {}
    },
    {
        "label": "NestedSequence",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol26",
        "description": "packages.pyright-internal.src.tests.samples.protocol26",
        "peekOfCode": "class NestedSequence(Protocol[_T_co]):\n    @overload\n    def __getitem__(self, index: int, /) -> _T_co | NestedSequence[_T_co]:\n        ...\n    @overload\n    def __getitem__(self, index: slice, /) -> NestedSequence[_T_co]:\n        ...\ndef func(t: TupleLike[int]):\n    x: Union[int, NestedSequence[int]] = t\n    y: NestedSequence[int] = t",
        "detail": "packages.pyright-internal.src.tests.samples.protocol26",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol26",
        "description": "packages.pyright-internal.src.tests.samples.protocol26",
        "peekOfCode": "def func(t: TupleLike[int]):\n    x: Union[int, NestedSequence[int]] = t\n    y: NestedSequence[int] = t",
        "detail": "packages.pyright-internal.src.tests.samples.protocol26",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol26",
        "description": "packages.pyright-internal.src.tests.samples.protocol26",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\nclass SupportsIndex(Protocol):\n    def __index__(self) -> int:\n        ...\nclass TupleLike(Sequence[_T_co]):\n    @overload\n    def __getitem__(self, __x: SupportsIndex) -> _T_co:\n        ...\n    @overload\n    def __getitem__(self, __x: slice) -> TupleLike[_T_co]:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol26",
        "documentation": {}
    },
    {
        "label": "Protocol1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Protocol1(Protocol):\n    cm1: ClassVar[int]\n    cm2: ClassVar[int] = 0\n    im1: int\n    im2: int = 2\n    im3: int\n    def __init__(self):\n        self.im3 = 3\nclass Protocol2(Protocol):\n    cm10: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Protocol2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Protocol2(Protocol):\n    cm10: int\nclass Protocol3(Protocol2, Protocol):\n    cm11: int\n# This should generate an error.\nclass Concrete1(Protocol1):\n    ...\nclass Concrete2(Protocol1):\n    cm1 = 3\n    im1 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Protocol3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Protocol3(Protocol2, Protocol):\n    cm11: int\n# This should generate an error.\nclass Concrete1(Protocol1):\n    ...\nclass Concrete2(Protocol1):\n    cm1 = 3\n    im1 = 0\n# This should generate an error.\nclass Concrete3(Protocol1, Protocol3):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Concrete1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Concrete1(Protocol1):\n    ...\nclass Concrete2(Protocol1):\n    cm1 = 3\n    im1 = 0\n# This should generate an error.\nclass Concrete3(Protocol1, Protocol3):\n    cm1 = 3\n    def __init__(self):\n        im1 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Concrete2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Concrete2(Protocol1):\n    cm1 = 3\n    im1 = 0\n# This should generate an error.\nclass Concrete3(Protocol1, Protocol3):\n    cm1 = 3\n    def __init__(self):\n        im1 = 0\nclass Concrete4(Protocol1, Protocol3):\n    cm1 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Concrete3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Concrete3(Protocol1, Protocol3):\n    cm1 = 3\n    def __init__(self):\n        im1 = 0\nclass Concrete4(Protocol1, Protocol3):\n    cm1 = 3\n    cm10 = 3\n    def __init__(self):\n        self.im1 = 3\n        self.im10 = 10",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Concrete4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Concrete4(Protocol1, Protocol3):\n    cm1 = 3\n    cm10 = 3\n    def __init__(self):\n        self.im1 = 3\n        self.im10 = 10\n        self.cm11 = 3\nclass Protocol5(Protocol):\n    def foo(self) -> int:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Protocol5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Protocol5(Protocol):\n    def foo(self) -> int:\n        ...\n# This should generate an error because \"foo\" is\n# not implemented.\nclass Concrete5(Protocol5):\n    pass\nclass Protocol6(Protocol):\n    x: int\nclass Mixin:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Concrete5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Concrete5(Protocol5):\n    pass\nclass Protocol6(Protocol):\n    x: int\nclass Mixin:\n    x = 3\nclass Concrete6(Mixin, Protocol6):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Protocol6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Protocol6(Protocol):\n    x: int\nclass Mixin:\n    x = 3\nclass Concrete6(Mixin, Protocol6):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Mixin",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Mixin:\n    x = 3\nclass Concrete6(Mixin, Protocol6):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "Concrete6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol27",
        "description": "packages.pyright-internal.src.tests.samples.protocol27",
        "peekOfCode": "class Concrete6(Mixin, Protocol6):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.protocol27",
        "documentation": {}
    },
    {
        "label": "MyCallable",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "class MyCallable(Protocol[_T1]):\n    def __call__(self, __x: _T1) -> Any:\n        ...\nclass MyDecorator(Protocol[_T2]):\n    def __call__(self, __x: MyCallable[_T2]) -> Any:\n        ...\ndef decorates_my_callable(__x: MyDecorator[_T3]) -> MyDecorator[_T3]:\n    ...\ndef my_decorator_inner(__x: Tv_my_callable) -> Tv_my_callable:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "MyDecorator",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "class MyDecorator(Protocol[_T2]):\n    def __call__(self, __x: MyCallable[_T2]) -> Any:\n        ...\ndef decorates_my_callable(__x: MyDecorator[_T3]) -> MyDecorator[_T3]:\n    ...\ndef my_decorator_inner(__x: Tv_my_callable) -> Tv_my_callable:\n    ...\ndecorates_my_callable(my_decorator_inner)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "decorates_my_callable",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "def decorates_my_callable(__x: MyDecorator[_T3]) -> MyDecorator[_T3]:\n    ...\ndef my_decorator_inner(__x: Tv_my_callable) -> Tv_my_callable:\n    ...\ndecorates_my_callable(my_decorator_inner)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "my_decorator_inner",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "def my_decorator_inner(__x: Tv_my_callable) -> Tv_my_callable:\n    ...\ndecorates_my_callable(my_decorator_inner)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", contravariant=True)\n_T2 = TypeVar(\"_T2\", covariant=True)\n_T3 = TypeVar(\"_T3\", covariant=True)\nTv_my_callable = TypeVar(\"Tv_my_callable\", bound=\"MyCallable[object]\")\nclass MyCallable(Protocol[_T1]):\n    def __call__(self, __x: _T1) -> Any:\n        ...\nclass MyDecorator(Protocol[_T2]):\n    def __call__(self, __x: MyCallable[_T2]) -> Any:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", covariant=True)\n_T3 = TypeVar(\"_T3\", covariant=True)\nTv_my_callable = TypeVar(\"Tv_my_callable\", bound=\"MyCallable[object]\")\nclass MyCallable(Protocol[_T1]):\n    def __call__(self, __x: _T1) -> Any:\n        ...\nclass MyDecorator(Protocol[_T2]):\n    def __call__(self, __x: MyCallable[_T2]) -> Any:\n        ...\ndef decorates_my_callable(__x: MyDecorator[_T3]) -> MyDecorator[_T3]:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", covariant=True)\nTv_my_callable = TypeVar(\"Tv_my_callable\", bound=\"MyCallable[object]\")\nclass MyCallable(Protocol[_T1]):\n    def __call__(self, __x: _T1) -> Any:\n        ...\nclass MyDecorator(Protocol[_T2]):\n    def __call__(self, __x: MyCallable[_T2]) -> Any:\n        ...\ndef decorates_my_callable(__x: MyDecorator[_T3]) -> MyDecorator[_T3]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "Tv_my_callable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol28",
        "description": "packages.pyright-internal.src.tests.samples.protocol28",
        "peekOfCode": "Tv_my_callable = TypeVar(\"Tv_my_callable\", bound=\"MyCallable[object]\")\nclass MyCallable(Protocol[_T1]):\n    def __call__(self, __x: _T1) -> Any:\n        ...\nclass MyDecorator(Protocol[_T2]):\n    def __call__(self, __x: MyCallable[_T2]) -> Any:\n        ...\ndef decorates_my_callable(__x: MyDecorator[_T3]) -> MyDecorator[_T3]:\n    ...\ndef my_decorator_inner(__x: Tv_my_callable) -> Tv_my_callable:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol28",
        "documentation": {}
    },
    {
        "label": "Partial",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol29",
        "description": "packages.pyright-internal.src.tests.samples.protocol29",
        "peekOfCode": "class Partial(Protocol[_T]):\n    @property\n    def func(self) -> Callable[..., _T]:\n        ...\n    def __new__(\n        cls: Type[Self], __func: Callable[..., _T], *args: Any, **kwargs: Any\n    ) -> Self:\n        ...\ndef f(x: Partial[int]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol29",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol29",
        "description": "packages.pyright-internal.src.tests.samples.protocol29",
        "peekOfCode": "def f(x: Partial[int]):\n    ...\nf(partial(int))",
        "detail": "packages.pyright-internal.src.tests.samples.protocol29",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol29",
        "description": "packages.pyright-internal.src.tests.samples.protocol29",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Partial(Protocol[_T]):\n    @property\n    def func(self) -> Callable[..., _T]:\n        ...\n    def __new__(\n        cls: Type[Self], __func: Callable[..., _T], *args: Any, **kwargs: Any\n    ) -> Self:\n        ...\ndef f(x: Partial[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol29",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class Foo1(Protocol):\n    @property\n    def batch_shape(self) -> int:\n        return 0\nclass MockFoo1:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape\n    @property\n    def batch_shape(self) -> int:\n        return self._batch_shape",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "MockFoo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class MockFoo1:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape\n    @property\n    def batch_shape(self) -> int:\n        return self._batch_shape\n# This should not generate an error.\nd: Foo1 = MockFoo1(batch_shape=1)\nclass Foo2(Protocol):\n    @property",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class Foo2(Protocol):\n    @property\n    def batch_shape(self) -> int:\n        return 0\nclass MockFoo2:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape\n    @property\n    def batch_shape(self) -> float:\n        return self._batch_shape",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "MockFoo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class MockFoo2:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape\n    @property\n    def batch_shape(self) -> float:\n        return self._batch_shape\n# This should generate an error because the\n# type of the batch_shape property is not compatible.\ne: Foo2 = MockFoo2(batch_shape=1)\nclass Foo3(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "Foo3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class Foo3(Protocol):\n    @property\n    def batch_shape(self) -> int:\n        return 0\n    @batch_shape.setter\n    def batch_shape(self, value: int) -> None:\n        pass\nclass MockFoo3:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "MockFoo3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class MockFoo3:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape\n    @property\n    def batch_shape(self) -> int:\n        return self._batch_shape\n# This should generate an error because it is missing\n# a setter.\nf: Foo3 = MockFoo3(batch_shape=1)\nclass Foo4(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "Foo4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class Foo4(Protocol):\n    @property\n    def batch_shape(self) -> int:\n        return 0\n    @batch_shape.deleter\n    def batch_shape(self) -> None:\n        pass\nclass MockFoo4:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "MockFoo4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class MockFoo4:\n    def __init__(self, batch_shape: int):\n        self._batch_shape = batch_shape\n    @property\n    def batch_shape(self) -> int:\n        return self._batch_shape\n    @batch_shape.setter\n    def batch_shape(self, value: int) -> None:\n        pass\n# This should generate an error because it is missing",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "Foo5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class Foo5:\n    @property\n    def real(self: _Self) -> _Self: ...\nclass MockFoo5(Protocol[_T_co]):\n    @property\n    def real(self) -> _T_co: ...\nfoo5 = Foo5()\nh: MockFoo5[Foo5] = foo5",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "MockFoo5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "class MockFoo5(Protocol[_T_co]):\n    @property\n    def real(self) -> _T_co: ...\nfoo5 = Foo5()\nh: MockFoo5[Foo5] = foo5",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\n_Self = TypeVar(\"_Self\")\nclass Foo5:\n    @property\n    def real(self: _Self) -> _Self: ...\nclass MockFoo5(Protocol[_T_co]):\n    @property\n    def real(self) -> _T_co: ...\nfoo5 = Foo5()\nh: MockFoo5[Foo5] = foo5",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "_Self",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "_Self = TypeVar(\"_Self\")\nclass Foo5:\n    @property\n    def real(self: _Self) -> _Self: ...\nclass MockFoo5(Protocol[_T_co]):\n    @property\n    def real(self) -> _T_co: ...\nfoo5 = Foo5()\nh: MockFoo5[Foo5] = foo5",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "foo5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol3",
        "description": "packages.pyright-internal.src.tests.samples.protocol3",
        "peekOfCode": "foo5 = Foo5()\nh: MockFoo5[Foo5] = foo5",
        "detail": "packages.pyright-internal.src.tests.samples.protocol3",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol30",
        "description": "packages.pyright-internal.src.tests.samples.protocol30",
        "peekOfCode": "class P1(Protocol):\n    v1: float\nclass C1(Protocol):\n    v1: int\ndef func1(c1: C1):\n    # This should generate an error because v1 is invariant.\n    x: P1 = c1\nclass P2(Protocol):\n    v1: ClassVar[float]\nclass C2(Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol30",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol30",
        "description": "packages.pyright-internal.src.tests.samples.protocol30",
        "peekOfCode": "class C1(Protocol):\n    v1: int\ndef func1(c1: C1):\n    # This should generate an error because v1 is invariant.\n    x: P1 = c1\nclass P2(Protocol):\n    v1: ClassVar[float]\nclass C2(Protocol):\n    v1: int\ndef func2(c2: C2):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol30",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol30",
        "description": "packages.pyright-internal.src.tests.samples.protocol30",
        "peekOfCode": "class P2(Protocol):\n    v1: ClassVar[float]\nclass C2(Protocol):\n    v1: int\ndef func2(c2: C2):\n    # This should generate an error because v1 is invariant.\n    x: P2 = c2",
        "detail": "packages.pyright-internal.src.tests.samples.protocol30",
        "documentation": {}
    },
    {
        "label": "C2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol30",
        "description": "packages.pyright-internal.src.tests.samples.protocol30",
        "peekOfCode": "class C2(Protocol):\n    v1: int\ndef func2(c2: C2):\n    # This should generate an error because v1 is invariant.\n    x: P2 = c2",
        "detail": "packages.pyright-internal.src.tests.samples.protocol30",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol30",
        "description": "packages.pyright-internal.src.tests.samples.protocol30",
        "peekOfCode": "def func1(c1: C1):\n    # This should generate an error because v1 is invariant.\n    x: P1 = c1\nclass P2(Protocol):\n    v1: ClassVar[float]\nclass C2(Protocol):\n    v1: int\ndef func2(c2: C2):\n    # This should generate an error because v1 is invariant.\n    x: P2 = c2",
        "detail": "packages.pyright-internal.src.tests.samples.protocol30",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol30",
        "description": "packages.pyright-internal.src.tests.samples.protocol30",
        "peekOfCode": "def func2(c2: C2):\n    # This should generate an error because v1 is invariant.\n    x: P2 = c2",
        "detail": "packages.pyright-internal.src.tests.samples.protocol30",
        "documentation": {}
    },
    {
        "label": "Interface",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol31",
        "description": "packages.pyright-internal.src.tests.samples.protocol31",
        "peekOfCode": "class Interface(Protocol[Tct]):\n    def run(self, *, value1: Tct, value2: int) -> object:\n        ...\nclass Implementation(Generic[Tct]):\n    def run(self, value2: float, value1: Tct) -> object:\n        return None\ndef get(_: T) -> Interface[T]:\n    return Implementation[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol31",
        "documentation": {}
    },
    {
        "label": "Implementation",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol31",
        "description": "packages.pyright-internal.src.tests.samples.protocol31",
        "peekOfCode": "class Implementation(Generic[Tct]):\n    def run(self, value2: float, value1: Tct) -> object:\n        return None\ndef get(_: T) -> Interface[T]:\n    return Implementation[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol31",
        "documentation": {}
    },
    {
        "label": "get",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol31",
        "description": "packages.pyright-internal.src.tests.samples.protocol31",
        "peekOfCode": "def get(_: T) -> Interface[T]:\n    return Implementation[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol31",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol31",
        "description": "packages.pyright-internal.src.tests.samples.protocol31",
        "peekOfCode": "T = TypeVar(\"T\")\nTct = TypeVar(\"Tct\", contravariant=True)\nclass Interface(Protocol[Tct]):\n    def run(self, *, value1: Tct, value2: int) -> object:\n        ...\nclass Implementation(Generic[Tct]):\n    def run(self, value2: float, value1: Tct) -> object:\n        return None\ndef get(_: T) -> Interface[T]:\n    return Implementation[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol31",
        "documentation": {}
    },
    {
        "label": "Tct",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol31",
        "description": "packages.pyright-internal.src.tests.samples.protocol31",
        "peekOfCode": "Tct = TypeVar(\"Tct\", contravariant=True)\nclass Interface(Protocol[Tct]):\n    def run(self, *, value1: Tct, value2: int) -> object:\n        ...\nclass Implementation(Generic[Tct]):\n    def run(self, value2: float, value1: Tct) -> object:\n        return None\ndef get(_: T) -> Interface[T]:\n    return Implementation[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol31",
        "documentation": {}
    },
    {
        "label": "Base1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Base1(Protocol[Value]):\n    def method1(self, default: Value) -> Value:\n        ...\nclass Base2(Base1[Value], Protocol):\n    def method2(self, default: Value) -> Value:\n        ...\nclass Interface(Base2[Value], Protocol[Arg, Value]):\n    def another(self, arg: Arg) -> None:\n        ...\nclass Implementation1(Generic[Arg, Value]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Base2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Base2(Base1[Value], Protocol):\n    def method2(self, default: Value) -> Value:\n        ...\nclass Interface(Base2[Value], Protocol[Arg, Value]):\n    def another(self, arg: Arg) -> None:\n        ...\nclass Implementation1(Generic[Arg, Value]):\n    def method1(self, default: Value) -> Value:\n        return default\n    def method2(self, default: Value) -> Value:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Interface",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Interface(Base2[Value], Protocol[Arg, Value]):\n    def another(self, arg: Arg) -> None:\n        ...\nclass Implementation1(Generic[Arg, Value]):\n    def method1(self, default: Value) -> Value:\n        return default\n    def method2(self, default: Value) -> Value:\n        return default\n    def another(self, arg: Arg) -> None:\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Implementation1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Implementation1(Generic[Arg, Value]):\n    def method1(self, default: Value) -> Value:\n        return default\n    def method2(self, default: Value) -> Value:\n        return default\n    def another(self, arg: Arg) -> None:\n        return\ndef func1(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    return Implementation1[Arg, Value]()\nclass Implementation2(Generic[Arg, Value]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Implementation2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Implementation2(Generic[Arg, Value]):\n    def method1(self, default: Value) -> Value:\n        return default\n    def another(self, arg: Arg) -> None:\n        return\ndef func2(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    # This should generate an error because \n    # Implementation2 doesn't implement method2.\n    return Implementation2[Arg, Value]()\nclass Implementation3(Generic[Arg, Value]):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Implementation3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Implementation3(Generic[Arg, Value]):\n    def method1(self, default: int) -> int:\n        return default\n    def method2(self, default: Value) -> Value:\n        return default\n    def another(self, arg: Arg) -> None:\n        return\ndef func3(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    # This should generate an error because \n    # Implementation3's signature doesn't match.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Base4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Base4(Protocol):\n    @overload\n    def method3(self, message: int) -> int:\n        ...\n    @overload\n    def method3(self, message: str) -> str:\n        ...\n    def method3(self, message: str | int):\n        return message\nclass Implementation4(Base4):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Implementation4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "class Implementation4(Base4):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "def func1(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    return Implementation1[Arg, Value]()\nclass Implementation2(Generic[Arg, Value]):\n    def method1(self, default: Value) -> Value:\n        return default\n    def another(self, arg: Arg) -> None:\n        return\ndef func2(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    # This should generate an error because \n    # Implementation2 doesn't implement method2.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "def func2(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    # This should generate an error because \n    # Implementation2 doesn't implement method2.\n    return Implementation2[Arg, Value]()\nclass Implementation3(Generic[Arg, Value]):\n    def method1(self, default: int) -> int:\n        return default\n    def method2(self, default: Value) -> Value:\n        return default\n    def another(self, arg: Arg) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "def func3(arg: Arg, value: Value) -> Interface[Arg, Value]:\n    # This should generate an error because \n    # Implementation3's signature doesn't match.\n    return Implementation3[Arg, Value]()\nclass Base4(Protocol):\n    @overload\n    def method3(self, message: int) -> int:\n        ...\n    @overload\n    def method3(self, message: str) -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Arg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "Arg = TypeVar(\"Arg\", contravariant=True)\nValue = TypeVar(\"Value\")\nclass Base1(Protocol[Value]):\n    def method1(self, default: Value) -> Value:\n        ...\nclass Base2(Base1[Value], Protocol):\n    def method2(self, default: Value) -> Value:\n        ...\nclass Interface(Base2[Value], Protocol[Arg, Value]):\n    def another(self, arg: Arg) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "Value",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol32",
        "description": "packages.pyright-internal.src.tests.samples.protocol32",
        "peekOfCode": "Value = TypeVar(\"Value\")\nclass Base1(Protocol[Value]):\n    def method1(self, default: Value) -> Value:\n        ...\nclass Base2(Base1[Value], Protocol):\n    def method2(self, default: Value) -> Value:\n        ...\nclass Interface(Base2[Value], Protocol[Arg, Value]):\n    def another(self, arg: Arg) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol32",
        "documentation": {}
    },
    {
        "label": "AProto",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol33",
        "description": "packages.pyright-internal.src.tests.samples.protocol33",
        "peekOfCode": "class AProto(Generic[T, U], Protocol):\n    def f(self) -> Union[T, U]:\n        ...\n    def g(self) -> \"AProto[T, U]\":\n        ...\nclass A(Generic[T, U]):\n    def f(self) -> Union[T, U]:\n        raise NotImplementedError\n    def g(self) -> AProto[T, U]:\n        return A[T, U]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol33",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol33",
        "description": "packages.pyright-internal.src.tests.samples.protocol33",
        "peekOfCode": "class A(Generic[T, U]):\n    def f(self) -> Union[T, U]:\n        raise NotImplementedError\n    def g(self) -> AProto[T, U]:\n        return A[T, U]()\nclass BProto(Generic[T, U], Protocol):\n    def f(self) -> Union[T, U]:\n        ...\n    def g(self) -> \"BProto[T, U]\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol33",
        "documentation": {}
    },
    {
        "label": "BProto",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol33",
        "description": "packages.pyright-internal.src.tests.samples.protocol33",
        "peekOfCode": "class BProto(Generic[T, U], Protocol):\n    def f(self) -> Union[T, U]:\n        ...\n    def g(self) -> \"BProto[T, U]\":\n        ...\nclass B(Generic[T, U]):\n    def f(self) -> Union[T, U]:\n        raise NotImplementedError\n    def g(self) -> BProto[T, U]:\n        return B[T, U]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol33",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol33",
        "description": "packages.pyright-internal.src.tests.samples.protocol33",
        "peekOfCode": "class B(Generic[T, U]):\n    def f(self) -> Union[T, U]:\n        raise NotImplementedError\n    def g(self) -> BProto[T, U]:\n        return B[T, U]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol33",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol33",
        "description": "packages.pyright-internal.src.tests.samples.protocol33",
        "peekOfCode": "T = TypeVar(\"T\")\nU = TypeVar(\"U\")\nclass AProto(Generic[T, U], Protocol):\n    def f(self) -> Union[T, U]:\n        ...\n    def g(self) -> \"AProto[T, U]\":\n        ...\nclass A(Generic[T, U]):\n    def f(self) -> Union[T, U]:\n        raise NotImplementedError",
        "detail": "packages.pyright-internal.src.tests.samples.protocol33",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol33",
        "description": "packages.pyright-internal.src.tests.samples.protocol33",
        "peekOfCode": "U = TypeVar(\"U\")\nclass AProto(Generic[T, U], Protocol):\n    def f(self) -> Union[T, U]:\n        ...\n    def g(self) -> \"AProto[T, U]\":\n        ...\nclass A(Generic[T, U]):\n    def f(self) -> Union[T, U]:\n        raise NotImplementedError\n    def g(self) -> AProto[T, U]:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol33",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol34",
        "description": "packages.pyright-internal.src.tests.samples.protocol34",
        "peekOfCode": "class X(Protocol):\n    def f(self) -> int:\n        ...\nclass Y(Generic[T]):\n    def f(self) -> T:\n        raise NotImplementedError\n    def g(self) -> X:\n        # This should generate a type error.\n        return Y[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol34",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol34",
        "description": "packages.pyright-internal.src.tests.samples.protocol34",
        "peekOfCode": "class Y(Generic[T]):\n    def f(self) -> T:\n        raise NotImplementedError\n    def g(self) -> X:\n        # This should generate a type error.\n        return Y[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol34",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol34",
        "description": "packages.pyright-internal.src.tests.samples.protocol34",
        "peekOfCode": "T = TypeVar(\"T\")\nclass X(Protocol):\n    def f(self) -> int:\n        ...\nclass Y(Generic[T]):\n    def f(self) -> T:\n        raise NotImplementedError\n    def g(self) -> X:\n        # This should generate a type error.\n        return Y[T]()",
        "detail": "packages.pyright-internal.src.tests.samples.protocol34",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol35",
        "description": "packages.pyright-internal.src.tests.samples.protocol35",
        "peekOfCode": "class P1(Protocol):\n    x: int\nclass P2(Protocol):\n    y: P1\n@dataclass\nclass A:\n    x: int\n@dataclass\nclass B:\n    y: A",
        "detail": "packages.pyright-internal.src.tests.samples.protocol35",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol35",
        "description": "packages.pyright-internal.src.tests.samples.protocol35",
        "peekOfCode": "class P2(Protocol):\n    y: P1\n@dataclass\nclass A:\n    x: int\n@dataclass\nclass B:\n    y: A\ny: P1 = A(3)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol35",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol35",
        "description": "packages.pyright-internal.src.tests.samples.protocol35",
        "peekOfCode": "class A:\n    x: int\n@dataclass\nclass B:\n    y: A\ny: P1 = A(3)\n# This should generate an error.\nx: P2 = B(A(3))\nz: P1 = A(3)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol35",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol35",
        "description": "packages.pyright-internal.src.tests.samples.protocol35",
        "peekOfCode": "class B:\n    y: A\ny: P1 = A(3)\n# This should generate an error.\nx: P2 = B(A(3))\nz: P1 = A(3)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol35",
        "documentation": {}
    },
    {
        "label": "Template",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol4",
        "description": "packages.pyright-internal.src.tests.samples.protocol4",
        "peekOfCode": "class Template(Protocol):\n    a: int\n    b: ClassVar[str]\n    def method(self) -> None:\n        self.a = 3\n        # This should be an error\n        self.temp: List[int] = []\n    @classmethod\n    def cls_method(cls) -> None:\n        cls.b = \"3\"",
        "detail": "packages.pyright-internal.src.tests.samples.protocol4",
        "documentation": {}
    },
    {
        "label": "Template",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol5",
        "description": "packages.pyright-internal.src.tests.samples.protocol5",
        "peekOfCode": "class Template(Protocol):\n    name: str  # This is a protocol member\n    value: int = 0  # This one too (with default)\n    def method(self) -> None:\n        pass\nclass Concrete:\n    def __init__(self, name: str, value: int) -> None:\n        self.name = name\n        self.value = value\n    def method(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol5",
        "documentation": {}
    },
    {
        "label": "Concrete",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol5",
        "description": "packages.pyright-internal.src.tests.samples.protocol5",
        "peekOfCode": "class Concrete:\n    def __init__(self, name: str, value: int) -> None:\n        self.name = name\n        self.value = value\n    def method(self) -> None:\n        return\nvar: Template = Concrete(\"value\", 42)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol5",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Animal(Protocol[_T1]):\n    species: str\n    attributes: List[_T1]\nclass Mammal(Animal[_T2], Protocol):\n    pass\nclass Ungulate(Mammal[_T3], Protocol):\n    type_of_hooves: _T3\nclass CamelLike(Ungulate[bytes], Protocol):\n    species: Literal[\"camel\"]\nclass Sloth:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Mammal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Mammal(Animal[_T2], Protocol):\n    pass\nclass Ungulate(Mammal[_T3], Protocol):\n    type_of_hooves: _T3\nclass CamelLike(Ungulate[bytes], Protocol):\n    species: Literal[\"camel\"]\nclass Sloth:\n    species: str\n    attributes: List[str]\nclass Armadillo:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Ungulate",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Ungulate(Mammal[_T3], Protocol):\n    type_of_hooves: _T3\nclass CamelLike(Ungulate[bytes], Protocol):\n    species: Literal[\"camel\"]\nclass Sloth:\n    species: str\n    attributes: List[str]\nclass Armadillo:\n    species: str\n    attributes: List[bytes]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "CamelLike",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class CamelLike(Ungulate[bytes], Protocol):\n    species: Literal[\"camel\"]\nclass Sloth:\n    species: str\n    attributes: List[str]\nclass Armadillo:\n    species: str\n    attributes: List[bytes]\nclass Tapir:\n    species: str",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Sloth",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Sloth:\n    species: str\n    attributes: List[str]\nclass Armadillo:\n    species: str\n    attributes: List[bytes]\nclass Tapir:\n    species: str\nclass Camel:\n    species: Literal[\"camel\"]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Armadillo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Armadillo:\n    species: str\n    attributes: List[bytes]\nclass Tapir:\n    species: str\nclass Camel:\n    species: Literal[\"camel\"]\n    attributes: List[bytes]\n    type_of_hooves: bytes\nclass Cow:",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Tapir",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Tapir:\n    species: str\nclass Camel:\n    species: Literal[\"camel\"]\n    attributes: List[bytes]\n    type_of_hooves: bytes\nclass Cow:\n    species: str\n    attributes: List[str]\n    type_of_hooves: str",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Camel",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Camel:\n    species: Literal[\"camel\"]\n    attributes: List[bytes]\n    type_of_hooves: bytes\nclass Cow:\n    species: str\n    attributes: List[str]\n    type_of_hooves: str\na: Mammal[str] = Sloth()\n# This should generage an error because Armadillo",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "Cow",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "class Cow:\n    species: str\n    attributes: List[str]\n    type_of_hooves: str\na: Mammal[str] = Sloth()\n# This should generage an error because Armadillo\n# uses bytes for its attributes, not str.\nb: Mammal[str] = Armadillo()\n# This should generate an error because Tapir\n# doesn't provide an attributes.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Animal(Protocol[_T1]):\n    species: str\n    attributes: List[_T1]\nclass Mammal(Animal[_T2], Protocol):\n    pass\nclass Ungulate(Mammal[_T3], Protocol):\n    type_of_hooves: _T3",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\n_T3 = TypeVar(\"_T3\")\nclass Animal(Protocol[_T1]):\n    species: str\n    attributes: List[_T1]\nclass Mammal(Animal[_T2], Protocol):\n    pass\nclass Ungulate(Mammal[_T3], Protocol):\n    type_of_hooves: _T3\nclass CamelLike(Ungulate[bytes], Protocol):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol6",
        "description": "packages.pyright-internal.src.tests.samples.protocol6",
        "peekOfCode": "_T3 = TypeVar(\"_T3\")\nclass Animal(Protocol[_T1]):\n    species: str\n    attributes: List[_T1]\nclass Mammal(Animal[_T2], Protocol):\n    pass\nclass Ungulate(Mammal[_T3], Protocol):\n    type_of_hooves: _T3\nclass CamelLike(Ungulate[bytes], Protocol):\n    species: Literal[\"camel\"]",
        "detail": "packages.pyright-internal.src.tests.samples.protocol6",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol7",
        "description": "packages.pyright-internal.src.tests.samples.protocol7",
        "peekOfCode": "class P1(Protocol):\n    name: str\n@runtime_checkable\nclass P2(Protocol):\n    name: str\ndef foo(a: int):\n    # This should generate an error because P1 is not\n    # runtime_checkable.\n    if isinstance(a, P1):\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.protocol7",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol7",
        "description": "packages.pyright-internal.src.tests.samples.protocol7",
        "peekOfCode": "class P2(Protocol):\n    name: str\ndef foo(a: int):\n    # This should generate an error because P1 is not\n    # runtime_checkable.\n    if isinstance(a, P1):\n        return\n    if isinstance(a, P2):\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.protocol7",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol7",
        "description": "packages.pyright-internal.src.tests.samples.protocol7",
        "peekOfCode": "def foo(a: int):\n    # This should generate an error because P1 is not\n    # runtime_checkable.\n    if isinstance(a, P1):\n        return\n    if isinstance(a, P2):\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.protocol7",
        "documentation": {}
    },
    {
        "label": "_BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol8",
        "description": "packages.pyright-internal.src.tests.samples.protocol8",
        "peekOfCode": "class _BaseClass:\n    ...\nclass _Protocol1(Protocol):\n    def __call__(self, p1: str, p2) -> _BaseClass:\n        ...\ndef func1(callback: _Protocol1):\n    pass\nclass _Class1(_BaseClass):\n    def __init__(self, my_str: str):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.protocol8",
        "documentation": {}
    },
    {
        "label": "_Protocol1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol8",
        "description": "packages.pyright-internal.src.tests.samples.protocol8",
        "peekOfCode": "class _Protocol1(Protocol):\n    def __call__(self, p1: str, p2) -> _BaseClass:\n        ...\ndef func1(callback: _Protocol1):\n    pass\nclass _Class1(_BaseClass):\n    def __init__(self, my_str: str):\n        ...\nclass _Class2(_BaseClass):\n    def __init__(self, p1: str, p2: str):",
        "detail": "packages.pyright-internal.src.tests.samples.protocol8",
        "documentation": {}
    },
    {
        "label": "_Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol8",
        "description": "packages.pyright-internal.src.tests.samples.protocol8",
        "peekOfCode": "class _Class1(_BaseClass):\n    def __init__(self, my_str: str):\n        ...\nclass _Class2(_BaseClass):\n    def __init__(self, p1: str, p2: str):\n        ...\n# This should generate an error because the\n# parameter types don't match.\nfunc1(_Class1)\nfunc1(_Class2)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol8",
        "documentation": {}
    },
    {
        "label": "_Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol8",
        "description": "packages.pyright-internal.src.tests.samples.protocol8",
        "peekOfCode": "class _Class2(_BaseClass):\n    def __init__(self, p1: str, p2: str):\n        ...\n# This should generate an error because the\n# parameter types don't match.\nfunc1(_Class1)\nfunc1(_Class2)",
        "detail": "packages.pyright-internal.src.tests.samples.protocol8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol8",
        "description": "packages.pyright-internal.src.tests.samples.protocol8",
        "peekOfCode": "def func1(callback: _Protocol1):\n    pass\nclass _Class1(_BaseClass):\n    def __init__(self, my_str: str):\n        ...\nclass _Class2(_BaseClass):\n    def __init__(self, p1: str, p2: str):\n        ...\n# This should generate an error because the\n# parameter types don't match.",
        "detail": "packages.pyright-internal.src.tests.samples.protocol8",
        "documentation": {}
    },
    {
        "label": "TreeLike",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol9",
        "description": "packages.pyright-internal.src.tests.samples.protocol9",
        "peekOfCode": "class TreeLike(Protocol):\n    value: int\n    @property\n    def left(self) -> Optional[\"TreeLike\"]:\n        ...\n    @property\n    def right(self) -> Optional[\"TreeLike\"]:\n        ...\nclass SimpleTree:\n    value: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocol9",
        "documentation": {}
    },
    {
        "label": "SimpleTree",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocol9",
        "description": "packages.pyright-internal.src.tests.samples.protocol9",
        "peekOfCode": "class SimpleTree:\n    value: int\n    @property\n    def left(self) -> Optional[\"SimpleTree\"]:\n        return self._left\n    @property\n    def right(self) -> Optional[\"SimpleTree\"]:\n        return self._right\n    def __init__(self, value: int) -> None:\n        self.value = value",
        "detail": "packages.pyright-internal.src.tests.samples.protocol9",
        "documentation": {}
    },
    {
        "label": "func_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule1",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule1",
        "peekOfCode": "def func_1(a: int, b: str) -> str:\n    return \"hi\"\ndef func_2() -> str:\n    return \"hi\"",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule1",
        "documentation": {}
    },
    {
        "label": "func_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule1",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule1",
        "peekOfCode": "def func_2() -> str:\n    return \"hi\"",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule1",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "class P1(Protocol):\n    var_1: int\n    var_2: Union[int, str]\n    def func_1(self, a: int, b: str) -> str:\n        ...\n    @staticmethod\n    def func_2() -> str:\n        ...\nv1: P1 = protocolModule1\n@runtime_checkable",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "class P2(Protocol):\n    var_1: str\n# This should generate an error because var_1 has the\n# wrong type.\nv2: P2 = protocolModule1\nclass P3(Protocol):\n    def func_1(self, a: int, b: str) -> int:\n        ...\n# This should generate an error because func_1 has the\n# wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "P3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "class P3(Protocol):\n    def func_1(self, a: int, b: str) -> int:\n        ...\n# This should generate an error because func_1 has the\n# wrong type.\nv3: P3 = protocolModule1\nclass P4(Protocol):\n    def func_2(self) -> str:\n        ...\n    y: int",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "P4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "class P4(Protocol):\n    def func_2(self) -> str:\n        ...\n    y: int\n# This should generate an error because y is missing.\nv4: P4 = protocolModule1\n_T = TypeVar(\"_T\", bound=P2)\nclass NonProtocol:\n    ...\n# Test type narrowing of module symbols for isinstance checks.",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "NonProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "class NonProtocol:\n    ...\n# Test type narrowing of module symbols for isinstance checks.\ndef func1(x: Type[_T]):\n    if isinstance(datetime, (P1, P2, NonProtocol, x)):\n        reveal_type(datetime, expected_text=\"P1 | P2 | _T@func1\")\n    else:\n        reveal_type(datetime, expected_text='Module(\"datetime\")')\ndef func2():\n    if not isinstance(datetime, P1):",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "def func1(x: Type[_T]):\n    if isinstance(datetime, (P1, P2, NonProtocol, x)):\n        reveal_type(datetime, expected_text=\"P1 | P2 | _T@func1\")\n    else:\n        reveal_type(datetime, expected_text='Module(\"datetime\")')\ndef func2():\n    if not isinstance(datetime, P1):\n        reveal_type(datetime, expected_text='Module(\"datetime\")')\n    else:\n        reveal_type(datetime, expected_text=\"P1\")",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "def func2():\n    if not isinstance(datetime, P1):\n        reveal_type(datetime, expected_text='Module(\"datetime\")')\n    else:\n        reveal_type(datetime, expected_text=\"P1\")\ndef func3():\n    my_module = import_module(\"my_module\")\n    if isinstance(my_module, (P1, NonProtocol)):\n        reveal_type(my_module, expected_text=\"P1\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "def func3():\n    my_module = import_module(\"my_module\")\n    if isinstance(my_module, (P1, NonProtocol)):\n        reveal_type(my_module, expected_text=\"P1\")\n    else:\n        reveal_type(my_module, expected_text=\"ModuleType\")",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=P2)\nclass NonProtocol:\n    ...\n# Test type narrowing of module symbols for isinstance checks.\ndef func1(x: Type[_T]):\n    if isinstance(datetime, (P1, P2, NonProtocol, x)):\n        reveal_type(datetime, expected_text=\"P1 | P2 | _T@func1\")\n    else:\n        reveal_type(datetime, expected_text='Module(\"datetime\")')\ndef func2():",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule2",
        "documentation": {}
    },
    {
        "label": "Fn",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "peekOfCode": "class Fn(Protocol[Y]):\n    def __call__(self, y: Y) -> None:\n        ...\ndef x(x: Fn[int]) -> None:\n    print(x)",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "peekOfCode": "def x(x: Fn[int]) -> None:\n    print(x)",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "documentation": {}
    },
    {
        "label": "Y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "peekOfCode": "Y = TypeVar(\"Y\", contravariant=True)\nclass Fn(Protocol[Y]):\n    def __call__(self, y: Y) -> None:\n        ...\ndef x(x: Fn[int]) -> None:\n    print(x)",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule3",
        "documentation": {}
    },
    {
        "label": "FnHandler",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "peekOfCode": "class FnHandler(Protocol[X]):\n    def __call__(self, x: Fn[X]) -> None:\n        ...\nclass ModuleSpec(Protocol[Z]):\n    x: FnHandler[Z]\nm1: ModuleSpec[int] = protocolModule3\nm1.x(lambda y: None)\n# This should generate an error.\nm2: ModuleSpec[str] = protocolModule3",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "documentation": {}
    },
    {
        "label": "ModuleSpec",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "peekOfCode": "class ModuleSpec(Protocol[Z]):\n    x: FnHandler[Z]\nm1: ModuleSpec[int] = protocolModule3\nm1.x(lambda y: None)\n# This should generate an error.\nm2: ModuleSpec[str] = protocolModule3",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "peekOfCode": "X = TypeVar(\"X\", covariant=True)\nZ = TypeVar(\"Z\")\nclass FnHandler(Protocol[X]):\n    def __call__(self, x: Fn[X]) -> None:\n        ...\nclass ModuleSpec(Protocol[Z]):\n    x: FnHandler[Z]\nm1: ModuleSpec[int] = protocolModule3\nm1.x(lambda y: None)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "documentation": {}
    },
    {
        "label": "Z",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "description": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "peekOfCode": "Z = TypeVar(\"Z\")\nclass FnHandler(Protocol[X]):\n    def __call__(self, x: Fn[X]) -> None:\n        ...\nclass ModuleSpec(Protocol[Z]):\n    x: FnHandler[Z]\nm1: ModuleSpec[int] = protocolModule3\nm1.x(lambda y: None)\n# This should generate an error.\nm2: ModuleSpec[str] = protocolModule3",
        "detail": "packages.pyright-internal.src.tests.samples.protocolModule4",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "description": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "peekOfCode": "class ClassA:\n    def __init__(\n        self,\n        name,\n        description=_DEFAULT_VALUE,\n    ):\n        ...\na1: List[ClassA] = [ClassA(\"a\", description=\"b\")]\na2: List[ClassA] = [ClassA(\"c\")]\na3: List[ClassA] = a1 + a2",
        "detail": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "description": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "peekOfCode": "class ClassB:\n    def __init__(self, a, b, c=None, d=\"\"):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.d = d\nb1 = ClassB(1, \"\")\nreveal_type(b1.a, expected_text=\"int\")\nreveal_type(b1.b, expected_text=\"str\")\nreveal_type(b1.c, expected_text=\"Unknown | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "documentation": {}
    },
    {
        "label": "_DEFAULT_VALUE",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "description": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "peekOfCode": "_DEFAULT_VALUE = object()\nclass ClassA:\n    def __init__(\n        self,\n        name,\n        description=_DEFAULT_VALUE,\n    ):\n        ...\na1: List[ClassA] = [ClassA(\"a\", description=\"b\")]\na2: List[ClassA] = [ClassA(\"c\")]",
        "detail": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "description": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "peekOfCode": "b1 = ClassB(1, \"\")\nreveal_type(b1.a, expected_text=\"int\")\nreveal_type(b1.b, expected_text=\"str\")\nreveal_type(b1.c, expected_text=\"Unknown | None\")\nreveal_type(b1.d, expected_text=\"str\")\nb2 = ClassB(\"\", 1.2, 2, \"\")\nreveal_type(b2.a, expected_text=\"str\")\nreveal_type(b2.b, expected_text=\"float\")\nreveal_type(b2.c, expected_text=\"Unknown | None\")\nreveal_type(b2.d, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "description": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "peekOfCode": "b2 = ClassB(\"\", 1.2, 2, \"\")\nreveal_type(b2.a, expected_text=\"str\")\nreveal_type(b2.b, expected_text=\"float\")\nreveal_type(b2.c, expected_text=\"Unknown | None\")\nreveal_type(b2.d, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.pseudoGeneric1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.pyrightIgnore1",
        "description": "packages.pyright-internal.src.tests.samples.pyrightIgnore1",
        "peekOfCode": "def foo(self, x: Optional[int]) -> str:\n    # This should suppress the error\n    x + \"hi\"  # pyright: ignore - test\n    # This should not suppress the error because the rule doesn't match.\n    return 3  # pyright: ignore [foo]\nif sys.version_info < (3, 8):\n    x = 3  # pyright: ignore",
        "detail": "packages.pyright-internal.src.tests.samples.pyrightIgnore1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.pyrightIgnore2",
        "description": "packages.pyright-internal.src.tests.samples.pyrightIgnore2",
        "peekOfCode": "def foo(self, x: Optional[int]) -> str:\n    # This should suppress the error\n    v1 = x + \"hi\"  # pyright: ignore - test\n    # This is unnecessary\n    v2 = x + x  # pyright: ignore\n    # This will not suppress the error\n    # These are both unnecessary\n    v3 = x + x  # pyright: ignore [foo, bar]\n    # This will not suppress the error\n    v4 = x + x  # pyright: ignore []",
        "detail": "packages.pyright-internal.src.tests.samples.pyrightIgnore2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.python2",
        "description": "packages.pyright-internal.src.tests.samples.python2",
        "peekOfCode": "def foo(a, (b, c), d):\n    pass\n# This should generate an error.\nraise NameError, a > 4, a < 4",
        "detail": "packages.pyright-internal.src.tests.samples.python2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.python2",
        "description": "packages.pyright-internal.src.tests.samples.python2",
        "peekOfCode": "b = 3\n# This should generate an error.\na = `b`\n# This should generate an error.\ndef foo(a, (b, c), d):\n    pass\n# This should generate an error.\nraise NameError, a > 4, a < 4",
        "detail": "packages.pyright-internal.src.tests.samples.python2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.python2",
        "description": "packages.pyright-internal.src.tests.samples.python2",
        "peekOfCode": "a = `b`\n# This should generate an error.\ndef foo(a, (b, c), d):\n    pass\n# This should generate an error.\nraise NameError, a > 4, a < 4",
        "detail": "packages.pyright-internal.src.tests.samples.python2",
        "documentation": {}
    },
    {
        "label": "MyTree",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "MyTree = List[Union[\"MyTree\", int]]\nt1: MyTree = [1, 2, 3, [3, 4], [[3], 5]]\n# This should generate an error because a str is not allowed.\nt2: MyTree = [3, \"\"]\n# This should generate an error because a str is not allowed.\nt3: MyTree = [1, 2, 3, [3, 4], [3, 4, 5, [3, \"4\"]]]\n_T = TypeVar(\"_T\")\nGenericUnion = Union[int, _T]\ni1: GenericUnion[str] = \"hi\"\ni1 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "_T = TypeVar(\"_T\")\nGenericUnion = Union[int, _T]\ni1: GenericUnion[str] = \"hi\"\ni1 = 3\ni2: GenericUnion[float] = 3\n# This should generate an error because str isn't compatible.\ni2 = \"hi\"\nFoo = Union[bool, List[\"Foo\"], Dict[\"Foo\", \"Foo\"]]\nbar1: Foo = [True, [True, False]]\nbar2: Foo = [True, [True], {True: False}]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "GenericUnion",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "GenericUnion = Union[int, _T]\ni1: GenericUnion[str] = \"hi\"\ni1 = 3\ni2: GenericUnion[float] = 3\n# This should generate an error because str isn't compatible.\ni2 = \"hi\"\nFoo = Union[bool, List[\"Foo\"], Dict[\"Foo\", \"Foo\"]]\nbar1: Foo = [True, [True, False]]\nbar2: Foo = [True, [True], {True: False}]\nbar4: Foo = {True: [False]}",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "i1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "i1 = 3\ni2: GenericUnion[float] = 3\n# This should generate an error because str isn't compatible.\ni2 = \"hi\"\nFoo = Union[bool, List[\"Foo\"], Dict[\"Foo\", \"Foo\"]]\nbar1: Foo = [True, [True, False]]\nbar2: Foo = [True, [True], {True: False}]\nbar4: Foo = {True: [False]}\n# These should generate errors.\nbaz1: Foo = [True, [\"True\", False]]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "i2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "i2 = \"hi\"\nFoo = Union[bool, List[\"Foo\"], Dict[\"Foo\", \"Foo\"]]\nbar1: Foo = [True, [True, False]]\nbar2: Foo = [True, [True], {True: False}]\nbar4: Foo = {True: [False]}\n# These should generate errors.\nbaz1: Foo = [True, [\"True\", False]]\nbaz2: Foo = [True, [True], {True: \"False\"}]\nbaz4: Foo = {True: [\"False\"]}\nJson = Union[None, int, str, float, List[\"Json\"], Dict[str, \"Json\"]]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "Foo = Union[bool, List[\"Foo\"], Dict[\"Foo\", \"Foo\"]]\nbar1: Foo = [True, [True, False]]\nbar2: Foo = [True, [True], {True: False}]\nbar4: Foo = {True: [False]}\n# These should generate errors.\nbaz1: Foo = [True, [\"True\", False]]\nbaz2: Foo = [True, [True], {True: \"False\"}]\nbaz4: Foo = {True: [\"False\"]}\nJson = Union[None, int, str, float, List[\"Json\"], Dict[str, \"Json\"]]\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "Json",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "Json = Union[None, int, str, float, List[\"Json\"], Dict[str, \"Json\"]]\n# This should generate an error\na1: Json = {\"a\": 1, \"b\": 3j}\n# This should generate an error\na2: Json = [2, 3j]\nRecursiveTuple = Union[str | int, tuple[\"RecursiveTuple\", ...]]\nb1: RecursiveTuple = (1, 1)\nb2: RecursiveTuple = (1, \"1\")\nb3: RecursiveTuple = (1, \"1\", 1, \"2\")\nb4: RecursiveTuple = (1, (\"1\", 1), \"2\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "RecursiveTuple",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "RecursiveTuple = Union[str | int, tuple[\"RecursiveTuple\", ...]]\nb1: RecursiveTuple = (1, 1)\nb2: RecursiveTuple = (1, \"1\")\nb3: RecursiveTuple = (1, \"1\", 1, \"2\")\nb4: RecursiveTuple = (1, (\"1\", 1), \"2\")\nb5: RecursiveTuple = (1, (\"1\", 1), (1, (1, 2)))\n# This should generate an error\nb6: RecursiveTuple = (1, (\"1\", 1), (1, (1, [2])))\n# This should generate an error\nb6: RecursiveTuple = (1, [1])",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "RecursiveMapping",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "peekOfCode": "RecursiveMapping = Union[str, int, Mapping[str, \"RecursiveMapping\"]]\nc1: RecursiveMapping = 1\nc2: RecursiveMapping = \"1\"\nc3: RecursiveMapping = {\"1\": \"1\"}\nc4: RecursiveMapping = {\"1\": \"1\", \"2\": 1}\nc5: RecursiveMapping = {\"1\": \"1\", \"2\": 1, \"3\": {}}\nc6: RecursiveMapping = {\"1\": \"1\", \"2\": 1, \"3\": {\"0\": \"0\", \"1\": \"2\", \"2\": {}}}\n# This should generate an error.\nc7: RecursiveMapping = {\"1\": [1]}\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", str, int)\n_T2 = TypeVar(\"_T2\")\nGenericTypeAlias1 = List[Union[\"GenericTypeAlias1[_T1]\", _T1]]\nSpecializedTypeAlias1 = GenericTypeAlias1[str]\na1: SpecializedTypeAlias1 = [\"hi\", [\"hi\", \"hi\"]]\n# This should generate an error because int doesn't match the\n# constraint of the TypeVar _T1.\nSpecializedClass2 = GenericTypeAlias1[float]\nb1: GenericTypeAlias1[str] = [\"hi\", \"bye\", [\"\"], [[\"hi\"]]]\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nGenericTypeAlias1 = List[Union[\"GenericTypeAlias1[_T1]\", _T1]]\nSpecializedTypeAlias1 = GenericTypeAlias1[str]\na1: SpecializedTypeAlias1 = [\"hi\", [\"hi\", \"hi\"]]\n# This should generate an error because int doesn't match the\n# constraint of the TypeVar _T1.\nSpecializedClass2 = GenericTypeAlias1[float]\nb1: GenericTypeAlias1[str] = [\"hi\", \"bye\", [\"\"], [[\"hi\"]]]\n# This should generate an error.\nb2: GenericTypeAlias1[str] = [\"hi\", [2.4]]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "documentation": {}
    },
    {
        "label": "GenericTypeAlias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "peekOfCode": "GenericTypeAlias1 = List[Union[\"GenericTypeAlias1[_T1]\", _T1]]\nSpecializedTypeAlias1 = GenericTypeAlias1[str]\na1: SpecializedTypeAlias1 = [\"hi\", [\"hi\", \"hi\"]]\n# This should generate an error because int doesn't match the\n# constraint of the TypeVar _T1.\nSpecializedClass2 = GenericTypeAlias1[float]\nb1: GenericTypeAlias1[str] = [\"hi\", \"bye\", [\"\"], [[\"hi\"]]]\n# This should generate an error.\nb2: GenericTypeAlias1[str] = [\"hi\", [2.4]]\nGenericTypeAlias2 = List[Union[\"GenericTypeAlias2[_T1, _T2]\", _T1, _T2]]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "documentation": {}
    },
    {
        "label": "SpecializedTypeAlias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "peekOfCode": "SpecializedTypeAlias1 = GenericTypeAlias1[str]\na1: SpecializedTypeAlias1 = [\"hi\", [\"hi\", \"hi\"]]\n# This should generate an error because int doesn't match the\n# constraint of the TypeVar _T1.\nSpecializedClass2 = GenericTypeAlias1[float]\nb1: GenericTypeAlias1[str] = [\"hi\", \"bye\", [\"\"], [[\"hi\"]]]\n# This should generate an error.\nb2: GenericTypeAlias1[str] = [\"hi\", [2.4]]\nGenericTypeAlias2 = List[Union[\"GenericTypeAlias2[_T1, _T2]\", _T1, _T2]]\nc2: GenericTypeAlias2[str, int] = [[3, [\"hi\"]], \"hi\"]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "documentation": {}
    },
    {
        "label": "SpecializedClass2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "peekOfCode": "SpecializedClass2 = GenericTypeAlias1[float]\nb1: GenericTypeAlias1[str] = [\"hi\", \"bye\", [\"\"], [[\"hi\"]]]\n# This should generate an error.\nb2: GenericTypeAlias1[str] = [\"hi\", [2.4]]\nGenericTypeAlias2 = List[Union[\"GenericTypeAlias2[_T1, _T2]\", _T1, _T2]]\nc2: GenericTypeAlias2[str, int] = [[3, [\"hi\"]], \"hi\"]\nc3: GenericTypeAlias2[str, float] = [[3, [\"hi\", 3.4, [3.4]]], \"hi\"]\n# This should generate an error because a float is a type mismatch.\nc4: GenericTypeAlias2[str, int] = [[3, [\"hi\", 3, [3.4]]], \"hi\"]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "documentation": {}
    },
    {
        "label": "GenericTypeAlias2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "peekOfCode": "GenericTypeAlias2 = List[Union[\"GenericTypeAlias2[_T1, _T2]\", _T1, _T2]]\nc2: GenericTypeAlias2[str, int] = [[3, [\"hi\"]], \"hi\"]\nc3: GenericTypeAlias2[str, float] = [[3, [\"hi\", 3.4, [3.4]]], \"hi\"]\n# This should generate an error because a float is a type mismatch.\nc4: GenericTypeAlias2[str, int] = [[3, [\"hi\", 3, [3.4]]], \"hi\"]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias2",
        "documentation": {}
    },
    {
        "label": "GenericClass0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "peekOfCode": "GenericClass0 = List[Union[GenericClass0, int]]\n# This should generate an error because the type alias directly\n# refers to itself.\nRecursiveUnion = Union[\"RecursiveUnion\", int]\na1: RecursiveUnion = 3\n# This should generate an error because the type alias refers\n# to itself through a mutually-referential type alias.\nMutualReference1 = Union[\"MutualReference2\", int]\nMutualReference2 = Union[\"MutualReference1\", str]\n# This should generate an error because the type alias refers",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "documentation": {}
    },
    {
        "label": "RecursiveUnion",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "peekOfCode": "RecursiveUnion = Union[\"RecursiveUnion\", int]\na1: RecursiveUnion = 3\n# This should generate an error because the type alias refers\n# to itself through a mutually-referential type alias.\nMutualReference1 = Union[\"MutualReference2\", int]\nMutualReference2 = Union[\"MutualReference1\", str]\n# This should generate an error because the type alias refers\n# to itself.\nMutualReference3: TypeAlias = \"MutualReference3\"\nRecursiveType: TypeAlias = list[Union[str, \"RecursiveType\"]]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "documentation": {}
    },
    {
        "label": "MutualReference1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "peekOfCode": "MutualReference1 = Union[\"MutualReference2\", int]\nMutualReference2 = Union[\"MutualReference1\", str]\n# This should generate an error because the type alias refers\n# to itself.\nMutualReference3: TypeAlias = \"MutualReference3\"\nRecursiveType: TypeAlias = list[Union[str, \"RecursiveType\"]]\nreveal_type(RecursiveType, expected_text=\"Type[list[str | RecursiveType]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "documentation": {}
    },
    {
        "label": "MutualReference2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "peekOfCode": "MutualReference2 = Union[\"MutualReference1\", str]\n# This should generate an error because the type alias refers\n# to itself.\nMutualReference3: TypeAlias = \"MutualReference3\"\nRecursiveType: TypeAlias = list[Union[str, \"RecursiveType\"]]\nreveal_type(RecursiveType, expected_text=\"Type[list[str | RecursiveType]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias3",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "def f2(args: JSONStructured):\n    if isinstance(args, List):\n        reveal_type(\n            args,\n            expected_text=\"List[str | float | int | bool | JSONArray | Dict[str, JSONType] | None]\",\n        )\n    else:\n        reveal_type(\n            args,\n            expected_text=\"Dict[str, str | float | int | bool | List[JSONType] | JSONObject | None]\",",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "def f3(args: JSONStructured):\n    if isinstance(args, Dict):\n        reveal_type(\n            args,\n            expected_text=\"Dict[str, str | float | int | bool | List[JSONType] | JSONObject | None]\",\n        )\n    else:\n        reveal_type(\n            args,\n            expected_text=\"List[str | float | int | bool | JSONArray | Dict[str, JSONType] | None]\",",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "def g(xs: LinkedList):\n    while xs is not None:\n        x, rest = xs\n        yield x\n        xs = rest",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "JSONArray",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "JSONArray = List[\"JSONType\"]\nJSONObject = Dict[str, \"JSONType\"]\nJSONPrimitive = Union[str, float, int, bool, None]\nJSONStructured = Union[JSONArray, JSONObject]\nJSONType = Union[JSONPrimitive, JSONStructured]\n# Using type alias checking for list:\ndef f2(args: JSONStructured):\n    if isinstance(args, List):\n        reveal_type(\n            args,",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "JSONObject",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "JSONObject = Dict[str, \"JSONType\"]\nJSONPrimitive = Union[str, float, int, bool, None]\nJSONStructured = Union[JSONArray, JSONObject]\nJSONType = Union[JSONPrimitive, JSONStructured]\n# Using type alias checking for list:\ndef f2(args: JSONStructured):\n    if isinstance(args, List):\n        reveal_type(\n            args,\n            expected_text=\"List[str | float | int | bool | JSONArray | Dict[str, JSONType] | None]\",",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "JSONPrimitive",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "JSONPrimitive = Union[str, float, int, bool, None]\nJSONStructured = Union[JSONArray, JSONObject]\nJSONType = Union[JSONPrimitive, JSONStructured]\n# Using type alias checking for list:\ndef f2(args: JSONStructured):\n    if isinstance(args, List):\n        reveal_type(\n            args,\n            expected_text=\"List[str | float | int | bool | JSONArray | Dict[str, JSONType] | None]\",\n        )",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "JSONStructured",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "JSONStructured = Union[JSONArray, JSONObject]\nJSONType = Union[JSONPrimitive, JSONStructured]\n# Using type alias checking for list:\ndef f2(args: JSONStructured):\n    if isinstance(args, List):\n        reveal_type(\n            args,\n            expected_text=\"List[str | float | int | bool | JSONArray | Dict[str, JSONType] | None]\",\n        )\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "JSONType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "JSONType = Union[JSONPrimitive, JSONStructured]\n# Using type alias checking for list:\ndef f2(args: JSONStructured):\n    if isinstance(args, List):\n        reveal_type(\n            args,\n            expected_text=\"List[str | float | int | bool | JSONArray | Dict[str, JSONType] | None]\",\n        )\n    else:\n        reveal_type(",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "peekOfCode": "LinkedList = Optional[tuple[int, \"LinkedList\"]]\ndef g(xs: LinkedList):\n    while xs is not None:\n        x, rest = xs\n        yield x\n        xs = rest",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias4",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "def f3(x: RecList[int] | RecList[str]) -> None:\n    ...\ndef g3(x: T3):\n    return f3(x)\ndef f4(x: RecList[str] | RecList[int]) -> None:\n    ...\ndef g4(x: T3):\n    return f4(x)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "g3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "def g3(x: T3):\n    return f3(x)\ndef f4(x: RecList[str] | RecList[int]) -> None:\n    ...\ndef g4(x: T3):\n    return f4(x)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "def f4(x: RecList[str] | RecList[int]) -> None:\n    ...\ndef g4(x: T3):\n    return f4(x)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "g4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "def g4(x: T3):\n    return f4(x)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "S = TypeVar(\"S\")\nRecList = Union[Mapping[str, \"RecList[S]\"], Sequence[\"RecList[S]\"], S]\nT3 = TypeVar(\"T3\", RecList[int], RecList[str])\ndef f3(x: RecList[int] | RecList[str]) -> None:\n    ...\ndef g3(x: T3):\n    return f3(x)\ndef f4(x: RecList[str] | RecList[int]) -> None:\n    ...\ndef g4(x: T3):",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "RecList",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "RecList = Union[Mapping[str, \"RecList[S]\"], Sequence[\"RecList[S]\"], S]\nT3 = TypeVar(\"T3\", RecList[int], RecList[str])\ndef f3(x: RecList[int] | RecList[str]) -> None:\n    ...\ndef g3(x: T3):\n    return f3(x)\ndef f4(x: RecList[str] | RecList[int]) -> None:\n    ...\ndef g4(x: T3):\n    return f4(x)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "peekOfCode": "T3 = TypeVar(\"T3\", RecList[int], RecList[str])\ndef f3(x: RecList[int] | RecList[str]) -> None:\n    ...\ndef g3(x: T3):\n    return f3(x)\ndef f4(x: RecList[str] | RecList[int]) -> None:\n    ...\ndef g4(x: T3):\n    return f4(x)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias7",
        "peekOfCode": "def foo(x: A):\n    if isinstance(x, str):\n        print(x)\n    else:\n        for _, v in x.items():\n            foo(v)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias7",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias7",
        "peekOfCode": "A = Union[str, Dict[str, \"A\"]]\ndef foo(x: A):\n    if isinstance(x, str):\n        print(x)\n    else:\n        for _, v in x.items():\n            foo(v)",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias7",
        "documentation": {}
    },
    {
        "label": "_FooOptional",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "peekOfCode": "class _FooOptional(TypedDict, total=False):\n    options: List[AllBar]\n    type: int\nclass Foo(_FooOptional):\n    id: int\n    name: str\nclass BarA(TypedDict):\n    type: int\nclass BarB(TypedDict):\n    options: List[AllBar]",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "peekOfCode": "class Foo(_FooOptional):\n    id: int\n    name: str\nclass BarA(TypedDict):\n    type: int\nclass BarB(TypedDict):\n    options: List[AllBar]\n    type: int\nAllBar = Union[BarA, BarB]\ndef foo(a: AllBar):",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "documentation": {}
    },
    {
        "label": "BarA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "peekOfCode": "class BarA(TypedDict):\n    type: int\nclass BarB(TypedDict):\n    options: List[AllBar]\n    type: int\nAllBar = Union[BarA, BarB]\ndef foo(a: AllBar):\n    reveal_type(a, expected_text=\"BarA | BarB\")\n    options = a.get(\"options\", [])\n    reveal_type(options, expected_text=\"Any | List[BarA | BarB]\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "documentation": {}
    },
    {
        "label": "BarB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "peekOfCode": "class BarB(TypedDict):\n    options: List[AllBar]\n    type: int\nAllBar = Union[BarA, BarB]\ndef foo(a: AllBar):\n    reveal_type(a, expected_text=\"BarA | BarB\")\n    options = a.get(\"options\", [])\n    reveal_type(options, expected_text=\"Any | List[BarA | BarB]\")\n    for option in options:\n        reveal_type(option, expected_text=\"Any | BarA | BarB\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "peekOfCode": "def foo(a: AllBar):\n    reveal_type(a, expected_text=\"BarA | BarB\")\n    options = a.get(\"options\", [])\n    reveal_type(options, expected_text=\"Any | List[BarA | BarB]\")\n    for option in options:\n        reveal_type(option, expected_text=\"Any | BarA | BarB\")\n        reveal_type(option[\"type\"], expected_text=\"Any | int\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "documentation": {}
    },
    {
        "label": "AllBar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "peekOfCode": "AllBar = Union[BarA, BarB]\ndef foo(a: AllBar):\n    reveal_type(a, expected_text=\"BarA | BarB\")\n    options = a.get(\"options\", [])\n    reveal_type(options, expected_text=\"Any | List[BarA | BarB]\")\n    for option in options:\n        reveal_type(option, expected_text=\"Any | BarA | BarB\")\n        reveal_type(option[\"type\"], expected_text=\"Any | int\")",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias8",
        "documentation": {}
    },
    {
        "label": "Example",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "peekOfCode": "class Example(Generic[A]):\n    val: A\na: JSON = {\"a\": \"b\"}\nb: JSON = \"a\"\nc: Example[JSON] = Example(a)\nd: Example[JSON] = Example(\"a\")\ne: Example[JSON] = Example({})\nf: Example[JSON] = Example({\"a\": \"b\"})\ng: Example[JSON] = Example({\"a\": {\"a\": \"b\"}})",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "peekOfCode": "A = TypeVar(\"A\")\nJSON = Union[str, dict[str, \"JSON\"]]\n@dataclass\nclass Example(Generic[A]):\n    val: A\na: JSON = {\"a\": \"b\"}\nb: JSON = \"a\"\nc: Example[JSON] = Example(a)\nd: Example[JSON] = Example(\"a\")\ne: Example[JSON] = Example({})",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "documentation": {}
    },
    {
        "label": "JSON",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "peekOfCode": "JSON = Union[str, dict[str, \"JSON\"]]\n@dataclass\nclass Example(Generic[A]):\n    val: A\na: JSON = {\"a\": \"b\"}\nb: JSON = \"a\"\nc: Example[JSON] = Example(a)\nd: Example[JSON] = Example(\"a\")\ne: Example[JSON] = Example({})\nf: Example[JSON] = Example({\"a\": \"b\"})",
        "detail": "packages.pyright-internal.src.tests.samples.recursiveTypeAlias9",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.required1",
        "description": "packages.pyright-internal.src.tests.samples.required1",
        "peekOfCode": "class TD1(TypedDict):\n    a: Required[int]\n    b: NotRequired[int]\n    # This should generate an error because NotRequired can't be\n    # used in this context.\n    c: NotRequired[NotRequired[int]]\n    # This should generate an error because Required can't be\n    # used in this context.\n    d: Required[Required[int]]\n    e: NotRequired[Annotated[int, \"hi\"]]",
        "detail": "packages.pyright-internal.src.tests.samples.required1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.required1",
        "description": "packages.pyright-internal.src.tests.samples.required1",
        "peekOfCode": "class Foo:\n    # This should generate an error because Required can't be\n    # used in this context.\n    x: Required[int]\n    # This should generate an error because NotRequired can't be\n    # used in this context.\n    y: Required[int]",
        "detail": "packages.pyright-internal.src.tests.samples.required1",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.required2",
        "description": "packages.pyright-internal.src.tests.samples.required2",
        "peekOfCode": "class TD1(TypedDict, total=False):\n    a: Required[int]\n    b: NotRequired[str]\n    c: Required[int | str]\n    d: Required[Optional[str]]\n    e: Required[Literal[1, 2, 3]]\n    f: Required[None]\n    g: Required[Type[int]]\ntd1_1: TD1 = {\"a\": 3, \"c\": \"hi\", \"d\": None, \"e\": 3, \"f\": None, \"g\": int}\n# This should generate an error because a is missing.",
        "detail": "packages.pyright-internal.src.tests.samples.required2",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.required2",
        "description": "packages.pyright-internal.src.tests.samples.required2",
        "peekOfCode": "class TD2(TypedDict, total=True):\n    a: Required[int]\n    b: NotRequired[str]\n    c: Required[int | str]\n    d: NotRequired[Optional[str]]\n    e: NotRequired[Literal[1, 2, 3]]\n    f: NotRequired[None]\n    g: NotRequired[Type[int]]\ntd2_1: TD2 = {\"a\": 3, \"c\": \"hi\", \"d\": None, \"e\": 3, \"f\": None, \"g\": int}\ntd2_2: TD2 = {\"a\": 3, \"c\": \"hi\"}",
        "detail": "packages.pyright-internal.src.tests.samples.required2",
        "documentation": {}
    },
    {
        "label": "Example1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.required3",
        "description": "packages.pyright-internal.src.tests.samples.required3",
        "peekOfCode": "Example1 = TypedDict(\n    \"Example\", {\"required\": Required[int], \"not_required\": NotRequired[int]}\n)\nv1_0: Example1 = {\"required\": 1}\n# This should generage an error.\nv1_1: Example1 = {\"not_required\": 1}\nExample2 = TypedDict(\"Example\", required=Required[int], not_required=NotRequired[int])\nv2_0: Example2 = {\"required\": 1}\n# This should generage an error.\nv2_1: Example2 = {\"not_required\": 1}",
        "detail": "packages.pyright-internal.src.tests.samples.required3",
        "documentation": {}
    },
    {
        "label": "Example2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.required3",
        "description": "packages.pyright-internal.src.tests.samples.required3",
        "peekOfCode": "Example2 = TypedDict(\"Example\", required=Required[int], not_required=NotRequired[int])\nv2_0: Example2 = {\"required\": 1}\n# This should generage an error.\nv2_1: Example2 = {\"not_required\": 1}",
        "detail": "packages.pyright-internal.src.tests.samples.required3",
        "documentation": {}
    },
    {
        "label": "add",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "description": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "peekOfCode": "def add(a: int, b: int) -> int:\n    c = float(a + b)\n    # This should generate an error:\n    # Expression of type 'float' cannot be assigned to return type 'int'\n    return c\ndef addf(a: float, b: float) -> float:\n    c = float(a + b)\n    return c\n# This should generate an error:\n# Argument of type 'float' cannot be assigned to parameter of type 'int'",
        "detail": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "documentation": {}
    },
    {
        "label": "addf",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "description": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "peekOfCode": "def addf(a: float, b: float) -> float:\n    c = float(a + b)\n    return c\n# This should generate an error:\n# Argument of type 'float' cannot be assigned to parameter of type 'int'\nadd(3.4, 5)\n# This should be fine\naddf(3, 5)\n# This should not produce any error because the function's suite is empty.\ndef noReturnIsFine() -> bool:",
        "detail": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "documentation": {}
    },
    {
        "label": "noReturnIsFine",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "description": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "peekOfCode": "def noReturnIsFine() -> bool:\n    \"Doc strings are allowed\"\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.returnTypes1",
        "documentation": {}
    },
    {
        "label": "Grammar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.returnTypes2",
        "description": "packages.pyright-internal.src.tests.samples.returnTypes2",
        "peekOfCode": "class Grammar:\n    @staticmethod\n    def A():\n        return Grammar.B\n    @staticmethod\n    def B():\n        return Grammar.C\n    @staticmethod\n    def C():\n        return Grammar.D",
        "detail": "packages.pyright-internal.src.tests.samples.returnTypes2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.revealedType1",
        "description": "packages.pyright-internal.src.tests.samples.revealedType1",
        "peekOfCode": "a = 5\nreveal_type(a)\na = \"yup\"\nreveal_type(a)\nreveal_type(a, expected_type=Literal[\"yup\"])\nreveal_type(a, expected_text=\"Literal['yup']\")\nreveal_type(a, expected_text=\"Literal['yup']\", expected_type=Literal[\"yup\"])\n# This should generate an error.\nreveal_type()\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.revealedType1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.revealedType1",
        "description": "packages.pyright-internal.src.tests.samples.revealedType1",
        "peekOfCode": "a = \"yup\"\nreveal_type(a)\nreveal_type(a, expected_type=Literal[\"yup\"])\nreveal_type(a, expected_text=\"Literal['yup']\")\nreveal_type(a, expected_text=\"Literal['yup']\", expected_type=Literal[\"yup\"])\n# This should generate an error.\nreveal_type()\n# This should generate an error.\nreveal_type(a, a)\nreveal_type(a, x=3)",
        "detail": "packages.pyright-internal.src.tests.samples.revealedType1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "class A(Self):\n    ...\n# This should generate an error because Self can't be used in this context.\nx: Self\ndef func1() -> None:\n    # This should generate an error because Self can't be used in this context.\n    x: Self\n# This should generate an error because Self can't be used in this context.\ndef func2(a: Self) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "class B:\n    x: Self\n    def method1(self) -> Self:\n        return self\n    def method2(self, a: Self) -> None:\n        x: Self = a\n        y = Self\n    def method3(self: Self) -> Self:\n        # This should generate an error because Self doesn't accept a type arg.\n        y: Self[int]",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "class C:\n    @classmethod\n    def outer(cls) -> Callable[[int, Self], Self]:\n        def inner(_: int, bar: Self) -> Self:\n            return bar\n        return inner",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "def func1() -> None:\n    # This should generate an error because Self can't be used in this context.\n    x: Self\n# This should generate an error because Self can't be used in this context.\ndef func2(a: Self) -> None:\n    ...\n# This should generate an error because Self can't be used in this context.\ndef func3() -> Self:\n    ...\nclass B:",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "def func2(a: Self) -> None:\n    ...\n# This should generate an error because Self can't be used in this context.\ndef func3() -> Self:\n    ...\nclass B:\n    x: Self\n    def method1(self) -> Self:\n        return self\n    def method2(self, a: Self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "def func3() -> Self:\n    ...\nclass B:\n    x: Self\n    def method1(self) -> Self:\n        return self\n    def method2(self, a: Self) -> None:\n        x: Self = a\n        y = Self\n    def method3(self: Self) -> Self:",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self1",
        "description": "packages.pyright-internal.src.tests.samples.self1",
        "peekOfCode": "T = TypeVar(\"T\")\n# This should generate an error because Self can't be used in this context.\nclass A(Self):\n    ...\n# This should generate an error because Self can't be used in this context.\nx: Self\ndef func1() -> None:\n    # This should generate an error because Self can't be used in this context.\n    x: Self\n# This should generate an error because Self can't be used in this context.",
        "detail": "packages.pyright-internal.src.tests.samples.self1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class A(Generic[_P, _R]):\n    val: _R\n    def __init__(self, callback: Callable[_P, _R]) -> None:\n        self.callback = callback\n    def method1(self: Self) -> Self:\n        return self\n    def method2(self) -> Self:\n        return self\n    @classmethod\n    def method3(cls: Type[Self]) -> Type[Self]:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class B(Generic[_T]):\n    def __init__(self, value: _T):\n        self.value = value\nclass Shape1:\n    def set_scale(self, scale: float) -> Self:\n        self.scale = scale\n        return self\n    @classmethod\n    def from_config(cls, config: Dict[str, float]) -> Self:\n        return cls()",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "Shape1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class Shape1:\n    def set_scale(self, scale: float) -> Self:\n        self.scale = scale\n        return self\n    @classmethod\n    def from_config(cls, config: Dict[str, float]) -> Self:\n        return cls()\nclass Circle1(Shape1):\n    ...\nx1 = Shape1().set_scale(3.4)",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "Circle1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class Circle1(Shape1):\n    ...\nx1 = Shape1().set_scale(3.4)\nreveal_type(x1, expected_text=\"Shape1\")\nx2 = Circle1().set_scale(3.4)\nreveal_type(x2, expected_text=\"Circle1\")\nclass Shape2:\n    def set_scale(self: Self, scale: float) -> Self:\n        self.scale = scale\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "Shape2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class Shape2:\n    def set_scale(self: Self, scale: float) -> Self:\n        self.scale = scale\n        return self\n    @classmethod\n    def from_config(cls: Type[Self], config: Dict[str, float]) -> Self:\n        return cls()\n    def difference(self: Self, other: Self) -> float:\n        ...\n    def apply(self: Self, f: Callable[[Self], None]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "Circle2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class Circle2(Shape2):\n    ...\ns2 = Shape2()\nx3 = s2.set_scale(3.4)\nreveal_type(x3, expected_text=\"Shape2\")\nc2 = Circle2()\nx4 = c2.set_scale(3.4)\nreveal_type(x4, expected_text=\"Circle2\")\nc2.difference(c2)\ns2.difference(c2)",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "LinkedList",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class LinkedList(Generic[_T]):\n    value: _T\n    next: Self | None = None\nLinkedList[int](value=1, next=LinkedList[int](value=2))\n@dataclass\nclass OrdinalLinkedList(LinkedList[int]):\n    def ordinal_value(self) -> str:\n        return str(self.value)\n# This should generate an error.\nxs = OrdinalLinkedList(value=1, next=LinkedList[int](value=2))",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "OrdinalLinkedList",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class OrdinalLinkedList(LinkedList[int]):\n    def ordinal_value(self) -> str:\n        return str(self.value)\n# This should generate an error.\nxs = OrdinalLinkedList(value=1, next=LinkedList[int](value=2))\nif xs.next is not None:\n    xs.next = OrdinalLinkedList(value=3, next=None)\n    # This should generate an error.\n    xs.next = LinkedList[int](value=3, next=None)\nclass Container(Generic[_T]):",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "Container",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class Container(Generic[_T]):\n    value: _T\n    def set_value(self, value: _T) -> Self:\n        ...\ndef object_with_concrete_type(\n    int_container: Container[int], str_container: Container[str]\n) -> None:\n    reveal_type(int_container.set_value(0), expected_text=\"Container[int]\")\n    reveal_type(str_container.set_value(\"\"), expected_text=\"Container[str]\")\ndef object_with_generic_type(container: Container[_T], value: _T) -> Container[_T]:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "ShapeProtocol",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class ShapeProtocol(Protocol):\n    def set_scale(self, scale: float) -> Self:\n        ...\nclass ReturnSelf:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> Self:\n        self.scale = scale\n        return self\nclass ReturnConcreteShape:\n    scale: float = 1.0",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "ReturnSelf",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class ReturnSelf:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> Self:\n        self.scale = scale\n        return self\nclass ReturnConcreteShape:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> \"ReturnConcreteShape\":\n        self.scale = scale\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "ReturnConcreteShape",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class ReturnConcreteShape:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> \"ReturnConcreteShape\":\n        self.scale = scale\n        return self\nclass BadReturnType:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> int:\n        self.scale = scale\n        return 42",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "BadReturnType",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class BadReturnType:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> int:\n        self.scale = scale\n        return 42\nclass ReturnDifferentClass:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> ReturnConcreteShape:\n        return ReturnConcreteShape()\ndef accepts_shape(shape: ShapeProtocol) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "ReturnDifferentClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "class ReturnDifferentClass:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> ReturnConcreteShape:\n        return ReturnConcreteShape()\ndef accepts_shape(shape: ShapeProtocol) -> None:\n    y = shape.set_scale(0.5)\n    reveal_type(y)\ndef main(\n    return_self_shape: ReturnSelf,\n    return_concrete_shape: ReturnConcreteShape,",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "object_with_concrete_type",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "def object_with_concrete_type(\n    int_container: Container[int], str_container: Container[str]\n) -> None:\n    reveal_type(int_container.set_value(0), expected_text=\"Container[int]\")\n    reveal_type(str_container.set_value(\"\"), expected_text=\"Container[str]\")\ndef object_with_generic_type(container: Container[_T], value: _T) -> Container[_T]:\n    return container.set_value(value)\nclass ShapeProtocol(Protocol):\n    def set_scale(self, scale: float) -> Self:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "object_with_generic_type",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "def object_with_generic_type(container: Container[_T], value: _T) -> Container[_T]:\n    return container.set_value(value)\nclass ShapeProtocol(Protocol):\n    def set_scale(self, scale: float) -> Self:\n        ...\nclass ReturnSelf:\n    scale: float = 1.0\n    def set_scale(self, scale: float) -> Self:\n        self.scale = scale\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "accepts_shape",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "def accepts_shape(shape: ShapeProtocol) -> None:\n    y = shape.set_scale(0.5)\n    reveal_type(y)\ndef main(\n    return_self_shape: ReturnSelf,\n    return_concrete_shape: ReturnConcreteShape,\n    bad_return_type: BadReturnType,\n    return_different_class: ReturnDifferentClass,\n) -> None:\n    accepts_shape(return_self_shape)",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "def main(\n    return_self_shape: ReturnSelf,\n    return_concrete_shape: ReturnConcreteShape,\n    bad_return_type: BadReturnType,\n    return_different_class: ReturnDifferentClass,\n) -> None:\n    accepts_shape(return_self_shape)\n    accepts_shape(return_concrete_shape)\n    # This should generate an error.\n    accepts_shape(bad_return_type)",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "_P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "_P = ParamSpec(\"_P\")\n_R = TypeVar(\"_R\")\nclass A(Generic[_P, _R]):\n    val: _R\n    def __init__(self, callback: Callable[_P, _R]) -> None:\n        self.callback = callback\n    def method1(self: Self) -> Self:\n        return self\n    def method2(self) -> Self:\n        return self",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "_R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "_R = TypeVar(\"_R\")\nclass A(Generic[_P, _R]):\n    val: _R\n    def __init__(self, callback: Callable[_P, _R]) -> None:\n        self.callback = callback\n    def method1(self: Self) -> Self:\n        return self\n    def method2(self) -> Self:\n        return self\n    @classmethod",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass B(Generic[_T]):\n    def __init__(self, value: _T):\n        self.value = value\nclass Shape1:\n    def set_scale(self, scale: float) -> Self:\n        self.scale = scale\n        return self\n    @classmethod\n    def from_config(cls, config: Dict[str, float]) -> Self:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "x1 = Shape1().set_scale(3.4)\nreveal_type(x1, expected_text=\"Shape1\")\nx2 = Circle1().set_scale(3.4)\nreveal_type(x2, expected_text=\"Circle1\")\nclass Shape2:\n    def set_scale(self: Self, scale: float) -> Self:\n        self.scale = scale\n        return self\n    @classmethod\n    def from_config(cls: Type[Self], config: Dict[str, float]) -> Self:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "x2 = Circle1().set_scale(3.4)\nreveal_type(x2, expected_text=\"Circle1\")\nclass Shape2:\n    def set_scale(self: Self, scale: float) -> Self:\n        self.scale = scale\n        return self\n    @classmethod\n    def from_config(cls: Type[Self], config: Dict[str, float]) -> Self:\n        return cls()\n    def difference(self: Self, other: Self) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "s2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "s2 = Shape2()\nx3 = s2.set_scale(3.4)\nreveal_type(x3, expected_text=\"Shape2\")\nc2 = Circle2()\nx4 = c2.set_scale(3.4)\nreveal_type(x4, expected_text=\"Circle2\")\nc2.difference(c2)\ns2.difference(c2)\ns2.difference(s2)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "x3 = s2.set_scale(3.4)\nreveal_type(x3, expected_text=\"Shape2\")\nc2 = Circle2()\nx4 = c2.set_scale(3.4)\nreveal_type(x4, expected_text=\"Circle2\")\nc2.difference(c2)\ns2.difference(c2)\ns2.difference(s2)\n# This should generate an error.\nc2.difference(s2)",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "c2 = Circle2()\nx4 = c2.set_scale(3.4)\nreveal_type(x4, expected_text=\"Circle2\")\nc2.difference(c2)\ns2.difference(c2)\ns2.difference(s2)\n# This should generate an error.\nc2.difference(s2)\n@dataclass\nclass LinkedList(Generic[_T]):",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "x4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "x4 = c2.set_scale(3.4)\nreveal_type(x4, expected_text=\"Circle2\")\nc2.difference(c2)\ns2.difference(c2)\ns2.difference(s2)\n# This should generate an error.\nc2.difference(s2)\n@dataclass\nclass LinkedList(Generic[_T]):\n    value: _T",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self2",
        "description": "packages.pyright-internal.src.tests.samples.self2",
        "peekOfCode": "xs = OrdinalLinkedList(value=1, next=LinkedList[int](value=2))\nif xs.next is not None:\n    xs.next = OrdinalLinkedList(value=3, next=None)\n    # This should generate an error.\n    xs.next = LinkedList[int](value=3, next=None)\nclass Container(Generic[_T]):\n    value: _T\n    def set_value(self, value: _T) -> Self:\n        ...\ndef object_with_concrete_type(",
        "detail": "packages.pyright-internal.src.tests.samples.self2",
        "documentation": {}
    },
    {
        "label": "SomeClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self3",
        "description": "packages.pyright-internal.src.tests.samples.self3",
        "peekOfCode": "class SomeClass:\n    def __str__(self) -> str:\n        ...\n    __repr__ = __str__",
        "detail": "packages.pyright-internal.src.tests.samples.self3",
        "documentation": {}
    },
    {
        "label": "MyClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self4",
        "description": "packages.pyright-internal.src.tests.samples.self4",
        "peekOfCode": "class MyClass(Generic[_T]):\n    @my_generic_wrapper\n    def do_something(self) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.self4",
        "documentation": {}
    },
    {
        "label": "my_generic_wrapper",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.self4",
        "description": "packages.pyright-internal.src.tests.samples.self4",
        "peekOfCode": "def my_generic_wrapper(\n    f: Callable[[\"MyClass[_T]\"], str]\n) -> Callable[[\"MyClass[_T]\"], int]:\n    ...\nclass MyClass(Generic[_T]):\n    @my_generic_wrapper\n    def do_something(self) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.self4",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.self4",
        "description": "packages.pyright-internal.src.tests.samples.self4",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef my_generic_wrapper(\n    f: Callable[[\"MyClass[_T]\"], str]\n) -> Callable[[\"MyClass[_T]\"], int]:\n    ...\nclass MyClass(Generic[_T]):\n    @my_generic_wrapper\n    def do_something(self) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.self4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self5",
        "description": "packages.pyright-internal.src.tests.samples.self5",
        "peekOfCode": "class A:\n    @property\n    def one(self) -> Self:\n        ...\n    @classmethod\n    @property\n    def two(cls) -> type[Self]:\n        ...\nclass B(A):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.self5",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.self5",
        "description": "packages.pyright-internal.src.tests.samples.self5",
        "peekOfCode": "class B(A):\n    ...\nreveal_type(A().one, expected_text=\"A\")\nreveal_type(A.two, expected_text=\"Type[A]\")\nreveal_type(B().one, expected_text=\"B\")\nreveal_type(B.two, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.self5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "peekOfCode": "def func1() -> Generator[int, None, None]:\n    b = (elem for elem in a)\n    return b\ndef func2() -> Set[int]:\n    c = {elem for elem in a}\n    return c\ndef func3() -> Set[str]:\n    c = {elem for elem in a}\n    # This should generate an error because\n    # c is a Set[int], which doesn't match",
        "detail": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "peekOfCode": "def func2() -> Set[int]:\n    c = {elem for elem in a}\n    return c\ndef func3() -> Set[str]:\n    c = {elem for elem in a}\n    # This should generate an error because\n    # c is a Set[int], which doesn't match\n    # the declared return type.\n    return c\ndef generate():",
        "detail": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "peekOfCode": "def func3() -> Set[str]:\n    c = {elem for elem in a}\n    # This should generate an error because\n    # c is a Set[int], which doesn't match\n    # the declared return type.\n    return c\ndef generate():\n    for i in range(2):\n        yield i\n# Verify that generate returns a Generator.",
        "detail": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "peekOfCode": "def generate():\n    for i in range(2):\n        yield i\n# Verify that generate returns a Generator.\ns = generate()\ns.close()",
        "detail": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "peekOfCode": "a = [1, 2, 3, 4]\ndef func1() -> Generator[int, None, None]:\n    b = (elem for elem in a)\n    return b\ndef func2() -> Set[int]:\n    c = {elem for elem in a}\n    return c\ndef func3() -> Set[str]:\n    c = {elem for elem in a}\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "description": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "peekOfCode": "s = generate()\ns.close()",
        "detail": "packages.pyright-internal.src.tests.samples.setComprehension1",
        "documentation": {}
    },
    {
        "label": "NoSlots1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots1",
        "description": "packages.pyright-internal.src.tests.samples.slots1",
        "peekOfCode": "class NoSlots1:\n    def __init__(self):\n        self.x = 1\nclass NoSlots2:\n    # Only lists and tuples of simple strings are supported, so this\n    # will be treated as though there are no slots.\n    __slots__ = {\"aaa\": 3}\n    def __init__(self):\n        self.x = 1\nclass NoSlots3:",
        "detail": "packages.pyright-internal.src.tests.samples.slots1",
        "documentation": {}
    },
    {
        "label": "NoSlots2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots1",
        "description": "packages.pyright-internal.src.tests.samples.slots1",
        "peekOfCode": "class NoSlots2:\n    # Only lists and tuples of simple strings are supported, so this\n    # will be treated as though there are no slots.\n    __slots__ = {\"aaa\": 3}\n    def __init__(self):\n        self.x = 1\nclass NoSlots3:\n    # Only lists and tuples of simple strings are supported, so this\n    # will be treated as though there are no slots.\n    __slots__ = (\"aaa\", f\"test{3 + 4}\")",
        "detail": "packages.pyright-internal.src.tests.samples.slots1",
        "documentation": {}
    },
    {
        "label": "NoSlots3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots1",
        "description": "packages.pyright-internal.src.tests.samples.slots1",
        "peekOfCode": "class NoSlots3:\n    # Only lists and tuples of simple strings are supported, so this\n    # will be treated as though there are no slots.\n    __slots__ = (\"aaa\", f\"test{3 + 4}\")\n    def __init__(self):\n        self.x = 1\nclass Slots1(object):\n    __slots__ = (\"bbb\", \"ccc\")\n    def __init__(self):\n        self.bbb = 1",
        "detail": "packages.pyright-internal.src.tests.samples.slots1",
        "documentation": {}
    },
    {
        "label": "Slots1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots1",
        "description": "packages.pyright-internal.src.tests.samples.slots1",
        "peekOfCode": "class Slots1(object):\n    __slots__ = (\"bbb\", \"ccc\")\n    def __init__(self):\n        self.bbb = 1\n        self.ccc = 1\n        self.prop = 1\n        # This should generate an error\n        self.ddd = 1\n    @property\n    def prop(self):",
        "detail": "packages.pyright-internal.src.tests.samples.slots1",
        "documentation": {}
    },
    {
        "label": "Slots1_1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots1",
        "description": "packages.pyright-internal.src.tests.samples.slots1",
        "peekOfCode": "class Slots1_1(Slots1):\n    __slots__ = [\"ddd\", \"eee\"]\n    def __init__(self):\n        self.bbb = 1\n        self.ccc = 1\n        self.ddd = 1\n        # This should generate an error\n        self.fff = 1\nclass NoSlots1_1(Slots1, NoSlots2):\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.slots1",
        "documentation": {}
    },
    {
        "label": "NoSlots1_1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots1",
        "description": "packages.pyright-internal.src.tests.samples.slots1",
        "peekOfCode": "class NoSlots1_1(Slots1, NoSlots2):\n    def __init__(self):\n        self.bbb = 1\n        self.fff = 1",
        "detail": "packages.pyright-internal.src.tests.samples.slots1",
        "documentation": {}
    },
    {
        "label": "NoSlots1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots2",
        "description": "packages.pyright-internal.src.tests.samples.slots2",
        "peekOfCode": "class NoSlots1:\n    pass\nclass Slots1(NoSlots1):\n    __slots__ = \"aaa\", \"bbb\", \"ccc\"\n    # This should generate an error\n    aaa = 3\n    # This should generate an error\n    bbb: int = 3\n    # This should generate an error\n    (ccc, ddd) = 3, 4",
        "detail": "packages.pyright-internal.src.tests.samples.slots2",
        "documentation": {}
    },
    {
        "label": "Slots1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots2",
        "description": "packages.pyright-internal.src.tests.samples.slots2",
        "peekOfCode": "class Slots1(NoSlots1):\n    __slots__ = \"aaa\", \"bbb\", \"ccc\"\n    # This should generate an error\n    aaa = 3\n    # This should generate an error\n    bbb: int = 3\n    # This should generate an error\n    (ccc, ddd) = 3, 4\n    eee = 5\nclass Slots2(Slots1):",
        "detail": "packages.pyright-internal.src.tests.samples.slots2",
        "documentation": {}
    },
    {
        "label": "Slots2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots2",
        "description": "packages.pyright-internal.src.tests.samples.slots2",
        "peekOfCode": "class Slots2(Slots1):\n    __slots__ = ()\n    aaa = 4\n@dataclass\nclass Slots3:\n    __slots__ = ('values',)\n    # This should not generate an error because class variables\n    # in a dataclass are replaced by instance variables.\n    values: list[int] = field(default_factory=list)",
        "detail": "packages.pyright-internal.src.tests.samples.slots2",
        "documentation": {}
    },
    {
        "label": "Slots3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots2",
        "description": "packages.pyright-internal.src.tests.samples.slots2",
        "peekOfCode": "class Slots3:\n    __slots__ = ('values',)\n    # This should not generate an error because class variables\n    # in a dataclass are replaced by instance variables.\n    values: list[int] = field(default_factory=list)",
        "detail": "packages.pyright-internal.src.tests.samples.slots2",
        "documentation": {}
    },
    {
        "label": "MyDescriptor",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots3",
        "description": "packages.pyright-internal.src.tests.samples.slots3",
        "peekOfCode": "class MyDescriptor:\n    def __init__(self, *, slot: str):\n        ...\n    def __set__(self, instance: object, value: object) -> None:\n        ...\n    def __get__(self, instance: object, owner: Any) -> Any:\n        ...\nclass ClassA:\n    foo = MyDescriptor(slot=\"_foo_descriptor\")\n    __slots__ = \"_foo_descriptor\"",
        "detail": "packages.pyright-internal.src.tests.samples.slots3",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots3",
        "description": "packages.pyright-internal.src.tests.samples.slots3",
        "peekOfCode": "class ClassA:\n    foo = MyDescriptor(slot=\"_foo_descriptor\")\n    __slots__ = \"_foo_descriptor\"\n    def __init__(self, foo: int) -> None:\n        self.foo = foo\nclass ClassBParent:\n    __slots__ = (\"bar1\",)\n    foo = MyDescriptor(slot=\"_foo_descriptor\")\nclass ClassB(ClassBParent):\n    __slots__ = (\"bar2\",)",
        "detail": "packages.pyright-internal.src.tests.samples.slots3",
        "documentation": {}
    },
    {
        "label": "ClassBParent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots3",
        "description": "packages.pyright-internal.src.tests.samples.slots3",
        "peekOfCode": "class ClassBParent:\n    __slots__ = (\"bar1\",)\n    foo = MyDescriptor(slot=\"_foo_descriptor\")\nclass ClassB(ClassBParent):\n    __slots__ = (\"bar2\",)\n    def repro(self, foo: int) -> None:\n        self.foo = foo",
        "detail": "packages.pyright-internal.src.tests.samples.slots3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.slots3",
        "description": "packages.pyright-internal.src.tests.samples.slots3",
        "peekOfCode": "class ClassB(ClassBParent):\n    __slots__ = (\"bar2\",)\n    def repro(self, foo: int) -> None:\n        self.foo = foo",
        "detail": "packages.pyright-internal.src.tests.samples.slots3",
        "documentation": {}
    },
    {
        "label": "t1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialForm1",
        "description": "packages.pyright-internal.src.tests.samples.specialForm1",
        "peekOfCode": "t1 = Dict()\n# This should generate an error.\nt2 = List()\n# This should generate an error.\nt3 = Set()\n# This should generate an error.\nt4 = Tuple()",
        "detail": "packages.pyright-internal.src.tests.samples.specialForm1",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialForm1",
        "description": "packages.pyright-internal.src.tests.samples.specialForm1",
        "peekOfCode": "t2 = List()\n# This should generate an error.\nt3 = Set()\n# This should generate an error.\nt4 = Tuple()",
        "detail": "packages.pyright-internal.src.tests.samples.specialForm1",
        "documentation": {}
    },
    {
        "label": "t3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialForm1",
        "description": "packages.pyright-internal.src.tests.samples.specialForm1",
        "peekOfCode": "t3 = Set()\n# This should generate an error.\nt4 = Tuple()",
        "detail": "packages.pyright-internal.src.tests.samples.specialForm1",
        "documentation": {}
    },
    {
        "label": "t4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialForm1",
        "description": "packages.pyright-internal.src.tests.samples.specialForm1",
        "peekOfCode": "t4 = Tuple()",
        "detail": "packages.pyright-internal.src.tests.samples.specialForm1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\nclass C(A):\n    pass\n_T1 = TypeVar(\"_T1\", A, B)\nclass Moo(Generic[_T1]):\n    pass\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "class B(A):\n    pass\nclass C(A):\n    pass\n_T1 = TypeVar(\"_T1\", A, B)\nclass Moo(Generic[_T1]):\n    pass\nclass Foo:\n    def __init__(self) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "class C(A):\n    pass\n_T1 = TypeVar(\"_T1\", A, B)\nclass Moo(Generic[_T1]):\n    pass\nclass Foo:\n    def __init__(self) -> None:\n        ...\n    def m1(self, a: Moo[A]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "Moo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "class Moo(Generic[_T1]):\n    pass\nclass Foo:\n    def __init__(self) -> None:\n        ...\n    def m1(self, a: Moo[A]) -> None:\n        ...\n    def m2(self, b: Moo[B]) -> None:\n        ...\na = Moo[A]()",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "class Foo:\n    def __init__(self) -> None:\n        ...\n    def m1(self, a: Moo[A]) -> None:\n        ...\n    def m2(self, b: Moo[B]) -> None:\n        ...\na = Moo[A]()\nb = Moo[B]()\ny = Foo()",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "m3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "def m3(c: Moo[C]):\n    pass\n# This should generate an error:\n# Type argument 'List[C]' cannot be assigned to type variable '_T1'\ndef m4(c: Moo[List[C]]):\n    pass\n# This should generate an error:\n# TypeVar constraint types can't be generic.\n_T2 = TypeVar(\"_T2\", Iterable[_T1], int)\n# This should generate an error:",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "m4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "def m4(c: Moo[List[C]]):\n    pass\n# This should generate an error:\n# TypeVar constraint types can't be generic.\n_T2 = TypeVar(\"_T2\", Iterable[_T1], int)\n# This should generate an error:\n# TypeVar bound types can't be generic.\n_T3 = TypeVar(\"_T3\", bound=Iterable[_T1])\n# This should generate an error:\n# TypeVars can't be bound and constrained.",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", A, B)\nclass Moo(Generic[_T1]):\n    pass\nclass Foo:\n    def __init__(self) -> None:\n        ...\n    def m1(self, a: Moo[A]) -> None:\n        ...\n    def m2(self, b: Moo[B]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "a = Moo[A]()\nb = Moo[B]()\ny = Foo()\ny.m1(a)\n# This should generate an error:\n# Argument of type 'Moo[B]' cannot be assigned to parameter of type 'Moo[A]'\ny.m1(b)\n# This should generate an error:\n# Argument of type 'Moo[A]' cannot be assigned to parameter of type 'Moo[B]'\ny.m2(a)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "b = Moo[B]()\ny = Foo()\ny.m1(a)\n# This should generate an error:\n# Argument of type 'Moo[B]' cannot be assigned to parameter of type 'Moo[A]'\ny.m1(b)\n# This should generate an error:\n# Argument of type 'Moo[A]' cannot be assigned to parameter of type 'Moo[B]'\ny.m2(a)\ny.m2(b)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "y = Foo()\ny.m1(a)\n# This should generate an error:\n# Argument of type 'Moo[B]' cannot be assigned to parameter of type 'Moo[A]'\ny.m1(b)\n# This should generate an error:\n# Argument of type 'Moo[A]' cannot be assigned to parameter of type 'Moo[B]'\ny.m2(a)\ny.m2(b)\ndef m3(c: Moo[C]):",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", Iterable[_T1], int)\n# This should generate an error:\n# TypeVar bound types can't be generic.\n_T3 = TypeVar(\"_T3\", bound=Iterable[_T1])\n# This should generate an error:\n# TypeVars can't be bound and constrained.\n_T4 = TypeVar(\"_T4\", str, int, bound=int)\n# This should generate an error:\n# TypeVar must include more than one constraint.\n_T5 = TypeVar(\"_T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", bound=Iterable[_T1])\n# This should generate an error:\n# TypeVars can't be bound and constrained.\n_T4 = TypeVar(\"_T4\", str, int, bound=int)\n# This should generate an error:\n# TypeVar must include more than one constraint.\n_T5 = TypeVar(\"_T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "_T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "_T4 = TypeVar(\"_T4\", str, int, bound=int)\n# This should generate an error:\n# TypeVar must include more than one constraint.\n_T5 = TypeVar(\"_T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "_T5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization1",
        "description": "packages.pyright-internal.src.tests.samples.specialization1",
        "peekOfCode": "_T5 = TypeVar(\"_T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization1",
        "documentation": {}
    },
    {
        "label": "Left",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "class Left(Generic[E]):\n    left: E\n@dataclass\nclass Right(Generic[A]):\n    right: A\n# Note that this Union type has generic parameters.\nEither = Union[Left[E], Right[A]]\ndef fmap(f: Callable[[A], B], either: Either[E, A]) -> Either[E, B]:\n    if isinstance(either, Right):\n        return Right(f(either.right))",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "Right",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "class Right(Generic[A]):\n    right: A\n# Note that this Union type has generic parameters.\nEither = Union[Left[E], Right[A]]\ndef fmap(f: Callable[[A], B], either: Either[E, A]) -> Either[E, B]:\n    if isinstance(either, Right):\n        return Right(f(either.right))\n    else:\n        return either\ndef square(x: int) -> int:",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "fmap",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "def fmap(f: Callable[[A], B], either: Either[E, A]) -> Either[E, B]:\n    if isinstance(either, Right):\n        return Right(f(either.right))\n    else:\n        return either\ndef square(x: int) -> int:\n    return x * x\ndef accepts_only_left_str(p: Left[Any]):\n    pass\ndef accepts_only_right_int(p: Right[Any]):",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "square",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "def square(x: int) -> int:\n    return x * x\ndef accepts_only_left_str(p: Left[Any]):\n    pass\ndef accepts_only_right_int(p: Right[Any]):\n    pass\naa = fmap(square, Left(\"s\"))\n# This should not generate any errors.\nif isinstance(aa, Left):\n    accepts_only_left_str(aa)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "accepts_only_left_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "def accepts_only_left_str(p: Left[Any]):\n    pass\ndef accepts_only_right_int(p: Right[Any]):\n    pass\naa = fmap(square, Left(\"s\"))\n# This should not generate any errors.\nif isinstance(aa, Left):\n    accepts_only_left_str(aa)\nelse:\n    accepts_only_right_int(aa)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "accepts_only_right_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "def accepts_only_right_int(p: Right[Any]):\n    pass\naa = fmap(square, Left(\"s\"))\n# This should not generate any errors.\nif isinstance(aa, Left):\n    accepts_only_left_str(aa)\nelse:\n    accepts_only_right_int(aa)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "E = TypeVar(\"E\")\nA = TypeVar(\"A\")\nB = TypeVar(\"B\")\n@dataclass\nclass Left(Generic[E]):\n    left: E\n@dataclass\nclass Right(Generic[A]):\n    right: A\n# Note that this Union type has generic parameters.",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "A = TypeVar(\"A\")\nB = TypeVar(\"B\")\n@dataclass\nclass Left(Generic[E]):\n    left: E\n@dataclass\nclass Right(Generic[A]):\n    right: A\n# Note that this Union type has generic parameters.\nEither = Union[Left[E], Right[A]]",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "B = TypeVar(\"B\")\n@dataclass\nclass Left(Generic[E]):\n    left: E\n@dataclass\nclass Right(Generic[A]):\n    right: A\n# Note that this Union type has generic parameters.\nEither = Union[Left[E], Right[A]]\ndef fmap(f: Callable[[A], B], either: Either[E, A]) -> Either[E, B]:",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "Either",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "Either = Union[Left[E], Right[A]]\ndef fmap(f: Callable[[A], B], either: Either[E, A]) -> Either[E, B]:\n    if isinstance(either, Right):\n        return Right(f(either.right))\n    else:\n        return either\ndef square(x: int) -> int:\n    return x * x\ndef accepts_only_left_str(p: Left[Any]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "aa",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.specialization2",
        "description": "packages.pyright-internal.src.tests.samples.specialization2",
        "peekOfCode": "aa = fmap(square, Left(\"s\"))\n# This should not generate any errors.\nif isinstance(aa, Left):\n    accepts_only_left_str(aa)\nelse:\n    accepts_only_right_int(aa)",
        "detail": "packages.pyright-internal.src.tests.samples.specialization2",
        "documentation": {}
    },
    {
        "label": "Dummy",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "description": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "peekOfCode": "class Dummy:\n    DEFINED_FALSE: bool\n    DEFINED_TRUE: bool\n    DEFINED_STR: str\ndummy = Dummy()\nif dummy.DEFINED_TRUE:\n    x = 1\nelse:\n    x = \"error!\"\nif not dummy.DEFINED_FALSE:",
        "detail": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "documentation": {}
    },
    {
        "label": "DEFINED_TRUE",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "description": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "peekOfCode": "DEFINED_TRUE = True\nDEFINED_FALSE = False\nif DEFINED_TRUE:\n    x = 1\nelse:\n    x = \"error!\"\nif not DEFINED_FALSE:\n    x = 1\nelse:\n    x = \"error!\"",
        "detail": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "documentation": {}
    },
    {
        "label": "DEFINED_FALSE",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "description": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "peekOfCode": "DEFINED_FALSE = False\nif DEFINED_TRUE:\n    x = 1\nelse:\n    x = \"error!\"\nif not DEFINED_FALSE:\n    x = 1\nelse:\n    x = \"error!\"\nDEFINED_STR = \"hi!\"",
        "detail": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "documentation": {}
    },
    {
        "label": "DEFINED_STR",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "description": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "peekOfCode": "DEFINED_STR = \"hi!\"\nif DEFINED_STR == \"hi!\":\n    x = 1\nelse:\n    x = \"error!\"\nclass Dummy:\n    DEFINED_FALSE: bool\n    DEFINED_TRUE: bool\n    DEFINED_STR: str\ndummy = Dummy()",
        "detail": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "documentation": {}
    },
    {
        "label": "dummy",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "description": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "peekOfCode": "dummy = Dummy()\nif dummy.DEFINED_TRUE:\n    x = 1\nelse:\n    x = \"error!\"\nif not dummy.DEFINED_FALSE:\n    x = 1\nelse:\n    x = \"error!\"\nif dummy.DEFINED_STR == \"hi!\":",
        "detail": "packages.pyright-internal.src.tests.samples.staticExpressions1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.strings1",
        "description": "packages.pyright-internal.src.tests.samples.strings1",
        "peekOfCode": "def func1(val: str):\n    pass\nfunc1(\"first argument\" \"second argument\")\nfunc1(\n    \"This is the first argument, which contains \"\n    \"especially long text that could not fit into \"\n    \"one single line thus should be spread.\"\n)\nfunc1(\n    (",
        "detail": "packages.pyright-internal.src.tests.samples.strings1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript1",
        "description": "packages.pyright-internal.src.tests.samples.subscript1",
        "peekOfCode": "class A:\n    a1: Queue[int] = Queue()\n    b1: OrderedDict[str, str] = OrderedDict()\n    c1: Future[int] = Future()\n    d1: list[int] = []\n    e1: dict[str, int] = {}\n    f1: set[int] = set()\n    g1: deque[int] = deque()\n    h1: frozenset[int] = frozenset()\n    i1: Task[None]",
        "detail": "packages.pyright-internal.src.tests.samples.subscript1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript1",
        "description": "packages.pyright-internal.src.tests.samples.subscript1",
        "peekOfCode": "class B:\n    a2: \"Queue[int]\" = Queue()\n    b2: \"OrderedDict[str, str]\" = OrderedDict()\n    c2: \"Future[int]\" = Future()\n    d2: \"list[int]\" = []\n    e2: \"dict[str, int]\" = {}\n    f2: \"set[int]\" = set()\n    g2: \"deque[int]\" = deque()\n    h2: \"frozenset[int]\" = frozenset()\n    i1: \"Task[None]\"",
        "detail": "packages.pyright-internal.src.tests.samples.subscript1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript1",
        "description": "packages.pyright-internal.src.tests.samples.subscript1",
        "peekOfCode": "def func1(\n    a1: Queue[int],\n    b1: OrderedDict[str, str],\n    c1: Future[int],\n    d1: list[int],\n    e1: dict[str, int],\n    f1: set[int],\n    g1: deque[int],\n    h1: frozenset[int],\n    i1: Task[None],",
        "detail": "packages.pyright-internal.src.tests.samples.subscript1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript1",
        "description": "packages.pyright-internal.src.tests.samples.subscript1",
        "peekOfCode": "def func2(\n    a1: \"Queue[int]\",\n    b1: \"OrderedDict[str, str]\",\n    c1: \"Future[int]\",\n    d1: \"list[int]\",\n    e1: \"dict[str, int]\",\n    f1: \"set[int]\",\n    g1: \"deque[int]\",\n    h1: \"frozenset[int]\",\n    i1: \"Task[None]\",",
        "detail": "packages.pyright-internal.src.tests.samples.subscript1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript1",
        "description": "packages.pyright-internal.src.tests.samples.subscript1",
        "peekOfCode": "def func3():\n    # These should not generate errors.\n    a1: Queue[int] = Queue()\n    b1: OrderedDict[str, str] = OrderedDict()\n    c1: Future[int] = Future()\n    d1: list[int] = []\n    e1: dict[str, int] = {}\n    f1: set[int] = set()\n    g1: deque[int] = deque()\n    h1: frozenset[int] = frozenset()",
        "detail": "packages.pyright-internal.src.tests.samples.subscript1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript2",
        "description": "packages.pyright-internal.src.tests.samples.subscript2",
        "peekOfCode": "def func1(p1: List[int], p2: _T):\n    a1 = p1[0]\n    reveal_type(a1, expected_text=\"int\")\n    a2 = p1[:]\n    reveal_type(a2, expected_text=\"list[int]\")\n    a3 = p1[1:]\n    reveal_type(a3, expected_text=\"list[int]\")\n    a4 = p1[1:2]\n    reveal_type(a4, expected_text=\"list[int]\")\n    a5 = p1[0:1:3]",
        "detail": "packages.pyright-internal.src.tests.samples.subscript2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript2",
        "description": "packages.pyright-internal.src.tests.samples.subscript2",
        "peekOfCode": "_T = TypeVar(\"_T\", list, tuple)\ndef func1(p1: List[int], p2: _T):\n    a1 = p1[0]\n    reveal_type(a1, expected_text=\"int\")\n    a2 = p1[:]\n    reveal_type(a2, expected_text=\"list[int]\")\n    a3 = p1[1:]\n    reveal_type(a3, expected_text=\"list[int]\")\n    a4 = p1[1:2]\n    reveal_type(a4, expected_text=\"list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.subscript2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "class ClassA:\n    @overload\n    def __getitem__(self, index: int) -> int:\n        ...\n    @overload\n    def __getitem__(self, index: Tuple[int, ...]) -> float:\n        ...\n    @overload\n    def __getitem__(self, index: Any, *, v1: int) -> str:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "class ClassB:\n    def __getitem__(self, value: Tuple[()], *, v1: int) -> str:\n        ...\nb_obj = ClassB()\n# This should generate an error because positional args are not allowed.\ny1 = b_obj[1]\ny2 = b_obj[v1=3]\nreveal_type(y2, expected_text=\"str\")\n# This should generate an error because v2 is not a named arg.\ny3 = b_obj[v2=3]",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "class ClassC:\n    def __getitem__(self, index: Any, **kwargs: int) -> complex:\n        ...\n    def __setitem__(self, index: Any, value: float, **kwargs: int) -> None:\n        ...\nc_obj = ClassC()\nz1 = c_obj[1, *val_list, **val_dict]\nreveal_type(z1, expected_text=\"complex\")\nc_obj[1, *val_list, **val_dict] = 4.3\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "val_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "val_list = [1, 2, 3]\nval_dict = {\"a\": 2, \"b\": 2}\na_obj = ClassA()\nx1 = a_obj[1]\nreveal_type(x1, expected_text=\"int\")\na_obj[1] = 3\n# This should generate an error because float isn't assignable.\na_obj[1] = 3.5\nx2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "val_dict",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "val_dict = {\"a\": 2, \"b\": 2}\na_obj = ClassA()\nx1 = a_obj[1]\nreveal_type(x1, expected_text=\"int\")\na_obj[1] = 3\n# This should generate an error because float isn't assignable.\na_obj[1] = 3.5\nx2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")\na_obj[1,] = 3.4",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj = ClassA()\nx1 = a_obj[1]\nreveal_type(x1, expected_text=\"int\")\na_obj[1] = 3\n# This should generate an error because float isn't assignable.\na_obj[1] = 3.5\nx2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")\na_obj[1,] = 3.4\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "x1 = a_obj[1]\nreveal_type(x1, expected_text=\"int\")\na_obj[1] = 3\n# This should generate an error because float isn't assignable.\na_obj[1] = 3.5\nx2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")\na_obj[1,] = 3.4\n# This should generate an error because complex isn't assignable.\na_obj[1,] = 3.5j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1] = 3\n# This should generate an error because float isn't assignable.\na_obj[1] = 3.5\nx2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")\na_obj[1,] = 3.4\n# This should generate an error because complex isn't assignable.\na_obj[1,] = 3.5j\nx3 = a_obj[1,2]\nreveal_type(x3, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1] = 3.5\nx2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")\na_obj[1,] = 3.4\n# This should generate an error because complex isn't assignable.\na_obj[1,] = 3.5j\nx3 = a_obj[1,2]\nreveal_type(x3, expected_text=\"float\")\na_obj[1,2] = 4.5\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "x2 = a_obj[1,]\nreveal_type(x2, expected_text=\"float\")\na_obj[1,] = 3.4\n# This should generate an error because complex isn't assignable.\na_obj[1,] = 3.5j\nx3 = a_obj[1,2]\nreveal_type(x3, expected_text=\"float\")\na_obj[1,2] = 4.5\n# This should generate an error because complex isn't assignable.\na_obj[1,2] = 3.5j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1,]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1,] = 3.4\n# This should generate an error because complex isn't assignable.\na_obj[1,] = 3.5j\nx3 = a_obj[1,2]\nreveal_type(x3, expected_text=\"float\")\na_obj[1,2] = 4.5\n# This should generate an error because complex isn't assignable.\na_obj[1,2] = 3.5j\nx4 = a_obj[(1,)]\nreveal_type(x4, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1,]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1,] = 3.5j\nx3 = a_obj[1,2]\nreveal_type(x3, expected_text=\"float\")\na_obj[1,2] = 4.5\n# This should generate an error because complex isn't assignable.\na_obj[1,2] = 3.5j\nx4 = a_obj[(1,)]\nreveal_type(x4, expected_text=\"float\")\na_obj[(1,)] = 3\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "x3 = a_obj[1,2]\nreveal_type(x3, expected_text=\"float\")\na_obj[1,2] = 4.5\n# This should generate an error because complex isn't assignable.\na_obj[1,2] = 3.5j\nx4 = a_obj[(1,)]\nreveal_type(x4, expected_text=\"float\")\na_obj[(1,)] = 3\n# This should generate an error because complex isn't assignable.\na_obj[(1,)] = 3.5j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1,2]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1,2] = 4.5\n# This should generate an error because complex isn't assignable.\na_obj[1,2] = 3.5j\nx4 = a_obj[(1,)]\nreveal_type(x4, expected_text=\"float\")\na_obj[(1,)] = 3\n# This should generate an error because complex isn't assignable.\na_obj[(1,)] = 3.5j\nx6 = a_obj[1, v1=3]\nreveal_type(x6, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1,2]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1,2] = 3.5j\nx4 = a_obj[(1,)]\nreveal_type(x4, expected_text=\"float\")\na_obj[(1,)] = 3\n# This should generate an error because complex isn't assignable.\na_obj[(1,)] = 3.5j\nx6 = a_obj[1, v1=3]\nreveal_type(x6, expected_text=\"str\")\na_obj[1, v1=3] = \"hi\"\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "x4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "x4 = a_obj[(1,)]\nreveal_type(x4, expected_text=\"float\")\na_obj[(1,)] = 3\n# This should generate an error because complex isn't assignable.\na_obj[(1,)] = 3.5j\nx6 = a_obj[1, v1=3]\nreveal_type(x6, expected_text=\"str\")\na_obj[1, v1=3] = \"hi\"\n# This should generate an error because complex isn't assignable.\na_obj[1,v1=3] = 3.5j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[(1,)]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[(1,)] = 3\n# This should generate an error because complex isn't assignable.\na_obj[(1,)] = 3.5j\nx6 = a_obj[1, v1=3]\nreveal_type(x6, expected_text=\"str\")\na_obj[1, v1=3] = \"hi\"\n# This should generate an error because complex isn't assignable.\na_obj[1,v1=3] = 3.5j\nx8 = a_obj[1, *val_list]\nreveal_type(x8, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[(1,)]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[(1,)] = 3.5j\nx6 = a_obj[1, v1=3]\nreveal_type(x6, expected_text=\"str\")\na_obj[1, v1=3] = \"hi\"\n# This should generate an error because complex isn't assignable.\na_obj[1,v1=3] = 3.5j\nx8 = a_obj[1, *val_list]\nreveal_type(x8, expected_text=\"float\")\na_obj[1, *val_list] = 4.3\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "x6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "x6 = a_obj[1, v1=3]\nreveal_type(x6, expected_text=\"str\")\na_obj[1, v1=3] = \"hi\"\n# This should generate an error because complex isn't assignable.\na_obj[1,v1=3] = 3.5j\nx8 = a_obj[1, *val_list]\nreveal_type(x8, expected_text=\"float\")\na_obj[1, *val_list] = 4.3\n# This should generate an error because complex isn't assignable.\na_obj[1, *val_list] = 4.3j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "a_obj[1,v1=3]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "a_obj[1,v1=3] = 3.5j\nx8 = a_obj[1, *val_list]\nreveal_type(x8, expected_text=\"float\")\na_obj[1, *val_list] = 4.3\n# This should generate an error because complex isn't assignable.\na_obj[1, *val_list] = 4.3j\nclass ClassB:\n    def __getitem__(self, value: Tuple[()], *, v1: int) -> str:\n        ...\nb_obj = ClassB()",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "x8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "x8 = a_obj[1, *val_list]\nreveal_type(x8, expected_text=\"float\")\na_obj[1, *val_list] = 4.3\n# This should generate an error because complex isn't assignable.\na_obj[1, *val_list] = 4.3j\nclass ClassB:\n    def __getitem__(self, value: Tuple[()], *, v1: int) -> str:\n        ...\nb_obj = ClassB()\n# This should generate an error because positional args are not allowed.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "b_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "b_obj = ClassB()\n# This should generate an error because positional args are not allowed.\ny1 = b_obj[1]\ny2 = b_obj[v1=3]\nreveal_type(y2, expected_text=\"str\")\n# This should generate an error because v2 is not a named arg.\ny3 = b_obj[v2=3]\nclass ClassC:\n    def __getitem__(self, index: Any, **kwargs: int) -> complex:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "y1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "y1 = b_obj[1]\ny2 = b_obj[v1=3]\nreveal_type(y2, expected_text=\"str\")\n# This should generate an error because v2 is not a named arg.\ny3 = b_obj[v2=3]\nclass ClassC:\n    def __getitem__(self, index: Any, **kwargs: int) -> complex:\n        ...\n    def __setitem__(self, index: Any, value: float, **kwargs: int) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "y2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "y2 = b_obj[v1=3]\nreveal_type(y2, expected_text=\"str\")\n# This should generate an error because v2 is not a named arg.\ny3 = b_obj[v2=3]\nclass ClassC:\n    def __getitem__(self, index: Any, **kwargs: int) -> complex:\n        ...\n    def __setitem__(self, index: Any, value: float, **kwargs: int) -> None:\n        ...\nc_obj = ClassC()",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "y3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "y3 = b_obj[v2=3]\nclass ClassC:\n    def __getitem__(self, index: Any, **kwargs: int) -> complex:\n        ...\n    def __setitem__(self, index: Any, value: float, **kwargs: int) -> None:\n        ...\nc_obj = ClassC()\nz1 = c_obj[1, *val_list, **val_dict]\nreveal_type(z1, expected_text=\"complex\")\nc_obj[1, *val_list, **val_dict] = 4.3",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "c_obj",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "c_obj = ClassC()\nz1 = c_obj[1, *val_list, **val_dict]\nreveal_type(z1, expected_text=\"complex\")\nc_obj[1, *val_list, **val_dict] = 4.3\n# This should generate an error because complex isn't assignable.\nc_obj[1, *val_list] = 4.3j\nz2 = c_obj[1, v1=3, v2=4]\nreveal_type(z2, expected_text=\"complex\")\nc_obj[1, v1=3, v2=4] = 4.3\n# This should generate an error because complex isn't assignable.",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "z1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "z1 = c_obj[1, *val_list, **val_dict]\nreveal_type(z1, expected_text=\"complex\")\nc_obj[1, *val_list, **val_dict] = 4.3\n# This should generate an error because complex isn't assignable.\nc_obj[1, *val_list] = 4.3j\nz2 = c_obj[1, v1=3, v2=4]\nreveal_type(z2, expected_text=\"complex\")\nc_obj[1, v1=3, v2=4] = 4.3\n# This should generate an error because complex isn't assignable.\nc_obj[1, v1=3, v2=4] = 4.3j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "z2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.subscript3",
        "description": "packages.pyright-internal.src.tests.samples.subscript3",
        "peekOfCode": "z2 = c_obj[1, v1=3, v2=4]\nreveal_type(z2, expected_text=\"complex\")\nc_obj[1, v1=3, v2=4] = 4.3\n# This should generate an error because complex isn't assignable.\nc_obj[1, v1=3, v2=4] = 4.3j",
        "detail": "packages.pyright-internal.src.tests.samples.subscript3",
        "documentation": {}
    },
    {
        "label": "FooBase",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super1",
        "description": "packages.pyright-internal.src.tests.samples.super1",
        "peekOfCode": "class FooBase:\n    @staticmethod\n    def ccc():\n        pass\nclass Foo1(FooBase):\n    def __init__(self):\n        pass\n    def hello1(self):\n        pass\nclass Foo2(FooBase):",
        "detail": "packages.pyright-internal.src.tests.samples.super1",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super1",
        "description": "packages.pyright-internal.src.tests.samples.super1",
        "peekOfCode": "class Foo1(FooBase):\n    def __init__(self):\n        pass\n    def hello1(self):\n        pass\nclass Foo2(FooBase):\n    def __init__(self):\n        pass\n    def hello2(self):\n        return self.__class__()",
        "detail": "packages.pyright-internal.src.tests.samples.super1",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super1",
        "description": "packages.pyright-internal.src.tests.samples.super1",
        "peekOfCode": "class Foo2(FooBase):\n    def __init__(self):\n        pass\n    def hello2(self):\n        return self.__class__()\n    @staticmethod\n    def aaa():\n        pass\nclass Bar(Foo1, Foo2):\n    def __init__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.super1",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super1",
        "description": "packages.pyright-internal.src.tests.samples.super1",
        "peekOfCode": "class Bar(Foo1, Foo2):\n    def __init__(self):\n        super().hello1()\n        super().hello2()\n        # This should generate an error\n        super().goodbye()\nsuper(Bar).aaa()\n# This should generate an error\nsuper(Bar).bbb()\nsuper(Foo1, Bar).ccc()",
        "detail": "packages.pyright-internal.src.tests.samples.super1",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super1",
        "description": "packages.pyright-internal.src.tests.samples.super1",
        "peekOfCode": "bar = Bar()\nsuper(Foo1, bar).ccc()\nfoo2 = Foo2()\n# This should generate an error because Foo2\n# is not a subclass of Foo1.\nsuper(Foo1, foo2).ccc()",
        "detail": "packages.pyright-internal.src.tests.samples.super1",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super1",
        "description": "packages.pyright-internal.src.tests.samples.super1",
        "peekOfCode": "foo2 = Foo2()\n# This should generate an error because Foo2\n# is not a subclass of Foo1.\nsuper(Foo1, foo2).ccc()",
        "detail": "packages.pyright-internal.src.tests.samples.super1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super2",
        "description": "packages.pyright-internal.src.tests.samples.super2",
        "peekOfCode": "class A:\n    @classmethod\n    def factory(cls: Type[T]) -> T:\n        return cls()\nclass B(A):\n    @classmethod\n    def factoryB(cls):\n        return super(B, cls).factory()\na1 = A.factory()\nreveal_type(a1, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.super2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super2",
        "description": "packages.pyright-internal.src.tests.samples.super2",
        "peekOfCode": "class B(A):\n    @classmethod\n    def factoryB(cls):\n        return super(B, cls).factory()\na1 = A.factory()\nreveal_type(a1, expected_text=\"A\")\nb1 = B.factory()\nreveal_type(b1, expected_text=\"B\")\nb2 = B.factoryB()\nreveal_type(b2, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.super2",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super2",
        "description": "packages.pyright-internal.src.tests.samples.super2",
        "peekOfCode": "T = TypeVar(\"T\", bound=\"A\")\nclass A:\n    @classmethod\n    def factory(cls: Type[T]) -> T:\n        return cls()\nclass B(A):\n    @classmethod\n    def factoryB(cls):\n        return super(B, cls).factory()\na1 = A.factory()",
        "detail": "packages.pyright-internal.src.tests.samples.super2",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super2",
        "description": "packages.pyright-internal.src.tests.samples.super2",
        "peekOfCode": "a1 = A.factory()\nreveal_type(a1, expected_text=\"A\")\nb1 = B.factory()\nreveal_type(b1, expected_text=\"B\")\nb2 = B.factoryB()\nreveal_type(b2, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.super2",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super2",
        "description": "packages.pyright-internal.src.tests.samples.super2",
        "peekOfCode": "b1 = B.factory()\nreveal_type(b1, expected_text=\"B\")\nb2 = B.factoryB()\nreveal_type(b2, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.super2",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super2",
        "description": "packages.pyright-internal.src.tests.samples.super2",
        "peekOfCode": "b2 = B.factoryB()\nreveal_type(b2, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.super2",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super3",
        "description": "packages.pyright-internal.src.tests.samples.super3",
        "peekOfCode": "class Class1(ClassUnknown):\n    def __init__(self, x: int):\n        # This should not generate an error.\n        super(Class1, self).__init__(x, 1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.super3",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super4",
        "description": "packages.pyright-internal.src.tests.samples.super4",
        "peekOfCode": "class Base(typing.Generic[T]):\n    @classmethod\n    def construct(cls: typing.Type[T]) -> T:\n        return cls()\nclass Derived(Base[\"Derived\"]):\n    @classmethod\n    def construct(cls) -> Derived:\n        return super().construct()\nd: Derived = Derived.construct()",
        "detail": "packages.pyright-internal.src.tests.samples.super4",
        "documentation": {}
    },
    {
        "label": "Derived",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super4",
        "description": "packages.pyright-internal.src.tests.samples.super4",
        "peekOfCode": "class Derived(Base[\"Derived\"]):\n    @classmethod\n    def construct(cls) -> Derived:\n        return super().construct()\nd: Derived = Derived.construct()",
        "detail": "packages.pyright-internal.src.tests.samples.super4",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super4",
        "description": "packages.pyright-internal.src.tests.samples.super4",
        "peekOfCode": "T = typing.TypeVar(\"T\")\nclass Base(typing.Generic[T]):\n    @classmethod\n    def construct(cls: typing.Type[T]) -> T:\n        return cls()\nclass Derived(Base[\"Derived\"]):\n    @classmethod\n    def construct(cls) -> Derived:\n        return super().construct()\nd: Derived = Derived.construct()",
        "detail": "packages.pyright-internal.src.tests.samples.super4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super5",
        "description": "packages.pyright-internal.src.tests.samples.super5",
        "peekOfCode": "class A:\n    @classmethod\n    def construct(cls: Type[A_T]) -> A_T:\n        return cls()\n    def construct2(self: A_T) -> A_T:\n        return type(self)()\nB_T = TypeVar(\"B_T\", bound=\"B\")\nclass B(A):\n    @classmethod\n    def construct(cls: Type[B_T]) -> B_T:",
        "detail": "packages.pyright-internal.src.tests.samples.super5",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super5",
        "description": "packages.pyright-internal.src.tests.samples.super5",
        "peekOfCode": "class B(A):\n    @classmethod\n    def construct(cls: Type[B_T]) -> B_T:\n        return super().construct()\n    def construct2(self: B_T) -> B_T:\n        return super().construct2()",
        "detail": "packages.pyright-internal.src.tests.samples.super5",
        "documentation": {}
    },
    {
        "label": "A_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super5",
        "description": "packages.pyright-internal.src.tests.samples.super5",
        "peekOfCode": "A_T = TypeVar(\"A_T\", bound=\"A\")\nclass A:\n    @classmethod\n    def construct(cls: Type[A_T]) -> A_T:\n        return cls()\n    def construct2(self: A_T) -> A_T:\n        return type(self)()\nB_T = TypeVar(\"B_T\", bound=\"B\")\nclass B(A):\n    @classmethod",
        "detail": "packages.pyright-internal.src.tests.samples.super5",
        "documentation": {}
    },
    {
        "label": "B_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super5",
        "description": "packages.pyright-internal.src.tests.samples.super5",
        "peekOfCode": "B_T = TypeVar(\"B_T\", bound=\"B\")\nclass B(A):\n    @classmethod\n    def construct(cls: Type[B_T]) -> B_T:\n        return super().construct()\n    def construct2(self: B_T) -> B_T:\n        return super().construct2()",
        "detail": "packages.pyright-internal.src.tests.samples.super5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super6",
        "description": "packages.pyright-internal.src.tests.samples.super6",
        "peekOfCode": "class Foo(FooBase):\n    def __new__(cls):\n        obj = super().__new__(cls, x=1)\n        reveal_type(obj, expected_text=\"Self@Foo\")\n        return obj\nf = Foo()\nreveal_type(f, expected_text=\"Foo\")\nclass FirstLevelMeta(type):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)",
        "detail": "packages.pyright-internal.src.tests.samples.super6",
        "documentation": {}
    },
    {
        "label": "FirstLevelMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super6",
        "description": "packages.pyright-internal.src.tests.samples.super6",
        "peekOfCode": "class FirstLevelMeta(type):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        reveal_type(new_class, expected_text='Self@FirstLevelMeta')\n        return new_class\nclass SecondLevelMeta(FirstLevelMeta):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        reveal_type(new_class, expected_text='Self@SecondLevelMeta')\n        return new_class",
        "detail": "packages.pyright-internal.src.tests.samples.super6",
        "documentation": {}
    },
    {
        "label": "SecondLevelMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super6",
        "description": "packages.pyright-internal.src.tests.samples.super6",
        "peekOfCode": "class SecondLevelMeta(FirstLevelMeta):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        reveal_type(new_class, expected_text='Self@SecondLevelMeta')\n        return new_class\nclass ThirdLevelMeta(SecondLevelMeta):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        reveal_type(new_class, expected_text='Self@ThirdLevelMeta')\n        return new_class",
        "detail": "packages.pyright-internal.src.tests.samples.super6",
        "documentation": {}
    },
    {
        "label": "ThirdLevelMeta",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super6",
        "description": "packages.pyright-internal.src.tests.samples.super6",
        "peekOfCode": "class ThirdLevelMeta(SecondLevelMeta):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        reveal_type(new_class, expected_text='Self@ThirdLevelMeta')\n        return new_class",
        "detail": "packages.pyright-internal.src.tests.samples.super6",
        "documentation": {}
    },
    {
        "label": "FooBase",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super6",
        "description": "packages.pyright-internal.src.tests.samples.super6",
        "peekOfCode": "FooBase = NamedTuple(\"FooBase\", [(\"x\", int)])\nclass Foo(FooBase):\n    def __new__(cls):\n        obj = super().__new__(cls, x=1)\n        reveal_type(obj, expected_text=\"Self@Foo\")\n        return obj\nf = Foo()\nreveal_type(f, expected_text=\"Foo\")\nclass FirstLevelMeta(type):\n    def __new__(cls, name: str, bases, dct):",
        "detail": "packages.pyright-internal.src.tests.samples.super6",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super6",
        "description": "packages.pyright-internal.src.tests.samples.super6",
        "peekOfCode": "f = Foo()\nreveal_type(f, expected_text=\"Foo\")\nclass FirstLevelMeta(type):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)\n        reveal_type(new_class, expected_text='Self@FirstLevelMeta')\n        return new_class\nclass SecondLevelMeta(FirstLevelMeta):\n    def __new__(cls, name: str, bases, dct):\n        new_class = super().__new__(cls, name, bases, dct)",
        "detail": "packages.pyright-internal.src.tests.samples.super6",
        "documentation": {}
    },
    {
        "label": "BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super7",
        "description": "packages.pyright-internal.src.tests.samples.super7",
        "peekOfCode": "class BaseClass:\n    def my_method(self, value: int) -> int:\n        ...\nclass SubClass(BaseClass):\n    def method_plain_super(self, value: int) -> int:\n        reveal_type(super(), expected_text=\"BaseClass\")\n        return super().my_method(value)\n    def method_super(self, value: int) -> int:\n        reveal_type(super(__class__, self), expected_text=\"BaseClass\")\n        return super(__class__, self).my_method(value)",
        "detail": "packages.pyright-internal.src.tests.samples.super7",
        "documentation": {}
    },
    {
        "label": "SubClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super7",
        "description": "packages.pyright-internal.src.tests.samples.super7",
        "peekOfCode": "class SubClass(BaseClass):\n    def method_plain_super(self, value: int) -> int:\n        reveal_type(super(), expected_text=\"BaseClass\")\n        return super().my_method(value)\n    def method_super(self, value: int) -> int:\n        reveal_type(super(__class__, self), expected_text=\"BaseClass\")\n        return super(__class__, self).my_method(value)\n    def method_super_extra_arg(self, value: int) -> int:\n        reveal_type(super(__class__, self), expected_text=\"BaseClass\")\n        # This should generate an error because the method is already bound.",
        "detail": "packages.pyright-internal.src.tests.samples.super7",
        "documentation": {}
    },
    {
        "label": "Metaclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super8",
        "description": "packages.pyright-internal.src.tests.samples.super8",
        "peekOfCode": "class Metaclass(type):\n    def __init__(self, name, bases, attrs):\n        super().__init__(name, bases, attrs)",
        "detail": "packages.pyright-internal.src.tests.samples.super8",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "class Foo(Generic[_T]):\n    def __init__(self, x: _T = 1) -> None:\n        ...\nclass Bar(Foo[int]):\n    ...\nclass Baz(Bar):\n    def __init__(self) -> None:\n        super().__init__()\nclass Baz2(Bar):\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "class Bar(Foo[int]):\n    ...\nclass Baz(Bar):\n    def __init__(self) -> None:\n        super().__init__()\nclass Baz2(Bar):\n    def __init__(self) -> None:\n        super().__init__(x=1)\nclass Bar2(Foo[int]):\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "class Baz(Bar):\n    def __init__(self) -> None:\n        super().__init__()\nclass Baz2(Bar):\n    def __init__(self) -> None:\n        super().__init__(x=1)\nclass Bar2(Foo[int]):\n    def __init__(self) -> None:\n        super().__init__()\nclass Bar3(Foo[int]):",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "Baz2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "class Baz2(Bar):\n    def __init__(self) -> None:\n        super().__init__(x=1)\nclass Bar2(Foo[int]):\n    def __init__(self) -> None:\n        super().__init__()\nclass Bar3(Foo[int]):\n    def __init__(self) -> None:\n        super().__init__(x=1)",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "Bar2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "class Bar2(Foo[int]):\n    def __init__(self) -> None:\n        super().__init__()\nclass Bar3(Foo[int]):\n    def __init__(self) -> None:\n        super().__init__(x=1)",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "Bar3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "class Bar3(Foo[int]):\n    def __init__(self) -> None:\n        super().__init__(x=1)",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.super9",
        "description": "packages.pyright-internal.src.tests.samples.super9",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Foo(Generic[_T]):\n    def __init__(self, x: _T = 1) -> None:\n        ...\nclass Bar(Foo[int]):\n    ...\nclass Baz(Bar):\n    def __init__(self) -> None:\n        super().__init__()\nclass Baz2(Bar):",
        "detail": "packages.pyright-internal.src.tests.samples.super9",
        "documentation": {}
    },
    {
        "label": "from_json_timestamp",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "description": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "peekOfCode": "def from_json_timestamp(ts: int) -> datetime:\n    ...\n@overload\ndef from_json_timestamp(ts: None) -> None:\n    ...\ndef from_json_timestamp(ts: Optional[int]) -> Optional[datetime]:\n    return (\n        None\n        if ts is None\n        else (datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(milliseconds=ts))",
        "detail": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "documentation": {}
    },
    {
        "label": "from_json_timestamp",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "description": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "peekOfCode": "def from_json_timestamp(ts: None) -> None:\n    ...\ndef from_json_timestamp(ts: Optional[int]) -> Optional[datetime]:\n    return (\n        None\n        if ts is None\n        else (datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(milliseconds=ts))\n    )\nresult1: datetime = from_json_timestamp(2418049)\nresult3: None = from_json_timestamp(None)",
        "detail": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "documentation": {}
    },
    {
        "label": "from_json_timestamp",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "description": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "peekOfCode": "def from_json_timestamp(ts: Optional[int]) -> Optional[datetime]:\n    return (\n        None\n        if ts is None\n        else (datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(milliseconds=ts))\n    )\nresult1: datetime = from_json_timestamp(2418049)\nresult3: None = from_json_timestamp(None)",
        "detail": "packages.pyright-internal.src.tests.samples.threePartVersion1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "class ClassA:\n    val1: int\n    def __gt__(self, other: object) -> bool:\n        ...\na = ClassA()\nb = ClassA()\nv1 = a < b\nv2 = a <= b\nv3 = a > b\nv4 = a >= b",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "class ClassB:\n    val1: int\n@total_ordering\nclass ClassC:\n    def __eq__(self, other: object) -> bool:\n        return False\n    def __lt__(self, other: \"ClassC\") -> bool:\n        return False\nreveal_type(ClassC() < ClassC(), expected_text=\"bool\")\nreveal_type(ClassC() <= ClassC(), expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "class ClassC:\n    def __eq__(self, other: object) -> bool:\n        return False\n    def __lt__(self, other: \"ClassC\") -> bool:\n        return False\nreveal_type(ClassC() < ClassC(), expected_text=\"bool\")\nreveal_type(ClassC() <= ClassC(), expected_text=\"bool\")\nreveal_type(ClassC() == ClassC(), expected_text=\"bool\")\nreveal_type(ClassC() > ClassC(), expected_text=\"bool\")\nreveal_type(ClassC() >= ClassC(), expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "ClassD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "class ClassD:\n    def __init__(self) -> None:\n        self.value: int = 0\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ClassD):\n            return NotImplemented\n        reveal_type(other, expected_text=\"ClassD\")\n        return self.value == other.value\n    def __le__(self, other: object) -> bool:\n        if not isinstance(other, ClassD):",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "a = ClassA()\nb = ClassA()\nv1 = a < b\nv2 = a <= b\nv3 = a > b\nv4 = a >= b\nv5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "b = ClassA()\nv1 = a < b\nv2 = a <= b\nv3 = a > b\nv4 = a >= b\nv5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "v1 = a < b\nv2 = a <= b\nv3 = a > b\nv4 = a >= b\nv5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering\nclass ClassB:",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "v2 = a <= b\nv3 = a > b\nv4 = a >= b\nv5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering\nclass ClassB:\n    val1: int",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "v3 = a > b\nv4 = a >= b\nv5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering\nclass ClassB:\n    val1: int\n@total_ordering",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "v4 = a >= b\nv5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering\nclass ClassB:\n    val1: int\n@total_ordering\nclass ClassC:",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "v5 = a == b\nv6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering\nclass ClassB:\n    val1: int\n@total_ordering\nclass ClassC:\n    def __eq__(self, other: object) -> bool:",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "v6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "v6 = a != b\n# This should generate an error because it doesn't declare\n# any of the required ordering functions.\n@total_ordering\nclass ClassB:\n    val1: int\n@total_ordering\nclass ClassC:\n    def __eq__(self, other: object) -> bool:\n        return False",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "_ = ClassC() == 1\n_ = ClassC() != 1\n# The following four lines should each produce an error.\n_ = ClassC() < 1\n_ = ClassC() <= 1\n_ = ClassC() > 1\n_ = ClassC() >= 1\n@total_ordering\nclass ClassD:\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "_ = ClassC() != 1\n# The following four lines should each produce an error.\n_ = ClassC() < 1\n_ = ClassC() <= 1\n_ = ClassC() > 1\n_ = ClassC() >= 1\n@total_ordering\nclass ClassD:\n    def __init__(self) -> None:\n        self.value: int = 0",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "_ = ClassC() < 1\n_ = ClassC() <= 1\n_ = ClassC() > 1\n_ = ClassC() >= 1\n@total_ordering\nclass ClassD:\n    def __init__(self) -> None:\n        self.value: int = 0\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ClassD):",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "_ = ClassC() <= 1\n_ = ClassC() > 1\n_ = ClassC() >= 1\n@total_ordering\nclass ClassD:\n    def __init__(self) -> None:\n        self.value: int = 0\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ClassD):\n            return NotImplemented",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "_ = ClassC() > 1\n_ = ClassC() >= 1\n@total_ordering\nclass ClassD:\n    def __init__(self) -> None:\n        self.value: int = 0\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ClassD):\n            return NotImplemented\n        reveal_type(other, expected_text=\"ClassD\")",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "description": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "peekOfCode": "_ = ClassC() >= 1\n@total_ordering\nclass ClassD:\n    def __init__(self) -> None:\n        self.value: int = 0\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, ClassD):\n            return NotImplemented\n        reveal_type(other, expected_text=\"ClassD\")\n        return self.value == other.value",
        "detail": "packages.pyright-internal.src.tests.samples.totalOrdering1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "peekOfCode": "def func1():\n    try:\n        pass\n    except:\n        raise\n    raise\ndef func2(x, y) -> bool:\n    try:\n        z = x / y\n    except (RuntimeError, NameError) as e:",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "peekOfCode": "def func2(x, y) -> bool:\n    try:\n        z = x / y\n    except (RuntimeError, NameError) as e:\n        reveal_type(e, expected_text=\"RuntimeError | NameError\")\n        return False\n    except Exception as e:\n        reveal_type(e, expected_text=\"Exception\")\n        return False\n    except:",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "peekOfCode": "def func3():\n    # This should generate an error because there is no\n    # except or finally clause.\n    try:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept10",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept10",
        "peekOfCode": "def func1() -> None:\n    file = None\n    try:\n        raise ValueError()\n    except Exception:\n        return None\n    finally:\n        # This should generate an error.\n        file.name",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept10",
        "documentation": {}
    },
    {
        "label": "deallocate",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept2",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept2",
        "peekOfCode": "def deallocate(i: int) -> None:\n    pass\ndef test():\n    aaa = 3\n    try:\n        try:\n            return\n        finally:\n            pass\n    finally:",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept2",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept2",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept2",
        "peekOfCode": "def test():\n    aaa = 3\n    try:\n        try:\n            return\n        finally:\n            pass\n    finally:\n        deallocate(aaa)",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept2",
        "documentation": {}
    },
    {
        "label": "CustomException1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept4",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept4",
        "peekOfCode": "class CustomException1(BaseException):\n    def __init__(self, code: int):\n        pass\n# This should generate an error because CustomException1\n# requires an argument to instantiate.\nif a:\n    raise CustomException1\nif a:\n    raise CustomException1(3)\nclass CustomException2:",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept4",
        "documentation": {}
    },
    {
        "label": "CustomException2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept4",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept4",
        "peekOfCode": "class CustomException2:\n    pass\n# This should generate an error because\n# the exception doesn't derive from BaseException.\nif a:\n    raise CustomException2",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept4",
        "documentation": {}
    },
    {
        "label": "MyJob",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept5",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept5",
        "peekOfCode": "class MyJob:\n    async def do_stuff(self):\n        try:\n            while True:\n                await asyncio.sleep(1)\n                my_var = 3\n        finally:\n            # This should generate an error because\n            # my_var may be unbound at this point.\n            print(my_var)",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept6",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept6",
        "peekOfCode": "def func1():\n    try:\n        _ = \"text\".index(\"a\")\n    except:\n        var = 1\n    else:\n        var = 2\n    finally:\n        print(var)\ndef func2():",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept6",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept6",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept6",
        "peekOfCode": "def func2():\n    try:\n        _ = \"text\".index(\"a\")\n    except NameError:\n        var = 1\n    else:\n        var = 2\n    finally:\n        # This should generate a \"possibly unbound\" error.\n        print(var)",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept7",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept7",
        "peekOfCode": "def func1():\n    try:\n        pass\n    # This should generate an error if using Python 3.10 or earlier.\n    except* ValueError as e:\n        reveal_type(e, expected_text=\"ExceptionGroup[ValueError]\")\n        pass\n    # This should generate an error if using Python 3.10 or earlier.\n    except*:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func1() -> None:\n    pass\ndef func2():\n    try:\n        func1()\n    except OSError:\n        pass\n    except Exception:\n        pass\n    # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func2():\n    try:\n        func1()\n    except OSError:\n        pass\n    except Exception:\n        pass\n    # This should generate an error.\n    except PermissionError:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func3():\n    try:\n        func1()\n    except OSError:\n        pass\n    # This should generate an error.\n    except (PermissionError, ProcessLookupError):\n        pass\n    # This should generate an error.\n    except (PermissionError, ConnectionAbortedError):",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func4():\n    try:\n        func1()\n    except OSError:\n        pass\n    except (UnboundLocalError, ConnectionAbortedError):\n        pass\ndef func5():\n    try:\n        func1()",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func5():\n    try:\n        func1()\n    except OSError:\n        pass\n    except:\n        pass\ndef func6(u: Union[Type[Exception], tuple[Type[Exception], ...]]):\n    try:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func6(u: Union[Type[Exception], tuple[Type[Exception], ...]]):\n    try:\n        ...\n    except ValueError as e:\n        ...\n    except u as e:\n        ...\ndef func7(u: Type[Exception]):\n    try:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "peekOfCode": "def func7(u: Type[Exception]):\n    try:\n        ...\n    except ValueError as e:\n        ...\n    except u as e:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "peekOfCode": "def func1():\n    file = None\n    try:\n        file = open(\"test.txt\")\n    except Exception:\n        return None\n    finally:\n        if file:\n            file.close()\n    # This should evaluate to \"TextIOWrapper\", but the current",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "peekOfCode": "def func2():\n    file = None\n    try:\n        file = open(\"test.txt\")\n    except Exception:\n        pass\n    finally:\n        if file:\n            file.close()\n    reveal_type(file, expected_text=\"TextIOWrapper | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "description": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "peekOfCode": "def func3():\n    file = None\n    try:\n        file = open(\"test.txt\")\n    finally:\n        pass\n    reveal_type(file, expected_text=\"TextIOWrapper\")",
        "detail": "packages.pyright-internal.src.tests.samples.tryExcept9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func1() -> Tuple[int, int, int]:\n    a = 1, 2, 3\n    # This should generate an error because\n    # of a tuple size mismatch.\n    b, c = a\n    b, c, d = a\n    # This should generate an error because\n    # of a tuple size mismatch.\n    (\n        b,",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func2() -> Tuple[int, int, str]:\n    a = 1, 2, 3\n    # This should generate an error because the\n    # item types don't match.\n    return a\ndef func3() -> Tuple[str, ...]:\n    a = \"1\", 2, 3\n    # This should generate an error because the\n    # heterogenous tuple can't be assigned to\n    # the homogenous tuple type.",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func3() -> Tuple[str, ...]:\n    a = \"1\", 2, 3\n    # This should generate an error because the\n    # heterogenous tuple can't be assigned to\n    # the homogenous tuple type.\n    return a\ndef func4() -> Tuple[str, ...]:\n    a = (1,)\n    # This should generate an error because the first\n    # item in the tuple isn't a string.",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func4() -> Tuple[str, ...]:\n    a = (1,)\n    # This should generate an error because the first\n    # item in the tuple isn't a string.\n    return a\ndef func6():\n    a = 1, 2, \"hello\"\n    a.index(\"1\")\ndef func7(a: Tuple) -> Tuple[()]:\n    return ()",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func6():\n    a = 1, 2, \"hello\"\n    a.index(\"1\")\ndef func7(a: Tuple) -> Tuple[()]:\n    return ()\ndef func7_1(a: tuple):\n    a.index(\"1\")\n# Test the tuple specialization code. This\n# should generate no error because split should\n# be specialized to return a tuple of str values.",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func7(a: Tuple) -> Tuple[()]:\n    return ()\ndef func7_1(a: tuple):\n    a.index(\"1\")\n# Test the tuple specialization code. This\n# should generate no error because split should\n# be specialized to return a tuple of str values.\ndef func8() -> str:\n    dirname, fname = os.path.split(\"dir/file\")\n    return dirname",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func7_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func7_1(a: tuple):\n    a.index(\"1\")\n# Test the tuple specialization code. This\n# should generate no error because split should\n# be specialized to return a tuple of str values.\ndef func8() -> str:\n    dirname, fname = os.path.split(\"dir/file\")\n    return dirname\ndef func9(param1: Tuple[int, ...]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func8() -> str:\n    dirname, fname = os.path.split(\"dir/file\")\n    return dirname\ndef func9(param1: Tuple[int, ...]):\n    pass\ndef func10() -> tuple[int, ...]:\n    return (\n        3,\n        4,\n        5,",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func9(param1: Tuple[int, ...]):\n    pass\ndef func10() -> tuple[int, ...]:\n    return (\n        3,\n        4,\n        5,\n    )\nfunc9(func10())\nfunc9((2, 3, 4))",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func10() -> tuple[int, ...]:\n    return (\n        3,\n        4,\n        5,\n    )\nfunc9(func10())\nfunc9((2, 3, 4))\nfunc9((2,))\n# Tests for tuple assignments with unpack expressions.",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func10_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func10_1() -> int:\n    a = (3, 4, 5)\n    c, *d = a\n    if c:\n        # This should generate an error because\n        # d should be an iterable type, not compatible\n        # with the declared return type.\n        return d\n    # This should generate an error because\n    # there are not enough elements to populate",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func11() -> float:\n    b = (\"hello\", 3, 6.7)\n    c, *d = b\n    if c:\n        # This should generate an error because\n        # d should be an iterable type, not compatible\n        # with the declared return type.\n        return d\n    return 3\n# Tests for assignment of tuple list that includes star",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func12():\n    data = [\"a\", \"b\"]\n    data1 = (*map(str.split, data),)\n    data2: Tuple[List[str], ...] = (*map(str.split, data),)\n    data3 = (*map(str.split, data),)\n    data4: Tuple[List[str], ...] = (*map(str.split, data),)\n# Tests for index-out-of-range error.\ndef func13(\n    a: Tuple[int, str],\n    b: Tuple[()],",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func13(\n    a: Tuple[int, str],\n    b: Tuple[()],\n    c: Tuple[int, ...],\n    d: Union[Tuple[int], Tuple[str, str], Tuple[int, ...]],\n):\n    v1 = a[0]\n    reveal_type(v1, expected_text=\"int\")\n    v2 = a[1]\n    reveal_type(v2, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples1",
        "description": "packages.pyright-internal.src.tests.samples.tuples1",
        "peekOfCode": "def func14():\n    list1 = [1, 2, 3]\n    v1 = tuple(list1)\n    reveal_type(v1, expected_text=\"tuple[int, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples10",
        "description": "packages.pyright-internal.src.tests.samples.tuples10",
        "peekOfCode": "def func1(v1: Tuple[Literal[1], ...], v2: Tuple[Literal[1]]):\n    a4 = set(v1)\n    reveal_type(a4, expected_text=\"set[Literal[1]]\")\n    a5 = set(v2)\n    reveal_type(a5, expected_text=\"set[Literal[1]]\")\na6 = (1, \"hi\")\nreveal_type(a6, expected_text=\"tuple[Literal[1], Literal['hi']]\")\nv4 = set(a6)\nreveal_type(v4, expected_text=\"set[Literal[1, 'hi']]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples10",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples10",
        "description": "packages.pyright-internal.src.tests.samples.tuples10",
        "peekOfCode": "a1 = (1, 2)\nreveal_type(a1, expected_text=\"tuple[Literal[1], Literal[2]]\")\na2 = list((1, 2))\nreveal_type(a2, expected_text=\"list[Literal[1, 2]]\")\na3: List[Literal[1]] = list((1,))\nreveal_type(a3, expected_text=\"list[Literal[1]]\")\ndef func1(v1: Tuple[Literal[1], ...], v2: Tuple[Literal[1]]):\n    a4 = set(v1)\n    reveal_type(a4, expected_text=\"set[Literal[1]]\")\n    a5 = set(v2)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples10",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples10",
        "description": "packages.pyright-internal.src.tests.samples.tuples10",
        "peekOfCode": "a2 = list((1, 2))\nreveal_type(a2, expected_text=\"list[Literal[1, 2]]\")\na3: List[Literal[1]] = list((1,))\nreveal_type(a3, expected_text=\"list[Literal[1]]\")\ndef func1(v1: Tuple[Literal[1], ...], v2: Tuple[Literal[1]]):\n    a4 = set(v1)\n    reveal_type(a4, expected_text=\"set[Literal[1]]\")\n    a5 = set(v2)\n    reveal_type(a5, expected_text=\"set[Literal[1]]\")\na6 = (1, \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples10",
        "documentation": {}
    },
    {
        "label": "a6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples10",
        "description": "packages.pyright-internal.src.tests.samples.tuples10",
        "peekOfCode": "a6 = (1, \"hi\")\nreveal_type(a6, expected_text=\"tuple[Literal[1], Literal['hi']]\")\nv4 = set(a6)\nreveal_type(v4, expected_text=\"set[Literal[1, 'hi']]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples10",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples10",
        "description": "packages.pyright-internal.src.tests.samples.tuples10",
        "peekOfCode": "v4 = set(a6)\nreveal_type(v4, expected_text=\"set[Literal[1, 'hi']]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples11",
        "description": "packages.pyright-internal.src.tests.samples.tuples11",
        "peekOfCode": "def func1(t1: Tuple[int, ...], t2: Tuple[int, ...]):\n    return t1 >= t2\ndef func2(t1: Tuple[int, ...], t2: Tuple[str, int]):\n    return t1 < t2\ndef func3(t1: Tuple[int, int], t2: Tuple[int, ...]):\n    return t1 > t2\ndef func4(t1: Tuple[int, ...], t2: Tuple[str, ...]):\n    # This should generate an error\n    return t1 <= t2",
        "detail": "packages.pyright-internal.src.tests.samples.tuples11",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples11",
        "description": "packages.pyright-internal.src.tests.samples.tuples11",
        "peekOfCode": "def func2(t1: Tuple[int, ...], t2: Tuple[str, int]):\n    return t1 < t2\ndef func3(t1: Tuple[int, int], t2: Tuple[int, ...]):\n    return t1 > t2\ndef func4(t1: Tuple[int, ...], t2: Tuple[str, ...]):\n    # This should generate an error\n    return t1 <= t2",
        "detail": "packages.pyright-internal.src.tests.samples.tuples11",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples11",
        "description": "packages.pyright-internal.src.tests.samples.tuples11",
        "peekOfCode": "def func3(t1: Tuple[int, int], t2: Tuple[int, ...]):\n    return t1 > t2\ndef func4(t1: Tuple[int, ...], t2: Tuple[str, ...]):\n    # This should generate an error\n    return t1 <= t2",
        "detail": "packages.pyright-internal.src.tests.samples.tuples11",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples11",
        "description": "packages.pyright-internal.src.tests.samples.tuples11",
        "peekOfCode": "def func4(t1: Tuple[int, ...], t2: Tuple[str, ...]):\n    # This should generate an error\n    return t1 <= t2",
        "detail": "packages.pyright-internal.src.tests.samples.tuples11",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples12",
        "description": "packages.pyright-internal.src.tests.samples.tuples12",
        "peekOfCode": "def func1(a: int, *args: int):\n    v1 = (a, *args)\n    reveal_type(v1, expected_text=\"tuple[int, *tuple[int, ...]]\")\ndef func2(a: int, *args: str):\n    v1 = (a, *args)\n    reveal_type(v1, expected_text=\"tuple[int, *tuple[str, ...]]\")\ndef func3(a: int, b: str, *args: str):\n    v1 = (a, b, *(a, b, a), *args, a, *args, b, *(a, b, a))\n    reveal_type(\n        v1, expected_text=\"tuple[int, str, int, str, int, *tuple[str | int, ...]]\"",
        "detail": "packages.pyright-internal.src.tests.samples.tuples12",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples12",
        "description": "packages.pyright-internal.src.tests.samples.tuples12",
        "peekOfCode": "def func2(a: int, *args: str):\n    v1 = (a, *args)\n    reveal_type(v1, expected_text=\"tuple[int, *tuple[str, ...]]\")\ndef func3(a: int, b: str, *args: str):\n    v1 = (a, b, *(a, b, a), *args, a, *args, b, *(a, b, a))\n    reveal_type(\n        v1, expected_text=\"tuple[int, str, int, str, int, *tuple[str | int, ...]]\"\n    )\ndef func4(a: int, b: str, *args: str):\n    v1 = (b, *args, *(b, a))",
        "detail": "packages.pyright-internal.src.tests.samples.tuples12",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples12",
        "description": "packages.pyright-internal.src.tests.samples.tuples12",
        "peekOfCode": "def func3(a: int, b: str, *args: str):\n    v1 = (a, b, *(a, b, a), *args, a, *args, b, *(a, b, a))\n    reveal_type(\n        v1, expected_text=\"tuple[int, str, int, str, int, *tuple[str | int, ...]]\"\n    )\ndef func4(a: int, b: str, *args: str):\n    v1 = (b, *args, *(b, a))\n    reveal_type(v1, expected_text=\"tuple[str, *tuple[str, ...], str, int]\")\ndef func5():\n    a = 3.4",
        "detail": "packages.pyright-internal.src.tests.samples.tuples12",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples12",
        "description": "packages.pyright-internal.src.tests.samples.tuples12",
        "peekOfCode": "def func4(a: int, b: str, *args: str):\n    v1 = (b, *args, *(b, a))\n    reveal_type(v1, expected_text=\"tuple[str, *tuple[str, ...], str, int]\")\ndef func5():\n    a = 3.4\n    b = [1, 2, 3]\n    v1 = (a, *b)\n    reveal_type(v1, expected_text=\"tuple[float, *tuple[int, ...]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples12",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples12",
        "description": "packages.pyright-internal.src.tests.samples.tuples12",
        "peekOfCode": "def func5():\n    a = 3.4\n    b = [1, 2, 3]\n    v1 = (a, *b)\n    reveal_type(v1, expected_text=\"tuple[float, *tuple[int, ...]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples12",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples13",
        "description": "packages.pyright-internal.src.tests.samples.tuples13",
        "peekOfCode": "def func1(val1: Tuple[int, str, None], val2: Tuple[int, ...]):\n    x1 = val1[:2]\n    reveal_type(x1, expected_text=\"tuple[int, str]\")\n    x2 = val1[-3:2]\n    reveal_type(x2, expected_text=\"tuple[int, str]\")\n    x3 = val1[1:]\n    reveal_type(x3, expected_text=\"tuple[str, None]\")\n    x4 = val1[1:-1]\n    reveal_type(x4, expected_text=\"tuple[str]\")\n    x5 = val1[:-2]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples13",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples15",
        "description": "packages.pyright-internal.src.tests.samples.tuples15",
        "peekOfCode": "def func1(a: Tuple[int, int, int], b: Tuple[str, str]):\n    reveal_type(a + b, expected_text=\"tuple[int, int, int, str, str]\")\ndef func2(a: Tuple[int, int, int], b: Tuple[str, ...]):\n    reveal_type(a + b, expected_text=\"tuple[int | str, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples15",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples15",
        "description": "packages.pyright-internal.src.tests.samples.tuples15",
        "peekOfCode": "def func2(a: Tuple[int, int, int], b: Tuple[str, ...]):\n    reveal_type(a + b, expected_text=\"tuple[int | str, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples15",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples15",
        "description": "packages.pyright-internal.src.tests.samples.tuples15",
        "peekOfCode": "v1 = () + ()\nreveal_type(v1, expected_text=\"tuple[()]\")\ndef func1(a: Tuple[int, int, int], b: Tuple[str, str]):\n    reveal_type(a + b, expected_text=\"tuple[int, int, int, str, str]\")\ndef func2(a: Tuple[int, int, int], b: Tuple[str, ...]):\n    reveal_type(a + b, expected_text=\"tuple[int | str, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples15",
        "documentation": {}
    },
    {
        "label": "TupleUnion1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples16",
        "description": "packages.pyright-internal.src.tests.samples.tuples16",
        "peekOfCode": "TupleUnion1 = Union[Tuple[int, str], Tuple[int, str, Dict[str, Union[str, int]]]]\nTupleUnion2 = Union[Tuple[int, str, Dict[str, Union[str, int]]], Tuple[int, str]]\nv1: TupleUnion1 = 1, \"two\", {\"hey\": \"three\"}\nv2: TupleUnion2 = 1, \"two\", {\"hey\": \"three\"}\nv3: TupleUnion1 = 1, \"two\"\nv4: TupleUnion2 = 1, \"two\"",
        "detail": "packages.pyright-internal.src.tests.samples.tuples16",
        "documentation": {}
    },
    {
        "label": "TupleUnion2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples16",
        "description": "packages.pyright-internal.src.tests.samples.tuples16",
        "peekOfCode": "TupleUnion2 = Union[Tuple[int, str, Dict[str, Union[str, int]]], Tuple[int, str]]\nv1: TupleUnion1 = 1, \"two\", {\"hey\": \"three\"}\nv2: TupleUnion2 = 1, \"two\", {\"hey\": \"three\"}\nv3: TupleUnion1 = 1, \"two\"\nv4: TupleUnion2 = 1, \"two\"",
        "detail": "packages.pyright-internal.src.tests.samples.tuples16",
        "documentation": {}
    },
    {
        "label": "all_ints1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples2",
        "description": "packages.pyright-internal.src.tests.samples.tuples2",
        "peekOfCode": "all_ints1 = all_ints2\nall_ints2 = all_ints3\nall_ints3 = all_ints2\n# This should generate an error.\nbad_ellipsis1: Tuple[...]\n# This should generate an error\nbad_ellipsis2: Tuple[int, int, ...]\n# This should generate an error\nbad_ellipsis3: Tuple[int, ..., int]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples2",
        "documentation": {}
    },
    {
        "label": "all_ints2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples2",
        "description": "packages.pyright-internal.src.tests.samples.tuples2",
        "peekOfCode": "all_ints2 = all_ints3\nall_ints3 = all_ints2\n# This should generate an error.\nbad_ellipsis1: Tuple[...]\n# This should generate an error\nbad_ellipsis2: Tuple[int, int, ...]\n# This should generate an error\nbad_ellipsis3: Tuple[int, ..., int]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples2",
        "documentation": {}
    },
    {
        "label": "all_ints3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples2",
        "description": "packages.pyright-internal.src.tests.samples.tuples2",
        "peekOfCode": "all_ints3 = all_ints2\n# This should generate an error.\nbad_ellipsis1: Tuple[...]\n# This should generate an error\nbad_ellipsis2: Tuple[int, int, ...]\n# This should generate an error\nbad_ellipsis3: Tuple[int, ..., int]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples2",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples3",
        "description": "packages.pyright-internal.src.tests.samples.tuples3",
        "peekOfCode": "def bar(values: Tuple[str, ...]):\n    ...\n# This should generate an error\nbar((\"\", False))\n# This should generate an error\nbar((False, \"\"))",
        "detail": "packages.pyright-internal.src.tests.samples.tuples3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples4",
        "description": "packages.pyright-internal.src.tests.samples.tuples4",
        "peekOfCode": "def foo(x: Iterable[_T]) -> Iterable[_T]:\n    return x\ndef bar(x: Iterable[Union[int, str]]):\n    pass\nmy_tuple = (3, \"hello\")\n# The type of my_iterable should be Iterable[Union[int, str]].\nmy_iterable = foo(my_tuple)\nbar(my_iterable)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples4",
        "documentation": {}
    },
    {
        "label": "bar",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples4",
        "description": "packages.pyright-internal.src.tests.samples.tuples4",
        "peekOfCode": "def bar(x: Iterable[Union[int, str]]):\n    pass\nmy_tuple = (3, \"hello\")\n# The type of my_iterable should be Iterable[Union[int, str]].\nmy_iterable = foo(my_tuple)\nbar(my_iterable)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples4",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples4",
        "description": "packages.pyright-internal.src.tests.samples.tuples4",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef foo(x: Iterable[_T]) -> Iterable[_T]:\n    return x\ndef bar(x: Iterable[Union[int, str]]):\n    pass\nmy_tuple = (3, \"hello\")\n# The type of my_iterable should be Iterable[Union[int, str]].\nmy_iterable = foo(my_tuple)\nbar(my_iterable)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples4",
        "documentation": {}
    },
    {
        "label": "my_tuple",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples4",
        "description": "packages.pyright-internal.src.tests.samples.tuples4",
        "peekOfCode": "my_tuple = (3, \"hello\")\n# The type of my_iterable should be Iterable[Union[int, str]].\nmy_iterable = foo(my_tuple)\nbar(my_iterable)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples4",
        "documentation": {}
    },
    {
        "label": "my_iterable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples4",
        "description": "packages.pyright-internal.src.tests.samples.tuples4",
        "peekOfCode": "my_iterable = foo(my_tuple)\nbar(my_iterable)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples6",
        "description": "packages.pyright-internal.src.tests.samples.tuples6",
        "peekOfCode": "def func1(p1: Tuple[str, ...]):\n    global a, b, c, d\n    c, d = p1\n    # This should generate an error because\n    # p1 is an incompatible type.\n    a, b = p1\n    c, d, *f = p1",
        "detail": "packages.pyright-internal.src.tests.samples.tuples6",
        "documentation": {}
    },
    {
        "label": "*e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples6",
        "description": "packages.pyright-internal.src.tests.samples.tuples6",
        "peekOfCode": "*e = 3, 4, 5, 6\n(*e,) = 3, 4, 5, 6\na, b, *e, c, d = 3, 4, \"a\", \"b\"\na, b, *f, c, d = 3, 4, 5, \"a\", \"b\", \"c\"\n*f, a, b, c, d = 3, 4, \"a\", \"b\"\na, *f, b, c, d = 3, 4, \"a\", \"b\"\na, b, *f, c, d = 3, 4, \"a\", \"b\"\na, b, c, *f, d = 3, 4, \"a\", \"b\"\na, b, c, d, *f = 3, 4, \"a\", \"b\"\na, b, c, *f = 3, 2, \"\"",
        "detail": "packages.pyright-internal.src.tests.samples.tuples6",
        "documentation": {}
    },
    {
        "label": "(*e,)",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples6",
        "description": "packages.pyright-internal.src.tests.samples.tuples6",
        "peekOfCode": "(*e,) = 3, 4, 5, 6\na, b, *e, c, d = 3, 4, \"a\", \"b\"\na, b, *f, c, d = 3, 4, 5, \"a\", \"b\", \"c\"\n*f, a, b, c, d = 3, 4, \"a\", \"b\"\na, *f, b, c, d = 3, 4, \"a\", \"b\"\na, b, *f, c, d = 3, 4, \"a\", \"b\"\na, b, c, *f, d = 3, 4, \"a\", \"b\"\na, b, c, d, *f = 3, 4, \"a\", \"b\"\na, b, c, *f = 3, 2, \"\"\n# This should generate an error because there are",
        "detail": "packages.pyright-internal.src.tests.samples.tuples6",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "class ClassA(tuple[int, str, int, _T]):\n    def __new__(cls) -> Self:\n        ...\nobjA = ClassA[complex]()\n(a, b, c, d) = objA\naa1: int = a\nbb1: str = b\ncc1: int = c\ndd1: complex = d\nreveal_type(objA[0], expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "class ClassB(Tuple[_T, ...]):\n    def __new__(cls) -> Self:\n        ...\nobjB = ClassB[complex]()\n(x, y, z) = objB\nreveal_type(x, expected_text=\"complex\")\nreveal_type(y, expected_text=\"complex\")\nreveal_type(z, expected_text=\"complex\")\nxx2: complex = objB[0]\nyy2: complex = objB[1]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "class X(Generic[_T]):\n    def __init__(self):\n        self._x: Tuple[_T, ...] = ()",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "def func1(lst: Optional[List[str]]) -> None:\n    for item in lst or ():\n        reveal_type(item, expected_text=\"str\")\nclass X(Generic[_T]):\n    def __init__(self):\n        self._x: Tuple[_T, ...] = ()",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass ClassA(tuple[int, str, int, _T]):\n    def __new__(cls) -> Self:\n        ...\nobjA = ClassA[complex]()\n(a, b, c, d) = objA\naa1: int = a\nbb1: str = b\ncc1: int = c\ndd1: complex = d",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "objA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "objA = ClassA[complex]()\n(a, b, c, d) = objA\naa1: int = a\nbb1: str = b\ncc1: int = c\ndd1: complex = d\nreveal_type(objA[0], expected_text=\"int\")\nreveal_type(objA[1], expected_text=\"str\")\nreveal_type(objA[2], expected_text=\"int\")\nreveal_type(objA[3], expected_text=\"complex\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "e = objA[\n    0,\n]\nfor aaa in objA:\n    print(aaa)\nclass ClassB(Tuple[_T, ...]):\n    def __new__(cls) -> Self:\n        ...\nobjB = ClassB[complex]()\n(x, y, z) = objB",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "objB",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples7",
        "description": "packages.pyright-internal.src.tests.samples.tuples7",
        "peekOfCode": "objB = ClassB[complex]()\n(x, y, z) = objB\nreveal_type(x, expected_text=\"complex\")\nreveal_type(y, expected_text=\"complex\")\nreveal_type(z, expected_text=\"complex\")\nxx2: complex = objB[0]\nyy2: complex = objB[1]\nzz2: complex = objB[2]\ndef func1(lst: Optional[List[str]]) -> None:\n    for item in lst or ():",
        "detail": "packages.pyright-internal.src.tests.samples.tuples7",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "class ClassA(tuple[int, str, int, _T]):\n    def __new__(cls) -> Self:\n        ...\nobjA = ClassA[complex]()\n(a, b, c, d) = objA\naa1: int = a\nbb1: str = b\ncc1: int = c\ndd1: complex = d\naa2: int = objA[0]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "class ClassB(tuple[_T, ...]):\n    def __new__(cls) -> Self:\n        ...\nobjB = ClassB[complex]()\n(x, y, z) = objB\nxx1: complex = x\nyy1: complex = y\nzz1: complex = z\nxx2: complex = objB[0]\nyy2: complex = objB[1]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "baz",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "def baz(v: Iterable[T]) -> Tuple[T]:\n    ...\ndef qux() -> None:\n    foo = [\"foo\"]\n    quux = baz(foo)\n    for s in quux:\n        reveal_type(s, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "qux",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "def qux() -> None:\n    foo = [\"foo\"]\n    quux = baz(foo)\n    for s in quux:\n        reveal_type(s, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass ClassA(tuple[int, str, int, _T]):\n    def __new__(cls) -> Self:\n        ...\nobjA = ClassA[complex]()\n(a, b, c, d) = objA\naa1: int = a\nbb1: str = b\ncc1: int = c\ndd1: complex = d",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "objA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "objA = ClassA[complex]()\n(a, b, c, d) = objA\naa1: int = a\nbb1: str = b\ncc1: int = c\ndd1: complex = d\naa2: int = objA[0]\nbb2: str = objA[1]\ncc2: int = objA[2]\ndd2: complex = objA[3]",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "objB",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "objB = ClassB[complex]()\n(x, y, z) = objB\nxx1: complex = x\nyy1: complex = y\nzz1: complex = z\nxx2: complex = objB[0]\nyy2: complex = objB[1]\nzz2: complex = objB[2]\n# These should generate errors because\n# these are not the correct types.",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "TupleTypeAlias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "TupleTypeAlias1 = tuple[str, int, float]\nt1_1: TupleTypeAlias1 = (\"hi\", 2, 3.4)\n# This should generate an error.\nt1_2: TupleTypeAlias1 = (\"hi\", 2)\n# This should generate an error.\nt1_3: TupleTypeAlias1 = (\"hi\", 2.3, 4)\nTupleTypeAlias2 = tuple[str, ...]\nt2_1: TupleTypeAlias2 = (\"hi\", \"\", \"\")\nt2_2: TupleTypeAlias2 = ()\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "TupleTypeAlias2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "TupleTypeAlias2 = tuple[str, ...]\nt2_1: TupleTypeAlias2 = (\"hi\", \"\", \"\")\nt2_2: TupleTypeAlias2 = ()\n# This should generate an error.\nt2_3: TupleTypeAlias2 = (\"hi\", 2)\nTupleTypeAlias3 = tuple[()]\nt3_1: TupleTypeAlias2 = ()\n# This should generate an error.\nt3_2: TupleTypeAlias2 = (3, 4)\nT = TypeVar(\"T\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "TupleTypeAlias3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "TupleTypeAlias3 = tuple[()]\nt3_1: TupleTypeAlias2 = ()\n# This should generate an error.\nt3_2: TupleTypeAlias2 = (3, 4)\nT = TypeVar(\"T\")\ndef baz(v: Iterable[T]) -> Tuple[T]:\n    ...\ndef qux() -> None:\n    foo = [\"foo\"]\n    quux = baz(foo)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples8",
        "description": "packages.pyright-internal.src.tests.samples.tuples8",
        "peekOfCode": "T = TypeVar(\"T\")\ndef baz(v: Iterable[T]) -> Tuple[T]:\n    ...\ndef qux() -> None:\n    foo = [\"foo\"]\n    quux = baz(foo)\n    for s in quux:\n        reveal_type(s, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.tuples8",
        "documentation": {}
    },
    {
        "label": "str_list",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tuples9",
        "description": "packages.pyright-internal.src.tests.samples.tuples9",
        "peekOfCode": "str_list = [\"1\", \"2\", \"3\"]\nleft, right = tuple(str_list)\ncheck1: Tuple[str, str] = (left, right)\n# This should generate an error\ncheck2: Tuple[str, int] = (left, right)",
        "detail": "packages.pyright-internal.src.tests.samples.tuples9",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func1(v1: Tuple[int, Unpack[Tuple[bool, bool]], str]):\n    reveal_type(v1, expected_text=\"Tuple[int, bool, bool, str]\")\n# This should generate an error because multiple unpacks.\ndef func2(v2: Tuple[int, Unpack[Tuple[bool, bool]], str, Unpack[Tuple[bool, bool]]]):\n    pass\ndef func3(v3: Tuple[int, Unpack[Tuple[bool, ...]], str]):\n    reveal_type(v3, expected_text=\"Tuple[int, *tuple[bool, ...], str]\")\n# This should generate an error because there are multiple unbounded tuples.\ndef func4(v4: Tuple[Unpack[Tuple[bool, ...]], ...]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func2(v2: Tuple[int, Unpack[Tuple[bool, bool]], str, Unpack[Tuple[bool, bool]]]):\n    pass\ndef func3(v3: Tuple[int, Unpack[Tuple[bool, ...]], str]):\n    reveal_type(v3, expected_text=\"Tuple[int, *tuple[bool, ...], str]\")\n# This should generate an error because there are multiple unbounded tuples.\ndef func4(v4: Tuple[Unpack[Tuple[bool, ...]], ...]):\n    pass\n# This should generate an error because there are multiple unbounded tuples.\ndef func5(v5: Tuple[Unpack[Tuple[Unpack[Tuple[bool, ...]]]], ...]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func3(v3: Tuple[int, Unpack[Tuple[bool, ...]], str]):\n    reveal_type(v3, expected_text=\"Tuple[int, *tuple[bool, ...], str]\")\n# This should generate an error because there are multiple unbounded tuples.\ndef func4(v4: Tuple[Unpack[Tuple[bool, ...]], ...]):\n    pass\n# This should generate an error because there are multiple unbounded tuples.\ndef func5(v5: Tuple[Unpack[Tuple[Unpack[Tuple[bool, ...]]]], ...]):\n    pass\ndef func6(v6: Tuple[Unpack[Tuple[bool]], ...]):\n    reveal_type(v6, expected_text=\"Tuple[bool, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func4(v4: Tuple[Unpack[Tuple[bool, ...]], ...]):\n    pass\n# This should generate an error because there are multiple unbounded tuples.\ndef func5(v5: Tuple[Unpack[Tuple[Unpack[Tuple[bool, ...]]]], ...]):\n    pass\ndef func6(v6: Tuple[Unpack[Tuple[bool]], ...]):\n    reveal_type(v6, expected_text=\"Tuple[bool, ...]\")\ndef func7(v7: Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, float]]]]]):\n    reveal_type(v7, expected_text=\"Tuple[bool, int, float]\")\ndef func8(v8: Union[Unpack[Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, ...]]]]]]]):",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func5(v5: Tuple[Unpack[Tuple[Unpack[Tuple[bool, ...]]]], ...]):\n    pass\ndef func6(v6: Tuple[Unpack[Tuple[bool]], ...]):\n    reveal_type(v6, expected_text=\"Tuple[bool, ...]\")\ndef func7(v7: Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, float]]]]]):\n    reveal_type(v7, expected_text=\"Tuple[bool, int, float]\")\ndef func8(v8: Union[Unpack[Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, ...]]]]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: Unpack[tuple[int, int]]):",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func6(v6: Tuple[Unpack[Tuple[bool]], ...]):\n    reveal_type(v6, expected_text=\"Tuple[bool, ...]\")\ndef func7(v7: Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, float]]]]]):\n    reveal_type(v7, expected_text=\"Tuple[bool, int, float]\")\ndef func8(v8: Union[Unpack[Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, ...]]]]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: Unpack[tuple[int, int]]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func7(v7: Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, float]]]]]):\n    reveal_type(v7, expected_text=\"Tuple[bool, int, float]\")\ndef func8(v8: Union[Unpack[Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, ...]]]]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: Unpack[tuple[int, int]]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.\ndef func10(**v10: Unpack[tuple[int, int]]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func8(v8: Union[Unpack[Tuple[Unpack[Tuple[bool, Unpack[Tuple[int, ...]]]]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: Unpack[tuple[int, int]]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.\ndef func10(**v10: Unpack[tuple[int, int]]):\n    pass\ndef func11(*v11: Unpack[tuple[int, ...]]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func9(v9: Unpack[tuple[int, int]]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.\ndef func10(**v10: Unpack[tuple[int, int]]):\n    pass\ndef func11(*v11: Unpack[tuple[int, ...]]):\n    pass\ndef func12(*v11: Unpack[tuple[int, int]]):\n    pass\ndef func13(t: type):",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func10(**v10: Unpack[tuple[int, int]]):\n    pass\ndef func11(*v11: Unpack[tuple[int, ...]]):\n    pass\ndef func12(*v11: Unpack[tuple[int, int]]):\n    pass\ndef func13(t: type):\n    if t is Unpack:\n        ...\ndef func14(",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func11(*v11: Unpack[tuple[int, ...]]):\n    pass\ndef func12(*v11: Unpack[tuple[int, int]]):\n    pass\ndef func13(t: type):\n    if t is Unpack:\n        ...\ndef func14(\n    *args: Unpack[tuple[int]],\n    other: str,",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func12(*v11: Unpack[tuple[int, int]]):\n    pass\ndef func13(t: type):\n    if t is Unpack:\n        ...\ndef func14(\n    *args: Unpack[tuple[int]],\n    other: str,\n) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func13(t: type):\n    if t is Unpack:\n        ...\ndef func14(\n    *args: Unpack[tuple[int]],\n    other: str,\n) -> None:\n    ...\nfunc14(1, other=\"hi\")\n# This should generate an error because the second argument",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "peekOfCode": "def func14(\n    *args: Unpack[tuple[int]],\n    other: str,\n) -> None:\n    ...\nfunc14(1, other=\"hi\")\n# This should generate an error because the second argument\n# corresponds to a keyword-only parameter.\nfunc14(1, \"hi\")",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func1(v1: tuple[int, *tuple[bool, bool], str]):\n    reveal_type(v1, expected_text=\"tuple[int, bool, bool, str]\")\n# This should generate an error because multiple unpacks.\ndef func2(v2: tuple[int, *tuple[bool, bool], str, *tuple[bool, bool]]):\n    pass\ndef func3(v3: tuple[int, *tuple[bool, ...], str]):\n    reveal_type(v3, expected_text=\"tuple[int, *tuple[bool, ...], str]\")\n# This should generate an error because there are multiple unbounded tuples.\ndef func4(v4: tuple[*tuple[bool, ...], ...]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func2(v2: tuple[int, *tuple[bool, bool], str, *tuple[bool, bool]]):\n    pass\ndef func3(v3: tuple[int, *tuple[bool, ...], str]):\n    reveal_type(v3, expected_text=\"tuple[int, *tuple[bool, ...], str]\")\n# This should generate an error because there are multiple unbounded tuples.\ndef func4(v4: tuple[*tuple[bool, ...], ...]):\n    pass\n# This should generate an error because there are multiple unbounded tuples.\ndef func5(v5: tuple[*tuple[*tuple[bool, ...]], ...]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func3(v3: tuple[int, *tuple[bool, ...], str]):\n    reveal_type(v3, expected_text=\"tuple[int, *tuple[bool, ...], str]\")\n# This should generate an error because there are multiple unbounded tuples.\ndef func4(v4: tuple[*tuple[bool, ...], ...]):\n    pass\n# This should generate an error because there are multiple unbounded tuples.\ndef func5(v5: tuple[*tuple[*tuple[bool, ...]], ...]):\n    pass\ndef func6(v6: tuple[*tuple[bool], ...]):\n    reveal_type(v6, expected_text=\"tuple[bool, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func4(v4: tuple[*tuple[bool, ...], ...]):\n    pass\n# This should generate an error because there are multiple unbounded tuples.\ndef func5(v5: tuple[*tuple[*tuple[bool, ...]], ...]):\n    pass\ndef func6(v6: tuple[*tuple[bool], ...]):\n    reveal_type(v6, expected_text=\"tuple[bool, ...]\")\ndef func7(v7: tuple[*tuple[bool, *tuple[int, float]]]):\n    reveal_type(v7, expected_text=\"tuple[bool, int, float]\")\ndef func8(v8: Union[*tuple[*tuple[bool, *tuple[int, ...]]]]):",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func5(v5: tuple[*tuple[*tuple[bool, ...]], ...]):\n    pass\ndef func6(v6: tuple[*tuple[bool], ...]):\n    reveal_type(v6, expected_text=\"tuple[bool, ...]\")\ndef func7(v7: tuple[*tuple[bool, *tuple[int, float]]]):\n    reveal_type(v7, expected_text=\"tuple[bool, int, float]\")\ndef func8(v8: Union[*tuple[*tuple[bool, *tuple[int, ...]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: *tuple[int, int]):",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func6(v6: tuple[*tuple[bool], ...]):\n    reveal_type(v6, expected_text=\"tuple[bool, ...]\")\ndef func7(v7: tuple[*tuple[bool, *tuple[int, float]]]):\n    reveal_type(v7, expected_text=\"tuple[bool, int, float]\")\ndef func8(v8: Union[*tuple[*tuple[bool, *tuple[int, ...]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: *tuple[int, int]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func7(v7: tuple[*tuple[bool, *tuple[int, float]]]):\n    reveal_type(v7, expected_text=\"tuple[bool, int, float]\")\ndef func8(v8: Union[*tuple[*tuple[bool, *tuple[int, ...]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: *tuple[int, int]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.\ndef func10(**v10: *tuple[int, int]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func8(v8: Union[*tuple[*tuple[bool, *tuple[int, ...]]]]):\n    reveal_type(v8, expected_text=\"bool | int\")\n# This should generate an error because unpack isn't allowed for simple parameters.\ndef func9(v9: *tuple[int, int]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.\ndef func10(**v10: *tuple[int, int]):\n    pass\ndef func11(*v11: *tuple[int, ...]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func9(v9: *tuple[int, int]):\n    pass\n# This should generate an error because unpack isn't allowed for **kwargs parameters.\ndef func10(**v10: *tuple[int, int]):\n    pass\ndef func11(*v11: *tuple[int, ...]):\n    pass\ndef func12(*v11: *tuple[int, int]):\n    pass\ndef func13(v12: \"tuple[str, *tuple[int, ...], str]\"):",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func10(**v10: *tuple[int, int]):\n    pass\ndef func11(*v11: *tuple[int, ...]):\n    pass\ndef func12(*v11: *tuple[int, int]):\n    pass\ndef func13(v12: \"tuple[str, *tuple[int, ...], str]\"):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func11(*v11: *tuple[int, ...]):\n    pass\ndef func12(*v11: *tuple[int, int]):\n    pass\ndef func13(v12: \"tuple[str, *tuple[int, ...], str]\"):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func12(*v11: *tuple[int, int]):\n    pass\ndef func13(v12: \"tuple[str, *tuple[int, ...], str]\"):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "func13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "peekOfCode": "def func13(v12: \"tuple[str, *tuple[int, ...], str]\"):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack2",
        "documentation": {}
    },
    {
        "label": "SupportsSum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "peekOfCode": "class SupportsSum(Protocol):\n    def __add__(self, __x: Any) -> Any:\n        ...\nT = TypeVar(\"T\", bound=SupportsSum)\ndef wrapped_summation(start: T) -> Callable[[Unpack[tuple[T, ...]]], T]:\n    def inner_func(*values: T):\n        return sum(values, start=start)\n    return inner_func\nint_sum = wrapped_summation(3)\nreveal_type(int_sum, expected_text=\"(*tuple[int, ...]) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "documentation": {}
    },
    {
        "label": "wrapped_summation",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "peekOfCode": "def wrapped_summation(start: T) -> Callable[[Unpack[tuple[T, ...]]], T]:\n    def inner_func(*values: T):\n        return sum(values, start=start)\n    return inner_func\nint_sum = wrapped_summation(3)\nreveal_type(int_sum, expected_text=\"(*tuple[int, ...]) -> int\")\n# This should generate an error.\nint_sum(3.14)",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "peekOfCode": "T = TypeVar(\"T\", bound=SupportsSum)\ndef wrapped_summation(start: T) -> Callable[[Unpack[tuple[T, ...]]], T]:\n    def inner_func(*values: T):\n        return sum(values, start=start)\n    return inner_func\nint_sum = wrapped_summation(3)\nreveal_type(int_sum, expected_text=\"(*tuple[int, ...]) -> int\")\n# This should generate an error.\nint_sum(3.14)",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "documentation": {}
    },
    {
        "label": "int_sum",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "description": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "peekOfCode": "int_sum = wrapped_summation(3)\nreveal_type(int_sum, expected_text=\"(*tuple[int, ...]) -> int\")\n# This should generate an error.\nint_sum(3.14)",
        "detail": "packages.pyright-internal.src.tests.samples.tupleUnpack3",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "peekOfCode": "class A:\n    Value1 = Literal[1]\n    Value2 = 1\nreveal_type(A.Value1, expected_text=\"Type[Literal[1]]\")\nreveal_type(A.Value2, expected_text=\"int\")\nAlias1 = Literal[0, 1]\nfoo2: dict[Alias1, Any] = {}\nif foo2:\n    pass\nbaz2: list[Alias1] = []",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "documentation": {}
    },
    {
        "label": "TupleAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "peekOfCode": "TupleAlias = Tuple[\"int\", int]\nfoo1: Tuple[int, int]\nbar1: TupleAlias\nfoo1 = (1, 2)\nbar1 = (1, 2)\nAnyAlias = Any\nbaz1: AnyAlias = 3\nclass A:\n    Value1 = Literal[1]\n    Value2 = 1",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "peekOfCode": "foo1 = (1, 2)\nbar1 = (1, 2)\nAnyAlias = Any\nbaz1: AnyAlias = 3\nclass A:\n    Value1 = Literal[1]\n    Value2 = 1\nreveal_type(A.Value1, expected_text=\"Type[Literal[1]]\")\nreveal_type(A.Value2, expected_text=\"int\")\nAlias1 = Literal[0, 1]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "documentation": {}
    },
    {
        "label": "bar1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "peekOfCode": "bar1 = (1, 2)\nAnyAlias = Any\nbaz1: AnyAlias = 3\nclass A:\n    Value1 = Literal[1]\n    Value2 = 1\nreveal_type(A.Value1, expected_text=\"Type[Literal[1]]\")\nreveal_type(A.Value2, expected_text=\"int\")\nAlias1 = Literal[0, 1]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "documentation": {}
    },
    {
        "label": "AnyAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "peekOfCode": "AnyAlias = Any\nbaz1: AnyAlias = 3\nclass A:\n    Value1 = Literal[1]\n    Value2 = 1\nreveal_type(A.Value1, expected_text=\"Type[Literal[1]]\")\nreveal_type(A.Value2, expected_text=\"int\")\nAlias1 = Literal[0, 1]\nfoo2: dict[Alias1, Any] = {}\nif foo2:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "documentation": {}
    },
    {
        "label": "Alias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "peekOfCode": "Alias1 = Literal[0, 1]\nfoo2: dict[Alias1, Any] = {}\nif foo2:\n    pass\nbaz2: list[Alias1] = []",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "peekOfCode": "class A(Generic[_T]):\n    ...\n# This should generate an error if reportMissingTypeArgument is enabled.\nB: TypeAlias = A\nv1: B = A()\n# This should generate an error because B is already specialized.\nv2: B[int] = A()\n# This should generate an error if reportMissingTypeArgument is enabled.\nv3: A = A()\nC = A[str]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "peekOfCode": "class D(Generic[_T]):\n    def __getitem__(self, key: Any) -> int:\n        ...\nD_Alias = D[_T]\nd: D_Alias[Any] = D()\nitem = d[0]\nx: int = D_Alias[Any]()[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass A(Generic[_T]):\n    ...\n# This should generate an error if reportMissingTypeArgument is enabled.\nB: TypeAlias = A\nv1: B = A()\n# This should generate an error because B is already specialized.\nv2: B[int] = A()\n# This should generate an error if reportMissingTypeArgument is enabled.\nv3: A = A()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "peekOfCode": "C = A[str]\n# This should generate an error because C is already specialized.\nv4: C[int]\nclass D(Generic[_T]):\n    def __getitem__(self, key: Any) -> int:\n        ...\nD_Alias = D[_T]\nd: D_Alias[Any] = D()\nitem = d[0]\nx: int = D_Alias[Any]()[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "documentation": {}
    },
    {
        "label": "D_Alias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "peekOfCode": "D_Alias = D[_T]\nd: D_Alias[Any] = D()\nitem = d[0]\nx: int = D_Alias[Any]()[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "peekOfCode": "item = d[0]\nx: int = D_Alias[Any]()[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias10",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "class ClassA(Generic[_T]):\n    def __init__(self, x: _T):\n        pass\nA = ClassA\nreveal_type(A(3), expected_text=\"ClassA[int]\")\nTA1 = collections.OrderedDict\nTA2 = OrderedDict\nTA1[int, int]\nTA2[int, int]\nTA3 = TA1",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass ClassA(Generic[_T]):\n    def __init__(self, x: _T):\n        pass\nA = ClassA\nreveal_type(A(3), expected_text=\"ClassA[int]\")\nTA1 = collections.OrderedDict\nTA2 = OrderedDict\nTA1[int, int]\nTA2[int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "A = ClassA\nreveal_type(A(3), expected_text=\"ClassA[int]\")\nTA1 = collections.OrderedDict\nTA2 = OrderedDict\nTA1[int, int]\nTA2[int, int]\nTA3 = TA1\nTA3[int, int]\nTA4 = Union[dict, OrderedDict]\n# This should generate two errors because the two types in TA4",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "TA1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "TA1 = collections.OrderedDict\nTA2 = OrderedDict\nTA1[int, int]\nTA2[int, int]\nTA3 = TA1\nTA3[int, int]\nTA4 = Union[dict, OrderedDict]\n# This should generate two errors because the two types in TA4\n# are already specialized.\nTA4[int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "TA2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "TA2 = OrderedDict\nTA1[int, int]\nTA2[int, int]\nTA3 = TA1\nTA3[int, int]\nTA4 = Union[dict, OrderedDict]\n# This should generate two errors because the two types in TA4\n# are already specialized.\nTA4[int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "TA3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "TA3 = TA1\nTA3[int, int]\nTA4 = Union[dict, OrderedDict]\n# This should generate two errors because the two types in TA4\n# are already specialized.\nTA4[int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "TA4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "peekOfCode": "TA4 = Union[dict, OrderedDict]\n# This should generate two errors because the two types in TA4\n# are already specialized.\nTA4[int, int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias11",
        "documentation": {}
    },
    {
        "label": "fn",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "peekOfCode": "def fn(x: Alias[V, V]) -> V:\n    return x\ndef fn2(x: List[Alias[V, V]]) -> List[V]:\n    return x\nreveal_type(Alias[int, int], expected_text=\"Type[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "documentation": {}
    },
    {
        "label": "fn2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "peekOfCode": "def fn2(x: List[Alias[V, V]]) -> List[V]:\n    return x\nreveal_type(Alias[int, int], expected_text=\"Type[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "peekOfCode": "V = TypeVar(\"V\")\nU = TypeVar(\"U\")\nAlias = Union[V, U]\ndef fn(x: Alias[V, V]) -> V:\n    return x\ndef fn2(x: List[Alias[V, V]]) -> List[V]:\n    return x\nreveal_type(Alias[int, int], expected_text=\"Type[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "peekOfCode": "U = TypeVar(\"U\")\nAlias = Union[V, U]\ndef fn(x: Alias[V, V]) -> V:\n    return x\ndef fn2(x: List[Alias[V, V]]) -> List[V]:\n    return x\nreveal_type(Alias[int, int], expected_text=\"Type[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "documentation": {}
    },
    {
        "label": "Alias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "peekOfCode": "Alias = Union[V, U]\ndef fn(x: Alias[V, V]) -> V:\n    return x\ndef fn2(x: List[Alias[V, V]]) -> List[V]:\n    return x\nreveal_type(Alias[int, int], expected_text=\"Type[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias12",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "class D:\n    ...\nclass E(Exception):\n    ...\nclass F:\n    ...\nDT = TypeVar(\"DT\", bound=D)\nError = CoroMaybeMethod[DT, [F, E], Any]\nreveal_type(Error, expected_text=\"((DT@Error, F, E) -> Coroutine[Any, Any, Any]) | ((F, E) -> Coroutine[Any, Any, Any])\")\nclass A:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "class E(Exception):\n    ...\nclass F:\n    ...\nDT = TypeVar(\"DT\", bound=D)\nError = CoroMaybeMethod[DT, [F, E], Any]\nreveal_type(Error, expected_text=\"((DT@Error, F, E) -> Coroutine[Any, Any, Any]) | ((F, E) -> Coroutine[Any, Any, Any])\")\nclass A:\n    ...\nclass B:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "class F:\n    ...\nDT = TypeVar(\"DT\", bound=D)\nError = CoroMaybeMethod[DT, [F, E], Any]\nreveal_type(Error, expected_text=\"((DT@Error, F, E) -> Coroutine[Any, Any, Any]) | ((F, E) -> Coroutine[Any, Any, Any])\")\nclass A:\n    ...\nclass B:\n    ...\nclass C:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "class A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\nBT = TypeVar('BT', bound=B)\nSomething = CoroMaybeMethod[A, [BT, C], Any]\nreveal_type(Something, expected_text=\"((A, BT@Something, C) -> Coroutine[Any, Any, Any]) | ((BT@Something, C) -> Coroutine[Any, Any, Any])\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "class B:\n    ...\nclass C:\n    ...\nBT = TypeVar('BT', bound=B)\nSomething = CoroMaybeMethod[A, [BT, C], Any]\nreveal_type(Something, expected_text=\"((A, BT@Something, C) -> Coroutine[Any, Any, Any]) | ((BT@Something, C) -> Coroutine[Any, Any, Any])\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "class C:\n    ...\nBT = TypeVar('BT', bound=B)\nSomething = CoroMaybeMethod[A, [BT, C], Any]\nreveal_type(Something, expected_text=\"((A, BT@Something, C) -> Coroutine[Any, Any, Any]) | ((BT@Something, C) -> Coroutine[Any, Any, Any])\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "T = TypeVar('T')\nU = TypeVar(\"U\")\nP = ParamSpec('P')\nMethod = Callable[Concatenate[T, P], U]\nMaybeMethod = Union[Method[T, P, U], Callable[P, U]]\nCoro = Coroutine[Any, Any, T]\nMaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "U",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "U = TypeVar(\"U\")\nP = ParamSpec('P')\nMethod = Callable[Concatenate[T, P], U]\nMaybeMethod = Union[Method[T, P, U], Callable[P, U]]\nCoro = Coroutine[Any, Any, T]\nMaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "P = ParamSpec('P')\nMethod = Callable[Concatenate[T, P], U]\nMaybeMethod = Union[Method[T, P, U], Callable[P, U]]\nCoro = Coroutine[Any, Any, T]\nMaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "Method",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "Method = Callable[Concatenate[T, P], U]\nMaybeMethod = Union[Method[T, P, U], Callable[P, U]]\nCoro = Coroutine[Any, Any, T]\nMaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "MaybeMethod",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "MaybeMethod = Union[Method[T, P, U], Callable[P, U]]\nCoro = Coroutine[Any, Any, T]\nMaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "Coro",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "Coro = Coroutine[Any, Any, T]\nMaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):\n    ...\nclass F:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "MaybeCoro",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "MaybeCoro = Union[T, Coro[T]]\nCoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):\n    ...\nclass F:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "CoroFunc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "CoroFunc = Callable[P, Coro[T]]\nCoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):\n    ...\nclass F:\n    ...\nDT = TypeVar(\"DT\", bound=D)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "CoroMethod",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "CoroMethod = Method[T, P, Coro[U]]\nCoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):\n    ...\nclass F:\n    ...\nDT = TypeVar(\"DT\", bound=D)\nError = CoroMaybeMethod[DT, [F, E], Any]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "CoroMaybeMethod",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "CoroMaybeMethod = Union[CoroMethod[T, P, U], CoroFunc[P, U]]\nclass D:\n    ...\nclass E(Exception):\n    ...\nclass F:\n    ...\nDT = TypeVar(\"DT\", bound=D)\nError = CoroMaybeMethod[DT, [F, E], Any]\nreveal_type(Error, expected_text=\"((DT@Error, F, E) -> Coroutine[Any, Any, Any]) | ((F, E) -> Coroutine[Any, Any, Any])\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "DT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "DT = TypeVar(\"DT\", bound=D)\nError = CoroMaybeMethod[DT, [F, E], Any]\nreveal_type(Error, expected_text=\"((DT@Error, F, E) -> Coroutine[Any, Any, Any]) | ((F, E) -> Coroutine[Any, Any, Any])\")\nclass A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\nBT = TypeVar('BT', bound=B)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "Error = CoroMaybeMethod[DT, [F, E], Any]\nreveal_type(Error, expected_text=\"((DT@Error, F, E) -> Coroutine[Any, Any, Any]) | ((F, E) -> Coroutine[Any, Any, Any])\")\nclass A:\n    ...\nclass B:\n    ...\nclass C:\n    ...\nBT = TypeVar('BT', bound=B)\nSomething = CoroMaybeMethod[A, [BT, C], Any]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "BT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "BT = TypeVar('BT', bound=B)\nSomething = CoroMaybeMethod[A, [BT, C], Any]\nreveal_type(Something, expected_text=\"((A, BT@Something, C) -> Coroutine[Any, Any, Any]) | ((BT@Something, C) -> Coroutine[Any, Any, Any])\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "Something",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "peekOfCode": "Something = CoroMaybeMethod[A, [BT, C], Any]\nreveal_type(Something, expected_text=\"((A, BT@Something, C) -> Coroutine[Any, Any, Any]) | ((BT@Something, C) -> Coroutine[Any, Any, Any])\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias13",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "def f1() -> TA1:\n    ...\nreveal_type(f1(), expected_text=\"(Unknown) -> Unknown\")\ndef f2() -> TA2:\n    ...\ng2 = f2()\nreveal_type(\n    g2,\n    expected_text=\"((Unknown) -> Unknown) | ((...) -> Unknown)\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "def f2() -> TA2:\n    ...\ng2 = f2()\nreveal_type(\n    g2,\n    expected_text=\"((Unknown) -> Unknown) | ((...) -> Unknown)\",\n)\nreveal_type(g2(42), expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "T = TypeVar(\"T\")\nP = ParamSpec(\"P\")\nTA1 = Callable[[T], T]\nTA2 = Callable[[T], T] | Callable[P, T]\ndef f1() -> TA1:\n    ...\nreveal_type(f1(), expected_text=\"(Unknown) -> Unknown\")\ndef f2() -> TA2:\n    ...\ng2 = f2()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "P = ParamSpec(\"P\")\nTA1 = Callable[[T], T]\nTA2 = Callable[[T], T] | Callable[P, T]\ndef f1() -> TA1:\n    ...\nreveal_type(f1(), expected_text=\"(Unknown) -> Unknown\")\ndef f2() -> TA2:\n    ...\ng2 = f2()\nreveal_type(",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "TA1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "TA1 = Callable[[T], T]\nTA2 = Callable[[T], T] | Callable[P, T]\ndef f1() -> TA1:\n    ...\nreveal_type(f1(), expected_text=\"(Unknown) -> Unknown\")\ndef f2() -> TA2:\n    ...\ng2 = f2()\nreveal_type(\n    g2,",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "TA2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "TA2 = Callable[[T], T] | Callable[P, T]\ndef f1() -> TA1:\n    ...\nreveal_type(f1(), expected_text=\"(Unknown) -> Unknown\")\ndef f2() -> TA2:\n    ...\ng2 = f2()\nreveal_type(\n    g2,\n    expected_text=\"((Unknown) -> Unknown) | ((...) -> Unknown)\",",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "g2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "peekOfCode": "g2 = f2()\nreveal_type(\n    g2,\n    expected_text=\"((Unknown) -> Unknown) | ((...) -> Unknown)\",\n)\nreveal_type(g2(42), expected_text=\"Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias14",
        "documentation": {}
    },
    {
        "label": "HttpError",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "peekOfCode": "class HttpError(Exception):\n    pass\ndef func1(errs: _MaybeSequence[type[Exception]]):\n    pass\nfunc1(HttpError)\nfunc1(Exception)\nreveal_type(\n    _MaybeSequence[type[HttpError]],\n    expected_text=\"Type[Type[HttpError]] | Type[Sequence[Type[HttpError]]]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "peekOfCode": "def func1(errs: _MaybeSequence[type[Exception]]):\n    pass\nfunc1(HttpError)\nfunc1(Exception)\nreveal_type(\n    _MaybeSequence[type[HttpError]],\n    expected_text=\"Type[Type[HttpError]] | Type[Sequence[Type[HttpError]]]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "peekOfCode": "_T = TypeVar(\"_T\", bound=Type[Exception])\n_MaybeSequence = _T | Sequence[_T]\nclass HttpError(Exception):\n    pass\ndef func1(errs: _MaybeSequence[type[Exception]]):\n    pass\nfunc1(HttpError)\nfunc1(Exception)\nreveal_type(\n    _MaybeSequence[type[HttpError]],",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "documentation": {}
    },
    {
        "label": "_MaybeSequence",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "peekOfCode": "_MaybeSequence = _T | Sequence[_T]\nclass HttpError(Exception):\n    pass\ndef func1(errs: _MaybeSequence[type[Exception]]):\n    pass\nfunc1(HttpError)\nfunc1(Exception)\nreveal_type(\n    _MaybeSequence[type[HttpError]],\n    expected_text=\"Type[Type[HttpError]] | Type[Sequence[Type[HttpError]]]\",",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias15",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "peekOfCode": "def f() -> Entry[Mode]:\n    return {\"read\": 0}\ndef g() -> Entry2:\n    return {\"read\": 0}\ndef main() -> None:\n    d1 = f()\n    reveal_type(d1, expected_text=\"dict[Literal['read', 'write'], int]\")\n    d2 = g()\n    reveal_type(d2, expected_text=\"dict[Literal['read', 'write'], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "peekOfCode": "def g() -> Entry2:\n    return {\"read\": 0}\ndef main() -> None:\n    d1 = f()\n    reveal_type(d1, expected_text=\"dict[Literal['read', 'write'], int]\")\n    d2 = g()\n    reveal_type(d2, expected_text=\"dict[Literal['read', 'write'], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "peekOfCode": "def main() -> None:\n    d1 = f()\n    reveal_type(d1, expected_text=\"dict[Literal['read', 'write'], int]\")\n    d2 = g()\n    reveal_type(d2, expected_text=\"dict[Literal['read', 'write'], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "documentation": {}
    },
    {
        "label": "Mode",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "peekOfCode": "Mode = Literal[\"read\", \"write\"]\nT = TypeVar(\"T\")\nEntry: \"TypeAlias\" = dict[T, int]\nEntry2: TypeAlias = dict[Mode, int]\ndef f() -> Entry[Mode]:\n    return {\"read\": 0}\ndef g() -> Entry2:\n    return {\"read\": 0}\ndef main() -> None:\n    d1 = f()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "peekOfCode": "T = TypeVar(\"T\")\nEntry: \"TypeAlias\" = dict[T, int]\nEntry2: TypeAlias = dict[Mode, int]\ndef f() -> Entry[Mode]:\n    return {\"read\": 0}\ndef g() -> Entry2:\n    return {\"read\": 0}\ndef main() -> None:\n    d1 = f()\n    reveal_type(d1, expected_text=\"dict[Literal['read', 'write'], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias16",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "peekOfCode": "class Base:\n    @staticmethod\n    def create(data: Dict[str, Any]) -> \"Mix\":\n        return A()\nclass A(Base):\n    pass\nclass B(Base):\n    pass\nMix = Union[A, B]\nclass S:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "peekOfCode": "class A(Base):\n    pass\nclass B(Base):\n    pass\nMix = Union[A, B]\nclass S:\n    @staticmethod\n    def create(data: Dict[str, Any]) -> \"Mix\":\n        return A()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "peekOfCode": "class B(Base):\n    pass\nMix = Union[A, B]\nclass S:\n    @staticmethod\n    def create(data: Dict[str, Any]) -> \"Mix\":\n        return A()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "peekOfCode": "class S:\n    @staticmethod\n    def create(data: Dict[str, Any]) -> \"Mix\":\n        return A()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "documentation": {}
    },
    {
        "label": "Mix",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "peekOfCode": "Mix = Union[A, B]\nclass S:\n    @staticmethod\n    def create(data: Dict[str, Any]) -> \"Mix\":\n        return A()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias2",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "class ClassA(Generic[T]):\n    def __new__(cls, value: T) -> \"ClassA[T]\":\n        ...\nTypeAliasA = ClassA[T]\na1 = ClassA(3.0)\nreveal_type(a1, expected_text=\"ClassA[float]\")\na2 = TypeAliasA(3.0)\nreveal_type(a2, expected_text=\"ClassA[float]\")\nFunc = Callable[P, T]\nAnyFunc = Func[P, int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "def foo() -> ValidationResult[str]:\n    return False, \"valid\"\nclass ClassA(Generic[T]):\n    def __new__(cls, value: T) -> \"ClassA[T]\":\n        ...\nTypeAliasA = ClassA[T]\na1 = ClassA(3.0)\nreveal_type(a1, expected_text=\"ClassA[float]\")\na2 = TypeAliasA(3.0)\nreveal_type(a2, expected_text=\"ClassA[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "T = TypeVar(\"T\")\nP = ParamSpec(\"P\")\nValidationResult = Tuple[bool, Optional[T]]\ndef foo() -> ValidationResult[str]:\n    return False, \"valid\"\nclass ClassA(Generic[T]):\n    def __new__(cls, value: T) -> \"ClassA[T]\":\n        ...\nTypeAliasA = ClassA[T]\na1 = ClassA(3.0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "P = ParamSpec(\"P\")\nValidationResult = Tuple[bool, Optional[T]]\ndef foo() -> ValidationResult[str]:\n    return False, \"valid\"\nclass ClassA(Generic[T]):\n    def __new__(cls, value: T) -> \"ClassA[T]\":\n        ...\nTypeAliasA = ClassA[T]\na1 = ClassA(3.0)\nreveal_type(a1, expected_text=\"ClassA[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "ValidationResult",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "ValidationResult = Tuple[bool, Optional[T]]\ndef foo() -> ValidationResult[str]:\n    return False, \"valid\"\nclass ClassA(Generic[T]):\n    def __new__(cls, value: T) -> \"ClassA[T]\":\n        ...\nTypeAliasA = ClassA[T]\na1 = ClassA(3.0)\nreveal_type(a1, expected_text=\"ClassA[float]\")\na2 = TypeAliasA(3.0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "TypeAliasA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "TypeAliasA = ClassA[T]\na1 = ClassA(3.0)\nreveal_type(a1, expected_text=\"ClassA[float]\")\na2 = TypeAliasA(3.0)\nreveal_type(a2, expected_text=\"ClassA[float]\")\nFunc = Callable[P, T]\nAnyFunc = Func[P, int]\nAnyFunc[P]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "a1 = ClassA(3.0)\nreveal_type(a1, expected_text=\"ClassA[float]\")\na2 = TypeAliasA(3.0)\nreveal_type(a2, expected_text=\"ClassA[float]\")\nFunc = Callable[P, T]\nAnyFunc = Func[P, int]\nAnyFunc[P]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "a2 = TypeAliasA(3.0)\nreveal_type(a2, expected_text=\"ClassA[float]\")\nFunc = Callable[P, T]\nAnyFunc = Func[P, int]\nAnyFunc[P]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "Func",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "Func = Callable[P, T]\nAnyFunc = Func[P, int]\nAnyFunc[P]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "AnyFunc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "peekOfCode": "AnyFunc = Func[P, int]\nAnyFunc[P]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias3",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "class ClassA:\n    pass\nnot_a_type = \"ClassA\"\ndef requires_string(a: str):\n    pass\nrequires_string(not_a_type)\n# This should generate an error because type2 should\n# not be interpreted as a string.\nrequires_string(type2)\n# This should generate an error because the symbol",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "class ClassB:\n    my_type1: TA = int\ndef func1():\n    # This should generate an error because type aliases are allowed\n    # only in classes or modules.\n    my_type1: TA = int",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "requires_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "def requires_string(a: str):\n    pass\nrequires_string(not_a_type)\n# This should generate an error because type2 should\n# not be interpreted as a string.\nrequires_string(type2)\n# This should generate an error because the symbol\n# is later declared as a TypeAlias.\nmy_type3 = int\nmy_type3: \"TA\" = Union[int, str]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "def func1():\n    # This should generate an error because type aliases are allowed\n    # only in classes or modules.\n    my_type1: TA = int",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "not_a_type",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "not_a_type = \"ClassA\"\ndef requires_string(a: str):\n    pass\nrequires_string(not_a_type)\n# This should generate an error because type2 should\n# not be interpreted as a string.\nrequires_string(type2)\n# This should generate an error because the symbol\n# is later declared as a TypeAlias.\nmy_type3 = int",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "my_type3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "my_type3 = int\nmy_type3: \"TA\" = Union[int, str]\n# This should generate an error because the symbol\n# was previously declared as a TypeAlias.\nmy_type3: TA = int\n# This should generate an error because the expression\n# on the RHS evaluates to an object, not a class.\nmy_type4: TA = 3\n# This should generate an error because the expression\n# on the RHS evaluates to an object, not a class.",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "SimpleAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "peekOfCode": "SimpleAlias = int\nExplicitAlias: TA = int\nSimpleNonAlias: Type[int] = int\nreveal_type(SimpleAlias, expected_text=\"Type[int]\")\nreveal_type(ExplicitAlias, expected_text=\"Type[int]\")\nreveal_type(SimpleNonAlias, expected_text=\"Type[int]\")\nclass ClassB:\n    my_type1: TA = int\ndef func1():\n    # This should generate an error because type aliases are allowed",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "class Foo:\n    def __int__(self) -> int:\n        return 0\nFooT = TypeVar(\"FooT\", bound=Foo)\nFooIsh = Union[int, FooT]\nclass Bar(Foo):\n    def __int__(self) -> int:\n        return super().__int__() + 1\nv1: FooIsh[Bar] = 42\nv2: FooIsh[Bar] = Bar()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "class Bar(Foo):\n    def __int__(self) -> int:\n        return super().__int__() + 1\nv1: FooIsh[Bar] = 42\nv2: FooIsh[Bar] = Bar()\n# This should generate an error.\nv3: FooIsh[Type[Bar]] = 42\nMyTypeAlias = Dict[_T1, _T2]\nclass MyClass1(Generic[_T1, _T2]):\n    # This should generate an error because S and T are bound",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "class MyClass1(Generic[_T1, _T2]):\n    # This should generate an error because S and T are bound\n    # type variables.\n    MyTypeAlias = Dict[_T1, _T2]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nMyUnion1 = Union[int, _T1, str, _T2, List[_T1]]\nMyUnion2 = Union[float, datetime]\nMyUnion3 = MyUnion1[MyUnion2]\nMyUnion4 = MyUnion1[MyUnion2, IO]\n# This should generate an error because only two type\n# arguments are expected.\nMyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nMyUnion1 = Union[int, _T1, str, _T2, List[_T1]]\nMyUnion2 = Union[float, datetime]\nMyUnion3 = MyUnion1[MyUnion2]\nMyUnion4 = MyUnion1[MyUnion2, IO]\n# This should generate an error because only two type\n# arguments are expected.\nMyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyUnion1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyUnion1 = Union[int, _T1, str, _T2, List[_T1]]\nMyUnion2 = Union[float, datetime]\nMyUnion3 = MyUnion1[MyUnion2]\nMyUnion4 = MyUnion1[MyUnion2, IO]\n# This should generate an error because only two type\n# arguments are expected.\nMyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(\n    MyUnion6,",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyUnion2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyUnion2 = Union[float, datetime]\nMyUnion3 = MyUnion1[MyUnion2]\nMyUnion4 = MyUnion1[MyUnion2, IO]\n# This should generate an error because only two type\n# arguments are expected.\nMyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(\n    MyUnion6,\n    expected_text=\"Type[int] | Type[str] | Type[List[Literal[0]]] | Type[Literal[0, 'a']]\",",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyUnion3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyUnion3 = MyUnion1[MyUnion2]\nMyUnion4 = MyUnion1[MyUnion2, IO]\n# This should generate an error because only two type\n# arguments are expected.\nMyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(\n    MyUnion6,\n    expected_text=\"Type[int] | Type[str] | Type[List[Literal[0]]] | Type[Literal[0, 'a']]\",\n)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyUnion4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyUnion4 = MyUnion1[MyUnion2, IO]\n# This should generate an error because only two type\n# arguments are expected.\nMyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(\n    MyUnion6,\n    expected_text=\"Type[int] | Type[str] | Type[List[Literal[0]]] | Type[Literal[0, 'a']]\",\n)\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyUnion5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyUnion5 = MyUnion1[MyUnion2, IO, str]\nMyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(\n    MyUnion6,\n    expected_text=\"Type[int] | Type[str] | Type[List[Literal[0]]] | Type[Literal[0, 'a']]\",\n)\nclass Foo:\n    def __int__(self) -> int:\n        return 0\nFooT = TypeVar(\"FooT\", bound=Foo)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyUnion6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyUnion6 = MyUnion1[Literal[0], Literal[\"a\"]]\nreveal_type(\n    MyUnion6,\n    expected_text=\"Type[int] | Type[str] | Type[List[Literal[0]]] | Type[Literal[0, 'a']]\",\n)\nclass Foo:\n    def __int__(self) -> int:\n        return 0\nFooT = TypeVar(\"FooT\", bound=Foo)\nFooIsh = Union[int, FooT]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "FooT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "FooT = TypeVar(\"FooT\", bound=Foo)\nFooIsh = Union[int, FooT]\nclass Bar(Foo):\n    def __int__(self) -> int:\n        return super().__int__() + 1\nv1: FooIsh[Bar] = 42\nv2: FooIsh[Bar] = Bar()\n# This should generate an error.\nv3: FooIsh[Type[Bar]] = 42\nMyTypeAlias = Dict[_T1, _T2]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "FooIsh",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "FooIsh = Union[int, FooT]\nclass Bar(Foo):\n    def __int__(self) -> int:\n        return super().__int__() + 1\nv1: FooIsh[Bar] = 42\nv2: FooIsh[Bar] = Bar()\n# This should generate an error.\nv3: FooIsh[Type[Bar]] = 42\nMyTypeAlias = Dict[_T1, _T2]\nclass MyClass1(Generic[_T1, _T2]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "MyTypeAlias",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "peekOfCode": "MyTypeAlias = Dict[_T1, _T2]\nclass MyClass1(Generic[_T1, _T2]):\n    # This should generate an error because S and T are bound\n    # type variables.\n    MyTypeAlias = Dict[_T1, _T2]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias5",
        "documentation": {}
    },
    {
        "label": "T_Union",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_Union = Union[int, float]\n# This should generate an error\nT_Union(3)\nT_Callable = Callable[[int], None]\n# This should generate an error\nT_Callable(1)\nT_Type1 = Type[int]\n# This should generate an error\nT_Type1(object)\nT_Type2 = type",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "T_Callable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_Callable = Callable[[int], None]\n# This should generate an error\nT_Callable(1)\nT_Type1 = Type[int]\n# This should generate an error\nT_Type1(object)\nT_Type2 = type\nT_Type2(object)\nT_Optional = Optional[str]\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "T_Type1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_Type1 = Type[int]\n# This should generate an error\nT_Type1(object)\nT_Type2 = type\nT_Type2(object)\nT_Optional = Optional[str]\n# This should generate an error\nT_Optional(3)\nT_TypeVar = TypeVar(\"T_TypeVar\")\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "T_Type2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_Type2 = type\nT_Type2(object)\nT_Optional = Optional[str]\n# This should generate an error\nT_Optional(3)\nT_TypeVar = TypeVar(\"T_TypeVar\")\n# This should generate an error\nT_TypeVar()\nI = int\nI(3)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "T_Optional",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_Optional = Optional[str]\n# This should generate an error\nT_Optional(3)\nT_TypeVar = TypeVar(\"T_TypeVar\")\n# This should generate an error\nT_TypeVar()\nI = int\nI(3)\nT_Tuple2 = tuple[int, ...]\nT_Tuple2([3, 4, 5])",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "T_TypeVar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_TypeVar = TypeVar(\"T_TypeVar\")\n# This should generate an error\nT_TypeVar()\nI = int\nI(3)\nT_Tuple2 = tuple[int, ...]\nT_Tuple2([3, 4, 5])",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "I = int\nI(3)\nT_Tuple2 = tuple[int, ...]\nT_Tuple2([3, 4, 5])",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "T_Tuple2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "peekOfCode": "T_Tuple2 = tuple[int, ...]\nT_Tuple2([3, 4, 5])",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias6",
        "documentation": {}
    },
    {
        "label": "Context",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "class Context(Generic[TResult]):\n    Response: TResult\nclass Result(Generic[TResult, TError]):\n    def map(\n        self, mapper: Callable[[Context[TResult]], TResult]\n    ) -> \"Result[TResult, TError]\":\n        return Result()\nHttpFuncResult = Result[Context[TResult], TError]\nHttpFuncResultAsync = Awaitable[Result[Context[TResult], TError]]\nHttpFunc = Callable[",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "Result",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "class Result(Generic[TResult, TError]):\n    def map(\n        self, mapper: Callable[[Context[TResult]], TResult]\n    ) -> \"Result[TResult, TError]\":\n        return Result()\nHttpFuncResult = Result[Context[TResult], TError]\nHttpFuncResultAsync = Awaitable[Result[Context[TResult], TError]]\nHttpFunc = Callable[\n    [Context[TNext]],\n    HttpFuncResultAsync[TResult, TError],",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "TSource",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "TSource = TypeVar(\"TSource\")\nTError = TypeVar(\"TError\")\nTResult = TypeVar(\"TResult\")\nTNext = TypeVar(\"TNext\")\nclass Context(Generic[TResult]):\n    Response: TResult\nclass Result(Generic[TResult, TError]):\n    def map(\n        self, mapper: Callable[[Context[TResult]], TResult]\n    ) -> \"Result[TResult, TError]\":",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "TError",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "TError = TypeVar(\"TError\")\nTResult = TypeVar(\"TResult\")\nTNext = TypeVar(\"TNext\")\nclass Context(Generic[TResult]):\n    Response: TResult\nclass Result(Generic[TResult, TError]):\n    def map(\n        self, mapper: Callable[[Context[TResult]], TResult]\n    ) -> \"Result[TResult, TError]\":\n        return Result()",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "TResult",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "TResult = TypeVar(\"TResult\")\nTNext = TypeVar(\"TNext\")\nclass Context(Generic[TResult]):\n    Response: TResult\nclass Result(Generic[TResult, TError]):\n    def map(\n        self, mapper: Callable[[Context[TResult]], TResult]\n    ) -> \"Result[TResult, TError]\":\n        return Result()\nHttpFuncResult = Result[Context[TResult], TError]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "TNext",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "TNext = TypeVar(\"TNext\")\nclass Context(Generic[TResult]):\n    Response: TResult\nclass Result(Generic[TResult, TError]):\n    def map(\n        self, mapper: Callable[[Context[TResult]], TResult]\n    ) -> \"Result[TResult, TError]\":\n        return Result()\nHttpFuncResult = Result[Context[TResult], TError]\nHttpFuncResultAsync = Awaitable[Result[Context[TResult], TError]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "HttpFuncResult",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "HttpFuncResult = Result[Context[TResult], TError]\nHttpFuncResultAsync = Awaitable[Result[Context[TResult], TError]]\nHttpFunc = Callable[\n    [Context[TNext]],\n    HttpFuncResultAsync[TResult, TError],\n]\nHttpHandler = Callable[\n    [\n        HttpFunc[TNext, TResult, TError],\n        Context[TSource],",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "HttpFuncResultAsync",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "HttpFuncResultAsync = Awaitable[Result[Context[TResult], TError]]\nHttpFunc = Callable[\n    [Context[TNext]],\n    HttpFuncResultAsync[TResult, TError],\n]\nHttpHandler = Callable[\n    [\n        HttpFunc[TNext, TResult, TError],\n        Context[TSource],\n    ],",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "HttpFunc",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "HttpFunc = Callable[\n    [Context[TNext]],\n    HttpFuncResultAsync[TResult, TError],\n]\nHttpHandler = Callable[\n    [\n        HttpFunc[TNext, TResult, TError],\n        Context[TSource],\n    ],\n    HttpFuncResultAsync[TResult, TError],",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "HttpHandler",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "peekOfCode": "HttpHandler = Callable[\n    [\n        HttpFunc[TNext, TResult, TError],\n        Context[TSource],\n    ],\n    HttpFuncResultAsync[TResult, TError],\n]\nasync def run_async(\n    ctx: Context[TSource],\n    handler: HttpHandler[str, TResult, TError, TSource],",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias7",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "peekOfCode": "def f() -> F[T]:\n    def g(x: T) -> T:\n        ...\n    return g\ng = f()\nv1 = g(\"foo\")\nreveal_type(v1, expected_text=\"str\")\nv2 = g(1)\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "peekOfCode": "T = TypeVar(\"T\")\nF = Callable[[T], T]\ndef f() -> F[T]:\n    def g(x: T) -> T:\n        ...\n    return g\ng = f()\nv1 = g(\"foo\")\nreveal_type(v1, expected_text=\"str\")\nv2 = g(1)",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "peekOfCode": "F = Callable[[T], T]\ndef f() -> F[T]:\n    def g(x: T) -> T:\n        ...\n    return g\ng = f()\nv1 = g(\"foo\")\nreveal_type(v1, expected_text=\"str\")\nv2 = g(1)\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "peekOfCode": "g = f()\nv1 = g(\"foo\")\nreveal_type(v1, expected_text=\"str\")\nv2 = g(1)\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "peekOfCode": "v1 = g(\"foo\")\nreveal_type(v1, expected_text=\"str\")\nv2 = g(1)\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "peekOfCode": "v2 = g(1)\nreveal_type(v2, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias8",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "def foo1(f: Foo) -> None:\n    pass\nBar = Foo\n# This should generate an error because Bar doesn't specialize\n# Foo appropriately.\ndef foo2(f: Bar) -> None:\n    pass\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nBaz = Dict[K, V]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "def foo2(f: Bar) -> None:\n    pass\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nBaz = Dict[K, V]\n# This should generate an error because Baz is only partially specialized.\ndef foo3(f: Baz[int]) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "def foo3(f: Baz[int]) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "T = TypeVar(\"T\")\nFoo = List[T]\n# This should generate an error because Foo is missing a type argument,\n# so the type of `f` is partially unknown.\ndef foo1(f: Foo) -> None:\n    pass\nBar = Foo\n# This should generate an error because Bar doesn't specialize\n# Foo appropriately.\ndef foo2(f: Bar) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "Foo = List[T]\n# This should generate an error because Foo is missing a type argument,\n# so the type of `f` is partially unknown.\ndef foo1(f: Foo) -> None:\n    pass\nBar = Foo\n# This should generate an error because Bar doesn't specialize\n# Foo appropriately.\ndef foo2(f: Bar) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "Bar = Foo\n# This should generate an error because Bar doesn't specialize\n# Foo appropriately.\ndef foo2(f: Bar) -> None:\n    pass\nK = TypeVar(\"K\")\nV = TypeVar(\"V\")\nBaz = Dict[K, V]\n# This should generate an error because Baz is only partially specialized.\ndef foo3(f: Baz[int]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "K",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "K = TypeVar(\"K\")\nV = TypeVar(\"V\")\nBaz = Dict[K, V]\n# This should generate an error because Baz is only partially specialized.\ndef foo3(f: Baz[int]) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "V = TypeVar(\"V\")\nBaz = Dict[K, V]\n# This should generate an error because Baz is only partially specialized.\ndef foo3(f: Baz[int]) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "description": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "peekOfCode": "Baz = Dict[K, V]\n# This should generate an error because Baz is only partially specialized.\ndef foo3(f: Baz[int]) -> None:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeAlias9",
        "documentation": {}
    },
    {
        "label": "ClassA[T2]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "peekOfCode": "class ClassA[T2]:\n    type TA2 = int; type TA3 = str\n    type TA4 = int\n    T2 = 4\nT2 = 4\ntype TA5[S1, *S2, **S3] = Callable[S3, S1] | tuple[*S2]\nX1 = TA5[int, tuple[int, str], ...]\ntype TA6 = TA5[int, tuple[int, str], ...]\nval1: TA5\nval2: TA6",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "peekOfCode": "T1 = 0\ntype TA1[T1] = int\nclass ClassA[T2]:\n    type TA2 = int; type TA3 = str\n    type TA4 = int\n    T2 = 4\nT2 = 4\ntype TA5[S1, *S2, **S3] = Callable[S3, S1] | tuple[*S2]\nX1 = TA5[int, tuple[int, str], ...]\ntype TA6 = TA5[int, tuple[int, str], ...]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "peekOfCode": "T2 = 4\ntype TA5[S1, *S2, **S3] = Callable[S3, S1] | tuple[*S2]\nX1 = TA5[int, tuple[int, str], ...]\ntype TA6 = TA5[int, tuple[int, str], ...]\nval1: TA5\nval2: TA6\nif 1 < 2:\n    # This should generate an error because it is obscured.\n    type TA7 = int\nelse:",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "documentation": {}
    },
    {
        "label": "X1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "peekOfCode": "X1 = TA5[int, tuple[int, str], ...]\ntype TA6 = TA5[int, tuple[int, str], ...]\nval1: TA5\nval2: TA6\nif 1 < 2:\n    # This should generate an error because it is obscured.\n    type TA7 = int\nelse:\n    type TA7 = int",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement1",
        "documentation": {}
    },
    {
        "label": "V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "peekOfCode": "V = TypeVar(\"V\")\n# This should generate an error because it combines old and\n# new type variables.\ntype TA1[K] = dict[K, V]\nT1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\n# This should generate an error because it uses old type\n# variables in a type alias statement.\ntype TA2 = list[T1]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\n# This should generate an error because it uses old type\n# variables in a type alias statement.\ntype TA2 = list[T1]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "description": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "peekOfCode": "T2 = TypeVar(\"T2\")\n# This should generate an error because it uses old type\n# variables in a type alias statement.\ntype TA2 = list[T1]",
        "detail": "packages.pyright-internal.src.tests.samples.typeAliasStatement3",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class TD1(TypedDict, total=not_total):\n    pass\nclass TD2(TypedDict, total=False):\n    \"\"\" This is a test \"\"\"\n    a: int\n    # This should generate an error because \"b\"\n    # is redeclared below with a different type.\n    b: str\n    b: float\n    c: \"Dict[Any, Any]\"",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class TD2(TypedDict, total=False):\n    \"\"\" This is a test \"\"\"\n    a: int\n    # This should generate an error because \"b\"\n    # is redeclared below with a different type.\n    b: str\n    b: float\n    c: \"Dict[Any, Any]\"\n    # This should generate an error because\n    # assignments are not allowed.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "TD3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class TD3(TypedDict, total=True):\n    a: int\n    b: float\n    c: str\nclass TD4(TypedDict):\n    d: str\nclass TD5(TD3, total=False):\n    e: str\n    # This should generate an error because\n    # methods are not allowed.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "TD4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class TD4(TypedDict):\n    d: str\nclass TD5(TD3, total=False):\n    e: str\n    # This should generate an error because\n    # methods are not allowed.\n    def foo(self):\n        pass\nclass NotATD:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "TD5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class TD5(TD3, total=False):\n    e: str\n    # This should generate an error because\n    # methods are not allowed.\n    def foo(self):\n        pass\nclass NotATD:\n    pass\n# This should generate an error because non-TypeDict\n# base classes shouldn't be allowed for TD classes.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "NotATD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class NotATD:\n    pass\n# This should generate an error because non-TypeDict\n# base classes shouldn't be allowed for TD classes.\nclass TD6(TD3, NotATD):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "TD6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "class TD6(TD3, NotATD):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "not_total",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typedDict1",
        "peekOfCode": "not_total = False\n# This should generate an error because\n# the value of the total argument must\n# be a literal \"True\" or \"False\".\nclass TD1(TypedDict, total=not_total):\n    pass\nclass TD2(TypedDict, total=False):\n    \"\"\" This is a test \"\"\"\n    a: int\n    # This should generate an error because \"b\"",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict1",
        "documentation": {}
    },
    {
        "label": "get_movie_name",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict10",
        "description": "packages.pyright-internal.src.tests.samples.typedDict10",
        "peekOfCode": "def get_movie_name(movie: Movie):\n    return movie[\"name\"]\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",\n}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict10",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict10",
        "description": "packages.pyright-internal.src.tests.samples.typedDict10",
        "peekOfCode": "Movie = TypedDict(\"Movie\", name=str, year=int)\ndef get_movie_name(movie: Movie):\n    return movie[\"name\"]\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict10",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict10",
        "description": "packages.pyright-internal.src.tests.samples.typedDict10",
        "peekOfCode": "name2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",\n}\nmovie3: Movie = {\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict10",
        "documentation": {}
    },
    {
        "label": "MessageTypeDef",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict11",
        "description": "packages.pyright-internal.src.tests.samples.typedDict11",
        "peekOfCode": "MessageTypeDef = TypedDict(\"MessageTypeDef\", {\"Id\": str, \"Handle\": str})\nmsgs = [{\"Id\": \"1\", \"Handle\": \"2\"}]\nlist2: List[MessageTypeDef] = [\n    {\"Id\": msg[\"Id\"], \"Handle\": msg[\"Handle\"]} for msg in msgs\n]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict11",
        "documentation": {}
    },
    {
        "label": "msgs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict11",
        "description": "packages.pyright-internal.src.tests.samples.typedDict11",
        "peekOfCode": "msgs = [{\"Id\": \"1\", \"Handle\": \"2\"}]\nlist2: List[MessageTypeDef] = [\n    {\"Id\": msg[\"Id\"], \"Handle\": msg[\"Handle\"]} for msg in msgs\n]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict11",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict12",
        "description": "packages.pyright-internal.src.tests.samples.typedDict12",
        "peekOfCode": "class TD1(TypedDict):\n    bar: NotRequired[str]\nclass TD2(TD1):\n    foo: Required[str]\ntd1: TD1 = {}\ntd2: TD2 = {\"foo\": \"hi\"}\nv1: Optional[str] = td1.get(\"bar\")\nv2: str = td1.get(\"bar\", \"\")\nv3: Union[str, int] = td1.get(\"bar\", 3)\nv4: str = td1.setdefault(\"bar\", \"1\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict12",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict12",
        "description": "packages.pyright-internal.src.tests.samples.typedDict12",
        "peekOfCode": "class TD2(TD1):\n    foo: Required[str]\ntd1: TD1 = {}\ntd2: TD2 = {\"foo\": \"hi\"}\nv1: Optional[str] = td1.get(\"bar\")\nv2: str = td1.get(\"bar\", \"\")\nv3: Union[str, int] = td1.get(\"bar\", 3)\nv4: str = td1.setdefault(\"bar\", \"1\")\n# This should generate an error.\ntd1.setdefault(\"bar\", 3)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict12",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict12",
        "description": "packages.pyright-internal.src.tests.samples.typedDict12",
        "peekOfCode": "class A(TypedDict):\n    foo: int\n    baz: NotRequired[int]\nclass B(TypedDict):\n    bar: str\nC = Union[A, B]\ndef test(a: A, b: B, c: C, s: str) -> Optional[int]:\n    a1 = a.get(\"foo\")\n    reveal_type(a1, expected_text=\"int\")\n    a2 = a.get(\"foo\", 1.0)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict12",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict12",
        "description": "packages.pyright-internal.src.tests.samples.typedDict12",
        "peekOfCode": "class B(TypedDict):\n    bar: str\nC = Union[A, B]\ndef test(a: A, b: B, c: C, s: str) -> Optional[int]:\n    a1 = a.get(\"foo\")\n    reveal_type(a1, expected_text=\"int\")\n    a2 = a.get(\"foo\", 1.0)\n    reveal_type(a2, expected_text=\"int\")\n    a3 = a.get(\"bar\")\n    reveal_type(a3, expected_text=\"None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict12",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict12",
        "description": "packages.pyright-internal.src.tests.samples.typedDict12",
        "peekOfCode": "def test(a: A, b: B, c: C, s: str) -> Optional[int]:\n    a1 = a.get(\"foo\")\n    reveal_type(a1, expected_text=\"int\")\n    a2 = a.get(\"foo\", 1.0)\n    reveal_type(a2, expected_text=\"int\")\n    a3 = a.get(\"bar\")\n    reveal_type(a3, expected_text=\"None\")\n    a4 = a.get(\"bar\", 1.0)\n    reveal_type(a4, expected_text=\"float\")\n    a5 = a.get(\"baz\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict12",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict12",
        "description": "packages.pyright-internal.src.tests.samples.typedDict12",
        "peekOfCode": "C = Union[A, B]\ndef test(a: A, b: B, c: C, s: str) -> Optional[int]:\n    a1 = a.get(\"foo\")\n    reveal_type(a1, expected_text=\"int\")\n    a2 = a.get(\"foo\", 1.0)\n    reveal_type(a2, expected_text=\"int\")\n    a3 = a.get(\"bar\")\n    reveal_type(a3, expected_text=\"None\")\n    a4 = a.get(\"bar\", 1.0)\n    reveal_type(a4, expected_text=\"float\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict12",
        "documentation": {}
    },
    {
        "label": "ChildTD",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict13",
        "description": "packages.pyright-internal.src.tests.samples.typedDict13",
        "peekOfCode": "class ChildTD(ParentTD):\n    # This should generate an error because the type of \"age\" is redefined.\n    age: float\n    name: str",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict13",
        "documentation": {}
    },
    {
        "label": "ParentTD",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict13",
        "description": "packages.pyright-internal.src.tests.samples.typedDict13",
        "peekOfCode": "ParentTD = TypedDict(\"ParentTD\", {\"name\": str, \"age\": int})\nclass ChildTD(ParentTD):\n    # This should generate an error because the type of \"age\" is redefined.\n    age: float\n    name: str",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict13",
        "documentation": {}
    },
    {
        "label": "Thing",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "class Thing(TypedDict):\n    v1: bool\n    v2: str\nclass Thing2(TypedDict):\n    v3: Optional[Thing]\n    v4: Optional[List[Union[str, int]]]\nthing2: Thing2 = {\"v3\": None, \"v4\": None}\nthing2[\"v3\"] = {\"v1\": False, \"v2\": \"a\"}\nthing2[\"v4\"] = []\nthing2[\"v4\"] = [3]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "Thing2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "class Thing2(TypedDict):\n    v3: Optional[Thing]\n    v4: Optional[List[Union[str, int]]]\nthing2: Thing2 = {\"v3\": None, \"v4\": None}\nthing2[\"v3\"] = {\"v1\": False, \"v2\": \"a\"}\nthing2[\"v4\"] = []\nthing2[\"v4\"] = [3]\nthing2[\"v4\"] = [\"hi\"]\nthing2[\"v4\"] = [\"hi\", 4]\n# This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "thing2[\"v3\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "thing2[\"v3\"] = {\"v1\": False, \"v2\": \"a\"}\nthing2[\"v4\"] = []\nthing2[\"v4\"] = [3]\nthing2[\"v4\"] = [\"hi\"]\nthing2[\"v4\"] = [\"hi\", 4]\n# This should generate an error\nthing2[\"v4\"] = [\"hi\", 4.0]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "thing2[\"v4\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "thing2[\"v4\"] = []\nthing2[\"v4\"] = [3]\nthing2[\"v4\"] = [\"hi\"]\nthing2[\"v4\"] = [\"hi\", 4]\n# This should generate an error\nthing2[\"v4\"] = [\"hi\", 4.0]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "thing2[\"v4\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "thing2[\"v4\"] = [3]\nthing2[\"v4\"] = [\"hi\"]\nthing2[\"v4\"] = [\"hi\", 4]\n# This should generate an error\nthing2[\"v4\"] = [\"hi\", 4.0]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "thing2[\"v4\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "thing2[\"v4\"] = [\"hi\"]\nthing2[\"v4\"] = [\"hi\", 4]\n# This should generate an error\nthing2[\"v4\"] = [\"hi\", 4.0]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "thing2[\"v4\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "thing2[\"v4\"] = [\"hi\", 4]\n# This should generate an error\nthing2[\"v4\"] = [\"hi\", 4.0]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "thing2[\"v4\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict14",
        "description": "packages.pyright-internal.src.tests.samples.typedDict14",
        "peekOfCode": "thing2[\"v4\"] = [\"hi\", 4.0]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict14",
        "documentation": {}
    },
    {
        "label": "HasName",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "class HasName(Protocol):\n    name: str\nclass SupportsClear(Protocol):\n    def clear(self) -> None:\n        ...\n_T = TypeVar(\"_T\")\nclass SupportsUpdate(Protocol):\n    def update(self: _T, __m: _T) -> None:\n        ...\nclass B(TypedDict):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "SupportsClear",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "class SupportsClear(Protocol):\n    def clear(self) -> None:\n        ...\n_T = TypeVar(\"_T\")\nclass SupportsUpdate(Protocol):\n    def update(self: _T, __m: _T) -> None:\n        ...\nclass B(TypedDict):\n    name: str\ndef print_name(x: HasName):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "SupportsUpdate",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "class SupportsUpdate(Protocol):\n    def update(self: _T, __m: _T) -> None:\n        ...\nclass B(TypedDict):\n    name: str\ndef print_name(x: HasName):\n    print(x.name)\nmy_typed_dict: B = {\"name\": \"my name\"}\n# This should generate an error. The \"name\"\n# attribute of a TypedDict can't be accessed",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "class B(TypedDict):\n    name: str\ndef print_name(x: HasName):\n    print(x.name)\nmy_typed_dict: B = {\"name\": \"my name\"}\n# This should generate an error. The \"name\"\n# attribute of a TypedDict can't be accessed\n# through a member access expression.\nprint_name(my_typed_dict)\ndef do_clear(x: SupportsClear):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "print_name",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "def print_name(x: HasName):\n    print(x.name)\nmy_typed_dict: B = {\"name\": \"my name\"}\n# This should generate an error. The \"name\"\n# attribute of a TypedDict can't be accessed\n# through a member access expression.\nprint_name(my_typed_dict)\ndef do_clear(x: SupportsClear):\n    x.clear()\n# This should generate an error. Although a \"dict\"",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "do_clear",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "def do_clear(x: SupportsClear):\n    x.clear()\n# This should generate an error. Although a \"dict\"\n# class supports clear, a TypedDict does not.\ndo_clear(my_typed_dict)\ndef do_update(x: SupportsUpdate):\n    x.update(x)\ndo_update(my_typed_dict)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "do_update",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "def do_update(x: SupportsUpdate):\n    x.update(x)\ndo_update(my_typed_dict)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict15",
        "description": "packages.pyright-internal.src.tests.samples.typedDict15",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass SupportsUpdate(Protocol):\n    def update(self: _T, __m: _T) -> None:\n        ...\nclass B(TypedDict):\n    name: str\ndef print_name(x: HasName):\n    print(x.name)\nmy_typed_dict: B = {\"name\": \"my name\"}\n# This should generate an error. The \"name\"",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict15",
        "documentation": {}
    },
    {
        "label": "TD0",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD0(TypedDict):\n    key: str\nclass TD1(TD0):\n    value: str\nclass TD2(TypedDict):\n    key: str\n    value: str\nv1: TD2 = TD1(key=\"\", value=\"\")\nv2: TD1 = TD2(key=\"\", value=\"\")\nv3 = [v2]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD1(TD0):\n    value: str\nclass TD2(TypedDict):\n    key: str\n    value: str\nv1: TD2 = TD1(key=\"\", value=\"\")\nv2: TD1 = TD2(key=\"\", value=\"\")\nv3 = [v2]\nv4: List[TD2] = v3\nv5 = [v1]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD2(TypedDict):\n    key: str\n    value: str\nv1: TD2 = TD1(key=\"\", value=\"\")\nv2: TD1 = TD2(key=\"\", value=\"\")\nv3 = [v2]\nv4: List[TD2] = v3\nv5 = [v1]\nv6: List[TD1] = v5\nclass TD10(TypedDict, total=False):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD10",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD10(TypedDict, total=False):\n    key: str\nclass TD11(TD10):\n    value: str\nclass TD12(TypedDict):\n    key: str\n    value: str\n# This should generate an error.\nv10: TD12 = TD11(key=\"\", value=\"\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD11",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD11(TD10):\n    value: str\nclass TD12(TypedDict):\n    key: str\n    value: str\n# This should generate an error.\nv10: TD12 = TD11(key=\"\", value=\"\")\n# This should generate an error.\nv11: TD11 = TD12(key=\"\", value=\"\")\nv12 = [v10]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD12",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD12(TypedDict):\n    key: str\n    value: str\n# This should generate an error.\nv10: TD12 = TD11(key=\"\", value=\"\")\n# This should generate an error.\nv11: TD11 = TD12(key=\"\", value=\"\")\nv12 = [v10]\n# This should generate an error.\nv13: List[TD10] = v12",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD20",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD20(TypedDict):\n    key: str\n    value: str\nclass TD21(TypedDict):\n    key: str\n    value: str\n    extra: str\n# This should generate an error.\nv20: TD21 = TD20(key=\"\", value=\"\")\nv21: TD20 = TD21(key=\"\", value=\"\", extra=\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD21",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD21(TypedDict):\n    key: str\n    value: str\n    extra: str\n# This should generate an error.\nv20: TD21 = TD20(key=\"\", value=\"\")\nv21: TD20 = TD21(key=\"\", value=\"\", extra=\"\")\nv22 = [v20]\n# This should generate an error.\nv23: List[TD20] = v22",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD30",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD30(TypedDict):\n    value: str\n@final\nclass TD31(TypedDict):\n    value: str\nclass TD32(TypedDict):\n    value: str\nv30: TD30 = TD31(value=\"\")\nv31: TD31 = TD30(value=\"\")\n# This should generate an error because of a @final mismatch.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD31",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD31(TypedDict):\n    value: str\nclass TD32(TypedDict):\n    value: str\nv30: TD30 = TD31(value=\"\")\nv31: TD31 = TD30(value=\"\")\n# This should generate an error because of a @final mismatch.\nv32: TD32 = TD30(value=\"\")\n# This should generate an error because of a @final mismatch.\nv33: TD30 = TD32(value=\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "TD32",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "class TD32(TypedDict):\n    value: str\nv30: TD30 = TD31(value=\"\")\nv31: TD31 = TD30(value=\"\")\n# This should generate an error because of a @final mismatch.\nv32: TD32 = TD30(value=\"\")\n# This should generate an error because of a @final mismatch.\nv33: TD30 = TD32(value=\"\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "v3 = [v2]\nv4: List[TD2] = v3\nv5 = [v1]\nv6: List[TD1] = v5\nclass TD10(TypedDict, total=False):\n    key: str\nclass TD11(TD10):\n    value: str\nclass TD12(TypedDict):\n    key: str",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "v5 = [v1]\nv6: List[TD1] = v5\nclass TD10(TypedDict, total=False):\n    key: str\nclass TD11(TD10):\n    value: str\nclass TD12(TypedDict):\n    key: str\n    value: str\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "v12",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "v12 = [v10]\n# This should generate an error.\nv13: List[TD10] = v12\nv14 = [v11]\n# This should generate an error.\nv15: List[TD12] = v14\nclass TD20(TypedDict):\n    key: str\n    value: str\nclass TD21(TypedDict):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "v14",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "v14 = [v11]\n# This should generate an error.\nv15: List[TD12] = v14\nclass TD20(TypedDict):\n    key: str\n    value: str\nclass TD21(TypedDict):\n    key: str\n    value: str\n    extra: str",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "v22",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict16",
        "description": "packages.pyright-internal.src.tests.samples.typedDict16",
        "peekOfCode": "v22 = [v20]\n# This should generate an error.\nv23: List[TD20] = v22\nv24: List[TD20] = [v21]\n# This should generate an error.\nv25: List[TD21] = v24\n@final\nclass TD30(TypedDict):\n    value: str\n@final",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict16",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict17",
        "description": "packages.pyright-internal.src.tests.samples.typedDict17",
        "peekOfCode": "class Person(TypedDict, total=False):\n    name: str\n    age: int\nperson: Person = {}\nperson.update({\"name\": \"Michael\"})\nperson |= {\"name\": \"Michael\"}\nperson = person | {\"name\": \"Michael\"}\n# This should generate an error.\nperson |= {\"name\": \"Michael\", \"other\": 1}\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict17",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict17",
        "description": "packages.pyright-internal.src.tests.samples.typedDict17",
        "peekOfCode": "person = person | {\"name\": \"Michael\"}\n# This should generate an error.\nperson |= {\"name\": \"Michael\", \"other\": 1}\n# This should generate an error.\nperson = person | {\"name\": 1}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict17",
        "documentation": {}
    },
    {
        "label": "person",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict17",
        "description": "packages.pyright-internal.src.tests.samples.typedDict17",
        "peekOfCode": "person = person | {\"name\": 1}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict17",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD1(TypedDict, Generic[_T1, _T2]):\n    a: dict[_T1, _T2]\n    b: _T1\nv1_1: TD1[str, int] = {\"a\": {\"x\": 3}, \"b\": \"y\"}\n# This should generate an error.\nv1_2: TD1[str, str] = {\"a\": {\"x\": 3}, \"b\": \"y\"}\nclass TD2(TD1[_T1, int]):\n    c: _T1\nv2_1: TD2[int] = {\"a\": {3: 3}, \"b\": 1, \"c\": 5}\nclass TD3(TypedDict):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD2(TD1[_T1, int]):\n    c: _T1\nv2_1: TD2[int] = {\"a\": {3: 3}, \"b\": 1, \"c\": 5}\nclass TD3(TypedDict):\n    a: int\nclass TD4(TD3, Generic[_T1]):\n    b: _T1\nv4: TD4[str] = {\"a\": 3, \"b\": \"\"}\ndef func1(x: TD1[_T1, _T2]) -> dict[_T1, _T2]:\n    return x[\"a\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD3(TypedDict):\n    a: int\nclass TD4(TD3, Generic[_T1]):\n    b: _T1\nv4: TD4[str] = {\"a\": 3, \"b\": \"\"}\ndef func1(x: TD1[_T1, _T2]) -> dict[_T1, _T2]:\n    return x[\"a\"]\nv1_3 = func1({\"a\": {\"x\": 3}, \"b\": \"y\"})\nreveal_type(v1_3, expected_text=\"dict[str, int]\")\nclass TD5(TypedDict, Generic[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD4(TD3, Generic[_T1]):\n    b: _T1\nv4: TD4[str] = {\"a\": 3, \"b\": \"\"}\ndef func1(x: TD1[_T1, _T2]) -> dict[_T1, _T2]:\n    return x[\"a\"]\nv1_3 = func1({\"a\": {\"x\": 3}, \"b\": \"y\"})\nreveal_type(v1_3, expected_text=\"dict[str, int]\")\nclass TD5(TypedDict, Generic[_T1]):\n    x: _T1\n    y: _T1",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD5(TypedDict, Generic[_T1]):\n    x: _T1\n    y: _T1\ndef func2(a: TD5[Literal[1]]):\n    ...\nfunc2({\"x\": 1, \"y\": 1})\n# This should generate an error because 2 doesn't match Literal[1].\nfunc2({\"x\": 2, \"y\": 1})\ndef func3(a: TD5[_T1]) -> _T1:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD6(TD5[Literal[1]]):\n    z: str\ndef func4(a: TD6) -> Literal[1]:\n    ...\nfunc4({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf2: TD6 = {\"x\": 1, \"y\": 1, \"z\": \"a\"}\nreveal_type(func4({\"x\": 1, \"y\": 1, \"z\": \"a\"}))\nclass TD7(TD5[_T1], Generic[_T1]):\n    z: str\ndef func5(a: TD7[Literal[1]]) -> Literal[1]:",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD7",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD7(TD5[_T1], Generic[_T1]):\n    z: str\ndef func5(a: TD7[Literal[1]]) -> Literal[1]:\n    return a[\"x\"]\nfunc5({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf3: TD7[Literal[1]] = {\"x\": 1, \"y\": 1, \"z\": \"a\"}\nreveal_type(func5({\"x\": 1, \"y\": 1, \"z\": \"a\"}))\nclass TD8(TD7[Literal[1]]):\n    ...\ndef func6(a: TD8) -> Literal[1]:",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD8",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD8(TD7[Literal[1]]):\n    ...\ndef func6(a: TD8) -> Literal[1]:\n    return a[\"x\"]\nfunc6({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf4: TD8 = {\"x\": 1, \"y\": 1, \"z\": \"a\"}\nreveal_type(func6({\"x\": 1, \"y\": 1, \"z\": \"a\"}))\nclass TD9(TypedDict, Generic[_T1]):\n    x: _T1\nclass ClassA(Generic[_T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD9",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class TD9(TypedDict, Generic[_T1]):\n    x: _T1\nclass ClassA(Generic[_T1]):\n    def __init__(self, **attrs: Unpack[TD9[_T1]]) -> None:\n        ...\nf5 = ClassA[int](x=1)\n# This should generate an error because 1 isn't a valid type.\nf6 = ClassA[str](x=1)\nf7 = ClassA(x=1)\nreveal_type(f7, expected_text='ClassA[int]')",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "class ClassA(Generic[_T1]):\n    def __init__(self, **attrs: Unpack[TD9[_T1]]) -> None:\n        ...\nf5 = ClassA[int](x=1)\n# This should generate an error because 1 isn't a valid type.\nf6 = ClassA[str](x=1)\nf7 = ClassA(x=1)\nreveal_type(f7, expected_text='ClassA[int]')",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "def func1(x: TD1[_T1, _T2]) -> dict[_T1, _T2]:\n    return x[\"a\"]\nv1_3 = func1({\"a\": {\"x\": 3}, \"b\": \"y\"})\nreveal_type(v1_3, expected_text=\"dict[str, int]\")\nclass TD5(TypedDict, Generic[_T1]):\n    x: _T1\n    y: _T1\ndef func2(a: TD5[Literal[1]]):\n    ...\nfunc2({\"x\": 1, \"y\": 1})",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "def func2(a: TD5[Literal[1]]):\n    ...\nfunc2({\"x\": 1, \"y\": 1})\n# This should generate an error because 2 doesn't match Literal[1].\nfunc2({\"x\": 2, \"y\": 1})\ndef func3(a: TD5[_T1]) -> _T1:\n    ...\nreveal_type(func3({\"x\": 1, \"y\": 1}), expected_text=\"int\")\nreveal_type(func3({\"x\": \"1\", \"y\": 1}), expected_text=\"str | int\")\nclass TD6(TD5[Literal[1]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "def func3(a: TD5[_T1]) -> _T1:\n    ...\nreveal_type(func3({\"x\": 1, \"y\": 1}), expected_text=\"int\")\nreveal_type(func3({\"x\": \"1\", \"y\": 1}), expected_text=\"str | int\")\nclass TD6(TD5[Literal[1]]):\n    z: str\ndef func4(a: TD6) -> Literal[1]:\n    ...\nfunc4({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf2: TD6 = {\"x\": 1, \"y\": 1, \"z\": \"a\"}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "def func4(a: TD6) -> Literal[1]:\n    ...\nfunc4({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf2: TD6 = {\"x\": 1, \"y\": 1, \"z\": \"a\"}\nreveal_type(func4({\"x\": 1, \"y\": 1, \"z\": \"a\"}))\nclass TD7(TD5[_T1], Generic[_T1]):\n    z: str\ndef func5(a: TD7[Literal[1]]) -> Literal[1]:\n    return a[\"x\"]\nfunc5({\"x\": 1, \"y\": 1, \"z\": \"a\"})",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "def func5(a: TD7[Literal[1]]) -> Literal[1]:\n    return a[\"x\"]\nfunc5({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf3: TD7[Literal[1]] = {\"x\": 1, \"y\": 1, \"z\": \"a\"}\nreveal_type(func5({\"x\": 1, \"y\": 1, \"z\": \"a\"}))\nclass TD8(TD7[Literal[1]]):\n    ...\ndef func6(a: TD8) -> Literal[1]:\n    return a[\"x\"]\nfunc6({\"x\": 1, \"y\": 1, \"z\": \"a\"})",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "def func6(a: TD8) -> Literal[1]:\n    return a[\"x\"]\nfunc6({\"x\": 1, \"y\": 1, \"z\": \"a\"})\nf4: TD8 = {\"x\": 1, \"y\": 1, \"z\": \"a\"}\nreveal_type(func6({\"x\": 1, \"y\": 1, \"z\": \"a\"}))\nclass TD9(TypedDict, Generic[_T1]):\n    x: _T1\nclass ClassA(Generic[_T1]):\n    def __init__(self, **attrs: Unpack[TD9[_T1]]) -> None:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass TD1(TypedDict, Generic[_T1, _T2]):\n    a: dict[_T1, _T2]\n    b: _T1\nv1_1: TD1[str, int] = {\"a\": {\"x\": 3}, \"b\": \"y\"}\n# This should generate an error.\nv1_2: TD1[str, str] = {\"a\": {\"x\": 3}, \"b\": \"y\"}\nclass TD2(TD1[_T1, int]):\n    c: _T1",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nclass TD1(TypedDict, Generic[_T1, _T2]):\n    a: dict[_T1, _T2]\n    b: _T1\nv1_1: TD1[str, int] = {\"a\": {\"x\": 3}, \"b\": \"y\"}\n# This should generate an error.\nv1_2: TD1[str, str] = {\"a\": {\"x\": 3}, \"b\": \"y\"}\nclass TD2(TD1[_T1, int]):\n    c: _T1\nv2_1: TD2[int] = {\"a\": {3: 3}, \"b\": 1, \"c\": 5}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "v1_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "v1_3 = func1({\"a\": {\"x\": 3}, \"b\": \"y\"})\nreveal_type(v1_3, expected_text=\"dict[str, int]\")\nclass TD5(TypedDict, Generic[_T1]):\n    x: _T1\n    y: _T1\ndef func2(a: TD5[Literal[1]]):\n    ...\nfunc2({\"x\": 1, \"y\": 1})\n# This should generate an error because 2 doesn't match Literal[1].\nfunc2({\"x\": 2, \"y\": 1})",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "f5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "f5 = ClassA[int](x=1)\n# This should generate an error because 1 isn't a valid type.\nf6 = ClassA[str](x=1)\nf7 = ClassA(x=1)\nreveal_type(f7, expected_text='ClassA[int]')",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "f6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "f6 = ClassA[str](x=1)\nf7 = ClassA(x=1)\nreveal_type(f7, expected_text='ClassA[int]')",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "f7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict18",
        "description": "packages.pyright-internal.src.tests.samples.typedDict18",
        "peekOfCode": "f7 = ClassA(x=1)\nreveal_type(f7, expected_text='ClassA[int]')",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict18",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "class TD1(TypedDict):\n    x: NotRequired[str]\nclass TD2(TypedDict):\n    x: Required[str]\ndef func1(td: TD1 | TD2):\n    # This should generate an error because \"x\" is not required in TD1.\n    v1 = td[\"x\"]\ndef func2(td: TD1 | TD2):\n    td[\"x\"] = \"hi\"\n    v1 = td[\"x\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "class TD2(TypedDict):\n    x: Required[str]\ndef func1(td: TD1 | TD2):\n    # This should generate an error because \"x\" is not required in TD1.\n    v1 = td[\"x\"]\ndef func2(td: TD1 | TD2):\n    td[\"x\"] = \"hi\"\n    v1 = td[\"x\"]\ndef func3(td: TD1 | TD2, opt: bool):\n    if opt:",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "TD3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "class TD3(TypedDict):\n    x: str\n    y: NotRequired[int]\ndef accepts_td3(**args: Unpack[TD3]):\n    pass\ndef func5(td: TD3, cond: bool):\n    if cond:\n        td[\"y\"] = 5\n    accepts_td3(**td)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "def func1(td: TD1 | TD2):\n    # This should generate an error because \"x\" is not required in TD1.\n    v1 = td[\"x\"]\ndef func2(td: TD1 | TD2):\n    td[\"x\"] = \"hi\"\n    v1 = td[\"x\"]\ndef func3(td: TD1 | TD2, opt: bool):\n    if opt:\n        td[\"x\"] = \"hi\"\n    # This should generate an error because \"x\" is not required in TD1.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "def func2(td: TD1 | TD2):\n    td[\"x\"] = \"hi\"\n    v1 = td[\"x\"]\ndef func3(td: TD1 | TD2, opt: bool):\n    if opt:\n        td[\"x\"] = \"hi\"\n    # This should generate an error because \"x\" is not required in TD1.\n    v1 = td[\"x\"]\ndef func4(td: TD1 | TD2, opt: bool):\n    if opt:",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "def func3(td: TD1 | TD2, opt: bool):\n    if opt:\n        td[\"x\"] = \"hi\"\n    # This should generate an error because \"x\" is not required in TD1.\n    v1 = td[\"x\"]\ndef func4(td: TD1 | TD2, opt: bool):\n    if opt:\n        td[\"x\"] = \"hi\"\n    else:\n        td[\"x\"] = \"hi\"",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "def func4(td: TD1 | TD2, opt: bool):\n    if opt:\n        td[\"x\"] = \"hi\"\n    else:\n        td[\"x\"] = \"hi\"\n    v1 = td[\"x\"]\nclass TD3(TypedDict):\n    x: str\n    y: NotRequired[int]\ndef accepts_td3(**args: Unpack[TD3]):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "accepts_td3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "def accepts_td3(**args: Unpack[TD3]):\n    pass\ndef func5(td: TD3, cond: bool):\n    if cond:\n        td[\"y\"] = 5\n    accepts_td3(**td)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict19",
        "description": "packages.pyright-internal.src.tests.samples.typedDict19",
        "peekOfCode": "def func5(td: TD3, cond: bool):\n    if cond:\n        td[\"y\"] = 5\n    accepts_td3(**td)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict19",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typedDict2",
        "peekOfCode": "class Movie(TypedDict, total=False):\n    name: str\n    year: int\nclass BookBasedMovie(Movie, total=True):\n    based_on: str\ndef get_movie_name(movie: Movie):\n    return movie.get(\"name\")\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict2",
        "documentation": {}
    },
    {
        "label": "BookBasedMovie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typedDict2",
        "peekOfCode": "class BookBasedMovie(Movie, total=True):\n    based_on: str\ndef get_movie_name(movie: Movie):\n    return movie.get(\"name\")\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict2",
        "documentation": {}
    },
    {
        "label": "get_movie_name",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typedDict2",
        "peekOfCode": "def get_movie_name(movie: Movie):\n    return movie.get(\"name\")\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",\n}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict2",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typedDict2",
        "peekOfCode": "name2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",\n}\nmovie3: Movie = {\"name\": \"Blade Runner\"}\nmovie4: Movie = {",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict2",
        "documentation": {}
    },
    {
        "label": "GroupsSettingsDict",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict20",
        "description": "packages.pyright-internal.src.tests.samples.typedDict20",
        "peekOfCode": "class GroupsSettingsDict(TypedDict, total=False):\n    a: bool | None\n    b: bool | None\n    c: bool | None\n    d: bool | None\n    e: bool | None\n    f: bool | None\n    g: bool | None\n    h: bool | None\n    i: bool | None",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict20",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict20",
        "description": "packages.pyright-internal.src.tests.samples.typedDict20",
        "peekOfCode": "def foo() -> None:\n    settings: GroupsSettingsDict = {}\n    if \"a\" in settings:\n        settings[\"a\"]\n    if \"b\" in settings:\n        settings[\"b\"]\n    if \"c\" in settings:\n        settings[\"c\"]\n    if \"d\" in settings:\n        settings[\"d\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict20",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict21",
        "description": "packages.pyright-internal.src.tests.samples.typedDict21",
        "peekOfCode": "class TD1(TypedDict):\n    v1: Required[int]\nclass TD2(TypedDict):\n    v2: Required[str]\nclass TD3(TypedDict):\n    v1: NotRequired[int]\nclass TD4(TD1, TD2):\n    ...\ntd1: TD1 = {\"v1\": 0}\ntd2: TD2 = {\"v2\": \"\"}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict21",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict21",
        "description": "packages.pyright-internal.src.tests.samples.typedDict21",
        "peekOfCode": "class TD2(TypedDict):\n    v2: Required[str]\nclass TD3(TypedDict):\n    v1: NotRequired[int]\nclass TD4(TD1, TD2):\n    ...\ntd1: TD1 = {\"v1\": 0}\ntd2: TD2 = {\"v2\": \"\"}\ntd3_1: TD3 = {}\ntd3_2: TD3 = {\"v1\": 0}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict21",
        "documentation": {}
    },
    {
        "label": "TD3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict21",
        "description": "packages.pyright-internal.src.tests.samples.typedDict21",
        "peekOfCode": "class TD3(TypedDict):\n    v1: NotRequired[int]\nclass TD4(TD1, TD2):\n    ...\ntd1: TD1 = {\"v1\": 0}\ntd2: TD2 = {\"v2\": \"\"}\ntd3_1: TD3 = {}\ntd3_2: TD3 = {\"v1\": 0}\ntd4_1: TD4 = {**td1, **td2}\n# This should generate an error because td3_1",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict21",
        "documentation": {}
    },
    {
        "label": "TD4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict21",
        "description": "packages.pyright-internal.src.tests.samples.typedDict21",
        "peekOfCode": "class TD4(TD1, TD2):\n    ...\ntd1: TD1 = {\"v1\": 0}\ntd2: TD2 = {\"v2\": \"\"}\ntd3_1: TD3 = {}\ntd3_2: TD3 = {\"v1\": 0}\ntd4_1: TD4 = {**td1, **td2}\n# This should generate an error because td3_1\n# does not include the required \"v1\" entry.\ntd4_2: TD4 = {**td3_1, **td2}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict21",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "class Movie(TypedDict, total=False):\n    name: str\n    year: int\nclass BookBasedMovie(Movie, total=True):\n    based_on: str\nmovie1 = Movie(year=1982, name=\"Blade Runner\")\n# This should generate an error because\n# the type is incorrect.\nmovie2 = Movie(name=\"Blade Runner\", year=\"1982\")\nmovie3 = Movie(name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "BookBasedMovie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "class BookBasedMovie(Movie, total=True):\n    based_on: str\nmovie1 = Movie(year=1982, name=\"Blade Runner\")\n# This should generate an error because\n# the type is incorrect.\nmovie2 = Movie(name=\"Blade Runner\", year=\"1982\")\nmovie3 = Movie(name=\"Blade Runner\")\n# This should generate an error because\n# the key name is not supported.\nmovie4 = Movie(name2=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "movie1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "movie1 = Movie(year=1982, name=\"Blade Runner\")\n# This should generate an error because\n# the type is incorrect.\nmovie2 = Movie(name=\"Blade Runner\", year=\"1982\")\nmovie3 = Movie(name=\"Blade Runner\")\n# This should generate an error because\n# the key name is not supported.\nmovie4 = Movie(name2=\"Blade Runner\")\nbook1 = BookBasedMovie(year=1979, name=\"Moonraker\", based_on=\"Moonraker\")\nbook2 = BookBasedMovie(based_on=\"Moonraker\", year=1979)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "movie2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "movie2 = Movie(name=\"Blade Runner\", year=\"1982\")\nmovie3 = Movie(name=\"Blade Runner\")\n# This should generate an error because\n# the key name is not supported.\nmovie4 = Movie(name2=\"Blade Runner\")\nbook1 = BookBasedMovie(year=1979, name=\"Moonraker\", based_on=\"Moonraker\")\nbook2 = BookBasedMovie(based_on=\"Moonraker\", year=1979)\nbook3 = BookBasedMovie(based_on=\"Moonraker\")\n# This should generate an error because 'author' isn't\n# a defined field.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "movie3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "movie3 = Movie(name=\"Blade Runner\")\n# This should generate an error because\n# the key name is not supported.\nmovie4 = Movie(name2=\"Blade Runner\")\nbook1 = BookBasedMovie(year=1979, name=\"Moonraker\", based_on=\"Moonraker\")\nbook2 = BookBasedMovie(based_on=\"Moonraker\", year=1979)\nbook3 = BookBasedMovie(based_on=\"Moonraker\")\n# This should generate an error because 'author' isn't\n# a defined field.\nbook4 = BookBasedMovie(based_on=\"Moonraker\", author=\"Ian Fleming\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "movie4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "movie4 = Movie(name2=\"Blade Runner\")\nbook1 = BookBasedMovie(year=1979, name=\"Moonraker\", based_on=\"Moonraker\")\nbook2 = BookBasedMovie(based_on=\"Moonraker\", year=1979)\nbook3 = BookBasedMovie(based_on=\"Moonraker\")\n# This should generate an error because 'author' isn't\n# a defined field.\nbook4 = BookBasedMovie(based_on=\"Moonraker\", author=\"Ian Fleming\")\n# This should generate an error because 'based_on' is\n# a required field, and it's not provided.\nbook5 = BookBasedMovie(year=1982, name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "book1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "book1 = BookBasedMovie(year=1979, name=\"Moonraker\", based_on=\"Moonraker\")\nbook2 = BookBasedMovie(based_on=\"Moonraker\", year=1979)\nbook3 = BookBasedMovie(based_on=\"Moonraker\")\n# This should generate an error because 'author' isn't\n# a defined field.\nbook4 = BookBasedMovie(based_on=\"Moonraker\", author=\"Ian Fleming\")\n# This should generate an error because 'based_on' is\n# a required field, and it's not provided.\nbook5 = BookBasedMovie(year=1982, name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "book2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "book2 = BookBasedMovie(based_on=\"Moonraker\", year=1979)\nbook3 = BookBasedMovie(based_on=\"Moonraker\")\n# This should generate an error because 'author' isn't\n# a defined field.\nbook4 = BookBasedMovie(based_on=\"Moonraker\", author=\"Ian Fleming\")\n# This should generate an error because 'based_on' is\n# a required field, and it's not provided.\nbook5 = BookBasedMovie(year=1982, name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "book3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "book3 = BookBasedMovie(based_on=\"Moonraker\")\n# This should generate an error because 'author' isn't\n# a defined field.\nbook4 = BookBasedMovie(based_on=\"Moonraker\", author=\"Ian Fleming\")\n# This should generate an error because 'based_on' is\n# a required field, and it's not provided.\nbook5 = BookBasedMovie(year=1982, name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "book4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "book4 = BookBasedMovie(based_on=\"Moonraker\", author=\"Ian Fleming\")\n# This should generate an error because 'based_on' is\n# a required field, and it's not provided.\nbook5 = BookBasedMovie(year=1982, name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "book5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typedDict3",
        "peekOfCode": "book5 = BookBasedMovie(year=1982, name=\"Blade Runner\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict3",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "class Movie(TypedDict, total=False):\n    name: str\n    year: int\nclass BookBasedMovie(Movie, total=True):\n    based_on: str\nmovie1 = Movie(name=\"Blade Runner\", year=1982)\ndef get_value(movie: Movie, key: Literal[\"year\", \"name\"]) -> Optional[Union[int, str]]:\n    if \"year\" in movie and \"name\" in movie:\n        return movie[key]\ndef make_movie(name: str, year: int) -> Movie:",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "BookBasedMovie",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "class BookBasedMovie(Movie, total=True):\n    based_on: str\nmovie1 = Movie(name=\"Blade Runner\", year=1982)\ndef get_value(movie: Movie, key: Literal[\"year\", \"name\"]) -> Optional[Union[int, str]]:\n    if \"year\" in movie and \"name\" in movie:\n        return movie[key]\ndef make_movie(name: str, year: int) -> Movie:\n    return {\"name\": name, \"year\": year}\nname1 = movie1.get(\"name\", \"Blue Nile\")\nyear1 = movie1.get(\"year\", 1921)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "get_value",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "def get_value(movie: Movie, key: Literal[\"year\", \"name\"]) -> Optional[Union[int, str]]:\n    if \"year\" in movie and \"name\" in movie:\n        return movie[key]\ndef make_movie(name: str, year: int) -> Movie:\n    return {\"name\": name, \"year\": year}\nname1 = movie1.get(\"name\", \"Blue Nile\")\nyear1 = movie1.get(\"year\", 1921)\nmovie2 = make_movie(name1, year1)\n# This should generate an error because all indices need\n# to be string literals.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "make_movie",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "def make_movie(name: str, year: int) -> Movie:\n    return {\"name\": name, \"year\": year}\nname1 = movie1.get(\"name\", \"Blue Nile\")\nyear1 = movie1.get(\"year\", 1921)\nmovie2 = make_movie(name1, year1)\n# This should generate an error because all indices need\n# to be string literals.\nyear2 = movie1[3]\n# This should generate an error because only one index\n# is allowed.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie1 = Movie(name=\"Blade Runner\", year=1982)\ndef get_value(movie: Movie, key: Literal[\"year\", \"name\"]) -> Optional[Union[int, str]]:\n    if \"year\" in movie and \"name\" in movie:\n        return movie[key]\ndef make_movie(name: str, year: int) -> Movie:\n    return {\"name\": name, \"year\": year}\nname1 = movie1.get(\"name\", \"Blue Nile\")\nyear1 = movie1.get(\"year\", 1921)\nmovie2 = make_movie(name1, year1)\n# This should generate an error because all indices need",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "name1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "name1 = movie1.get(\"name\", \"Blue Nile\")\nyear1 = movie1.get(\"year\", 1921)\nmovie2 = make_movie(name1, year1)\n# This should generate an error because all indices need\n# to be string literals.\nyear2 = movie1[3]\n# This should generate an error because only one index\n# is allowed.\nyear3 = movie1[3, 3]\nmovie1[\"name\"] = \"Transformers\"",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "year1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "year1 = movie1.get(\"year\", 1921)\nmovie2 = make_movie(name1, year1)\n# This should generate an error because all indices need\n# to be string literals.\nyear2 = movie1[3]\n# This should generate an error because only one index\n# is allowed.\nyear3 = movie1[3, 3]\nmovie1[\"name\"] = \"Transformers\"\nmovie1[\"year\"] = 2007",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie2 = make_movie(name1, year1)\n# This should generate an error because all indices need\n# to be string literals.\nyear2 = movie1[3]\n# This should generate an error because only one index\n# is allowed.\nyear3 = movie1[3, 3]\nmovie1[\"name\"] = \"Transformers\"\nmovie1[\"year\"] = 2007\n# This should generate an error because the RHS is the wrong type.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "year2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "year2 = movie1[3]\n# This should generate an error because only one index\n# is allowed.\nyear3 = movie1[3, 3]\nmovie1[\"name\"] = \"Transformers\"\nmovie1[\"year\"] = 2007\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"name\"] = [3]\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"year\"] = {}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "year3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "year3 = movie1[3, 3]\nmovie1[\"name\"] = \"Transformers\"\nmovie1[\"year\"] = 2007\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"name\"] = [3]\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"year\"] = {}\ndel movie1[\"year\"]\n# This should generate an error because the key is not in the dictionary.\ndel movie1[\"year2\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie1[\"name\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie1[\"name\"] = \"Transformers\"\nmovie1[\"year\"] = 2007\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"name\"] = [3]\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"year\"] = {}\ndel movie1[\"year\"]\n# This should generate an error because the key is not in the dictionary.\ndel movie1[\"year2\"]\n# This should generate an error because entries in a TypedDict",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie1[\"year\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie1[\"year\"] = 2007\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"name\"] = [3]\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"year\"] = {}\ndel movie1[\"year\"]\n# This should generate an error because the key is not in the dictionary.\ndel movie1[\"year2\"]\n# This should generate an error because entries in a TypedDict\n# are not accessible through member access.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie1[\"name\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie1[\"name\"] = [3]\n# This should generate an error because the RHS is the wrong type.\nmovie1[\"year\"] = {}\ndel movie1[\"year\"]\n# This should generate an error because the key is not in the dictionary.\ndel movie1[\"year2\"]\n# This should generate an error because entries in a TypedDict\n# are not accessible through member access.\nname2 = movie1.name\nbook1 = BookBasedMovie(based_on=\"E.T.\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie1[\"year\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie1[\"year\"] = {}\ndel movie1[\"year\"]\n# This should generate an error because the key is not in the dictionary.\ndel movie1[\"year2\"]\n# This should generate an error because entries in a TypedDict\n# are not accessible through member access.\nname2 = movie1.name\nbook1 = BookBasedMovie(based_on=\"E.T.\")\nmake_movie(name=book1[\"based_on\"], year=1923)\ndel book1[\"name\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "name2 = movie1.name\nbook1 = BookBasedMovie(based_on=\"E.T.\")\nmake_movie(name=book1[\"based_on\"], year=1923)\ndel book1[\"name\"]\n# This should generate an error because you can't delete a required key.\ndel book1[\"based_on\"]\n# Make sure \"in\" operator works with TypedDict.\nmovie3 = Movie()\nif \"d\" in movie3:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "book1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "book1 = BookBasedMovie(based_on=\"E.T.\")\nmake_movie(name=book1[\"based_on\"], year=1923)\ndel book1[\"name\"]\n# This should generate an error because you can't delete a required key.\ndel book1[\"based_on\"]\n# Make sure \"in\" operator works with TypedDict.\nmovie3 = Movie()\nif \"d\" in movie3:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "movie3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict4",
        "description": "packages.pyright-internal.src.tests.samples.typedDict4",
        "peekOfCode": "movie3 = Movie()\nif \"d\" in movie3:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict4",
        "documentation": {}
    },
    {
        "label": "Movie1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "class Movie1(TypedDict, total=False):\n    name: str\n    year: int\nclass Movie2(TypedDict, total=False):\n    name: str\n    year: int\nclass Movie3(TypedDict, total=True):\n    name: str\n    year: int\nclass Movie4(TypedDict, total=True):",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "Movie2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "class Movie2(TypedDict, total=False):\n    name: str\n    year: int\nclass Movie3(TypedDict, total=True):\n    name: str\n    year: int\nclass Movie4(TypedDict, total=True):\n    name: str\n    year: int\n    earnings: float",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "Movie3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "class Movie3(TypedDict, total=True):\n    name: str\n    year: int\nclass Movie4(TypedDict, total=True):\n    name: str\n    year: int\n    earnings: float\nmovie1: Movie1 = Movie2(name=\"hello\", year=1971)\n# This should generate an error because\n# items are required in Movie3 but not Movie2.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "Movie4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "class Movie4(TypedDict, total=True):\n    name: str\n    year: int\n    earnings: float\nmovie1: Movie1 = Movie2(name=\"hello\", year=1971)\n# This should generate an error because\n# items are required in Movie3 but not Movie2.\nmovie2: Movie2 = Movie3(name=\"hello\", year=1971)\n# This should generate an error because\n# items are required in Movie3 but not Movie2.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "movie6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "movie6 = Movie2(name=\"hello\", year=1971)\nmovie6[\"name\"] = \"goodbye\"\nmovie7 = {\"name\": \"hello\", \"year\": 1971}\nmovie7[\"name\"] = \"goodbye\"\nmovie8: Movie2 = {\"year\": 1981, \"name\": \"test\"}\nmovie8[\"year\"] = 1982",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "movie6[\"name\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "movie6[\"name\"] = \"goodbye\"\nmovie7 = {\"name\": \"hello\", \"year\": 1971}\nmovie7[\"name\"] = \"goodbye\"\nmovie8: Movie2 = {\"year\": 1981, \"name\": \"test\"}\nmovie8[\"year\"] = 1982",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "movie7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "movie7 = {\"name\": \"hello\", \"year\": 1971}\nmovie7[\"name\"] = \"goodbye\"\nmovie8: Movie2 = {\"year\": 1981, \"name\": \"test\"}\nmovie8[\"year\"] = 1982",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "movie7[\"name\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "movie7[\"name\"] = \"goodbye\"\nmovie8: Movie2 = {\"year\": 1981, \"name\": \"test\"}\nmovie8[\"year\"] = 1982",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "movie8[\"year\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict5",
        "description": "packages.pyright-internal.src.tests.samples.typedDict5",
        "peekOfCode": "movie8[\"year\"] = 1982",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict5",
        "documentation": {}
    },
    {
        "label": "get_movie_name",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "def get_movie_name(movie: Movie):\n    return movie[\"name\"]\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",\n}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "def foo(unknown_str_value: str):\n    a = movie5[unknown_str_value]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie = TypedDict(\"Movie\", {\"name\": str, \"year\": int})\n# This should generate an error because\n# the arguments are missing.\nMovie2 = TypedDict()\n# This should generate an error because\n# the arguments are missing.\nMovie3 = TypedDict(\"Movie3\")\n# This should generate an error because\n# the argument type is wrong.\nMovie4 = TypedDict(\"Movie4\", 3)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie2 = TypedDict()\n# This should generate an error because\n# the arguments are missing.\nMovie3 = TypedDict(\"Movie3\")\n# This should generate an error because\n# the argument type is wrong.\nMovie4 = TypedDict(\"Movie4\", 3)\n# This should generate an error because\n# the argument type is wrong.\nMovie5 = TypedDict(3, {})",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie3 = TypedDict(\"Movie3\")\n# This should generate an error because\n# the argument type is wrong.\nMovie4 = TypedDict(\"Movie4\", 3)\n# This should generate an error because\n# the argument type is wrong.\nMovie5 = TypedDict(3, {})\nMovie6 = TypedDict(\"Movie6\", {}, total=False)\nMovie7 = TypedDict(\"Movie7\", {}, total=True)\n# This should generate an error because the total param",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie4 = TypedDict(\"Movie4\", 3)\n# This should generate an error because\n# the argument type is wrong.\nMovie5 = TypedDict(3, {})\nMovie6 = TypedDict(\"Movie6\", {}, total=False)\nMovie7 = TypedDict(\"Movie7\", {}, total=True)\n# This should generate an error because the total param\n# accepts only True or False.\nMovie8 = TypedDict(\"Movie8\", {}, total=3)\n# This should generate an error because the third arg",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie5 = TypedDict(3, {})\nMovie6 = TypedDict(\"Movie6\", {}, total=False)\nMovie7 = TypedDict(\"Movie7\", {}, total=True)\n# This should generate an error because the total param\n# accepts only True or False.\nMovie8 = TypedDict(\"Movie8\", {}, total=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie9 = TypedDict(\"Movie9\", {}, random=3)\n# This should generate an error because the third arg",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie6 = TypedDict(\"Movie6\", {}, total=False)\nMovie7 = TypedDict(\"Movie7\", {}, total=True)\n# This should generate an error because the total param\n# accepts only True or False.\nMovie8 = TypedDict(\"Movie8\", {}, total=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie9 = TypedDict(\"Movie9\", {}, random=3)\n# This should generate an error because the third arg\n# is unknown.",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie7 = TypedDict(\"Movie7\", {}, total=True)\n# This should generate an error because the total param\n# accepts only True or False.\nMovie8 = TypedDict(\"Movie8\", {}, total=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie9 = TypedDict(\"Movie9\", {}, random=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie10 = TypedDict(\"Movie10\", {}, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie8 = TypedDict(\"Movie8\", {}, total=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie9 = TypedDict(\"Movie9\", {}, random=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie10 = TypedDict(\"Movie10\", {}, 3)\n# This should generate an error because a fourth arg\n# is not supported.\nMovie11 = TypedDict(\"Movie11\", {}, total=True, foo=3)",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie9",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie9 = TypedDict(\"Movie9\", {}, random=3)\n# This should generate an error because the third arg\n# is unknown.\nMovie10 = TypedDict(\"Movie10\", {}, 3)\n# This should generate an error because a fourth arg\n# is not supported.\nMovie11 = TypedDict(\"Movie11\", {}, total=True, foo=3)\ndef get_movie_name(movie: Movie):\n    return movie[\"name\"]\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie10",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie10 = TypedDict(\"Movie10\", {}, 3)\n# This should generate an error because a fourth arg\n# is not supported.\nMovie11 = TypedDict(\"Movie11\", {}, total=True, foo=3)\ndef get_movie_name(movie: Movie):\n    return movie[\"name\"]\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "Movie11",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "Movie11 = TypedDict(\"Movie11\", {}, total=True, foo=3)\ndef get_movie_name(movie: Movie):\n    return movie[\"name\"]\nname2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "name2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "name2 = get_movie_name({\"name\": \"ET\", \"year\": 1982})\nmovie1: Movie = {\"name\": \"Blade Runner\", \"year\": 1982}\nmovie2: Movie = {\n    \"name\": \"Blade Runner\",\n    # This should generate an error because\n    # the type is incorrect.\n    \"year\": \"1982\",\n}\nmovie3: Movie = {\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "MovieNotTotal",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict6",
        "description": "packages.pyright-internal.src.tests.samples.typedDict6",
        "peekOfCode": "MovieNotTotal = TypedDict(\"MovieNotTotal\", {\"name\": str, \"year\": int}, total=False)\nmovie5: MovieNotTotal = {\"name\": \"Blade Runner\"}\ndef foo(unknown_str_value: str):\n    a = movie5[unknown_str_value]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict6",
        "documentation": {}
    },
    {
        "label": "UserType1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict7",
        "description": "packages.pyright-internal.src.tests.samples.typedDict7",
        "peekOfCode": "UserType1 = TypedDict(\"UserType1\", {\"name\": str, \"age\": int}, total=False)\nuser1: UserType1 = {\"name\": \"Bob\", \"age\": 40}\nname1: str = user1.get(\"name\", \"n/a\")\nage1: int = user1.get(\"age\", 42)\nUserType2 = TypedDict(\"UserType2\", name=str, age=int)\nuser2: UserType2 = {\"name\": \"Bob\", \"age\": 40}\nname2: Union[str, None] = user2.get(\"name\")\nname3: str = user2.get(\"name\")\nage2: int = user2.get(\"age\", 42)\nage3: Union[int, str] = user2.get(\"age\", \"42\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict7",
        "documentation": {}
    },
    {
        "label": "UserType2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict7",
        "description": "packages.pyright-internal.src.tests.samples.typedDict7",
        "peekOfCode": "UserType2 = TypedDict(\"UserType2\", name=str, age=int)\nuser2: UserType2 = {\"name\": \"Bob\", \"age\": 40}\nname2: Union[str, None] = user2.get(\"name\")\nname3: str = user2.get(\"name\")\nage2: int = user2.get(\"age\", 42)\nage3: Union[int, str] = user2.get(\"age\", \"42\")\nage4: int = user2.get(\"age\", \"42\")",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict7",
        "documentation": {}
    },
    {
        "label": "Entry",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict8",
        "description": "packages.pyright-internal.src.tests.samples.typedDict8",
        "peekOfCode": "class Entry(TypedDict):\n    index: int\n    value: str\nentries1: List[Entry] = [{\"index\": 2, \"value\": \"a\"}, {\"index\": 5, \"value\": \"b\"}]\n# This should generate an error\nentries2: List[Entry] = [{\"index\": 2, \"value\": \"a\"}, {\"index\": \"2\", \"value\": \"b\"}]\n# This should generate an error\nentries3: List[Entry] = [{\"index\": 2, \"value\": \"a\"}, 3]",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict8",
        "documentation": {}
    },
    {
        "label": "Inner1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict9",
        "description": "packages.pyright-internal.src.tests.samples.typedDict9",
        "peekOfCode": "class Inner1(TypedDict):\n    inner_key: str\nclass Inner2(TypedDict):\n    inner_key: Inner1\nclass Outer(TypedDict):\n    outer_key: Inner2\no1: Outer = {\"outer_key\": {\"inner_key\": {\"inner_key\": \"hi\"}}}\n# This should generate an error because the inner-most value\n# should be a string.\no2: Outer = {\"outer_key\": {\"inner_key\": {\"inner_key\": 1}}}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict9",
        "documentation": {}
    },
    {
        "label": "Inner2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict9",
        "description": "packages.pyright-internal.src.tests.samples.typedDict9",
        "peekOfCode": "class Inner2(TypedDict):\n    inner_key: Inner1\nclass Outer(TypedDict):\n    outer_key: Inner2\no1: Outer = {\"outer_key\": {\"inner_key\": {\"inner_key\": \"hi\"}}}\n# This should generate an error because the inner-most value\n# should be a string.\no2: Outer = {\"outer_key\": {\"inner_key\": {\"inner_key\": 1}}}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict9",
        "documentation": {}
    },
    {
        "label": "Outer",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typedDict9",
        "description": "packages.pyright-internal.src.tests.samples.typedDict9",
        "peekOfCode": "class Outer(TypedDict):\n    outer_key: Inner2\no1: Outer = {\"outer_key\": {\"inner_key\": {\"inner_key\": \"hi\"}}}\n# This should generate an error because the inner-most value\n# should be a string.\no2: Outer = {\"outer_key\": {\"inner_key\": {\"inner_key\": 1}}}",
        "detail": "packages.pyright-internal.src.tests.samples.typedDict9",
        "documentation": {}
    },
    {
        "label": "is_two_element_tuple",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def is_two_element_tuple(a: Tuple[_T, ...]) -> TypeGuard[Tuple[_T, _T]]:\n    return True\ndef func1(a: Tuple[int, ...]):\n    if is_two_element_tuple(a):\n        reveal_type(a, expected_text=\"Tuple[int, int]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[int, ...]\")\ndef is_string_list(val: List[Any], allow_zero_entries: bool) -> TypeGuard[List[str]]:\n    if allow_zero_entries and len(val) == 0:\n        return True",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def func1(a: Tuple[int, ...]):\n    if is_two_element_tuple(a):\n        reveal_type(a, expected_text=\"Tuple[int, int]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[int, ...]\")\ndef is_string_list(val: List[Any], allow_zero_entries: bool) -> TypeGuard[List[str]]:\n    if allow_zero_entries and len(val) == 0:\n        return True\n    return all(isinstance(x, str) for x in val)\ndef func2(a: List[Union[str, int]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "is_string_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def is_string_list(val: List[Any], allow_zero_entries: bool) -> TypeGuard[List[str]]:\n    if allow_zero_entries and len(val) == 0:\n        return True\n    return all(isinstance(x, str) for x in val)\ndef func2(a: List[Union[str, int]]):\n    if is_string_list(a, True):\n        reveal_type(a, expected_text=\"List[str]\")\n    else:\n        reveal_type(a, expected_text=\"List[str | int]\")\n# This should generate an error because TypeGuard",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def func2(a: List[Union[str, int]]):\n    if is_string_list(a, True):\n        reveal_type(a, expected_text=\"List[str]\")\n    else:\n        reveal_type(a, expected_text=\"List[str | int]\")\n# This should generate an error because TypeGuard\n# has no type argument.\ndef bad1(a: int, b: object) -> TypeGuard:\n    # This is a runtime use of TypeGuard and shouldn't generate an error.\n    if b is TypeGuard:",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "bad1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def bad1(a: int, b: object) -> TypeGuard:\n    # This is a runtime use of TypeGuard and shouldn't generate an error.\n    if b is TypeGuard:\n        return True\n    return True\n# This should generate an error because TypeGuard\n# has too many type arguments.\ndef bad2(a: int) -> TypeGuard[str, int]:\n    return True\n# This should generate an error because TypeGuard",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "bad2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def bad2(a: int) -> TypeGuard[str, int]:\n    return True\n# This should generate an error because TypeGuard\n# does not accept an ellipsis.\ndef bad3(a: int) -> TypeGuard[...]:\n    return True\n# This should generate an error because TypeGuard\n# has does not accept a module.\ndef bad4(a: int) -> TypeGuard[os]:\n    return True",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "bad3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def bad3(a: int) -> TypeGuard[...]:\n    return True\n# This should generate an error because TypeGuard\n# has does not accept a module.\ndef bad4(a: int) -> TypeGuard[os]:\n    return True\ndef bad5(a: int) -> TypeGuard[int]:\n    # This should generate an error because only\n    # bool values can be returned.\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "bad4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def bad4(a: int) -> TypeGuard[os]:\n    return True\ndef bad5(a: int) -> TypeGuard[int]:\n    # This should generate an error because only\n    # bool values can be returned.\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "bad5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "def bad5(a: int) -> TypeGuard[int]:\n    # This should generate an error because only\n    # bool values can be returned.\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef is_two_element_tuple(a: Tuple[_T, ...]) -> TypeGuard[Tuple[_T, _T]]:\n    return True\ndef func1(a: Tuple[int, ...]):\n    if is_two_element_tuple(a):\n        reveal_type(a, expected_text=\"Tuple[int, int]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[int, ...]\")\ndef is_string_list(val: List[Any], allow_zero_entries: bool) -> TypeGuard[List[str]]:\n    if allow_zero_entries and len(val) == 0:",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard1",
        "documentation": {}
    },
    {
        "label": "cb1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "def cb1(obj: object) -> TypeGuard[int]:\n    ...\ndef cb2(obj: object) -> bool:\n    ...\ndef simple_filter(list: Sequence[object], fn: Callable[[object], bool]) -> List[object]:\n    ...\n@overload\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], TypeGuard[_T]]\n) -> Sequence[_T]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "cb2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "def cb2(obj: object) -> bool:\n    ...\ndef simple_filter(list: Sequence[object], fn: Callable[[object], bool]) -> List[object]:\n    ...\n@overload\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], TypeGuard[_T]]\n) -> Sequence[_T]:\n    ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "simple_filter",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "def simple_filter(list: Sequence[object], fn: Callable[[object], bool]) -> List[object]:\n    ...\n@overload\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], TypeGuard[_T]]\n) -> Sequence[_T]:\n    ...\n@overload\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], bool]",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "overloaded_filter",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "def overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], TypeGuard[_T]]\n) -> Sequence[_T]:\n    ...\n@overload\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], bool]\n) -> Sequence[object]:\n    ...\ndef overloaded_filter(",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "overloaded_filter",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "def overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], bool]\n) -> Sequence[object]:\n    ...\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], Any]\n) -> Sequence[Any]:\n    ...\nx1 = cb1(1)\nreveal_type(x1, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "overloaded_filter",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "def overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], Any]\n) -> Sequence[Any]:\n    ...\nx1 = cb1(1)\nreveal_type(x1, expected_text=\"bool\")\nsf1 = simple_filter([], cb1)\nreveal_type(sf1, expected_text=\"List[object]\")\nsf2 = simple_filter([], cb2)\nreveal_type(sf2, expected_text=\"List[object]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "_T = TypeVar(\"_T\")\ndef cb1(obj: object) -> TypeGuard[int]:\n    ...\ndef cb2(obj: object) -> bool:\n    ...\ndef simple_filter(list: Sequence[object], fn: Callable[[object], bool]) -> List[object]:\n    ...\n@overload\ndef overloaded_filter(\n    list: Sequence[object], fn: Callable[[object], TypeGuard[_T]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "x1 = cb1(1)\nreveal_type(x1, expected_text=\"bool\")\nsf1 = simple_filter([], cb1)\nreveal_type(sf1, expected_text=\"List[object]\")\nsf2 = simple_filter([], cb2)\nreveal_type(sf2, expected_text=\"List[object]\")\nof1 = overloaded_filter([], cb1)\nreveal_type(of1, expected_text=\"Sequence[int]\")\nof2 = overloaded_filter([], cb2)\nreveal_type(of2, expected_text=\"Sequence[object]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "sf1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "sf1 = simple_filter([], cb1)\nreveal_type(sf1, expected_text=\"List[object]\")\nsf2 = simple_filter([], cb2)\nreveal_type(sf2, expected_text=\"List[object]\")\nof1 = overloaded_filter([], cb1)\nreveal_type(of1, expected_text=\"Sequence[int]\")\nof2 = overloaded_filter([], cb2)\nreveal_type(of2, expected_text=\"Sequence[object]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "sf2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "sf2 = simple_filter([], cb2)\nreveal_type(sf2, expected_text=\"List[object]\")\nof1 = overloaded_filter([], cb1)\nreveal_type(of1, expected_text=\"Sequence[int]\")\nof2 = overloaded_filter([], cb2)\nreveal_type(of2, expected_text=\"Sequence[object]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "of1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "of1 = overloaded_filter([], cb1)\nreveal_type(of1, expected_text=\"Sequence[int]\")\nof2 = overloaded_filter([], cb2)\nreveal_type(of2, expected_text=\"Sequence[object]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "of2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "peekOfCode": "of2 = overloaded_filter([], cb2)\nreveal_type(of2, expected_text=\"Sequence[object]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard2",
        "documentation": {}
    },
    {
        "label": "Animal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "class Animal:\n    ...\nclass Kangaroo(Animal):\n    ...\nclass Koala(Animal):\n    ...\nT = TypeVar(\"T\")\ndef is_marsupial(val: Animal) -> StrictTypeGuard[Kangaroo | Koala]:\n    return isinstance(val, Kangaroo | Koala)\n# This should generate an error because list[T] isn't assignable to list[T | None].",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "Kangaroo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "class Kangaroo(Animal):\n    ...\nclass Koala(Animal):\n    ...\nT = TypeVar(\"T\")\ndef is_marsupial(val: Animal) -> StrictTypeGuard[Kangaroo | Koala]:\n    return isinstance(val, Kangaroo | Koala)\n# This should generate an error because list[T] isn't assignable to list[T | None].\ndef has_no_nones(\n    val: list[T | None],",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "Koala",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "class Koala(Animal):\n    ...\nT = TypeVar(\"T\")\ndef is_marsupial(val: Animal) -> StrictTypeGuard[Kangaroo | Koala]:\n    return isinstance(val, Kangaroo | Koala)\n# This should generate an error because list[T] isn't assignable to list[T | None].\ndef has_no_nones(\n    val: list[T | None],\n) -> StrictTypeGuard[list[T]]:\n    return None not in val",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "is_str1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def is_str1(val: Union[str, int]) -> StrictTypeGuard[str]:\n    return isinstance(val, str)\ndef func1(val: Union[str, int]):\n    if is_str1(val):\n        reveal_type(val, expected_text=\"str\")\n    else:\n        reveal_type(val, expected_text=\"int\")\ndef is_true(o: object) -> StrictTypeGuard[Literal[True]]:\n    ...\ndef func2(val: bool):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def func1(val: Union[str, int]):\n    if is_str1(val):\n        reveal_type(val, expected_text=\"str\")\n    else:\n        reveal_type(val, expected_text=\"int\")\ndef is_true(o: object) -> StrictTypeGuard[Literal[True]]:\n    ...\ndef func2(val: bool):\n    if not is_true(val):\n        reveal_type(val, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "is_true",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def is_true(o: object) -> StrictTypeGuard[Literal[True]]:\n    ...\ndef func2(val: bool):\n    if not is_true(val):\n        reveal_type(val, expected_text=\"bool\")\n    else:\n        reveal_type(val, expected_text=\"Literal[True]\")\n    reveal_type(val, expected_text=\"bool\")\ndef is_list(val: object) -> StrictTypeGuard[list[Any]]:\n    return isinstance(val, list)",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def func2(val: bool):\n    if not is_true(val):\n        reveal_type(val, expected_text=\"bool\")\n    else:\n        reveal_type(val, expected_text=\"Literal[True]\")\n    reveal_type(val, expected_text=\"bool\")\ndef is_list(val: object) -> StrictTypeGuard[list[Any]]:\n    return isinstance(val, list)\ndef func3(val: dict[str, str] | list[str] | list[int] | Sequence[int]):\n    if is_list(val):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "is_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def is_list(val: object) -> StrictTypeGuard[list[Any]]:\n    return isinstance(val, list)\ndef func3(val: dict[str, str] | list[str] | list[int] | Sequence[int]):\n    if is_list(val):\n        reveal_type(val, expected_text=\"list[str] | list[int] | list[Any]\")\n    else:\n        reveal_type(val, expected_text=\"dict[str, str] | Sequence[int]\")\ndef func4(val: dict[str, str] | list[str] | list[int] | tuple[int]):\n    if is_list(val):\n        reveal_type(val, expected_text=\"list[str] | list[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def func3(val: dict[str, str] | list[str] | list[int] | Sequence[int]):\n    if is_list(val):\n        reveal_type(val, expected_text=\"list[str] | list[int] | list[Any]\")\n    else:\n        reveal_type(val, expected_text=\"dict[str, str] | Sequence[int]\")\ndef func4(val: dict[str, str] | list[str] | list[int] | tuple[int]):\n    if is_list(val):\n        reveal_type(val, expected_text=\"list[str] | list[int]\")\n    else:\n        reveal_type(val, expected_text=\"dict[str, str] | tuple[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def func4(val: dict[str, str] | list[str] | list[int] | tuple[int]):\n    if is_list(val):\n        reveal_type(val, expected_text=\"list[str] | list[int]\")\n    else:\n        reveal_type(val, expected_text=\"dict[str, str] | tuple[int]\")\n_K = TypeVar(\"_K\")\n_V = TypeVar(\"_V\")\ndef is_dict(val: Mapping[_K, _V]) -> StrictTypeGuard[dict[_K, _V]]:\n    return isinstance(val, dict)\ndef func5(val: dict[_K, _V] | Mapping[_K, _V]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "is_dict",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def is_dict(val: Mapping[_K, _V]) -> StrictTypeGuard[dict[_K, _V]]:\n    return isinstance(val, dict)\ndef func5(val: dict[_K, _V] | Mapping[_K, _V]):\n    if not is_dict(val):\n        reveal_type(val, expected_text=\"Mapping[_K@func5, _V@func5]\")\n    else:\n        reveal_type(val, expected_text=\"dict[_K@func5, _V@func5]\")\ndef is_cardinal_direction(val: str) -> StrictTypeGuard[Literal[\"N\", \"S\", \"E\", \"W\"]]:\n    return val in (\"N\", \"S\", \"E\", \"W\")\ndef func6(direction: Literal[\"NW\", \"E\"]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def func5(val: dict[_K, _V] | Mapping[_K, _V]):\n    if not is_dict(val):\n        reveal_type(val, expected_text=\"Mapping[_K@func5, _V@func5]\")\n    else:\n        reveal_type(val, expected_text=\"dict[_K@func5, _V@func5]\")\ndef is_cardinal_direction(val: str) -> StrictTypeGuard[Literal[\"N\", \"S\", \"E\", \"W\"]]:\n    return val in (\"N\", \"S\", \"E\", \"W\")\ndef func6(direction: Literal[\"NW\", \"E\"]):\n    if is_cardinal_direction(direction):\n        reveal_type(direction, expected_text=\"Literal['E']\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "is_cardinal_direction",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def is_cardinal_direction(val: str) -> StrictTypeGuard[Literal[\"N\", \"S\", \"E\", \"W\"]]:\n    return val in (\"N\", \"S\", \"E\", \"W\")\ndef func6(direction: Literal[\"NW\", \"E\"]):\n    if is_cardinal_direction(direction):\n        reveal_type(direction, expected_text=\"Literal['E']\")\n    else:\n        reveal_type(direction, expected_text=\"Literal['NW']\")\nclass Animal:\n    ...\nclass Kangaroo(Animal):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def func6(direction: Literal[\"NW\", \"E\"]):\n    if is_cardinal_direction(direction):\n        reveal_type(direction, expected_text=\"Literal['E']\")\n    else:\n        reveal_type(direction, expected_text=\"Literal['NW']\")\nclass Animal:\n    ...\nclass Kangaroo(Animal):\n    ...\nclass Koala(Animal):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "is_marsupial",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def is_marsupial(val: Animal) -> StrictTypeGuard[Kangaroo | Koala]:\n    return isinstance(val, Kangaroo | Koala)\n# This should generate an error because list[T] isn't assignable to list[T | None].\ndef has_no_nones(\n    val: list[T | None],\n) -> StrictTypeGuard[list[T]]:\n    return None not in val",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "has_no_nones",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "def has_no_nones(\n    val: list[T | None],\n) -> StrictTypeGuard[list[T]]:\n    return None not in val",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "_K",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "_K = TypeVar(\"_K\")\n_V = TypeVar(\"_V\")\ndef is_dict(val: Mapping[_K, _V]) -> StrictTypeGuard[dict[_K, _V]]:\n    return isinstance(val, dict)\ndef func5(val: dict[_K, _V] | Mapping[_K, _V]):\n    if not is_dict(val):\n        reveal_type(val, expected_text=\"Mapping[_K@func5, _V@func5]\")\n    else:\n        reveal_type(val, expected_text=\"dict[_K@func5, _V@func5]\")\ndef is_cardinal_direction(val: str) -> StrictTypeGuard[Literal[\"N\", \"S\", \"E\", \"W\"]]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "_V",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "_V = TypeVar(\"_V\")\ndef is_dict(val: Mapping[_K, _V]) -> StrictTypeGuard[dict[_K, _V]]:\n    return isinstance(val, dict)\ndef func5(val: dict[_K, _V] | Mapping[_K, _V]):\n    if not is_dict(val):\n        reveal_type(val, expected_text=\"Mapping[_K@func5, _V@func5]\")\n    else:\n        reveal_type(val, expected_text=\"dict[_K@func5, _V@func5]\")\ndef is_cardinal_direction(val: str) -> StrictTypeGuard[Literal[\"N\", \"S\", \"E\", \"W\"]]:\n    return val in (\"N\", \"S\", \"E\", \"W\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "peekOfCode": "T = TypeVar(\"T\")\ndef is_marsupial(val: Animal) -> StrictTypeGuard[Kangaroo | Koala]:\n    return isinstance(val, Kangaroo | Koala)\n# This should generate an error because list[T] isn't assignable to list[T | None].\ndef has_no_nones(\n    val: list[T | None],\n) -> StrictTypeGuard[list[T]]:\n    return None not in val",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard3",
        "documentation": {}
    },
    {
        "label": "TypeGuardMode",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "class TypeGuardMode(Enum):\n    NoTypeGuard = 0\n    TypeGuard = 1\n    StrictTypeGuard = 2\n@overload\ndef is_int(obj: object, mode: Literal[TypeGuardMode.NoTypeGuard]) -> bool:\n    ...\n@overload\ndef is_int(obj: object, mode: Literal[TypeGuardMode.TypeGuard]) -> TypeGuard[int]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "is_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def is_int(obj: object, mode: Literal[TypeGuardMode.NoTypeGuard]) -> bool:\n    ...\n@overload\ndef is_int(obj: object, mode: Literal[TypeGuardMode.TypeGuard]) -> TypeGuard[int]:\n    ...\n@overload\ndef is_int(\n    obj: object, mode: Literal[TypeGuardMode.StrictTypeGuard]\n) -> StrictTypeGuard[int]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "is_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def is_int(obj: object, mode: Literal[TypeGuardMode.TypeGuard]) -> TypeGuard[int]:\n    ...\n@overload\ndef is_int(\n    obj: object, mode: Literal[TypeGuardMode.StrictTypeGuard]\n) -> StrictTypeGuard[int]:\n    ...\ndef is_int(\n    obj: object, mode: TypeGuardMode\n) -> bool | TypeGuard[int] | StrictTypeGuard[int]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "is_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def is_int(\n    obj: object, mode: Literal[TypeGuardMode.StrictTypeGuard]\n) -> StrictTypeGuard[int]:\n    ...\ndef is_int(\n    obj: object, mode: TypeGuardMode\n) -> bool | TypeGuard[int] | StrictTypeGuard[int]:\n    ...\ndef func_no_typeguard(val: int | str):\n    if is_int(val, TypeGuardMode.NoTypeGuard):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "is_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def is_int(\n    obj: object, mode: TypeGuardMode\n) -> bool | TypeGuard[int] | StrictTypeGuard[int]:\n    ...\ndef func_no_typeguard(val: int | str):\n    if is_int(val, TypeGuardMode.NoTypeGuard):\n        reveal_type(val, expected_text=\"int | str\")\n    else:\n        reveal_type(val, expected_text=\"int | str\")\ndef func_typeguard(val: int | str):",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "func_no_typeguard",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def func_no_typeguard(val: int | str):\n    if is_int(val, TypeGuardMode.NoTypeGuard):\n        reveal_type(val, expected_text=\"int | str\")\n    else:\n        reveal_type(val, expected_text=\"int | str\")\ndef func_typeguard(val: int | str):\n    if is_int(val, TypeGuardMode.TypeGuard):\n        reveal_type(val, expected_text=\"int\")\n    else:\n        reveal_type(val, expected_text=\"int | str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "func_typeguard",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def func_typeguard(val: int | str):\n    if is_int(val, TypeGuardMode.TypeGuard):\n        reveal_type(val, expected_text=\"int\")\n    else:\n        reveal_type(val, expected_text=\"int | str\")\ndef func_stricttypeguard(val: int | str):\n    if is_int(val, TypeGuardMode.StrictTypeGuard):\n        reveal_type(val, expected_text=\"int\")\n    else:\n        reveal_type(val, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "func_stricttypeguard",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "description": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "peekOfCode": "def func_stricttypeguard(val: int | str):\n    if is_int(val, TypeGuardMode.StrictTypeGuard):\n        reveal_type(val, expected_text=\"int\")\n    else:\n        reveal_type(val, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeGuard4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeIgnore1",
        "description": "packages.pyright-internal.src.tests.samples.typeIgnore1",
        "peekOfCode": "b = len(a)\nfor for for",
        "detail": "packages.pyright-internal.src.tests.samples.typeIgnore1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeIgnore2",
        "description": "packages.pyright-internal.src.tests.samples.typeIgnore2",
        "peekOfCode": "b = len(a) # type: ignore\nfor for for # type: ignore\nc: Dict[str, str] = {\n    3: 3,\n    'hello': 3,\n    3.2: 2.4\n} #type:ignore # something",
        "detail": "packages.pyright-internal.src.tests.samples.typeIgnore2",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeIgnore3",
        "description": "packages.pyright-internal.src.tests.samples.typeIgnore3",
        "peekOfCode": "b = len(a) # type: ignore[1424]\nfor for for # type: ignore[1424, 244]\nc: Dict[str, str] = {\n    3: 3,\n    'hello': 3,\n    3.2: 2.4\n} #type:ignore[999] # something",
        "detail": "packages.pyright-internal.src.tests.samples.typeIgnore3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "peekOfCode": "class Foo:\n    def bar(self):\n        return\nmaybe = True\na = None if maybe else Foo()\nb = None if maybe else Foo()\nif not a or not b:\n    a.bar()\n    b.bar()\nelse:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "documentation": {}
    },
    {
        "label": "maybe",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "peekOfCode": "maybe = True\na = None if maybe else Foo()\nb = None if maybe else Foo()\nif not a or not b:\n    a.bar()\n    b.bar()\nelse:\n    a.bar()\n    b.bar()\nif not (not a or not b):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "peekOfCode": "a = None if maybe else Foo()\nb = None if maybe else Foo()\nif not a or not b:\n    a.bar()\n    b.bar()\nelse:\n    a.bar()\n    b.bar()\nif not (not a or not b):\n    a.bar()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "peekOfCode": "b = None if maybe else Foo()\nif not a or not b:\n    a.bar()\n    b.bar()\nelse:\n    a.bar()\n    b.bar()\nif not (not a or not b):\n    a.bar()\n    b.bar()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing2",
        "peekOfCode": "def foo(args: List[Optional[int]]):\n    for arg in args:\n        if arg is None:\n            continue\n        # This should not generate an error because\n        # arg is known to be an int at this point.\n        print(arg.bit_length())",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing2",
        "documentation": {}
    },
    {
        "label": "only_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "peekOfCode": "def only_int(a: int):\n    return a < 3\ndef test_break():\n    foo1 = None\n    while True:\n        if foo1 is None:\n            foo1 = 5\n            break\n        else:\n            foo1 = \"hello\"",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "documentation": {}
    },
    {
        "label": "test_break",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "peekOfCode": "def test_break():\n    foo1 = None\n    while True:\n        if foo1 is None:\n            foo1 = 5\n            break\n        else:\n            foo1 = \"hello\"\n    # This should not generate an error because foo1\n    # can only be an int type at this point.",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "documentation": {}
    },
    {
        "label": "test_continue",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "peekOfCode": "def test_continue():\n    bar1 = 1\n    my_list: List[Optional[int]] = [None, 3, 5]\n    for n in my_list:\n        if n is None:\n            continue\n        bar1 = n\n    # This should not generate an error because bar1\n    # can only be an int type at this point.\n    only_int(bar1)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "documentation": {}
    },
    {
        "label": "test_while_condition",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "peekOfCode": "def test_while_condition():\n    param = 3\n    # This should generate an error because param\n    # can be a str type at this point.\n    while only_int(param):\n        if param:\n            break\n        else:\n            param = \"hello\"",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing3",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "peekOfCode": "class C:\n    def foo(self):\n        pass\ndef good(b: Optional[C]) -> None:\n    a = b\n    if a:\n        a.foo()\ndef bad(b: Optional[C]) -> None:\n    if c := b:\n        c.foo()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "documentation": {}
    },
    {
        "label": "good",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "peekOfCode": "def good(b: Optional[C]) -> None:\n    a = b\n    if a:\n        a.foo()\ndef bad(b: Optional[C]) -> None:\n    if c := b:\n        c.foo()\n        b.foo()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "documentation": {}
    },
    {
        "label": "bad",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "peekOfCode": "def bad(b: Optional[C]) -> None:\n    if c := b:\n        c.foo()\n        b.foo()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "peekOfCode": "class A(Generic[T]): ...\ndef func3(val: A[Any]):\n    x: A[int] = val\n    reveal_type(x, expected_text=\"A[int]\")\ndef func4(val: A[list[Any]]):\n    x: A[list[int]] = val\n    reveal_type(x, expected_text=\"A[list[int]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "peekOfCode": "def func1(struct: Dict[Any, Any]):\n    a1: Dict[str, Any] = struct\n    reveal_type(a1, expected_text=\"Dict[str, Any]\")\ndef func2(struct: Any):\n    a1: Dict[Any, str] = struct\n    reveal_type(a1, expected_text=\"Dict[Any, str]\")\n    if isinstance(struct, Dict):\n        a2: Dict[str, Any] = struct\n        reveal_type(a2, expected_text=\"Dict[str, Any]\")\nT = TypeVar(\"T\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "peekOfCode": "def func2(struct: Any):\n    a1: Dict[Any, str] = struct\n    reveal_type(a1, expected_text=\"Dict[Any, str]\")\n    if isinstance(struct, Dict):\n        a2: Dict[str, Any] = struct\n        reveal_type(a2, expected_text=\"Dict[str, Any]\")\nT = TypeVar(\"T\")\nclass A(Generic[T]): ...\ndef func3(val: A[Any]):\n    x: A[int] = val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "peekOfCode": "def func3(val: A[Any]):\n    x: A[int] = val\n    reveal_type(x, expected_text=\"A[int]\")\ndef func4(val: A[list[Any]]):\n    x: A[list[int]] = val\n    reveal_type(x, expected_text=\"A[list[int]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "peekOfCode": "def func4(val: A[list[Any]]):\n    x: A[list[int]] = val\n    reveal_type(x, expected_text=\"A[list[int]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "peekOfCode": "T = TypeVar(\"T\")\nclass A(Generic[T]): ...\ndef func3(val: A[Any]):\n    x: A[int] = val\n    reveal_type(x, expected_text=\"A[int]\")\ndef func4(val: A[list[Any]]):\n    x: A[list[int]] = val\n    reveal_type(x, expected_text=\"A[list[int]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing5",
        "documentation": {}
    },
    {
        "label": "Foo1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "peekOfCode": "class Foo1:\n    val0: int\nclass Foo2:\n    val1: int\n    val2: Foo1\ndef func(a: bool):\n    foo2: Foo2 = Foo2()\n    foo2.val1 = 0\n    foo2.val2.val0 = 4\n    reveal_type(foo2.val1, expected_text=\"Literal[0]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "documentation": {}
    },
    {
        "label": "Foo2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "peekOfCode": "class Foo2:\n    val1: int\n    val2: Foo1\ndef func(a: bool):\n    foo2: Foo2 = Foo2()\n    foo2.val1 = 0\n    foo2.val2.val0 = 4\n    reveal_type(foo2.val1, expected_text=\"Literal[0]\")\n    reveal_type(foo2.val2.val0, expected_text=\"Literal[4]\")\n    if a:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "documentation": {}
    },
    {
        "label": "func",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "peekOfCode": "def func(a: bool):\n    foo2: Foo2 = Foo2()\n    foo2.val1 = 0\n    foo2.val2.val0 = 4\n    reveal_type(foo2.val1, expected_text=\"Literal[0]\")\n    reveal_type(foo2.val2.val0, expected_text=\"Literal[4]\")\n    if a:\n        foo2 = Foo2()\n    reveal_type(foo2.val1, expected_text=\"int\")\n    reveal_type(foo2.val2.val0, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "peekOfCode": "class Foo:\n    val: List[List[Optional[str]]] = []\ndef func1(v1: List[Optional[complex]]):\n    if v1[0] and v1[1]:\n        reveal_type(v1[0], expected_text=\"complex\")\n        reveal_type(v1[1], expected_text=\"complex\")\n        reveal_type(v1[2], expected_text=\"complex | None\")\n        v1[0], v1[1] = None, None\n        reveal_type(v1[0], expected_text=\"None\")\n        reveal_type(v1[1], expected_text=\"None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "peekOfCode": "def func1(v1: List[Optional[complex]]):\n    if v1[0] and v1[1]:\n        reveal_type(v1[0], expected_text=\"complex\")\n        reveal_type(v1[1], expected_text=\"complex\")\n        reveal_type(v1[2], expected_text=\"complex | None\")\n        v1[0], v1[1] = None, None\n        reveal_type(v1[0], expected_text=\"None\")\n        reveal_type(v1[1], expected_text=\"None\")\n        v1[0], v1[1] = 1, 2\n        reveal_type(v1[0], expected_text=\"Literal[1]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "peekOfCode": "def func2(v1: List[Union[Dict[str, str], List[str]]]):\n    if isinstance(v1[0], dict):\n        reveal_type(v1[0], expected_text=\"Dict[str, str]\")\n        reveal_type(v1[1], expected_text=\"Dict[str, str] | List[str]\")\n    if isinstance(v1[-1], list):\n        reveal_type(v1[-1], expected_text=\"List[str]\")\ndef func3():\n    v1: Dict[str, int] = {}\n    reveal_type(v1[\"x1\"], expected_text=\"int\")\n    v1[\"x1\"] = 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "peekOfCode": "def func3():\n    v1: Dict[str, int] = {}\n    reveal_type(v1[\"x1\"], expected_text=\"int\")\n    v1[\"x1\"] = 3\n    reveal_type(v1[\"x1\"], expected_text=\"Literal[3]\")\n    v1[f\"x2\"] = 5\n    reveal_type(v1[\"x2\"], expected_text=\"int\")\n    v1 = {}\n    reveal_type(v1[\"x1\"], expected_text=\"int\")\n    v2: Dict[str, Dict[str, int]] = {}",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowing7",
        "documentation": {}
    },
    {
        "label": "foo1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingAssert1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingAssert1",
        "peekOfCode": "def foo1(a: Union[str, int]) -> int:\n    if condition:\n        # This should generate an error because\n        # a could be a str.\n        return a\n    assert isinstance(a, int)\n    return a\ndef foo2(a: Union[str, int]) -> int:\n    # Test the form of \"assert\" that includes a message string.\n    assert isinstance(a, int), \"Message\"",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingAssert1",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingAssert1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingAssert1",
        "peekOfCode": "def foo2(a: Union[str, int]) -> int:\n    # Test the form of \"assert\" that includes a message string.\n    assert isinstance(a, int), \"Message\"\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingAssert1",
        "documentation": {}
    },
    {
        "label": "CallableObj",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "class CallableObj:\n    def __call__(self, val: int):\n        return 3\ndef f(a: int) -> Union[Callable[[int], int], Type[int], CallableObj, int]:\n    if a == 0:\n        def h(b: int):\n            return 3\n        return h\n    elif a < 40:\n        return 2",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "class Foo:\n    def bar(self) -> None:\n        pass\ndef test2(o: Foo) -> None:\n    if callable(o):\n        reveal_type(o, expected_text=\"<callable subtype of Foo>\")\n        # This should generate an error\n        o.foo()\n        o.bar()\n        r1 = o(1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "def f(a: int) -> Union[Callable[[int], int], Type[int], CallableObj, int]:\n    if a == 0:\n        def h(b: int):\n            return 3\n        return h\n    elif a < 40:\n        return 2\n    else:\n        return int\nq = f(45)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "def g(a: Optional[Callable[[int], int]]):\n    if callable(a):\n        a(3)\n_T1 = TypeVar(\"_T1\")\ndef test1(arg: Union[_T1, Callable[[], _T1]]) -> _T1:\n    if callable(arg):\n        return arg()\n    return arg\nclass Foo:\n    def bar(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "def test1(arg: Union[_T1, Callable[[], _T1]]) -> _T1:\n    if callable(arg):\n        return arg()\n    return arg\nclass Foo:\n    def bar(self) -> None:\n        pass\ndef test2(o: Foo) -> None:\n    if callable(o):\n        reveal_type(o, expected_text=\"<callable subtype of Foo>\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "def test2(o: Foo) -> None:\n    if callable(o):\n        reveal_type(o, expected_text=\"<callable subtype of Foo>\")\n        # This should generate an error\n        o.foo()\n        o.bar()\n        r1 = o(1, 2, 3)\n        reveal_type(r1, expected_text=\"Unknown\")\n    else:\n        o.bar()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "test3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "def test3(v: _T2) -> Union[_T2, int, str]:\n    if callable(v):\n        reveal_type(v, expected_text=\"(() -> int) | (() -> str)\")\n        reveal_type(v(), expected_text=\"int* | str*\")\n        return v()\n    else:\n        reveal_type(v, expected_text=\"int* | str*\")\n        return v",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "q",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "q = f(45)\nif callable(q):\n    w = q(3)\nif not callable(q):\n    a = q + 3\ndef g(a: Optional[Callable[[int], int]]):\n    if callable(a):\n        a(3)\n_T1 = TypeVar(\"_T1\")\ndef test1(arg: Union[_T1, Callable[[], _T1]]) -> _T1:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\ndef test1(arg: Union[_T1, Callable[[], _T1]]) -> _T1:\n    if callable(arg):\n        return arg()\n    return arg\nclass Foo:\n    def bar(self) -> None:\n        pass\ndef test2(o: Foo) -> None:\n    if callable(o):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", int, str, Callable[[], int], Callable[[], str])\ndef test3(v: _T2) -> Union[_T2, int, str]:\n    if callable(v):\n        reveal_type(v, expected_text=\"(() -> int) | (() -> str)\")\n        reveal_type(v(), expected_text=\"int* | str*\")\n        return v()\n    else:\n        reveal_type(v, expected_text=\"int* | str*\")\n        return v",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingCallable1",
        "documentation": {}
    },
    {
        "label": "SomeEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "peekOfCode": "class SomeEnum(Enum):\n    value1 = 1\n    value2 = 2\n    value3 = 3\ndef assert_never(x: NoReturn) -> NoReturn:\n    \"\"\"Used to cause Mypy to catch impossible cases.\"\"\"\n    # https://github.com/python/mypy/issues/6366#issuecomment-560369716\n    assert False, \"Unhandled type: {}\".format(type(x).__name__)\ndef func1(a: SomeEnum):\n    if a == SomeEnum.value1:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "documentation": {}
    },
    {
        "label": "assert_never",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "peekOfCode": "def assert_never(x: NoReturn) -> NoReturn:\n    \"\"\"Used to cause Mypy to catch impossible cases.\"\"\"\n    # https://github.com/python/mypy/issues/6366#issuecomment-560369716\n    assert False, \"Unhandled type: {}\".format(type(x).__name__)\ndef func1(a: SomeEnum):\n    if a == SomeEnum.value1:\n        pass\n    elif a == SomeEnum.value2:\n        pass\n    elif a == SomeEnum.value3:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "peekOfCode": "def func1(a: SomeEnum):\n    if a == SomeEnum.value1:\n        pass\n    elif a == SomeEnum.value2:\n        pass\n    elif a == SomeEnum.value3:\n        pass\n    else:\n        assert_never(a)\ndef func2(val: Literal[\"a\", \"b\"]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "peekOfCode": "def func2(val: Literal[\"a\", \"b\"]):\n    if val == \"a\":\n        pass\n    elif val == \"b\":\n        pass\n    else:\n        assert_never(val)\ndef func3(val: Union[str, int]):\n    if isinstance(val, str):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "peekOfCode": "def func3(val: Union[str, int]):\n    if isinstance(val, str):\n        pass\n    elif isinstance(val, int):\n        pass\n    else:\n        assert_never(val)\ndef func4(val: Union[str, int]) -> Union[str, int]:\n    if isinstance(val, str):\n        return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "peekOfCode": "def func4(val: Union[str, int]) -> Union[str, int]:\n    if isinstance(val, str):\n        return val\n    elif isinstance(val, int):\n        return val\n    else:\n        # Even though \"val\" is a Never type at this\n        # point, it should be assignable to Union[str, int]\n        # because Never is assignable to any type.\n        return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum1",
        "documentation": {}
    },
    {
        "label": "SomeEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "class SomeEnum(Enum):\n    VALUE1 = 1\n    VALUE2 = 2\ndef assert_never(val: NoReturn):\n    ...\ndef func1(a: SomeEnum):\n    if a is SomeEnum.VALUE1:\n        pass\n    elif a is SomeEnum.VALUE2:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "assert_never",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def assert_never(val: NoReturn):\n    ...\ndef func1(a: SomeEnum):\n    if a is SomeEnum.VALUE1:\n        pass\n    elif a is SomeEnum.VALUE2:\n        pass\n    else:\n        assert_never(a)\ndef func2(a: SomeEnum):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func1(a: SomeEnum):\n    if a is SomeEnum.VALUE1:\n        pass\n    elif a is SomeEnum.VALUE2:\n        pass\n    else:\n        assert_never(a)\ndef func2(a: SomeEnum):\n    if a is SomeEnum.VALUE1:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func2(a: SomeEnum):\n    if a is SomeEnum.VALUE1:\n        pass\n    else:\n        # This should generate an error because\n        # a hasn't been narrowed to Never.\n        assert_never(a)\ndef func3(a: SomeEnum):\n    if not a is not SomeEnum.VALUE1:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func3(a: SomeEnum):\n    if not a is not SomeEnum.VALUE1:\n        pass\n    elif not a is not SomeEnum.VALUE2:\n        pass\n    else:\n        assert_never(a)\ndef func4(a: SomeEnum):\n    if not a is not SomeEnum.VALUE1:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func4(a: SomeEnum):\n    if not a is not SomeEnum.VALUE1:\n        pass\n    else:\n        # This should generate an error because\n        # a hasn't been narrowed to Never.\n        assert_never(a)\ndef func5(a: Union[str, Literal[False]]) -> str:\n    if a is False:\n        return \"no\"",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func5(a: Union[str, Literal[False]]) -> str:\n    if a is False:\n        return \"no\"\n    return a\ndef func6(a: Union[str, Literal[False]]) -> str:\n    if a is not False:\n        return a\n    return \"no\"\ndef func7(a: Union[str, bool]) -> str:\n    if a is False:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func6(a: Union[str, Literal[False]]) -> str:\n    if a is not False:\n        return a\n    return \"no\"\ndef func7(a: Union[str, bool]) -> str:\n    if a is False:\n        return \"False\"\n    elif a is True:\n        return \"True\"\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "peekOfCode": "def func7(a: Union[str, bool]) -> str:\n    if a is False:\n        return \"False\"\n    elif a is True:\n        return \"True\"\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingEnum2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "class A:\n    ...\nclass B:\n    def __bool__(self) -> bool:\n        ...\nclass C:\n    def __bool__(self) -> Literal[False]:\n        ...\nclass D:\n    def __bool__(self) -> Literal[True]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "class B:\n    def __bool__(self) -> bool:\n        ...\nclass C:\n    def __bool__(self) -> Literal[False]:\n        ...\nclass D:\n    def __bool__(self) -> Literal[True]:\n        ...\ndef func1(x: Union[int, List[int], A, B, C, D, None]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "class C:\n    def __bool__(self) -> Literal[False]:\n        ...\nclass D:\n    def __bool__(self) -> Literal[True]:\n        ...\ndef func1(x: Union[int, List[int], A, B, C, D, None]) -> None:\n    if x:\n        reveal_type(x, expected_text=\"int | List[int] | A | B | D\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "class D:\n    def __bool__(self) -> Literal[True]:\n        ...\ndef func1(x: Union[int, List[int], A, B, C, D, None]) -> None:\n    if x:\n        reveal_type(x, expected_text=\"int | List[int] | A | B | D\")\n    else:\n        reveal_type(x, expected_text=\"int | List[int] | B | C | None\")\ndef func2(maybe_int: Optional[int]):\n    if bool(maybe_int):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "NT1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "class NT1(NamedTuple):\n    foo: int\ndef func8(foo: NT1) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"NT1\")\n    else:\n        reveal_type(foo, expected_text=\"Never\")\nclass NT2(NT1):\n    pass\ndef func9(foo: NT2) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "NT2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "class NT2(NT1):\n    pass\ndef func9(foo: NT2) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"NT2\")\n    else:\n        reveal_type(foo, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func1(x: Union[int, List[int], A, B, C, D, None]) -> None:\n    if x:\n        reveal_type(x, expected_text=\"int | List[int] | A | B | D\")\n    else:\n        reveal_type(x, expected_text=\"int | List[int] | B | C | None\")\ndef func2(maybe_int: Optional[int]):\n    if bool(maybe_int):\n        reveal_type(maybe_int, expected_text=\"int\")\n    else:\n        reveal_type(maybe_int, expected_text=\"int | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func2(maybe_int: Optional[int]):\n    if bool(maybe_int):\n        reveal_type(maybe_int, expected_text=\"int\")\n    else:\n        reveal_type(maybe_int, expected_text=\"int | None\")\ndef func3(maybe_a: Optional[A]):\n    if bool(maybe_a):\n        reveal_type(maybe_a, expected_text=\"A\")\n    else:\n        reveal_type(maybe_a, expected_text=\"None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func3(maybe_a: Optional[A]):\n    if bool(maybe_a):\n        reveal_type(maybe_a, expected_text=\"A\")\n    else:\n        reveal_type(maybe_a, expected_text=\"None\")\ndef func4(foo: Iterable[int]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"Iterable[int]\")\n    else:\n        reveal_type(foo, expected_text=\"Iterable[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func4(foo: Iterable[int]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"Iterable[int]\")\n    else:\n        reveal_type(foo, expected_text=\"Iterable[int]\")\ndef func5(foo: tuple[int]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"tuple[int]\")\n    else:\n        reveal_type(foo, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func5(foo: tuple[int]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"tuple[int]\")\n    else:\n        reveal_type(foo, expected_text=\"Never\")\ndef func6(foo: tuple[int, ...]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"tuple[int, ...]\")\n    else:\n        reveal_type(foo, expected_text=\"tuple[int, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func6(foo: tuple[int, ...]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"tuple[int, ...]\")\n    else:\n        reveal_type(foo, expected_text=\"tuple[int, ...]\")\ndef func7(foo: tuple[()]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"Never\")\n    else:\n        reveal_type(foo, expected_text=\"tuple[()]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func7(foo: tuple[()]) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"Never\")\n    else:\n        reveal_type(foo, expected_text=\"tuple[()]\")\nclass NT1(NamedTuple):\n    foo: int\ndef func8(foo: NT1) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"NT1\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func8(foo: NT1) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"NT1\")\n    else:\n        reveal_type(foo, expected_text=\"Never\")\nclass NT2(NT1):\n    pass\ndef func9(foo: NT2) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"NT2\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "peekOfCode": "def func9(foo: NT2) -> None:\n    if foo:\n        reveal_type(foo, expected_text=\"NT2\")\n    else:\n        reveal_type(foo, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingFalsy1",
        "documentation": {}
    },
    {
        "label": "verify_str",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def verify_str(p: str) -> None:\n    ...\ndef verify_int(p: int) -> None:\n    ...\ndef verify_none(p: None) -> None:\n    ...\nx: Optional[str]\ny: Union[int, str]\nif random.random() < 0.5:\n    x = None",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "verify_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def verify_int(p: int) -> None:\n    ...\ndef verify_none(p: None) -> None:\n    ...\nx: Optional[str]\ny: Union[int, str]\nif random.random() < 0.5:\n    x = None\n    y = 1\nelse:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "verify_none",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def verify_none(p: None) -> None:\n    ...\nx: Optional[str]\ny: Union[int, str]\nif random.random() < 0.5:\n    x = None\n    y = 1\nelse:\n    x = \"2\"\n    y = \"2\"",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func1(x: Optional[Union[int, str]], y: Literal[1, 2, \"b\"], b: int):\n    if x in (1, 2, \"a\"):\n        reveal_type(x, expected_text=\"Literal[1, 2, 'a']\")\n    if x in (1, \"2\"):\n        reveal_type(x, expected_text=\"Literal[1, '2']\")\n    if x in (1, None):\n        reveal_type(x, expected_text=\"Literal[1] | None\")\n    if x in (1, b, \"a\"):\n        reveal_type(x, expected_text=\"int | Literal['a']\")\n    if y in (1, b, \"a\"):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func2(a: Literal[1, 2, 3]):\n    x = (1, 2)\n    if a in x:\n        reveal_type(a, expected_text=\"Literal[1, 2]\")\n    else:\n        reveal_type(a, expected_text=\"Literal[3]\")\ndef func3(val: str | None, container: frozenset[str]):\n    if val in container:\n        reveal_type(val, expected_text=\"str\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func3(val: str | None, container: frozenset[str]):\n    if val in container:\n        reveal_type(val, expected_text=\"str\")\n    else:\n        reveal_type(val, expected_text=\"str | None\")\ndef func4(val: str | None, container: list[str]):\n    if val not in container:\n        reveal_type(val, expected_text=\"str | None\")\n    else:\n        reveal_type(val, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func4(val: str | None, container: list[str]):\n    if val not in container:\n        reveal_type(val, expected_text=\"str | None\")\n    else:\n        reveal_type(val, expected_text=\"str\")\ndef func5(x: str | None, y: int | None, z: dict[str, str]):\n    if x in z:\n        reveal_type(x, expected_text=\"str\")\n    else:\n        reveal_type(x, expected_text=\"str | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func5(x: str | None, y: int | None, z: dict[str, str]):\n    if x in z:\n        reveal_type(x, expected_text=\"str\")\n    else:\n        reveal_type(x, expected_text=\"str | None\")\n    if y not in z:\n        reveal_type(y, expected_text=\"int | None\")\n    else:\n        reveal_type(y, expected_text=\"Never\")\ndef func6(x: type):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func6(x: type):\n    if x in (str, int, float, bool):\n        reveal_type(x, expected_text=\"type\")\n    else:\n        reveal_type(x, expected_text=\"type\")\ndef func7(x: object | bytes, y: str, z: int):\n    if x in (y, z):\n        reveal_type(x, expected_text=\"str | int\")\n    else:\n        reveal_type(x, expected_text=\"object | bytes\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func7(x: object | bytes, y: str, z: int):\n    if x in (y, z):\n        reveal_type(x, expected_text=\"str | int\")\n    else:\n        reveal_type(x, expected_text=\"object | bytes\")\n    reveal_type(x, expected_text=\"str | int | object | bytes\")\ndef func8(x: object):\n    if x in (\"a\", \"b\", 2, None):\n        reveal_type(x, expected_text=\"Literal['a', 'b', 2] | None\")\ndef func9(x: Literal[\"A\", \"B\", \"C\", None, True]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func8(x: object):\n    if x in (\"a\", \"b\", 2, None):\n        reveal_type(x, expected_text=\"Literal['a', 'b', 2] | None\")\ndef func9(x: Literal[\"A\", \"B\", \"C\", None, True]):\n    if x in (None, \"B\", True):\n        reveal_type(x, expected_text=\"Literal['B', True] | None\")\n    else:\n        reveal_type(x, expected_text=\"Literal['A', 'C']\")\n        if x not in (\"A\", \"C\"):\n            reveal_type(x, expected_text=\"Never\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func9(x: Literal[\"A\", \"B\", \"C\", None, True]):\n    if x in (None, \"B\", True):\n        reveal_type(x, expected_text=\"Literal['B', True] | None\")\n    else:\n        reveal_type(x, expected_text=\"Literal['A', 'C']\")\n        if x not in (\"A\", \"C\"):\n            reveal_type(x, expected_text=\"Never\")\n        else:\n            reveal_type(x, expected_text=\"Literal['A', 'C']\")\n    if x in (\"A\", \"B\"):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "peekOfCode": "def func10(x: Literal[\"A\", \"B\"], y: tuple[Literal[\"A\"], ...]):\n    if x in y:\n        reveal_type(x, expected_text=\"Literal['A']\")\n    else:\n        reveal_type(x, expected_text=\"Literal['A', 'B']\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn1",
        "documentation": {}
    },
    {
        "label": "MyEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "peekOfCode": "class MyEnum(enum.Enum):\n    A = enum.auto()\n    B = enum.auto()\n    C = enum.auto()\ndef func0(x: MyEnum):\n    if x is MyEnum.C:\n        return\n    elif x in (MyEnum.A, MyEnum.B):\n        reveal_type(x, expected_text=\"Literal[MyEnum.A, MyEnum.B]\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "documentation": {}
    },
    {
        "label": "func0",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "peekOfCode": "def func0(x: MyEnum):\n    if x is MyEnum.C:\n        return\n    elif x in (MyEnum.A, MyEnum.B):\n        reveal_type(x, expected_text=\"Literal[MyEnum.A, MyEnum.B]\")\n    else:\n        reveal_type(x, expected_text=\"Never\")\ndef func1(x: MyEnum):\n    if x in (MyEnum.A, MyEnum.B):\n        reveal_type(x, expected_text=\"Literal[MyEnum.A, MyEnum.B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "peekOfCode": "def func1(x: MyEnum):\n    if x in (MyEnum.A, MyEnum.B):\n        reveal_type(x, expected_text=\"Literal[MyEnum.A, MyEnum.B]\")\n    else:\n        reveal_type(x, expected_text=\"Literal[MyEnum.C]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIn2",
        "documentation": {}
    },
    {
        "label": "UnrelatedClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class UnrelatedClass:\n    class_var1: int\n    def __init__(self) -> None:\n        self.property: None = None\nclass UnrelatedSubclass(UnrelatedClass):\n    def __init__(self) -> None:\n        self.property2: None = None\nclass SuperClass:\n    class_var1: int\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "UnrelatedSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class UnrelatedSubclass(UnrelatedClass):\n    def __init__(self) -> None:\n        self.property2: None = None\nclass SuperClass:\n    class_var1: int\n    def __init__(self) -> None:\n        self.property: None = None\nclass MyClass1(SuperClass):\n    class_var2: int\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "SuperClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class SuperClass:\n    class_var1: int\n    def __init__(self) -> None:\n        self.property: None = None\nclass MyClass1(SuperClass):\n    class_var2: int\n    def __init__(self) -> None:\n        self.property2: None = None\nclass MyClass2(SuperClass):\n    def __init__(self) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "MyClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class MyClass1(SuperClass):\n    class_var2: int\n    def __init__(self) -> None:\n        self.property2: None = None\nclass MyClass2(SuperClass):\n    def __init__(self) -> None:\n        self.property2: None = None\ndef f(instance: Union[SuperClass, UnrelatedClass]) -> None:\n    if isinstance(instance, (MyClass1, UnrelatedSubclass, Any)):\n        print(instance.property)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "MyClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class MyClass2(SuperClass):\n    def __init__(self) -> None:\n        self.property2: None = None\ndef f(instance: Union[SuperClass, UnrelatedClass]) -> None:\n    if isinstance(instance, (MyClass1, UnrelatedSubclass, Any)):\n        print(instance.property)\n        # This should generate two errors:\n        # 'property2' is not a known member of 'SuperClass'\n        # 'property2' is not a known member of 'UnrelatedClass'\n        print(instance.property2)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "TestClass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class TestClass1:\n    def __init__(self) -> None:\n        self.property = True\nclass TestClass2(TestClass1):\n    pass\ndef func1(instance: TestClass2) -> None:\n    # Although it's redundant for code to check for either\n    # TestClass1 or TestClass2, the analyzer should be fine with it.\n    if isinstance(instance, TestClass2):\n        print(instance.property)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "TestClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class TestClass2(TestClass1):\n    pass\ndef func1(instance: TestClass2) -> None:\n    # Although it's redundant for code to check for either\n    # TestClass1 or TestClass2, the analyzer should be fine with it.\n    if isinstance(instance, TestClass2):\n        print(instance.property)\n    if isinstance(instance, TestClass1):\n        print(instance.property)\ndef func2(val: Union[int, None, str]) -> Optional[int]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "Base1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class Base1:\n    ...\nclass Sub1(Base1):\n    value: str\nclass Sub2(Base1):\n    value: Base1\ndef handler(node: Base1) -> Any:\n    if isinstance(node, Sub1):\n        reveal_type(node.value, expected_text=\"str\")\n    elif isinstance(node, Sub2):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "Sub1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class Sub1(Base1):\n    value: str\nclass Sub2(Base1):\n    value: Base1\ndef handler(node: Base1) -> Any:\n    if isinstance(node, Sub1):\n        reveal_type(node.value, expected_text=\"str\")\n    elif isinstance(node, Sub2):\n        reveal_type(node.value, expected_text=\"Base1\")\n        if isinstance(node.value, Sub1):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "Sub2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "class Sub2(Base1):\n    value: Base1\ndef handler(node: Base1) -> Any:\n    if isinstance(node, Sub1):\n        reveal_type(node.value, expected_text=\"str\")\n    elif isinstance(node, Sub2):\n        reveal_type(node.value, expected_text=\"Base1\")\n        if isinstance(node.value, Sub1):\n            reveal_type(node.value, expected_text=\"Sub1\")\ndef func8(a: int | list[int] | dict[str, int] | None):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def f(instance: Union[SuperClass, UnrelatedClass]) -> None:\n    if isinstance(instance, (MyClass1, UnrelatedSubclass, Any)):\n        print(instance.property)\n        # This should generate two errors:\n        # 'property2' is not a known member of 'SuperClass'\n        # 'property2' is not a known member of 'UnrelatedClass'\n        print(instance.property2)\n    else:\n        print(instance.property)\n        # This should generate two errors:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def g(cls: Union[Type[SuperClass], Type[UnrelatedClass]]) -> None:\n    if issubclass(cls, (MyClass1, UnrelatedSubclass, Any)):\n        print(cls.class_var1)\n        # This should generate two errors:\n        # 'property2' is not a known member of 'SuperClass'\n        # 'property2' is not a known member of 'UnrelatedClass'\n        print(cls.class_var2)\n    else:\n        print(cls.class_var1)\n        # This should generate two errors:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func1(instance: TestClass2) -> None:\n    # Although it's redundant for code to check for either\n    # TestClass1 or TestClass2, the analyzer should be fine with it.\n    if isinstance(instance, TestClass2):\n        print(instance.property)\n    if isinstance(instance, TestClass1):\n        print(instance.property)\ndef func2(val: Union[int, None, str]) -> Optional[int]:\n    return None if isinstance((z := val), str) else z\n# Test the special-case handling of isinstance with a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func2(val: Union[int, None, str]) -> Optional[int]:\n    return None if isinstance((z := val), str) else z\n# Test the special-case handling of isinstance with a\n# \"type\" class.\ndef func3(ty: Type[int]) -> Type[int]:\n    assert isinstance(ty, (type, str))\n    return ty\ndef func4(ty: Type[int]) -> Type[int]:\n    assert not isinstance(ty, str)\n    return ty",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func3(ty: Type[int]) -> Type[int]:\n    assert isinstance(ty, (type, str))\n    return ty\ndef func4(ty: Type[int]) -> Type[int]:\n    assert not isinstance(ty, str)\n    return ty\nT = TypeVar(\"T\")\ndef func5(ty: Type[T]) -> Type[T]:\n    assert isinstance(ty, (type, str))\n    return ty",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func4(ty: Type[int]) -> Type[int]:\n    assert not isinstance(ty, str)\n    return ty\nT = TypeVar(\"T\")\ndef func5(ty: Type[T]) -> Type[T]:\n    assert isinstance(ty, (type, str))\n    return ty\ndef func6(ty: Type[T]) -> Type[T]:\n    assert not isinstance(ty, str)\n    return ty",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func5(ty: Type[T]) -> Type[T]:\n    assert isinstance(ty, (type, str))\n    return ty\ndef func6(ty: Type[T]) -> Type[T]:\n    assert not isinstance(ty, str)\n    return ty\n# Test the handling of protocol classes that support runtime checking.\ndef func7(a: Union[List[int], int]):\n    if isinstance(a, Sized):\n        reveal_type(a, expected_text=\"List[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func6(ty: Type[T]) -> Type[T]:\n    assert not isinstance(ty, str)\n    return ty\n# Test the handling of protocol classes that support runtime checking.\ndef func7(a: Union[List[int], int]):\n    if isinstance(a, Sized):\n        reveal_type(a, expected_text=\"List[int]\")\n    else:\n        reveal_type(a, expected_text=\"int\")\n# Test handling of member access expressions whose types change based",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func7(a: Union[List[int], int]):\n    if isinstance(a, Sized):\n        reveal_type(a, expected_text=\"List[int]\")\n    else:\n        reveal_type(a, expected_text=\"int\")\n# Test handling of member access expressions whose types change based\n# on isinstance checks.\nclass Base1:\n    ...\nclass Sub1(Base1):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "handler",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def handler(node: Base1) -> Any:\n    if isinstance(node, Sub1):\n        reveal_type(node.value, expected_text=\"str\")\n    elif isinstance(node, Sub2):\n        reveal_type(node.value, expected_text=\"Base1\")\n        if isinstance(node.value, Sub1):\n            reveal_type(node.value, expected_text=\"Sub1\")\ndef func8(a: int | list[int] | dict[str, int] | None):\n    if isinstance(\n        a,",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "def func8(a: int | list[int] | dict[str, int] | None):\n    if isinstance(\n        a,\n        (str, (int, list, type(None))),\n    ):\n        reveal_type(a, expected_text=\"int | list[int] | None\")\n    else:\n        reveal_type(a, expected_text=\"dict[str, int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "peekOfCode": "T = TypeVar(\"T\")\ndef func5(ty: Type[T]) -> Type[T]:\n    assert isinstance(ty, (type, str))\n    return ty\ndef func6(ty: Type[T]) -> Type[T]:\n    assert not isinstance(ty, str)\n    return ty\n# Test the handling of protocol classes that support runtime checking.\ndef func7(a: Union[List[int], int]):\n    if isinstance(a, Sized):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance1",
        "documentation": {}
    },
    {
        "label": "check_object",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance10",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance10",
        "peekOfCode": "def check_object(obj: object):\n    if isinstance(obj, SOME_TYPES):\n        reveal_type(obj, expected_text=\"object\")\n        return\n    reveal_type(obj, expected_text=\"object\")\n    if isinstance(obj, list):\n        reveal_type(obj, expected_text=\"list[Unknown]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance10",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance2",
        "peekOfCode": "class Base:\n    def get_value(self) -> int:\n        if isinstance(self, Derived):\n            return self.calculate()\n        return 7\nclass Derived(Base):\n    def calculate(self) -> int:\n        return 2 * 2",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance2",
        "documentation": {}
    },
    {
        "label": "Derived",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance2",
        "peekOfCode": "class Derived(Base):\n    def calculate(self) -> int:\n        return 2 * 2",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "class A:\n    a_val: int\nclass B:\n    b_val: int\nclass C:\n    c_val: int\ndef func1(val: A):\n    if isinstance(val, B):\n        val.a_val\n        val.b_val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "class B:\n    b_val: int\nclass C:\n    c_val: int\ndef func1(val: A):\n    if isinstance(val, B):\n        val.a_val\n        val.b_val\n        # This should generate an error\n        val.c_val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "class C:\n    c_val: int\ndef func1(val: A):\n    if isinstance(val, B):\n        val.a_val\n        val.b_val\n        # This should generate an error\n        val.c_val\n        reveal_type(val, expected_text=\"<subclass of A and B>\")\n        if isinstance(val, C):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "def func1(val: A):\n    if isinstance(val, B):\n        val.a_val\n        val.b_val\n        # This should generate an error\n        val.c_val\n        reveal_type(val, expected_text=\"<subclass of A and B>\")\n        if isinstance(val, C):\n            val.a_val\n            val.b_val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "def func2(val: Type[A]):\n    if issubclass(val, B):\n        val.a_val\n        val.b_val\n        # This should generate an error\n        val.c_val\n        reveal_type(val, expected_text=\"Type[<subclass of A and B>]\")\n        if issubclass(val, C):\n            val.a_val\n            val.b_val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "def func3(val: _T1) -> _T1:\n    if isinstance(val, B):\n        return val\n    return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=A)\ndef func3(val: _T1) -> _T1:\n    if isinstance(val, B):\n        return val\n    return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "class Foo:\n    def __call__(self, arg: int, bar: str) -> None:\n        raise NotImplementedError\n@runtime_checkable\nclass Bar(Protocol):\n    def __call__(self, arg: int) -> None:\n        raise NotImplementedError\n@runtime_checkable\nclass Baz(Protocol):\n    def __call__(self, arg: str) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "class Bar(Protocol):\n    def __call__(self, arg: int) -> None:\n        raise NotImplementedError\n@runtime_checkable\nclass Baz(Protocol):\n    def __call__(self, arg: str) -> None:\n        raise NotImplementedError\ndef check_callable1(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Foo):\n        reveal_type(val, expected_text=\"Foo\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "Baz",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "class Baz(Protocol):\n    def __call__(self, arg: str) -> None:\n        raise NotImplementedError\ndef check_callable1(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Foo):\n        reveal_type(val, expected_text=\"Foo\")\n    else:\n        # This doesn't get narrowed because `Foo` is not a runtime checkable protocol.\n        reveal_type(val, expected_text=\"((int, str) -> None) | ((int) -> None)\")\ndef check_callable2(val: Union[Callable[[int, str], None], Callable[[int], None]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "check_callable1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "def check_callable1(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Foo):\n        reveal_type(val, expected_text=\"Foo\")\n    else:\n        # This doesn't get narrowed because `Foo` is not a runtime checkable protocol.\n        reveal_type(val, expected_text=\"((int, str) -> None) | ((int) -> None)\")\ndef check_callable2(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Bar):\n        reveal_type(val, expected_text=\"Bar\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "check_callable2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "def check_callable2(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Bar):\n        reveal_type(val, expected_text=\"Bar\")\n    else:\n        reveal_type(val, expected_text=\"(int, str) -> None\")\ndef check_callable3(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Baz):\n        reveal_type(val, expected_text=\"Never\")\n    else:\n        reveal_type(val, expected_text=\"((int, str) -> None) | ((int) -> None)\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "check_callable3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "def check_callable3(val: Union[Callable[[int, str], None], Callable[[int], None]]):\n    if isinstance(val, Baz):\n        reveal_type(val, expected_text=\"Never\")\n    else:\n        reveal_type(val, expected_text=\"((int, str) -> None) | ((int) -> None)\")\ndef check_callable4(val: Union[type, Callable[[int], None]]):\n    if isinstance(val, type):\n        reveal_type(val, expected_text=\"type\")\n    else:\n        reveal_type(val, expected_text=\"(int) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "check_callable4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "peekOfCode": "def check_callable4(val: Union[type, Callable[[int], None]]):\n    if isinstance(val, type):\n        reveal_type(val, expected_text=\"type\")\n    else:\n        reveal_type(val, expected_text=\"(int) -> None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance4",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "peekOfCode": "class A:\n    ...\nclass B:\n    def __call__(self, x: str) -> int:\n        ...\nclass C:\n    ...\nclass D(C):\n    ...\nTCall1 = TypeVar(\"TCall1\", bound=Callable[..., int])",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "peekOfCode": "class B:\n    def __call__(self, x: str) -> int:\n        ...\nclass C:\n    ...\nclass D(C):\n    ...\nTCall1 = TypeVar(\"TCall1\", bound=Callable[..., int])\ndef func1(obj: Union[Callable[[int, str], int], List[int], A, B, C, D, TCall1]):\n    if isinstance(obj, (Callable, Sequence, C)):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "peekOfCode": "class C:\n    ...\nclass D(C):\n    ...\nTCall1 = TypeVar(\"TCall1\", bound=Callable[..., int])\ndef func1(obj: Union[Callable[[int, str], int], List[int], A, B, C, D, TCall1]):\n    if isinstance(obj, (Callable, Sequence, C)):\n        reveal_type(\n            obj,\n            expected_text=\"((int, str) -> int) | List[int] | B | C | D | TCall1@func1\",",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "peekOfCode": "class D(C):\n    ...\nTCall1 = TypeVar(\"TCall1\", bound=Callable[..., int])\ndef func1(obj: Union[Callable[[int, str], int], List[int], A, B, C, D, TCall1]):\n    if isinstance(obj, (Callable, Sequence, C)):\n        reveal_type(\n            obj,\n            expected_text=\"((int, str) -> int) | List[int] | B | C | D | TCall1@func1\",\n        )\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "peekOfCode": "def func1(obj: Union[Callable[[int, str], int], List[int], A, B, C, D, TCall1]):\n    if isinstance(obj, (Callable, Sequence, C)):\n        reveal_type(\n            obj,\n            expected_text=\"((int, str) -> int) | List[int] | B | C | D | TCall1@func1\",\n        )\n    else:\n        reveal_type(obj, expected_text=\"A\")\n    if isinstance(obj, Callable):\n        reveal_type(obj, expected_text=\"((int, str) -> int) | B | TCall1@func1\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "documentation": {}
    },
    {
        "label": "TCall1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "peekOfCode": "TCall1 = TypeVar(\"TCall1\", bound=Callable[..., int])\ndef func1(obj: Union[Callable[[int, str], int], List[int], A, B, C, D, TCall1]):\n    if isinstance(obj, (Callable, Sequence, C)):\n        reveal_type(\n            obj,\n            expected_text=\"((int, str) -> int) | List[int] | B | C | D | TCall1@func1\",\n        )\n    else:\n        reveal_type(obj, expected_text=\"A\")\n    if isinstance(obj, Callable):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance5",
        "documentation": {}
    },
    {
        "label": "SomeClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "class SomeClass(Generic[_T1]):\n    ...\nclass OtherClass(SomeClass[_T1]):\n    ...\ndef func1(a: SomeClass[int], b: Union[SomeClass[str], SomeClass[complex]]) -> None:\n    if isinstance(a, OtherClass):\n        reveal_type(a, expected_text=\"OtherClass[int]\")\n    if isinstance(b, OtherClass):\n        reveal_type(b, expected_text=\"OtherClass[str] | OtherClass[complex]\")\ndef func2(",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "OtherClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "class OtherClass(SomeClass[_T1]):\n    ...\ndef func1(a: SomeClass[int], b: Union[SomeClass[str], SomeClass[complex]]) -> None:\n    if isinstance(a, OtherClass):\n        reveal_type(a, expected_text=\"OtherClass[int]\")\n    if isinstance(b, OtherClass):\n        reveal_type(b, expected_text=\"OtherClass[str] | OtherClass[complex]\")\ndef func2(\n    a: Type[SomeClass[int]], b: Union[Type[SomeClass[str]], Type[SomeClass[complex]]]\n) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "Parent1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "class Parent1(Generic[_T2]):\n    pass\nclass Child1(Parent1[_T2]):\n    pass\ndef func4(var: Parent1[int]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[int]\")\ndef func5(var: Parent1[Any]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[Any]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "Child1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "class Child1(Parent1[_T2]):\n    pass\ndef func4(var: Parent1[int]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[int]\")\ndef func5(var: Parent1[Any]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[Any]\")\n_T3 = TypeVar(\"_T3\", float, str)\nclass Parent2(Generic[_T3]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "Parent2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "class Parent2(Generic[_T3]):\n    pass\nclass Child2(Parent2[_T3]):\n    pass\ndef func6(var: Parent2[int]):\n    if isinstance(var, Child2):\n        reveal_type(var, expected_text=\"Child2[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "Child2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "class Child2(Parent2[_T3]):\n    pass\ndef func6(var: Parent2[int]):\n    if isinstance(var, Child2):\n        reveal_type(var, expected_text=\"Child2[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "def func1(a: SomeClass[int], b: Union[SomeClass[str], SomeClass[complex]]) -> None:\n    if isinstance(a, OtherClass):\n        reveal_type(a, expected_text=\"OtherClass[int]\")\n    if isinstance(b, OtherClass):\n        reveal_type(b, expected_text=\"OtherClass[str] | OtherClass[complex]\")\ndef func2(\n    a: Type[SomeClass[int]], b: Union[Type[SomeClass[str]], Type[SomeClass[complex]]]\n) -> None:\n    if issubclass(a, OtherClass):\n        reveal_type(a, expected_text=\"Type[OtherClass[int]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "def func2(\n    a: Type[SomeClass[int]], b: Union[Type[SomeClass[str]], Type[SomeClass[complex]]]\n) -> None:\n    if issubclass(a, OtherClass):\n        reveal_type(a, expected_text=\"Type[OtherClass[int]]\")\n    if issubclass(b, OtherClass):\n        reveal_type(\n            b, expected_text=\"Type[OtherClass[str]] | Type[OtherClass[complex]]\"\n        )\ndef func3(value: Iterable[_T1]) -> Sequence[_T1] | None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "def func3(value: Iterable[_T1]) -> Sequence[_T1] | None:\n    if isinstance(value, Sequence):\n        return value\n_T2 = TypeVar(\"_T2\", bound=float, covariant=True)\nclass Parent1(Generic[_T2]):\n    pass\nclass Child1(Parent1[_T2]):\n    pass\ndef func4(var: Parent1[int]):\n    if isinstance(var, Child1):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "def func4(var: Parent1[int]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[int]\")\ndef func5(var: Parent1[Any]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[Any]\")\n_T3 = TypeVar(\"_T3\", float, str)\nclass Parent2(Generic[_T3]):\n    pass\nclass Child2(Parent2[_T3]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "def func5(var: Parent1[Any]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[Any]\")\n_T3 = TypeVar(\"_T3\", float, str)\nclass Parent2(Generic[_T3]):\n    pass\nclass Child2(Parent2[_T3]):\n    pass\ndef func6(var: Parent2[int]):\n    if isinstance(var, Child2):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "def func6(var: Parent2[int]):\n    if isinstance(var, Child2):\n        reveal_type(var, expected_text=\"Child2[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass SomeClass(Generic[_T1]):\n    ...\nclass OtherClass(SomeClass[_T1]):\n    ...\ndef func1(a: SomeClass[int], b: Union[SomeClass[str], SomeClass[complex]]) -> None:\n    if isinstance(a, OtherClass):\n        reveal_type(a, expected_text=\"OtherClass[int]\")\n    if isinstance(b, OtherClass):\n        reveal_type(b, expected_text=\"OtherClass[str] | OtherClass[complex]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=float, covariant=True)\nclass Parent1(Generic[_T2]):\n    pass\nclass Child1(Parent1[_T2]):\n    pass\ndef func4(var: Parent1[int]):\n    if isinstance(var, Child1):\n        reveal_type(var, expected_text=\"Child1[int]\")\ndef func5(var: Parent1[Any]):\n    if isinstance(var, Child1):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", float, str)\nclass Parent2(Generic[_T3]):\n    pass\nclass Child2(Parent2[_T3]):\n    pass\ndef func6(var: Parent2[int]):\n    if isinstance(var, Child2):\n        reveal_type(var, expected_text=\"Child2[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance6",
        "documentation": {}
    },
    {
        "label": "X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "peekOfCode": "class X:\n    element_list: list[\"X\"]\n    def return_iter(\n        self, cls: Union[Type[T1], Tuple[Type[T1], Type[T2]]]\n    ) -> Union[Iterator[T1], Iterator[T2]]:\n        for item in self.element_list:\n            if isinstance(item, cls):\n                yield item",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "peekOfCode": "T1 = TypeVar(\"T1\", bound=\"X\")\nT2 = TypeVar(\"T2\", bound=\"X\")\nclass X:\n    element_list: list[\"X\"]\n    def return_iter(\n        self, cls: Union[Type[T1], Tuple[Type[T1], Type[T2]]]\n    ) -> Union[Iterator[T1], Iterator[T2]]:\n        for item in self.element_list:\n            if isinstance(item, cls):\n                yield item",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=\"X\")\nclass X:\n    element_list: list[\"X\"]\n    def return_iter(\n        self, cls: Union[Type[T1], Tuple[Type[T1], Type[T2]]]\n    ) -> Union[Iterator[T1], Iterator[T2]]:\n        for item in self.element_list:\n            if isinstance(item, cls):\n                yield item",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance7",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "peekOfCode": "class Base(ABC):\n    @abstractmethod\n    def f(self) -> None:\n        ...\ndef func1(cls: Any):\n    assert issubclass(cls, Base)\n    _ = cls()\ndef func2(cls: Any):\n    assert isinstance(cls, type)\n    assert issubclass(cls, Base)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "peekOfCode": "def func1(cls: Any):\n    assert issubclass(cls, Base)\n    _ = cls()\ndef func2(cls: Any):\n    assert isinstance(cls, type)\n    assert issubclass(cls, Base)\n    _ = cls()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "peekOfCode": "def func2(cls: Any):\n    assert isinstance(cls, type)\n    assert issubclass(cls, Base)\n    _ = cls()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsinstance8",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "peekOfCode": "def func1(x: Optional[int]):\n    if x is not None:\n        x.bit_length()\n    if x != None:\n        x.bit_length()\n    if x is None:\n        pass\n    else:\n        x.bit_length()\n    if x == None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "peekOfCode": "def func2(val: _T1) -> _T1:\n    if val is not None:\n        reveal_type(val, expected_text=\"str*\")\n        return val\n    else:\n        reveal_type(val, expected_text=\"None*\")\n        return val\ndef func3(x: object):\n    if x is None:\n        reveal_type(x, expected_text=\"None\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "peekOfCode": "def func3(x: object):\n    if x is None:\n        reveal_type(x, expected_text=\"None\")\n    else:\n        reveal_type(x, expected_text=\"object\")\n_T2 = TypeVar(\"_T2\")\ndef func4(x: _T2) -> _T2:\n    if x is None:\n        reveal_type(x, expected_text=\"None*\")\n        raise ValueError()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "peekOfCode": "def func4(x: _T2) -> _T2:\n    if x is None:\n        reveal_type(x, expected_text=\"None*\")\n        raise ValueError()\n    else:\n        reveal_type(x, expected_text=\"_T2@func4\")\n        return x",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", None, str)\ndef func2(val: _T1) -> _T1:\n    if val is not None:\n        reveal_type(val, expected_text=\"str*\")\n        return val\n    else:\n        reveal_type(val, expected_text=\"None*\")\n        return val\ndef func3(x: object):\n    if x is None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\ndef func4(x: _T2) -> _T2:\n    if x is None:\n        reveal_type(x, expected_text=\"None*\")\n        raise ValueError()\n    else:\n        reveal_type(x, expected_text=\"_T2@func4\")\n        return x",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone1",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone2",
        "peekOfCode": "i = {\"a\": \"\", \"b\": None}\ndict_comp = {key: w.strip() if (w := i[key]) is not None else \"\" for key in i}",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone2",
        "documentation": {}
    },
    {
        "label": "dict_comp",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone2",
        "peekOfCode": "dict_comp = {key: w.strip() if (w := i[key]) is not None else \"\" for key in i}",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNone2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "def func1(a: Union[Tuple[_T1, None], Tuple[None, str]]) -> Tuple[_T1, None]:\n    if a[1] is None:\n        reveal_type(a, expected_text=\"Tuple[_T1@func1, None]\")\n        return a\n    else:\n        reveal_type(a, expected_text=\"Tuple[None, str]\")\n        raise ValueError()\n_T2 = TypeVar(\"_T2\", bound=Union[None, int])\ndef func2(a: Union[Tuple[_T2, None], Tuple[None, str]]):\n    if a[0] is None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "def func2(a: Union[Tuple[_T2, None], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[_T2@func2, None] | Tuple[None, str]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[_T2@func2, None]\")\n_T3 = TypeVar(\"_T3\", None, int)\ndef func3(a: Union[Tuple[_T3, None], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[_T3@func3, None] | Tuple[None, str]\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "def func3(a: Union[Tuple[_T3, None], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[_T3@func3, None] | Tuple[None, str]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[_T3@func3, None]\")\ndef func4(a: Union[Tuple[Union[int, None]], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[int | None] | Tuple[None, str]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[int | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "def func4(a: Union[Tuple[Union[int, None]], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[int | None] | Tuple[None, str]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[int | None]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\ndef func1(a: Union[Tuple[_T1, None], Tuple[None, str]]) -> Tuple[_T1, None]:\n    if a[1] is None:\n        reveal_type(a, expected_text=\"Tuple[_T1@func1, None]\")\n        return a\n    else:\n        reveal_type(a, expected_text=\"Tuple[None, str]\")\n        raise ValueError()\n_T2 = TypeVar(\"_T2\", bound=Union[None, int])\ndef func2(a: Union[Tuple[_T2, None], Tuple[None, str]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=Union[None, int])\ndef func2(a: Union[Tuple[_T2, None], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[_T2@func2, None] | Tuple[None, str]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[_T2@func2, None]\")\n_T3 = TypeVar(\"_T3\", None, int)\ndef func3(a: Union[Tuple[_T3, None], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[_T3@func3, None] | Tuple[None, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", None, int)\ndef func3(a: Union[Tuple[_T3, None], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[_T3@func3, None] | Tuple[None, str]\")\n    else:\n        reveal_type(a, expected_text=\"Tuple[_T3@func3, None]\")\ndef func4(a: Union[Tuple[Union[int, None]], Tuple[None, str]]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"Tuple[int | None] | Tuple[None, str]\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "peekOfCode": "def func1(a: Union[IntFirst, StrSecond]) -> IntFirst:\n    if a[1] is None:\n        reveal_type(a, expected_text=\"IntFirst\")\n        return a\n    else:\n        reveal_type(a, expected_text=\"StrSecond\")\n        raise ValueError()\nUnionFirst = NamedTuple(\"UnionFirst\", [\n    (\"first\", Union[None, int]),\n    (\"second\", None),",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "peekOfCode": "def func2(a: Union[UnionFirst, StrSecond]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"UnionFirst | StrSecond\")\n    else:\n        reveal_type(a, expected_text=\"UnionFirst\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "documentation": {}
    },
    {
        "label": "IntFirst",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "peekOfCode": "IntFirst = NamedTuple(\"IntFirst\", [\n    (\"first\", int),\n    (\"second\", None),\n])\nStrSecond = NamedTuple(\"StrSecond\", [\n    (\"first\", None),\n    (\"second\", str),\n])\ndef func1(a: Union[IntFirst, StrSecond]) -> IntFirst:\n    if a[1] is None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "documentation": {}
    },
    {
        "label": "StrSecond",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "peekOfCode": "StrSecond = NamedTuple(\"StrSecond\", [\n    (\"first\", None),\n    (\"second\", str),\n])\ndef func1(a: Union[IntFirst, StrSecond]) -> IntFirst:\n    if a[1] is None:\n        reveal_type(a, expected_text=\"IntFirst\")\n        return a\n    else:\n        reveal_type(a, expected_text=\"StrSecond\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "documentation": {}
    },
    {
        "label": "UnionFirst",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "peekOfCode": "UnionFirst = NamedTuple(\"UnionFirst\", [\n    (\"first\", Union[None, int]),\n    (\"second\", None),\n])\ndef func2(a: Union[UnionFirst, StrSecond]):\n    if a[0] is None:\n        reveal_type(a, expected_text=\"UnionFirst | StrSecond\")\n    else:\n        reveal_type(a, expected_text=\"UnionFirst\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingIsNoneTuple2",
        "documentation": {}
    },
    {
        "label": "func_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "peekOfCode": "def func_1(p1: Literal[\"a\", \"b\", \"c\"]):\n    if p1 != \"b\":\n        if p1 == \"c\":\n            reveal_type(p1, expected_text=\"Literal['c']\")\n            pass\n        else:\n            reveal_type(p1, expected_text=\"Literal['a']\")\n    if p1 != \"a\":\n        reveal_type(p1, expected_text=\"Literal['c', 'b']\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "peekOfCode": "def func2(p1: Literal[1, 4, 7]):\n    if 4 == p1 or 1 == p1:\n        reveal_type(p1, expected_text=\"Literal[4, 1]\")\n    else:\n        reveal_type(p1, expected_text=\"Literal[7]\")\ndef func3(a: Union[int, None]):\n    if a == 1 or a == 2:\n        reveal_type(a, expected_text=\"Literal[1, 2]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "peekOfCode": "def func3(a: Union[int, None]):\n    if a == 1 or a == 2:\n        reveal_type(a, expected_text=\"Literal[1, 2]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral1",
        "documentation": {}
    },
    {
        "label": "SomeEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "class SomeEnum(Enum):\n    SOME_ENUM_VALUE1 = 1\n    SOME_ENUM_VALUE2 = 2\n    SOME_ENUM_VALUE3 = 3\ndef func1(a: SomeEnum) -> Literal[3]:\n    if a == SomeEnum.SOME_ENUM_VALUE1 or a == SomeEnum.SOME_ENUM_VALUE2:\n        return 3\n    else:\n        return a.value\ndef func2(a: SomeEnum) -> Literal[3]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "MyEnum",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "class MyEnum(Enum):\n    ZERO = 0\n    ONE = 1\ndef func5(x: Union[MyEnum, str]):\n    if x is MyEnum.ZERO:\n        reveal_type(x, expected_text=\"Literal[MyEnum.ZERO]\")\n    elif x is MyEnum.ONE:\n        reveal_type(x, expected_text=\"Literal[MyEnum.ONE]\")\n    else:\n        reveal_type(x, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def func1(a: SomeEnum) -> Literal[3]:\n    if a == SomeEnum.SOME_ENUM_VALUE1 or a == SomeEnum.SOME_ENUM_VALUE2:\n        return 3\n    else:\n        return a.value\ndef func2(a: SomeEnum) -> Literal[3]:\n    if a == SomeEnum.SOME_ENUM_VALUE1:\n        return 3\n    elif a == SomeEnum.SOME_ENUM_VALUE2:\n        return 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def func2(a: SomeEnum) -> Literal[3]:\n    if a == SomeEnum.SOME_ENUM_VALUE1:\n        return 3\n    elif a == SomeEnum.SOME_ENUM_VALUE2:\n        return 3\n    else:\n        return a.value\ndef must_be_true(a: Literal[True]):\n    ...\ndef must_be_false(a: Literal[False]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "must_be_true",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def must_be_true(a: Literal[True]):\n    ...\ndef must_be_false(a: Literal[False]):\n    ...\ndef func3(a: bool):\n    if a == True:\n        must_be_true(a)\n    else:\n        must_be_false(a)\ndef func4(a: bool):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "must_be_false",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def must_be_false(a: Literal[False]):\n    ...\ndef func3(a: bool):\n    if a == True:\n        must_be_true(a)\n    else:\n        must_be_false(a)\ndef func4(a: bool):\n    if not a:\n        must_be_false(a)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def func3(a: bool):\n    if a == True:\n        must_be_true(a)\n    else:\n        must_be_false(a)\ndef func4(a: bool):\n    if not a:\n        must_be_false(a)\n    else:\n        must_be_true(a)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def func4(a: bool):\n    if not a:\n        must_be_false(a)\n    else:\n        must_be_true(a)\nclass MyEnum(Enum):\n    ZERO = 0\n    ONE = 1\ndef func5(x: Union[MyEnum, str]):\n    if x is MyEnum.ZERO:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "peekOfCode": "def func5(x: Union[MyEnum, str]):\n    if x is MyEnum.ZERO:\n        reveal_type(x, expected_text=\"Literal[MyEnum.ZERO]\")\n    elif x is MyEnum.ONE:\n        reveal_type(x, expected_text=\"Literal[MyEnum.ONE]\")\n    else:\n        reveal_type(x, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteral2",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class A:\n    kind: Literal[\"A\"]\n    kind_class: ClassVar[Literal[\"A\"]]\n    d: Literal[1, 2, 3]\n    is_a: Literal[True]\nclass B:\n    kind: Literal[\"B\"]\n    kind_class: ClassVar[Literal[\"B\"]]\n    d: Literal[3, 4, 5]\n    is_a: Literal[False]",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class B:\n    kind: Literal[\"B\"]\n    kind_class: ClassVar[Literal[\"B\"]]\n    d: Literal[3, 4, 5]\n    is_a: Literal[False]\nclass C:\n    kind: str\n    kind_class: str\n    c: int\n    is_a: bool",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class C:\n    kind: str\n    kind_class: str\n    c: int\n    is_a: bool\nclass D:\n    kind: Literal[1, 2, 3]\ndef eq_obj1(c: Union[A, B]):\n    if c.kind == \"A\":\n        reveal_type(c, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class D:\n    kind: Literal[1, 2, 3]\ndef eq_obj1(c: Union[A, B]):\n    if c.kind == \"A\":\n        reveal_type(c, expected_text=\"A\")\n    else:\n        reveal_type(c, expected_text=\"B\")\ndef is_obj1_1(c: Union[A, B]):\n    if c.kind is \"A\":\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class E:\n    @property\n    def type(self) -> Literal[0]:\n        return 0\nclass F:\n    @property\n    def type(self) -> Literal[1]:\n        return 1\ndef test(x: E | F) -> None:\n    if x.type == 1:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "F",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class F:\n    @property\n    def type(self) -> Literal[1]:\n        return 1\ndef test(x: E | F) -> None:\n    if x.type == 1:\n        reveal_type(x, expected_type=\"F\")\n    else:\n        reveal_type(x, expected_type=\"E\")\nclass G:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class G:\n    type: Literal[0]\nclass H:\n    type: Literal[1]\nclass I:\n    thing: G | H\n    def method1(self) -> None:\n        if self.thing.type == 1:\n            reveal_type(self.thing, expected_text=\"H\")\n        local = self.thing",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class H:\n    type: Literal[1]\nclass I:\n    thing: G | H\n    def method1(self) -> None:\n        if self.thing.type == 1:\n            reveal_type(self.thing, expected_text=\"H\")\n        local = self.thing\n        if local.type == 1:\n            reveal_type(local, expected_text=\"H\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "class I:\n    thing: G | H\n    def method1(self) -> None:\n        if self.thing.type == 1:\n            reveal_type(self.thing, expected_text=\"H\")\n        local = self.thing\n        if local.type == 1:\n            reveal_type(local, expected_text=\"H\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "eq_obj1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def eq_obj1(c: Union[A, B]):\n    if c.kind == \"A\":\n        reveal_type(c, expected_text=\"A\")\n    else:\n        reveal_type(c, expected_text=\"B\")\ndef is_obj1_1(c: Union[A, B]):\n    if c.kind is \"A\":\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_obj1_1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_obj1_1(c: Union[A, B]):\n    if c.kind is \"A\":\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")\ndef is_obj1_2(c: Union[A, B]):\n    if c.is_a is False:\n        reveal_type(c, expected_text=\"B\")\n    else:\n        reveal_type(c, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_obj1_2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_obj1_2(c: Union[A, B]):\n    if c.is_a is False:\n        reveal_type(c, expected_text=\"B\")\n    else:\n        reveal_type(c, expected_text=\"A\")\ndef eq_obj2(c: Union[A, B]):\n    if c.kind != \"A\":\n        reveal_type(c, expected_text=\"B\")\n    else:\n        reveal_type(c, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "eq_obj2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def eq_obj2(c: Union[A, B]):\n    if c.kind != \"A\":\n        reveal_type(c, expected_text=\"B\")\n    else:\n        reveal_type(c, expected_text=\"A\")\ndef is_obj2(c: Union[A, B]):\n    if c.kind is not \"A\":\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_obj2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_obj2(c: Union[A, B]):\n    if c.kind is not \"A\":\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")\ndef eq_obj3(c: Union[A, B, C]):\n    if c.kind == \"A\":\n        reveal_type(c, expected_text=\"A | C\")\n    else:\n        reveal_type(c, expected_text=\"B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "eq_obj3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def eq_obj3(c: Union[A, B, C]):\n    if c.kind == \"A\":\n        reveal_type(c, expected_text=\"A | C\")\n    else:\n        reveal_type(c, expected_text=\"B | C\")\ndef is_obj3(c: Union[A, B, C]):\n    if c.kind is \"A\":\n        reveal_type(c, expected_text=\"A | B | C\")\n    else:\n        reveal_type(c, expected_text=\"A | B | C\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_obj3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_obj3(c: Union[A, B, C]):\n    if c.kind is \"A\":\n        reveal_type(c, expected_text=\"A | B | C\")\n    else:\n        reveal_type(c, expected_text=\"A | B | C\")\ndef eq_obj4(c: Union[A, B]):\n    if c.d == 1:\n        reveal_type(c, expected_text=\"A\")\n    elif c.d == 3:\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "eq_obj4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def eq_obj4(c: Union[A, B]):\n    if c.d == 1:\n        reveal_type(c, expected_text=\"A\")\n    elif c.d == 3:\n        reveal_type(c, expected_text=\"A | B\")\ndef is_obj4(c: Union[A, B]):\n    if c.d is 1:\n        reveal_type(c, expected_text=\"A | B\")\n    elif c.d is 3:\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_obj4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_obj4(c: Union[A, B]):\n    if c.d is 1:\n        reveal_type(c, expected_text=\"A | B\")\n    elif c.d is 3:\n        reveal_type(c, expected_text=\"A | B\")\ndef eq_obj5(d: D):\n    if d.kind == 1:\n        reveal_type(d, expected_text=\"D\")\n    elif d.kind == 2:\n        reveal_type(d, expected_text=\"D\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "eq_obj5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def eq_obj5(d: D):\n    if d.kind == 1:\n        reveal_type(d, expected_text=\"D\")\n    elif d.kind == 2:\n        reveal_type(d, expected_text=\"D\")\ndef is_obj5(d: D):\n    if d.kind is 1:\n        reveal_type(d, expected_text=\"D\")\n    elif d.kind is 2:\n        reveal_type(d, expected_text=\"D\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_obj5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_obj5(d: D):\n    if d.kind is 1:\n        reveal_type(d, expected_text=\"D\")\n    elif d.kind is 2:\n        reveal_type(d, expected_text=\"D\")\ndef eq_class2(c: Union[Type[A], Type[B]]):\n    if c.kind_class == \"A\":\n        reveal_type(c, expected_text=\"Type[A]\")\n    else:\n        reveal_type(c, expected_text=\"Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "eq_class2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def eq_class2(c: Union[Type[A], Type[B]]):\n    if c.kind_class == \"A\":\n        reveal_type(c, expected_text=\"Type[A]\")\n    else:\n        reveal_type(c, expected_text=\"Type[B]\")\ndef is_class2(c: Union[Type[A], Type[B]]):\n    if c.kind_class is \"A\":\n        reveal_type(c, expected_text=\"Type[A] | Type[B]\")\n    else:\n        reveal_type(c, expected_text=\"Type[A] | Type[B]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "is_class2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def is_class2(c: Union[Type[A], Type[B]]):\n    if c.kind_class is \"A\":\n        reveal_type(c, expected_text=\"Type[A] | Type[B]\")\n    else:\n        reveal_type(c, expected_text=\"Type[A] | Type[B]\")\nclass E:\n    @property\n    def type(self) -> Literal[0]:\n        return 0\nclass F:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "peekOfCode": "def test(x: E | F) -> None:\n    if x.type == 1:\n        reveal_type(x, expected_type=\"F\")\n    else:\n        reveal_type(x, expected_type=\"E\")\nclass G:\n    type: Literal[0]\nclass H:\n    type: Literal[1]\nclass I:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLiteralMember1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "class A:\n    a: int\nclass B:\n    b: int\ndef func1(x: Union[A, B]) -> None:\n    is_a = not not isinstance(x, A)\n    if not is_a:\n        reveal_type(x, expected_text=\"B\")\n    else:\n        reveal_type(x, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "class B:\n    b: int\ndef func1(x: Union[A, B]) -> None:\n    is_a = not not isinstance(x, A)\n    if not is_a:\n        reveal_type(x, expected_text=\"B\")\n    else:\n        reveal_type(x, expected_text=\"A\")\ndef func2(x: Union[A, B]) -> None:\n    is_a = isinstance(x, A)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func1(x: Union[A, B]) -> None:\n    is_a = not not isinstance(x, A)\n    if not is_a:\n        reveal_type(x, expected_text=\"B\")\n    else:\n        reveal_type(x, expected_text=\"A\")\ndef func2(x: Union[A, B]) -> None:\n    is_a = isinstance(x, A)\n    if random.random() < 0.5:\n        x = B()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func2(x: Union[A, B]) -> None:\n    is_a = isinstance(x, A)\n    if random.random() < 0.5:\n        x = B()\n    if is_a:\n        reveal_type(x, expected_text=\"B | A\")\n    else:\n        reveal_type(x, expected_text=\"B | A\")\ndef func3(x: Optional[int]):\n    is_number = x != None",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func3(x: Optional[int]):\n    is_number = x != None\n    if is_number:\n        reveal_type(x, expected_text=\"int\")\n    else:\n        reveal_type(x, expected_text=\"None\")\ndef func4() -> Optional[A]:\n    return A() if random.random() < 0.5 else None\nmaybe_a1 = func4()\nis_a1 = maybe_a1",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func4() -> Optional[A]:\n    return A() if random.random() < 0.5 else None\nmaybe_a1 = func4()\nis_a1 = maybe_a1\nif is_a1:\n    reveal_type(maybe_a1, expected_text=\"A\")\nelse:\n    reveal_type(maybe_a1, expected_text=\"None\")\nmaybe_a2 = func4()\ndef func5():",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func5():\n    global maybe_a2\n    maybe_a2 = False\nis_a2 = maybe_a2\nif is_a2:\n    reveal_type(maybe_a2, expected_text=\"A | None\")\nelse:\n    reveal_type(maybe_a2, expected_text=\"A | None\")\ndef func6(x: Union[A, B]) -> None:\n    is_a = isinstance(x, A)",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func6(x: Union[A, B]) -> None:\n    is_a = isinstance(x, A)\n    for y in range(1):\n        if is_a:\n            reveal_type(x, expected_text=\"A | B\")\n        else:\n            reveal_type(x, expected_text=\"A | B\")\n        if random.random() < 0.5:\n            x = B()\ndef get_string() -> str:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "get_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def get_string() -> str:\n    ...\ndef get_optional_string() -> Optional[str]:\n    ...\ndef func7(val: Optional[str] = None):\n    val = get_optional_string()\n    val_is_none = val is None\n    if val_is_none:\n        val = get_string()\n    reveal_type(val, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "get_optional_string",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def get_optional_string() -> Optional[str]:\n    ...\ndef func7(val: Optional[str] = None):\n    val = get_optional_string()\n    val_is_none = val is None\n    if val_is_none:\n        val = get_string()\n    reveal_type(val, expected_text=\"str\")\ndef func8(val: Optional[str] = None):\n    val = get_optional_string()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func7(val: Optional[str] = None):\n    val = get_optional_string()\n    val_is_none = val is None\n    if val_is_none:\n        val = get_string()\n    reveal_type(val, expected_text=\"str\")\ndef func8(val: Optional[str] = None):\n    val = get_optional_string()\n    val_is_none = val is None\n    val = get_optional_string()",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func8(val: Optional[str] = None):\n    val = get_optional_string()\n    val_is_none = val is None\n    val = get_optional_string()\n    if val_is_none:\n        val = get_string()\n    reveal_type(val, expected_text=\"str | None\")\ndef func9(var: Optional[str] = None):\n    if var_not_None := not (var is None):\n        reveal_type(var, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "def func9(var: Optional[str] = None):\n    if var_not_None := not (var is None):\n        reveal_type(var, expected_text=\"str\")\n    reveal_type(var, expected_text=\"str | None\")\n    if var_not_None:\n        reveal_type(var, expected_text=\"str\")\n    if 1 > 1 + 2:\n        var = None\n    else:\n        var = \"a\" + \"b\"",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "maybe_a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "maybe_a1 = func4()\nis_a1 = maybe_a1\nif is_a1:\n    reveal_type(maybe_a1, expected_text=\"A\")\nelse:\n    reveal_type(maybe_a1, expected_text=\"None\")\nmaybe_a2 = func4()\ndef func5():\n    global maybe_a2\n    maybe_a2 = False",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "is_a1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "is_a1 = maybe_a1\nif is_a1:\n    reveal_type(maybe_a1, expected_text=\"A\")\nelse:\n    reveal_type(maybe_a1, expected_text=\"None\")\nmaybe_a2 = func4()\ndef func5():\n    global maybe_a2\n    maybe_a2 = False\nis_a2 = maybe_a2",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "maybe_a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "maybe_a2 = func4()\ndef func5():\n    global maybe_a2\n    maybe_a2 = False\nis_a2 = maybe_a2\nif is_a2:\n    reveal_type(maybe_a2, expected_text=\"A | None\")\nelse:\n    reveal_type(maybe_a2, expected_text=\"A | None\")\ndef func6(x: Union[A, B]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "is_a2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "peekOfCode": "is_a2 = maybe_a2\nif is_a2:\n    reveal_type(maybe_a2, expected_text=\"A | None\")\nelse:\n    reveal_type(maybe_a2, expected_text=\"A | None\")\ndef func6(x: Union[A, B]) -> None:\n    is_a = isinstance(x, A)\n    for y in range(1):\n        if is_a:\n            reveal_type(x, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingLocalConst1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "class A:\n    @property\n    def prop1(self) -> Optional[int]:\n        ...\n    member1: None\n    member2: Optional[int]\n    member3: Optional[int]\n    member4: Optional[int]\nclass B:\n    @property",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "class B:\n    @property\n    def prop1(self) -> int:\n        ...\n    member1: int\n    member2: Optional[int]\n    member3: None\n    member4: int\ndef func3(c: Union[A, B]):\n    if c.prop1 is None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func1(a: Union[IntFirst, StrSecond]) -> IntFirst:\n    if a.second is None:\n        reveal_type(a, expected_text=\"IntFirst\")\n        return a\n    else:\n        reveal_type(a, expected_text=\"StrSecond\")\n        raise ValueError()\nUnionFirst = NamedTuple(\n    \"UnionFirst\",\n    [",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func2(a: Union[UnionFirst, StrSecond]):\n    if a.first is None:\n        reveal_type(a, expected_text=\"UnionFirst | StrSecond\")\n    else:\n        reveal_type(a, expected_text=\"UnionFirst\")\nclass A:\n    @property\n    def prop1(self) -> Optional[int]:\n        ...\n    member1: None",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func3(c: Union[A, B]):\n    if c.prop1 is None:\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")\ndef func4(c: Union[A, B]):\n    if c.member1 is None:\n        reveal_type(c, expected_text=\"A\")\n    else:\n        reveal_type(c, expected_text=\"B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func4(c: Union[A, B]):\n    if c.member1 is None:\n        reveal_type(c, expected_text=\"A\")\n    else:\n        reveal_type(c, expected_text=\"B\")\ndef func5(c: Union[A, B]):\n    if c.member2 is None:\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func5(c: Union[A, B]):\n    if c.member2 is None:\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")\ndef func6(c: Union[A, B]):\n    if c.member3 is not None:\n        reveal_type(c, expected_text=\"A\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func6(c: Union[A, B]):\n    if c.member3 is not None:\n        reveal_type(c, expected_text=\"A\")\n    else:\n        reveal_type(c, expected_text=\"A | B\")\ndef func7(c: Union[A, B]):\n    if c.member4 is not None:\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "def func7(c: Union[A, B]):\n    if c.member4 is not None:\n        reveal_type(c, expected_text=\"A | B\")\n    else:\n        reveal_type(c, expected_text=\"A\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "IntFirst",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "IntFirst = NamedTuple(\n    \"IntFirst\",\n    [\n        (\"first\", int),\n        (\"second\", None),\n    ],\n)\nStrSecond = NamedTuple(\n    \"StrSecond\",\n    [",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "StrSecond",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "StrSecond = NamedTuple(\n    \"StrSecond\",\n    [\n        (\"first\", None),\n        (\"second\", str),\n    ],\n)\ndef func1(a: Union[IntFirst, StrSecond]) -> IntFirst:\n    if a.second is None:\n        reveal_type(a, expected_text=\"IntFirst\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "UnionFirst",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "peekOfCode": "UnionFirst = NamedTuple(\n    \"UnionFirst\",\n    [\n        (\"first\", Union[None, int]),\n        (\"second\", None),\n    ],\n)\ndef func2(a: Union[UnionFirst, StrSecond]):\n    if a.first is None:\n        reveal_type(a, expected_text=\"UnionFirst | StrSecond\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingNoneMember1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "peekOfCode": "def func1(m: Msg):\n    if m[0] == 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[1], str]\")\n    else:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\ndef func2(m: Msg):\n    if m[0] != 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\n    else:\n        reveal_type(m, expected_text=\"Tuple[Literal[1], str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "peekOfCode": "def func2(m: Msg):\n    if m[0] != 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\n    else:\n        reveal_type(m, expected_text=\"Tuple[Literal[1], str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "documentation": {}
    },
    {
        "label": "MsgA",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "peekOfCode": "MsgA = Tuple[Literal[1], str]\nMsgB = Tuple[Literal[2], float]\nMsg = Union[MsgA, MsgB]\ndef func1(m: Msg):\n    if m[0] == 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[1], str]\")\n    else:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\ndef func2(m: Msg):\n    if m[0] != 1:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "documentation": {}
    },
    {
        "label": "MsgB",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "peekOfCode": "MsgB = Tuple[Literal[2], float]\nMsg = Union[MsgA, MsgB]\ndef func1(m: Msg):\n    if m[0] == 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[1], str]\")\n    else:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\ndef func2(m: Msg):\n    if m[0] != 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "documentation": {}
    },
    {
        "label": "Msg",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "peekOfCode": "Msg = Union[MsgA, MsgB]\ndef func1(m: Msg):\n    if m[0] == 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[1], str]\")\n    else:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\ndef func2(m: Msg):\n    if m[0] != 1:\n        reveal_type(m, expected_text=\"Tuple[Literal[2], float]\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTuple1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "peekOfCode": "def func1(val: Union[Tuple[int], Tuple[int, int], Tuple[str, str]]):\n    if len(val) == 1:\n        reveal_type(val, expected_text=\"Tuple[int]\")\n    else:\n        reveal_type(val, expected_text=\"Tuple[int, int] | Tuple[str, str]\")\n    if len(val) != 2:\n        reveal_type(val, expected_text=\"Tuple[int]\")\n    else:\n        reveal_type(val, expected_text=\"Tuple[int, int] | Tuple[str, str]\")\ndef func2(val: Union[Tuple[int], Tuple[int, ...]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "peekOfCode": "def func2(val: Union[Tuple[int], Tuple[int, ...]]):\n    if len(val) == 1:\n        reveal_type(val, expected_text=\"Tuple[int] | Tuple[int, ...]\")\n    else:\n        reveal_type(val, expected_text=\"Tuple[int, ...]\")\n    if len(val) != 2:\n        reveal_type(val, expected_text=\"Tuple[int] | Tuple[int, ...]\")\n    else:\n        reveal_type(val, expected_text=\"Tuple[int, ...]\")\ndef func3(val: Union[Tuple[int], Tuple[()]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "peekOfCode": "def func3(val: Union[Tuple[int], Tuple[()]]):\n    if len(val) == 0:\n        reveal_type(val, expected_text=\"Tuple[()]\")\n    else:\n        reveal_type(val, expected_text=\"Tuple[int]\")\n_T1 = TypeVar(\"_T1\", bound=Tuple[int])\n_T2 = TypeVar(\"_T2\", bound=Tuple[str, str])\ndef func4(val: Union[_T1, _T2]) -> Union[_T1, _T2]:\n    if len(val) == 1:\n        reveal_type(val, expected_text=\"_T1@func4\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "peekOfCode": "def func4(val: Union[_T1, _T2]) -> Union[_T1, _T2]:\n    if len(val) == 1:\n        reveal_type(val, expected_text=\"_T1@func4\")\n    else:\n        reveal_type(val, expected_text=\"_T2@func4\")\n    return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=Tuple[int])\n_T2 = TypeVar(\"_T2\", bound=Tuple[str, str])\ndef func4(val: Union[_T1, _T2]) -> Union[_T1, _T2]:\n    if len(val) == 1:\n        reveal_type(val, expected_text=\"_T1@func4\")\n    else:\n        reveal_type(val, expected_text=\"_T2@func4\")\n    return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=Tuple[str, str])\ndef func4(val: Union[_T1, _T2]) -> Union[_T1, _T2]:\n    if len(val) == 1:\n        reveal_type(val, expected_text=\"_T1@func4\")\n    else:\n        reveal_type(val, expected_text=\"_T2@func4\")\n    return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTupleLength1",
        "documentation": {}
    },
    {
        "label": "TD1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "class TD1(TypedDict):\n    a: str\n    b: int\n@final\nclass TD2(TypedDict):\n    a: int\n    c: str\n@final\nclass TD3(TypedDict, total=False):\n    a: int",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "TD2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "class TD2(TypedDict):\n    a: int\n    c: str\n@final\nclass TD3(TypedDict, total=False):\n    a: int\n    d: str\nclass TD4(TypedDict):\n    a: int\n    c: str",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "TD3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "class TD3(TypedDict, total=False):\n    a: int\n    d: str\nclass TD4(TypedDict):\n    a: int\n    c: str\ndef f1(p: Union[TD1, TD2]):\n    if \"b\" in p:\n        reveal_type(p, expected_text=\"TD1\")\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "TD4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "class TD4(TypedDict):\n    a: int\n    c: str\ndef f1(p: Union[TD1, TD2]):\n    if \"b\" in p:\n        reveal_type(p, expected_text=\"TD1\")\n    else:\n        reveal_type(p, expected_text=\"TD2\")\ndef f2(p: Union[TD1, TD2]):\n    if \"b\" not in p:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f1(p: Union[TD1, TD2]):\n    if \"b\" in p:\n        reveal_type(p, expected_text=\"TD1\")\n    else:\n        reveal_type(p, expected_text=\"TD2\")\ndef f2(p: Union[TD1, TD2]):\n    if \"b\" not in p:\n        reveal_type(p, expected_text=\"TD2\")\n    else:\n        reveal_type(p, expected_text=\"TD1\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f2(p: Union[TD1, TD2]):\n    if \"b\" not in p:\n        reveal_type(p, expected_text=\"TD2\")\n    else:\n        reveal_type(p, expected_text=\"TD1\")\ndef f3(p: Union[TD1, TD3]):\n    if \"d\" in p:\n        reveal_type(p, expected_text=\"TD3\")\n    else:\n        reveal_type(p, expected_text=\"TD1 | TD3\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f3(p: Union[TD1, TD3]):\n    if \"d\" in p:\n        reveal_type(p, expected_text=\"TD3\")\n    else:\n        reveal_type(p, expected_text=\"TD1 | TD3\")\ndef f4(p: Union[TD1, TD3]):\n    if \"d\" not in p:\n        reveal_type(p, expected_text=\"TD1 | TD3\")\n    else:\n        reveal_type(p, expected_text=\"TD3\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f4(p: Union[TD1, TD3]):\n    if \"d\" not in p:\n        reveal_type(p, expected_text=\"TD1 | TD3\")\n    else:\n        reveal_type(p, expected_text=\"TD3\")\ndef f5(p: Union[TD1, TD3]):\n    if \"a\" in p:\n        reveal_type(p, expected_text=\"TD1 | TD3\")\n    else:\n        reveal_type(p, expected_text=\"TD3\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f5(p: Union[TD1, TD3]):\n    if \"a\" in p:\n        reveal_type(p, expected_text=\"TD1 | TD3\")\n    else:\n        reveal_type(p, expected_text=\"TD3\")\ndef f6(p: Union[TD1, TD2, TD3]):\n    # This should generate an error for TD3.\n    v1 = p[\"a\"]\n    v2 = p.get(\"a\")\n    if \"c\" in p:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f6(p: Union[TD1, TD2, TD3]):\n    # This should generate an error for TD3.\n    v1 = p[\"a\"]\n    v2 = p.get(\"a\")\n    if \"c\" in p:\n        v3 = p[\"c\"]\n        reveal_type(v3, expected_text=\"str\")\n    if \"a\" in p and \"d\" in p:\n        v4 = p[\"a\"]\n        reveal_type(v4, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f7(p: TD3):\n    pass\ndef f8(p: TD3):\n    if \"a\" in p:\n        f7(p)\ndef f9(p: Union[TD1, TD4]):\n    if \"b\" in p:\n        reveal_type(p, expected_text=\"TD1 | TD4\")\n    else:\n        reveal_type(p, expected_text=\"TD4\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f8(p: TD3):\n    if \"a\" in p:\n        f7(p)\ndef f9(p: Union[TD1, TD4]):\n    if \"b\" in p:\n        reveal_type(p, expected_text=\"TD1 | TD4\")\n    else:\n        reveal_type(p, expected_text=\"TD4\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "f9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "peekOfCode": "def f9(p: Union[TD1, TD4]):\n    if \"b\" in p:\n        reveal_type(p, expected_text=\"TD1 | TD4\")\n    else:\n        reveal_type(p, expected_text=\"TD4\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict1",
        "documentation": {}
    },
    {
        "label": "NewJobEvent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "peekOfCode": "class NewJobEvent(TypedDict):\n    tag: Literal[\"new-job\"]\n    job_name: str\n    config_file_path: str\nclass CancelJobEvent(TypedDict):\n    tag: Literal[2]\n    job_id: int\nclass OtherEvent(TypedDict):\n    tag: Literal[\"other-job\"]\n    message: str",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "documentation": {}
    },
    {
        "label": "CancelJobEvent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "peekOfCode": "class CancelJobEvent(TypedDict):\n    tag: Literal[2]\n    job_id: int\nclass OtherEvent(TypedDict):\n    tag: Literal[\"other-job\"]\n    message: str\nEvent = Union[NewJobEvent, CancelJobEvent, OtherEvent]\ndef process_event(event: Event) -> None:\n    if event[\"tag\"] == \"new-job\":\n        reveal_type(event, expected_text=\"NewJobEvent\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "documentation": {}
    },
    {
        "label": "OtherEvent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "peekOfCode": "class OtherEvent(TypedDict):\n    tag: Literal[\"other-job\"]\n    message: str\nEvent = Union[NewJobEvent, CancelJobEvent, OtherEvent]\ndef process_event(event: Event) -> None:\n    if event[\"tag\"] == \"new-job\":\n        reveal_type(event, expected_text=\"NewJobEvent\")\n        event[\"job_name\"]\n    elif event[\"tag\"] == 2:\n        reveal_type(event, expected_text=\"CancelJobEvent\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "documentation": {}
    },
    {
        "label": "process_event",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "peekOfCode": "def process_event(event: Event) -> None:\n    if event[\"tag\"] == \"new-job\":\n        reveal_type(event, expected_text=\"NewJobEvent\")\n        event[\"job_name\"]\n    elif event[\"tag\"] == 2:\n        reveal_type(event, expected_text=\"CancelJobEvent\")\n        event[\"job_id\"]\n    else:\n        reveal_type(event, expected_text=\"OtherEvent\")\n        event[\"message\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "documentation": {}
    },
    {
        "label": "Event",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "peekOfCode": "Event = Union[NewJobEvent, CancelJobEvent, OtherEvent]\ndef process_event(event: Event) -> None:\n    if event[\"tag\"] == \"new-job\":\n        reveal_type(event, expected_text=\"NewJobEvent\")\n        event[\"job_name\"]\n    elif event[\"tag\"] == 2:\n        reveal_type(event, expected_text=\"CancelJobEvent\")\n        event[\"job_id\"]\n    else:\n        reveal_type(event, expected_text=\"OtherEvent\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict2",
        "documentation": {}
    },
    {
        "label": "MyDict1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict3",
        "peekOfCode": "class MyDict1(TypedDict, total=False):\n    key1: int\n    key2: str\nmy_dict1: MyDict1 = {\"key1\": 1}\nmy_dict1[\"key1\"]\n# This should generate an error because \"key2\" isn't included in the\n# narrowed type.\nmy_dict1[\"key2\"]\nif \"key2\" in my_dict1:\n    my_dict1[\"key2\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict3",
        "documentation": {}
    },
    {
        "label": "MyDict2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict3",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict3",
        "peekOfCode": "class MyDict2(TypedDict, total=False):\n    key3: MyDict1\n    key4: MyDict1\n    key5: MyDict1\nmy_dict2: MyDict2 = {\"key3\": {\"key1\": 3}, \"key4\": {}}\nmy_dict2[\"key3\"]\nmy_dict2[\"key4\"]\n# This should generate an error because \"key5\" isn't included in the\n# narrowed type.\nmy_dict2[\"key5\"]",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypedDict3",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\ndef func4(a: Union[str, A]):\n    if type(a) is B:\n        reveal_type(a, expected_text=\"B\")\n    else:\n        reveal_type(a, expected_text=\"str | A\")\nT = TypeVar(\"T\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class B(A):\n    pass\ndef func4(a: Union[str, A]):\n    if type(a) is B:\n        reveal_type(a, expected_text=\"B\")\n    else:\n        reveal_type(a, expected_text=\"str | A\")\nT = TypeVar(\"T\")\nclass C(Generic[T]):\n    def __init__(self, a: T):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class C(Generic[T]):\n    def __init__(self, a: T):\n        self.a = a\nclass D:\n    pass\nE = Union[C[T], D]\ndef func5(x: E[T]) -> None:\n    if type(x) is C:\n        reveal_type(x, expected_text=\"C[T@func5]\")\n@final",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class D:\n    pass\nE = Union[C[T], D]\ndef func5(x: E[T]) -> None:\n    if type(x) is C:\n        reveal_type(x, expected_text=\"C[T@func5]\")\n@final\nclass AFinal:\n    pass\n@final",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "AFinal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class AFinal:\n    pass\n@final\nclass BFinal:\n    pass\ndef func6(val: Union[AFinal, BFinal]) -> None:\n    if type(val) is AFinal:\n        reveal_type(val, expected_text=\"AFinal\")\n    else:\n        reveal_type(val, expected_text=\"BFinal\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "BFinal",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class BFinal:\n    pass\ndef func6(val: Union[AFinal, BFinal]) -> None:\n    if type(val) is AFinal:\n        reveal_type(val, expected_text=\"AFinal\")\n    else:\n        reveal_type(val, expected_text=\"BFinal\")\ndef func7(val: Any):\n    if type(val) is int:\n        reveal_type(val, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "CParent",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class CParent:\n    ...\nclass CChild(CParent):\n    ...\n_TC = TypeVar(\"_TC\", bound=CParent)\ndef func8(a: _TC, b: _TC) -> _TC:\n    if type(a) is CChild:\n        reveal_type(a, expected_text=\"CChild*\")\n        return a\n    reveal_type(a, expected_text=\"CParent*\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "CChild",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "class CChild(CParent):\n    ...\n_TC = TypeVar(\"_TC\", bound=CParent)\ndef func8(a: _TC, b: _TC) -> _TC:\n    if type(a) is CChild:\n        reveal_type(a, expected_text=\"CChild*\")\n        return a\n    reveal_type(a, expected_text=\"CParent*\")\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func1(a: Union[str, int]) -> int:\n    if type(a) is not str:\n        # This should generate an error because\n        # \"a\" is potentially a subclass of str.\n        return a\n    # This should generate an error because\n    # \"a\" is provably type str at this point.\n    return a\ndef func2(a: Optional[str]) -> str:\n    if type(a) is str:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func2(a: Optional[str]) -> str:\n    if type(a) is str:\n        return a\n    # This should generate an error because\n    # \"a\" is provably type str at this point.\n    return a\ndef func3(a: Dict[str, Any]) -> str:\n    val = a.get(\"hello\")\n    if type(val) is str:\n        return val",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func3(a: Dict[str, Any]) -> str:\n    val = a.get(\"hello\")\n    if type(val) is str:\n        return val\n    return \"none\"\nclass A:\n    pass\nclass B(A):\n    pass\ndef func4(a: Union[str, A]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func4(a: Union[str, A]):\n    if type(a) is B:\n        reveal_type(a, expected_text=\"B\")\n    else:\n        reveal_type(a, expected_text=\"str | A\")\nT = TypeVar(\"T\")\nclass C(Generic[T]):\n    def __init__(self, a: T):\n        self.a = a\nclass D:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func5(x: E[T]) -> None:\n    if type(x) is C:\n        reveal_type(x, expected_text=\"C[T@func5]\")\n@final\nclass AFinal:\n    pass\n@final\nclass BFinal:\n    pass\ndef func6(val: Union[AFinal, BFinal]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func6(val: Union[AFinal, BFinal]) -> None:\n    if type(val) is AFinal:\n        reveal_type(val, expected_text=\"AFinal\")\n    else:\n        reveal_type(val, expected_text=\"BFinal\")\ndef func7(val: Any):\n    if type(val) is int:\n        reveal_type(val, expected_text=\"int\")\n    else:\n        reveal_type(val, expected_text=\"Any\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func7(val: Any):\n    if type(val) is int:\n        reveal_type(val, expected_text=\"int\")\n    else:\n        reveal_type(val, expected_text=\"Any\")\n    reveal_type(val, expected_text=\"int | Any\")\nclass CParent:\n    ...\nclass CChild(CParent):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "def func8(a: _TC, b: _TC) -> _TC:\n    if type(a) is CChild:\n        reveal_type(a, expected_text=\"CChild*\")\n        return a\n    reveal_type(a, expected_text=\"CParent*\")\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "T = TypeVar(\"T\")\nclass C(Generic[T]):\n    def __init__(self, a: T):\n        self.a = a\nclass D:\n    pass\nE = Union[C[T], D]\ndef func5(x: E[T]) -> None:\n    if type(x) is C:\n        reveal_type(x, expected_text=\"C[T@func5]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "E",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "E = Union[C[T], D]\ndef func5(x: E[T]) -> None:\n    if type(x) is C:\n        reveal_type(x, expected_text=\"C[T@func5]\")\n@final\nclass AFinal:\n    pass\n@final\nclass BFinal:\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "_TC",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "description": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "peekOfCode": "_TC = TypeVar(\"_TC\", bound=CParent)\ndef func8(a: _TC, b: _TC) -> _TC:\n    if type(a) is CChild:\n        reveal_type(a, expected_text=\"CChild*\")\n        return a\n    reveal_type(a, expected_text=\"CParent*\")\n    return a",
        "detail": "packages.pyright-internal.src.tests.samples.typeNarrowingTypeIs1",
        "documentation": {}
    },
    {
        "label": "ClassA[T1]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "class ClassA[T1]:\n    ...\ndef func1[T1]():\n    ...\nT2: str\nclass ClassB[T2]:\n    ...\ndef func2[T2]():\n    ...\n# This should generate an error because T3 is duplicated.",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "ClassB[T2]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "class ClassB[T2]:\n    ...\ndef func2[T2]():\n    ...\n# This should generate an error because T3 is duplicated.\nclass ClassC[T3, S1, T3]:\n    ...\n# This should generate an error because T3 is duplicated.\ndef func3[T3, S1, T3]():\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "ClassC[T3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "class ClassC[T3, S1, T3]:\n    ...\n# This should generate an error because T3 is duplicated.\ndef func3[T3, S1, T3]():\n    ...\ndef func4[T4](T4: int):\n    ...\ndef func5[T5](a: int):\n    # This should generate an error because T5 is already in use.\n    class ClassA[T5]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "func1[T1]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "def func1[T1]():\n    ...\nT2: str\nclass ClassB[T2]:\n    ...\ndef func2[T2]():\n    ...\n# This should generate an error because T3 is duplicated.\nclass ClassC[T3, S1, T3]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "func2[T2]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "def func2[T2]():\n    ...\n# This should generate an error because T3 is duplicated.\nclass ClassC[T3, S1, T3]:\n    ...\n# This should generate an error because T3 is duplicated.\ndef func3[T3, S1, T3]():\n    ...\ndef func4[T4](T4: int):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "func3[T3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "def func3[T3, S1, T3]():\n    ...\ndef func4[T4](T4: int):\n    ...\ndef func5[T5](a: int):\n    # This should generate an error because T5 is already in use.\n    class ClassA[T5]:\n        ...\n    # This should generate an error because T5 is already in use.\n    def inner_func1[T5]():",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "func4[T4]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "def func4[T4](T4: int):\n    ...\ndef func5[T5](a: int):\n    # This should generate an error because T5 is already in use.\n    class ClassA[T5]:\n        ...\n    # This should generate an error because T5 is already in use.\n    def inner_func1[T5]():\n        ...\ndef func6[T6](T7: int):",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "func5[T5]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "def func5[T5](a: int):\n    # This should generate an error because T5 is already in use.\n    class ClassA[T5]:\n        ...\n    # This should generate an error because T5 is already in use.\n    def inner_func1[T5]():\n        ...\ndef func6[T6](T7: int):\n    class ClassA[T7]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "func6[T6]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "def func6[T6](T7: int):\n    class ClassA[T7]:\n        ...\n    def inner_func1[T7]():\n        ...\n    global T2\n    class ClassB[T2]:\n        global T2\n    class ClassC[T3]:\n        T3 = 4",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams1",
        "description": "packages.pyright-internal.src.tests.samples.typeParams1",
        "peekOfCode": "T1 = 0\nclass ClassA[T1]:\n    ...\ndef func1[T1]():\n    ...\nT2: str\nclass ClassB[T2]:\n    ...\ndef func2[T2]():\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams1",
        "documentation": {}
    },
    {
        "label": "ClassA[T",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams2",
        "description": "packages.pyright-internal.src.tests.samples.typeParams2",
        "peekOfCode": "class ClassA[T, S]:\n    ...\n# This should generate an error if <3.12\ndef func1[T, S]():\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams2",
        "documentation": {}
    },
    {
        "label": "func1[T",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams2",
        "description": "packages.pyright-internal.src.tests.samples.typeParams2",
        "peekOfCode": "def func1[T, S]():\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams2",
        "documentation": {}
    },
    {
        "label": "ClassA[S]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams3",
        "description": "packages.pyright-internal.src.tests.samples.typeParams3",
        "peekOfCode": "class ClassA[S]:\n    s: S\n    class ClassB[T](dict[S, T]):\n        s: S\n        t: T\n        def method1[U](self):\n            s: S\n            t: T\n            u: U\n            lambda : (S, T, U)",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams3",
        "documentation": {}
    },
    {
        "label": "func1[A]",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams3",
        "description": "packages.pyright-internal.src.tests.samples.typeParams3",
        "peekOfCode": "def func1[A]():\n    def func2[B]():\n        a: A\n        b: B\n        class ClassC[C](dict[B, C]):\n            a: A\n            b: B\n            c: C\n            def method1[D](self):\n                a: A",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams3",
        "documentation": {}
    },
    {
        "label": "ClassA[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams4",
        "description": "packages.pyright-internal.src.tests.samples.typeParams4",
        "peekOfCode": "class ClassA[T](Generic[T]):\n    ...\nclass ClassB[T](Protocol):\n    ...\n# This should generate an error because Protocol should not be used\n# with type parameters when used with type parameter syntax.\nclass ClassC[T](Protocol[T]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams4",
        "documentation": {}
    },
    {
        "label": "ClassB[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams4",
        "description": "packages.pyright-internal.src.tests.samples.typeParams4",
        "peekOfCode": "class ClassB[T](Protocol):\n    ...\n# This should generate an error because Protocol should not be used\n# with type parameters when used with type parameter syntax.\nclass ClassC[T](Protocol[T]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams4",
        "documentation": {}
    },
    {
        "label": "ClassC[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams4",
        "description": "packages.pyright-internal.src.tests.samples.typeParams4",
        "peekOfCode": "class ClassC[T](Protocol[T]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams4",
        "documentation": {}
    },
    {
        "label": "ClassA[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassA[R, *Ts, **P]:\n    ...\nclass ClassB[R: int | str]:\n    ...\n# This should generate an error because 'dummy' is not declared.\nclass ClassC[R: dummy]:\n    ...\nclass ClassD[R: \"ClassE[Any]\"]:\n    ...\nclass ClassE[T]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassB[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassB[R: int | str]:\n    ...\n# This should generate an error because 'dummy' is not declared.\nclass ClassC[R: dummy]:\n    ...\nclass ClassD[R: \"ClassE[Any]\"]:\n    ...\nclass ClassE[T]:\n    ...\n# This should generate an error because variadic type params don't ",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassC[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassC[R: dummy]:\n    ...\nclass ClassD[R: \"ClassE[Any]\"]:\n    ...\nclass ClassE[T]:\n    ...\n# This should generate an error because variadic type params don't \n# support bound expressions.\nclass ClassF[*Ts: int]: ...\n# This should generate an error because ParamSpecs don't ",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassD[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassD[R: \"ClassE[Any]\"]:\n    ...\nclass ClassE[T]:\n    ...\n# This should generate an error because variadic type params don't \n# support bound expressions.\nclass ClassF[*Ts: int]: ...\n# This should generate an error because ParamSpecs don't \n# support bound expressions.\nclass ClassG[**P: int]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassE[T]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassE[T]:\n    ...\n# This should generate an error because variadic type params don't \n# support bound expressions.\nclass ClassF[*Ts: int]: ...\n# This should generate an error because ParamSpecs don't \n# support bound expressions.\nclass ClassG[**P: int]: ...\n# This should generate an error because the expression isn't\n# a valid type.",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassF[*Ts",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassF[*Ts: int]: ...\n# This should generate an error because ParamSpecs don't \n# support bound expressions.\nclass ClassG[**P: int]: ...\n# This should generate an error because the expression isn't\n# a valid type.\nclass ClassH[R: 1]: ...\n# This should generate an error because a constrained type\n# must contain at least two types.\nclass ClassI[R: ()]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassG[**P",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassG[**P: int]: ...\n# This should generate an error because the expression isn't\n# a valid type.\nclass ClassH[R: 1]: ...\n# This should generate an error because a constrained type\n# must contain at least two types.\nclass ClassI[R: ()]: ...\n# This should generate an error because a constrained type\n# must contain at least two types.\nclass ClassJ[R: (int, )]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassH[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassH[R: 1]: ...\n# This should generate an error because a constrained type\n# must contain at least two types.\nclass ClassI[R: ()]: ...\n# This should generate an error because a constrained type\n# must contain at least two types.\nclass ClassJ[R: (int, )]: ...\nclass ClassK[R: (bytes, str)]: ...\nt2 = (bytes, str)\n# This should generate an error because a literal tuple expression",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassI[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassI[R: ()]: ...\n# This should generate an error because a constrained type\n# must contain at least two types.\nclass ClassJ[R: (int, )]: ...\nclass ClassK[R: (bytes, str)]: ...\nt2 = (bytes, str)\n# This should generate an error because a literal tuple expression\n# must be used for constrained types.\nclass ClassL[R: t2]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassJ[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassJ[R: (int, )]: ...\nclass ClassK[R: (bytes, str)]: ...\nt2 = (bytes, str)\n# This should generate an error because a literal tuple expression\n# must be used for constrained types.\nclass ClassL[R: t2]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassK[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassK[R: (bytes, str)]: ...\nt2 = (bytes, str)\n# This should generate an error because a literal tuple expression\n# must be used for constrained types.\nclass ClassL[R: t2]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassL[R",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "class ClassL[R: t2]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "t2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams5",
        "description": "packages.pyright-internal.src.tests.samples.typeParams5",
        "peekOfCode": "t2 = (bytes, str)\n# This should generate an error because a literal tuple expression\n# must be used for constrained types.\nclass ClassL[R: t2]: ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams5",
        "documentation": {}
    },
    {
        "label": "ClassA[T3]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams6",
        "description": "packages.pyright-internal.src.tests.samples.typeParams6",
        "peekOfCode": "class ClassA[T3](dict[T1, T3]):\n    ...\nclass ClassB(Generic[T1]):\n    class ClassC[T2](dict[T1, T2]):\n        def method1[T3](self, a: T1, b: T2, c: T3) -> T1 | T2 | T3:\n            ...\n        # This should generate an error because traditional type variables\n        # like T4 cannot be combined with new-style type parameters.\n        def method2[T3](self, a: T3, b: T4) -> T3 | T4:\n            ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams6",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams6",
        "description": "packages.pyright-internal.src.tests.samples.typeParams6",
        "peekOfCode": "class ClassB(Generic[T1]):\n    class ClassC[T2](dict[T1, T2]):\n        def method1[T3](self, a: T1, b: T2, c: T3) -> T1 | T2 | T3:\n            ...\n        # This should generate an error because traditional type variables\n        # like T4 cannot be combined with new-style type parameters.\n        def method2[T3](self, a: T3, b: T4) -> T3 | T4:\n            ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams6",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams6",
        "description": "packages.pyright-internal.src.tests.samples.typeParams6",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\")\nT4 = TypeVar(\"T4\")\n# This should generate an error because traditional type variables\n# like T1 cannot be combined with new-style type parameters.\nclass ClassA[T3](dict[T1, T3]):\n    ...\nclass ClassB(Generic[T1]):\n    class ClassC[T2](dict[T1, T2]):\n        def method1[T3](self, a: T1, b: T2, c: T3) -> T1 | T2 | T3:",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams6",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams6",
        "description": "packages.pyright-internal.src.tests.samples.typeParams6",
        "peekOfCode": "T2 = TypeVar(\"T2\")\nT4 = TypeVar(\"T4\")\n# This should generate an error because traditional type variables\n# like T1 cannot be combined with new-style type parameters.\nclass ClassA[T3](dict[T1, T3]):\n    ...\nclass ClassB(Generic[T1]):\n    class ClassC[T2](dict[T1, T2]):\n        def method1[T3](self, a: T1, b: T2, c: T3) -> T1 | T2 | T3:\n            ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams6",
        "documentation": {}
    },
    {
        "label": "T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams6",
        "description": "packages.pyright-internal.src.tests.samples.typeParams6",
        "peekOfCode": "T4 = TypeVar(\"T4\")\n# This should generate an error because traditional type variables\n# like T1 cannot be combined with new-style type parameters.\nclass ClassA[T3](dict[T1, T3]):\n    ...\nclass ClassB(Generic[T1]):\n    class ClassC[T2](dict[T1, T2]):\n        def method1[T3](self, a: T1, b: T2, c: T3) -> T1 | T2 | T3:\n            ...\n        # This should generate an error because traditional type variables",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams6",
        "documentation": {}
    },
    {
        "label": "ClassA[**P",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "class ClassA[**P, R: str]:\n    ...\nA1 = ClassA[..., str]\n# This should generate an error because str isn't a valid \n# specialization for a ParamSpec.\nA2 = ClassA[str, str]\nA3 = ClassA[[str], str]\n# This should generate an error because int doesn't conform\n# to the bound.\nA4 = ClassA[..., int]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "StrSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "class StrSubclass(str): ...\nA5 = ClassA[..., StrSubclass]\nclass ClassB[X: (int, str), Y](dict[Y, X]): ...\nB1 = ClassB[int, int]\n# This should generate an error because float doesn't conform\n# to the constraint.\nB2 = ClassB[float, float]\nclass ClassC[*Ts]:\n    ...\nC1 = ClassC[str, str]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "ClassB[X",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "class ClassB[X: (int, str), Y](dict[Y, X]): ...\nB1 = ClassB[int, int]\n# This should generate an error because float doesn't conform\n# to the constraint.\nB2 = ClassB[float, float]\nclass ClassC[*Ts]:\n    ...\nC1 = ClassC[str, str]\nC2 = ClassC[*tuple[str, ...]]\n# This should generate an error because ... isn't valid.",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "ClassC[*Ts]",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "class ClassC[*Ts]:\n    ...\nC1 = ClassC[str, str]\nC2 = ClassC[*tuple[str, ...]]\n# This should generate an error because ... isn't valid.\nC3 = ClassC[...]\nC4 = ClassC[*tuple[()]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "A1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "A1 = ClassA[..., str]\n# This should generate an error because str isn't a valid \n# specialization for a ParamSpec.\nA2 = ClassA[str, str]\nA3 = ClassA[[str], str]\n# This should generate an error because int doesn't conform\n# to the bound.\nA4 = ClassA[..., int]\nclass StrSubclass(str): ...\nA5 = ClassA[..., StrSubclass]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "A2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "A2 = ClassA[str, str]\nA3 = ClassA[[str], str]\n# This should generate an error because int doesn't conform\n# to the bound.\nA4 = ClassA[..., int]\nclass StrSubclass(str): ...\nA5 = ClassA[..., StrSubclass]\nclass ClassB[X: (int, str), Y](dict[Y, X]): ...\nB1 = ClassB[int, int]\n# This should generate an error because float doesn't conform",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "A3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "A3 = ClassA[[str], str]\n# This should generate an error because int doesn't conform\n# to the bound.\nA4 = ClassA[..., int]\nclass StrSubclass(str): ...\nA5 = ClassA[..., StrSubclass]\nclass ClassB[X: (int, str), Y](dict[Y, X]): ...\nB1 = ClassB[int, int]\n# This should generate an error because float doesn't conform\n# to the constraint.",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "A4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "A4 = ClassA[..., int]\nclass StrSubclass(str): ...\nA5 = ClassA[..., StrSubclass]\nclass ClassB[X: (int, str), Y](dict[Y, X]): ...\nB1 = ClassB[int, int]\n# This should generate an error because float doesn't conform\n# to the constraint.\nB2 = ClassB[float, float]\nclass ClassC[*Ts]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "A5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "A5 = ClassA[..., StrSubclass]\nclass ClassB[X: (int, str), Y](dict[Y, X]): ...\nB1 = ClassB[int, int]\n# This should generate an error because float doesn't conform\n# to the constraint.\nB2 = ClassB[float, float]\nclass ClassC[*Ts]:\n    ...\nC1 = ClassC[str, str]\nC2 = ClassC[*tuple[str, ...]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "B1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "B1 = ClassB[int, int]\n# This should generate an error because float doesn't conform\n# to the constraint.\nB2 = ClassB[float, float]\nclass ClassC[*Ts]:\n    ...\nC1 = ClassC[str, str]\nC2 = ClassC[*tuple[str, ...]]\n# This should generate an error because ... isn't valid.\nC3 = ClassC[...]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "B2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "B2 = ClassB[float, float]\nclass ClassC[*Ts]:\n    ...\nC1 = ClassC[str, str]\nC2 = ClassC[*tuple[str, ...]]\n# This should generate an error because ... isn't valid.\nC3 = ClassC[...]\nC4 = ClassC[*tuple[()]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "C1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "C1 = ClassC[str, str]\nC2 = ClassC[*tuple[str, ...]]\n# This should generate an error because ... isn't valid.\nC3 = ClassC[...]\nC4 = ClassC[*tuple[()]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "C2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "C2 = ClassC[*tuple[str, ...]]\n# This should generate an error because ... isn't valid.\nC3 = ClassC[...]\nC4 = ClassC[*tuple[()]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "C3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "C3 = ClassC[...]\nC4 = ClassC[*tuple[()]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "C4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeParams7",
        "description": "packages.pyright-internal.src.tests.samples.typeParams7",
        "peekOfCode": "C4 = ClassC[*tuple[()]]",
        "detail": "packages.pyright-internal.src.tests.samples.typeParams7",
        "documentation": {}
    },
    {
        "label": "IntSubclass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "description": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "peekOfCode": "class IntSubclass(int):\n    ...\ndef func3(x: IntSubclass) -> float:\n    return x\nIntNewType = NewType(\"IntNewType\", int)\ndef func4(x: IntNewType) -> float:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "description": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "peekOfCode": "def func1(float_val: float, int_val: int):\n    v1: float = int_val\n    v2: complex = float_val\n    v3: complex = int_val\ndef func2(mem_view_val: memoryview, byte_array_val: bytearray):\n    v1: bytes = mem_view_val\n    v2: bytes = byte_array_val\nclass IntSubclass(int):\n    ...\ndef func3(x: IntSubclass) -> float:",
        "detail": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "description": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "peekOfCode": "def func2(mem_view_val: memoryview, byte_array_val: bytearray):\n    v1: bytes = mem_view_val\n    v2: bytes = byte_array_val\nclass IntSubclass(int):\n    ...\ndef func3(x: IntSubclass) -> float:\n    return x\nIntNewType = NewType(\"IntNewType\", int)\ndef func4(x: IntNewType) -> float:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "description": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "peekOfCode": "def func3(x: IntSubclass) -> float:\n    return x\nIntNewType = NewType(\"IntNewType\", int)\ndef func4(x: IntNewType) -> float:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "description": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "peekOfCode": "def func4(x: IntNewType) -> float:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "documentation": {}
    },
    {
        "label": "IntNewType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "description": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "peekOfCode": "IntNewType = NewType(\"IntNewType\", int)\ndef func4(x: IntNewType) -> float:\n    return x",
        "detail": "packages.pyright-internal.src.tests.samples.typePromotions1",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar1",
        "description": "packages.pyright-internal.src.tests.samples.typeVar1",
        "peekOfCode": "T1 = TypeVar(\"T1\")\n# This should generate an error because the TypeVar name\n# does not match the name of the variable it is assigned to.\nT2 = TypeVar(\"T3\")\nT4: Any = TypeVar(\"T4\")\nmy_dict = {}\n# This should generate an error because TypeVars cannot be\n# assigned to an index expression.\nmy_dict[\"var\"] = TypeVar(\"T5\")\n# This should generate an error because a TypeVar with a single",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar1",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar1",
        "description": "packages.pyright-internal.src.tests.samples.typeVar1",
        "peekOfCode": "T2 = TypeVar(\"T3\")\nT4: Any = TypeVar(\"T4\")\nmy_dict = {}\n# This should generate an error because TypeVars cannot be\n# assigned to an index expression.\nmy_dict[\"var\"] = TypeVar(\"T5\")\n# This should generate an error because a TypeVar with a single\n# constraint is an error.\nT5 = TypeVar(\"T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar1",
        "documentation": {}
    },
    {
        "label": "my_dict",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar1",
        "description": "packages.pyright-internal.src.tests.samples.typeVar1",
        "peekOfCode": "my_dict = {}\n# This should generate an error because TypeVars cannot be\n# assigned to an index expression.\nmy_dict[\"var\"] = TypeVar(\"T5\")\n# This should generate an error because a TypeVar with a single\n# constraint is an error.\nT5 = TypeVar(\"T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar1",
        "documentation": {}
    },
    {
        "label": "my_dict[\"var\"]",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar1",
        "description": "packages.pyright-internal.src.tests.samples.typeVar1",
        "peekOfCode": "my_dict[\"var\"] = TypeVar(\"T5\")\n# This should generate an error because a TypeVar with a single\n# constraint is an error.\nT5 = TypeVar(\"T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar1",
        "documentation": {}
    },
    {
        "label": "T5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar1",
        "description": "packages.pyright-internal.src.tests.samples.typeVar1",
        "peekOfCode": "T5 = TypeVar(\"T5\", str)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar10",
        "description": "packages.pyright-internal.src.tests.samples.typeVar10",
        "peekOfCode": "class A:\n    def method(self, x: \"A\") -> \"A\":\n        ...\nclass B:\n    def method(self, x: \"B\") -> \"B\":\n        ...\nT = TypeVar(\"T\", A, B)\ndef check(x: T, y: T) -> T:\n    return x.method(y)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar10",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar10",
        "description": "packages.pyright-internal.src.tests.samples.typeVar10",
        "peekOfCode": "class B:\n    def method(self, x: \"B\") -> \"B\":\n        ...\nT = TypeVar(\"T\", A, B)\ndef check(x: T, y: T) -> T:\n    return x.method(y)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar10",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar10",
        "description": "packages.pyright-internal.src.tests.samples.typeVar10",
        "peekOfCode": "def check(x: T, y: T) -> T:\n    return x.method(y)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar10",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar10",
        "description": "packages.pyright-internal.src.tests.samples.typeVar10",
        "peekOfCode": "T = TypeVar(\"T\", A, B)\ndef check(x: T, y: T) -> T:\n    return x.method(y)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar10",
        "documentation": {}
    },
    {
        "label": "combine",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar11",
        "description": "packages.pyright-internal.src.tests.samples.typeVar11",
        "peekOfCode": "def combine(set1: Set[_L1], set2: Set[_L1]) -> None:\n    x = set1 | set2\n    reveal_type(x, expected_text=\"set[Literal['foo', 'bar']]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar11",
        "documentation": {}
    },
    {
        "label": "_L1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar11",
        "description": "packages.pyright-internal.src.tests.samples.typeVar11",
        "peekOfCode": "_L1 = Literal[\"foo\", \"bar\"]\ndef combine(set1: Set[_L1], set2: Set[_L1]) -> None:\n    x = set1 | set2\n    reveal_type(x, expected_text=\"set[Literal['foo', 'bar']]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar11",
        "documentation": {}
    },
    {
        "label": "BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar2",
        "description": "packages.pyright-internal.src.tests.samples.typeVar2",
        "peekOfCode": "class BaseClass:\n    @classmethod\n    def c(cls):\n        return cls\n    def f(self):\n        return self\nclass SubClass(BaseClass):\n    pass\ndef requires_subclass(p1: SubClass):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar2",
        "documentation": {}
    },
    {
        "label": "SubClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar2",
        "description": "packages.pyright-internal.src.tests.samples.typeVar2",
        "peekOfCode": "class SubClass(BaseClass):\n    pass\ndef requires_subclass(p1: SubClass):\n    pass\nx = SubClass().f()\nrequires_subclass(x)\ny = SubClass().c()\nrequires_subclass(y())",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar2",
        "documentation": {}
    },
    {
        "label": "requires_subclass",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar2",
        "description": "packages.pyright-internal.src.tests.samples.typeVar2",
        "peekOfCode": "def requires_subclass(p1: SubClass):\n    pass\nx = SubClass().f()\nrequires_subclass(x)\ny = SubClass().c()\nrequires_subclass(y())",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar2",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar2",
        "description": "packages.pyright-internal.src.tests.samples.typeVar2",
        "peekOfCode": "x = SubClass().f()\nrequires_subclass(x)\ny = SubClass().c()\nrequires_subclass(y())",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar2",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar2",
        "description": "packages.pyright-internal.src.tests.samples.typeVar2",
        "peekOfCode": "y = SubClass().c()\nrequires_subclass(y())",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar2",
        "documentation": {}
    },
    {
        "label": "OuterClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar3",
        "description": "packages.pyright-internal.src.tests.samples.typeVar3",
        "peekOfCode": "class OuterClass(Generic[_T, typing.AnyStr]):\n    # This should generate an error because _S\n    # isn't defined in this context.\n    my_var1: _S\n    my_var2: typing.AnyStr\n    # This should generate an error because _T\n    # is already in use.\n    class InnerClass1(Generic[_T]):\n        ...\n    # This should generate an error because typing.AnyStr",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar3",
        "description": "packages.pyright-internal.src.tests.samples.typeVar3",
        "peekOfCode": "def func1(a: _T) -> Optional[_T]:\n    my_var1: _T\n    # This should generate an error\n    my_var2: _S\n    # This should generate an error because _T\n    # is already in use.\n    class InnerClass3(Generic[_T]):\n        ...\n# This should generate an error.\na: _S = 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar3",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar3",
        "description": "packages.pyright-internal.src.tests.samples.typeVar3",
        "peekOfCode": "def foo() -> Callable[[T], T]:\n    def inner(v: T) -> T:\n        reveal_type(v, expected_text=\"T@foo\")\n        return v\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar3",
        "description": "packages.pyright-internal.src.tests.samples.typeVar3",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_S = TypeVar(\"_S\")\nclass OuterClass(Generic[_T, typing.AnyStr]):\n    # This should generate an error because _S\n    # isn't defined in this context.\n    my_var1: _S\n    my_var2: typing.AnyStr\n    # This should generate an error because _T\n    # is already in use.\n    class InnerClass1(Generic[_T]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar3",
        "documentation": {}
    },
    {
        "label": "_S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar3",
        "description": "packages.pyright-internal.src.tests.samples.typeVar3",
        "peekOfCode": "_S = TypeVar(\"_S\")\nclass OuterClass(Generic[_T, typing.AnyStr]):\n    # This should generate an error because _S\n    # isn't defined in this context.\n    my_var1: _S\n    my_var2: typing.AnyStr\n    # This should generate an error because _T\n    # is already in use.\n    class InnerClass1(Generic[_T]):\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar3",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar3",
        "description": "packages.pyright-internal.src.tests.samples.typeVar3",
        "peekOfCode": "T = TypeVar(\"T\")\ndef foo() -> Callable[[T], T]:\n    def inner(v: T) -> T:\n        reveal_type(v, expected_text=\"T@foo\")\n        return v\n    return inner",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar3",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar4",
        "description": "packages.pyright-internal.src.tests.samples.typeVar4",
        "peekOfCode": "class Foo(Generic[_T, _T_co, _T_contra]):\n    def func1(self, a: _T):\n        pass\n    # This should generate an error because covariant\n    # TypeVars are not allowed for input parameters.\n    def func2(self, a: _T_co):\n        pass\n    def func3(self, a: Union[int, _T_co]):\n        pass\n    def func4(self, a: List[_T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar4",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar4",
        "description": "packages.pyright-internal.src.tests.samples.typeVar4",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_T_co = TypeVar(\"_T_co\", covariant=True)\n_T_contra = TypeVar(\"_T_contra\", contravariant=True)\nclass Foo(Generic[_T, _T_co, _T_contra]):\n    def func1(self, a: _T):\n        pass\n    # This should generate an error because covariant\n    # TypeVars are not allowed for input parameters.\n    def func2(self, a: _T_co):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar4",
        "documentation": {}
    },
    {
        "label": "_T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar4",
        "description": "packages.pyright-internal.src.tests.samples.typeVar4",
        "peekOfCode": "_T_co = TypeVar(\"_T_co\", covariant=True)\n_T_contra = TypeVar(\"_T_contra\", contravariant=True)\nclass Foo(Generic[_T, _T_co, _T_contra]):\n    def func1(self, a: _T):\n        pass\n    # This should generate an error because covariant\n    # TypeVars are not allowed for input parameters.\n    def func2(self, a: _T_co):\n        pass\n    def func3(self, a: Union[int, _T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar4",
        "documentation": {}
    },
    {
        "label": "_T_contra",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar4",
        "description": "packages.pyright-internal.src.tests.samples.typeVar4",
        "peekOfCode": "_T_contra = TypeVar(\"_T_contra\", contravariant=True)\nclass Foo(Generic[_T, _T_co, _T_contra]):\n    def func1(self, a: _T):\n        pass\n    # This should generate an error because covariant\n    # TypeVars are not allowed for input parameters.\n    def func2(self, a: _T_co):\n        pass\n    def func3(self, a: Union[int, _T_co]):\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar4",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar5",
        "description": "packages.pyright-internal.src.tests.samples.typeVar5",
        "peekOfCode": "class ClassA(Generic[_T1, _T2]):\n    async def func1(self, a: _T1):\n        # This should generate an error.\n        _ = a.temp\n        # This should generate an error.\n        _ = a(3)\n        # This should generate an error.\n        _ = a[0]\n        # This should generate an error.\n        _ = a.temp",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar5",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar5",
        "description": "packages.pyright-internal.src.tests.samples.typeVar5",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n_T2 = TypeVar(\"_T2\")\nclass ClassA(Generic[_T1, _T2]):\n    async def func1(self, a: _T1):\n        # This should generate an error.\n        _ = a.temp\n        # This should generate an error.\n        _ = a(3)\n        # This should generate an error.\n        _ = a[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar5",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar5",
        "description": "packages.pyright-internal.src.tests.samples.typeVar5",
        "peekOfCode": "_T2 = TypeVar(\"_T2\")\nclass ClassA(Generic[_T1, _T2]):\n    async def func1(self, a: _T1):\n        # This should generate an error.\n        _ = a.temp\n        # This should generate an error.\n        _ = a(3)\n        # This should generate an error.\n        _ = a[0]\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar5",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar6",
        "description": "packages.pyright-internal.src.tests.samples.typeVar6",
        "peekOfCode": "class Foo:\n    var1: int\n    def __call__(self, val: int):\n        pass\n    def do_stuff(self) -> int:\n        return 0\nclass Bar:\n    var1: int\n    var2: int\n    def __call__(self, val: int):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar6",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar6",
        "description": "packages.pyright-internal.src.tests.samples.typeVar6",
        "peekOfCode": "class Bar:\n    var1: int\n    var2: int\n    def __call__(self, val: int):\n        pass\n    def do_stuff(self) -> float:\n        return 0\n    def do_other_stuff(self) -> float:\n        return 0\n_T1 = TypeVar(\"_T1\", bound=Foo)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar6",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar6",
        "description": "packages.pyright-internal.src.tests.samples.typeVar6",
        "peekOfCode": "class ClassA(Generic[_T1]):\n    async def func1(self, a: _T1) -> _T1:\n        _ = a.var1\n        # This should generate an error.\n        _ = a.var2\n        _ = a(3)\n        # This should generate an error.\n        _ = a(3.3)\n        # This should generate an error.\n        _ = a[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar6",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar6",
        "description": "packages.pyright-internal.src.tests.samples.typeVar6",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", bound=Foo)\n_T2 = TypeVar(\"_T2\", bound=Union[Foo, Bar])\nclass ClassA(Generic[_T1]):\n    async def func1(self, a: _T1) -> _T1:\n        _ = a.var1\n        # This should generate an error.\n        _ = a.var2\n        _ = a(3)\n        # This should generate an error.\n        _ = a(3.3)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar6",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar6",
        "description": "packages.pyright-internal.src.tests.samples.typeVar6",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", bound=Union[Foo, Bar])\nclass ClassA(Generic[_T1]):\n    async def func1(self, a: _T1) -> _T1:\n        _ = a.var1\n        # This should generate an error.\n        _ = a.var2\n        _ = a(3)\n        # This should generate an error.\n        _ = a(3.3)\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar6",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "class Foo:\n    var1: int\n    def __call__(self, val: int):\n        pass\n    def do_stuff(self) -> int:\n        return 0\n    def __add__(self, val: \"Foo\") -> \"Foo\":\n        return val\nclass Bar:\n    var1: int",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "class Bar:\n    var1: int\n    var2: int\n    def __call__(self, val: int):\n        pass\n    def do_stuff(self) -> float:\n        return 0\n    def do_other_stuff(self) -> float:\n        return 0\n    def __add__(self, val: \"Bar\") -> \"Bar\":",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "class ClassA(Generic[_T1, _T2]):\n    async def func1(self, a: _T1) -> _T1:\n        _ = a.var1\n        # This should generate an error.\n        _ = a.var2\n        # This should generate an error.\n        _ = a(3.3)\n        # This should generate two errors.\n        _ = a[0]\n        # This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "Thing1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "class Thing1:\n    def __add__(self, value: float) -> \"Thing1\":\n        ...\n    def __radd__(self, value: float) -> \"Thing1\":\n        ...\nclass Thing2:\n    def __add__(self, value: float) -> \"Thing2\":\n        ...\n    def __radd__(self, value: float) -> \"Thing2\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "Thing2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "class Thing2:\n    def __add__(self, value: float) -> \"Thing2\":\n        ...\n    def __radd__(self, value: float) -> \"Thing2\":\n        ...\nTThing = TypeVar(\"TThing\", Thing1, Thing2)\ndef func1(x: TThing) -> TThing:\n    if isinstance(x, Thing1):\n        return 2 + x\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "custom_add",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "def custom_add(a: _T3, b: _T4) -> float:\n    if isinstance(a, str):\n        return 0\n    c = a + b\n    reveal_type(c, expected_text=\"float* | int*\")\n    return c\nclass Thing1:\n    def __add__(self, value: float) -> \"Thing1\":\n        ...\n    def __radd__(self, value: float) -> \"Thing1\":",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "def func1(x: TThing) -> TThing:\n    if isinstance(x, Thing1):\n        return 2 + x\n    else:\n        assert isinstance(x, Thing2)\n        return 3 + x\ndef func2(x: TThing) -> TThing:\n    if isinstance(x, Thing1):\n        return x + 2\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "def func2(x: TThing) -> TThing:\n    if isinstance(x, Thing1):\n        return x + 2\n    else:\n        assert isinstance(x, Thing2)\n        return x + 3",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "_T1 = TypeVar(\"_T1\", Foo, Bar)\n_T2 = TypeVar(\"_T2\", Foo, Bar, str)\nclass ClassA(Generic[_T1, _T2]):\n    async def func1(self, a: _T1) -> _T1:\n        _ = a.var1\n        # This should generate an error.\n        _ = a.var2\n        # This should generate an error.\n        _ = a(3.3)\n        # This should generate two errors.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "_T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "_T2 = TypeVar(\"_T2\", Foo, Bar, str)\nclass ClassA(Generic[_T1, _T2]):\n    async def func1(self, a: _T1) -> _T1:\n        _ = a.var1\n        # This should generate an error.\n        _ = a.var2\n        # This should generate an error.\n        _ = a(3.3)\n        # This should generate two errors.\n        _ = a[0]",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "_T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "_T3 = TypeVar(\"_T3\", float, int, str)\n_T4 = TypeVar(\"_T4\", float, int)\ndef custom_add(a: _T3, b: _T4) -> float:\n    if isinstance(a, str):\n        return 0\n    c = a + b\n    reveal_type(c, expected_text=\"float* | int*\")\n    return c\nclass Thing1:\n    def __add__(self, value: float) -> \"Thing1\":",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "_T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "_T4 = TypeVar(\"_T4\", float, int)\ndef custom_add(a: _T3, b: _T4) -> float:\n    if isinstance(a, str):\n        return 0\n    c = a + b\n    reveal_type(c, expected_text=\"float* | int*\")\n    return c\nclass Thing1:\n    def __add__(self, value: float) -> \"Thing1\":\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "TThing",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar7",
        "description": "packages.pyright-internal.src.tests.samples.typeVar7",
        "peekOfCode": "TThing = TypeVar(\"TThing\", Thing1, Thing2)\ndef func1(x: TThing) -> TThing:\n    if isinstance(x, Thing1):\n        return 2 + x\n    else:\n        assert isinstance(x, Thing2)\n        return 3 + x\ndef func2(x: TThing) -> TThing:\n    if isinstance(x, Thing1):\n        return x + 2",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar8",
        "description": "packages.pyright-internal.src.tests.samples.typeVar8",
        "peekOfCode": "def func1(x: bool, a: T, b: S) -> Union[T, S]:\n    reveal_type(T.__name__, expected_text=\"str\")\n    reveal_type(S.__name__, expected_text=\"str\")\n    # This should generate an error\n    a.__name__\n    # This should generate an error\n    b.__name__\n    if x:\n        return a\n    else:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar8",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar8",
        "description": "packages.pyright-internal.src.tests.samples.typeVar8",
        "peekOfCode": "T = TypeVar(\"T\")\nS = TypeVar(\"S\", bound=str)\n# In these cases, the TypeVar symbol simply represents the TypeVar\n# object itself, rather than representing a type variable.\nT.__name__\nS.__name__\nS.__bound__\ndef func1(x: bool, a: T, b: S) -> Union[T, S]:\n    reveal_type(T.__name__, expected_text=\"str\")\n    reveal_type(S.__name__, expected_text=\"str\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar8",
        "documentation": {}
    },
    {
        "label": "S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar8",
        "description": "packages.pyright-internal.src.tests.samples.typeVar8",
        "peekOfCode": "S = TypeVar(\"S\", bound=str)\n# In these cases, the TypeVar symbol simply represents the TypeVar\n# object itself, rather than representing a type variable.\nT.__name__\nS.__name__\nS.__bound__\ndef func1(x: bool, a: T, b: S) -> Union[T, S]:\n    reveal_type(T.__name__, expected_text=\"str\")\n    reveal_type(S.__name__, expected_text=\"str\")\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar8",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "class A(Generic[_T]):\n    def m1(self, v1: _T) -> None:\n        ...\n    # This should generate an error because _S\n    # is a local typeVar and appears only once.\n    def m2(self, v1: _S) -> None:\n        ...\n    # This should generate an error because _S\n    # is a local typeVar and appears only once.\n    def m3(self, v1: _T) -> _S:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "class B(Generic[AnyStr]):\n    # This should generate an error because AnyStr can go unsolved.\n    def __init__(self, *, mode: AnyStr = ...) -> None:\n        ...\nclass C(Generic[AnyStr]):\n    def __init__(self, *, mode: AnyStr = \"\") -> None:\n        ...\n@overload\ndef f16(default: int = ...) -> list[int]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "class C(Generic[AnyStr]):\n    def __init__(self, *, mode: AnyStr = \"\") -> None:\n        ...\n@overload\ndef f16(default: int = ...) -> list[int]:\n    ...\n@overload\ndef f16(default: _T) -> list[_T]:\n    ...\ndef f16(default: _T = ...) -> list[int] | list[_T]:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f1(v1: _T) -> None:\n    ...\ndef f2(v1: _T, v2: List[_T]) -> None:\n    ...\ndef f3(v1: _T) -> _T:\n    ...\ndef f4() -> Dict[_T, _T]:\n    ...\n# This should generate an error because _T\n# is a local typeVar and appears only once.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f2(v1: _T, v2: List[_T]) -> None:\n    ...\ndef f3(v1: _T) -> _T:\n    ...\ndef f4() -> Dict[_T, _T]:\n    ...\n# This should generate an error because _T\n# is a local typeVar and appears only once.\ndef f5() -> List[_T]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f3(v1: _T) -> _T:\n    ...\ndef f4() -> Dict[_T, _T]:\n    ...\n# This should generate an error because _T\n# is a local typeVar and appears only once.\ndef f5() -> List[_T]:\n    ...\n_T_Bound = TypeVar(\"_T_Bound\", bound=int)\n_T_Constrained = TypeVar(\"_T_Constrained\", int, str)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f4() -> Dict[_T, _T]:\n    ...\n# This should generate an error because _T\n# is a local typeVar and appears only once.\ndef f5() -> List[_T]:\n    ...\n_T_Bound = TypeVar(\"_T_Bound\", bound=int)\n_T_Constrained = TypeVar(\"_T_Constrained\", int, str)\n# Constrained TypeVars are exempt.\ndef f6(v1: _T_Constrained):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f5() -> List[_T]:\n    ...\n_T_Bound = TypeVar(\"_T_Bound\", bound=int)\n_T_Constrained = TypeVar(\"_T_Constrained\", int, str)\n# Constrained TypeVars are exempt.\ndef f6(v1: _T_Constrained):\n    ...\n# Bound TypeVars are not exempt.\ndef f7(v1: _T_Bound):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f6(v1: _T_Constrained):\n    ...\n# Bound TypeVars are not exempt.\ndef f7(v1: _T_Bound):\n    ...\n# Bound TypeVars as type arguments are exempt when used in an\n# input parameter annotation.\ndef f8(v1: List[_T_Bound]):\n    ...\n# Bound TypeVars as type arguments are not exempt when used in a",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f7(v1: _T_Bound):\n    ...\n# Bound TypeVars as type arguments are exempt when used in an\n# input parameter annotation.\ndef f8(v1: List[_T_Bound]):\n    ...\n# Bound TypeVars as type arguments are not exempt when used in a\n# return annotation.\ndef f9() -> List[_T_Bound]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f8(v1: List[_T_Bound]):\n    ...\n# Bound TypeVars as type arguments are not exempt when used in a\n# return annotation.\ndef f9() -> List[_T_Bound]:\n    ...\n# TypeVars used as type args to a generic type alias are exempt.\nMyCallable = Callable[[_T], _T]\ndef f10() -> MyCallable[_T]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f9() -> List[_T_Bound]:\n    ...\n# TypeVars used as type args to a generic type alias are exempt.\nMyCallable = Callable[[_T], _T]\ndef f10() -> MyCallable[_T]:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f11(x: AnyStr = ...) -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f10() -> MyCallable[_T]:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f11(x: AnyStr = ...) -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f12(x: AnyStr = ...) -> List[AnyStr]:\n    ...\ndef f13(x: AnyStr = ...) -> AnyStr | None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f11",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f11(x: AnyStr = ...) -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f12(x: AnyStr = ...) -> List[AnyStr]:\n    ...\ndef f13(x: AnyStr = ...) -> AnyStr | None:\n    ...\ndef f14(x: AnyStr = \"\") -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f12",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f12(x: AnyStr = ...) -> List[AnyStr]:\n    ...\ndef f13(x: AnyStr = ...) -> AnyStr | None:\n    ...\ndef f14(x: AnyStr = \"\") -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f15(x: AnyStr = ...) -> List[AnyStr] | None:\n    ...\nclass B(Generic[AnyStr]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f13",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f13(x: AnyStr = ...) -> AnyStr | None:\n    ...\ndef f14(x: AnyStr = \"\") -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f15(x: AnyStr = ...) -> List[AnyStr] | None:\n    ...\nclass B(Generic[AnyStr]):\n    # This should generate an error because AnyStr can go unsolved.\n    def __init__(self, *, mode: AnyStr = ...) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f14",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f14(x: AnyStr = \"\") -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f15(x: AnyStr = ...) -> List[AnyStr] | None:\n    ...\nclass B(Generic[AnyStr]):\n    # This should generate an error because AnyStr can go unsolved.\n    def __init__(self, *, mode: AnyStr = ...) -> None:\n        ...\nclass C(Generic[AnyStr]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f15",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f15(x: AnyStr = ...) -> List[AnyStr] | None:\n    ...\nclass B(Generic[AnyStr]):\n    # This should generate an error because AnyStr can go unsolved.\n    def __init__(self, *, mode: AnyStr = ...) -> None:\n        ...\nclass C(Generic[AnyStr]):\n    def __init__(self, *, mode: AnyStr = \"\") -> None:\n        ...\n@overload",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f16(default: int = ...) -> list[int]:\n    ...\n@overload\ndef f16(default: _T) -> list[_T]:\n    ...\ndef f16(default: _T = ...) -> list[int] | list[_T]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f16(default: _T) -> list[_T]:\n    ...\ndef f16(default: _T = ...) -> list[int] | list[_T]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "f16",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "def f16(default: _T = ...) -> list[int] | list[_T]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_S = TypeVar(\"_S\")\nclass A(Generic[_T]):\n    def m1(self, v1: _T) -> None:\n        ...\n    # This should generate an error because _S\n    # is a local typeVar and appears only once.\n    def m2(self, v1: _S) -> None:\n        ...\n    # This should generate an error because _S",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "_S",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "_S = TypeVar(\"_S\")\nclass A(Generic[_T]):\n    def m1(self, v1: _T) -> None:\n        ...\n    # This should generate an error because _S\n    # is a local typeVar and appears only once.\n    def m2(self, v1: _S) -> None:\n        ...\n    # This should generate an error because _S\n    # is a local typeVar and appears only once.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "_T_Bound",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "_T_Bound = TypeVar(\"_T_Bound\", bound=int)\n_T_Constrained = TypeVar(\"_T_Constrained\", int, str)\n# Constrained TypeVars are exempt.\ndef f6(v1: _T_Constrained):\n    ...\n# Bound TypeVars are not exempt.\ndef f7(v1: _T_Bound):\n    ...\n# Bound TypeVars as type arguments are exempt when used in an\n# input parameter annotation.",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "_T_Constrained",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "_T_Constrained = TypeVar(\"_T_Constrained\", int, str)\n# Constrained TypeVars are exempt.\ndef f6(v1: _T_Constrained):\n    ...\n# Bound TypeVars are not exempt.\ndef f7(v1: _T_Bound):\n    ...\n# Bound TypeVars as type arguments are exempt when used in an\n# input parameter annotation.\ndef f8(v1: List[_T_Bound]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "MyCallable",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVar9",
        "description": "packages.pyright-internal.src.tests.samples.typeVar9",
        "peekOfCode": "MyCallable = Callable[[_T], _T]\ndef f10() -> MyCallable[_T]:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f11(x: AnyStr = ...) -> AnyStr:\n    ...\n# This should generate an error because AnyStr can go unsolved.\ndef f12(x: AnyStr = ...) -> List[AnyStr]:\n    ...\ndef f13(x: AnyStr = ...) -> AnyStr | None:",
        "detail": "packages.pyright-internal.src.tests.samples.typeVar9",
        "documentation": {}
    },
    {
        "label": "S1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "S1 = TypeVar(\"S1\")\nS2 = TypeVar(\"S2\", bound=int)\nS3 = TypeVar(\"S3\", bytes, str)\nTs0 = TypeVarTuple(\"Ts0\")\nP0 = ParamSpec(\"P0\")\nT1 = TypeVar(\"T1\", default=int)\n# This should generate an error because default must be a type expression.\nT2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "S2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "S2 = TypeVar(\"S2\", bound=int)\nS3 = TypeVar(\"S3\", bytes, str)\nTs0 = TypeVarTuple(\"Ts0\")\nP0 = ParamSpec(\"P0\")\nT1 = TypeVar(\"T1\", default=int)\n# This should generate an error because default must be a type expression.\nT2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "S3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "S3 = TypeVar(\"S3\", bytes, str)\nTs0 = TypeVarTuple(\"Ts0\")\nP0 = ParamSpec(\"P0\")\nT1 = TypeVar(\"T1\", default=int)\n# This should generate an error because default must be a type expression.\nT2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts0 = TypeVarTuple(\"Ts0\")\nP0 = ParamSpec(\"P0\")\nT1 = TypeVar(\"T1\", default=int)\n# This should generate an error because default must be a type expression.\nT2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int\nT6 = TypeVar(\"T6\", bound=int, default=S1)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P0",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P0 = ParamSpec(\"P0\")\nT1 = TypeVar(\"T1\", default=int)\n# This should generate an error because default must be a type expression.\nT2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int\nT6 = TypeVar(\"T6\", bound=int, default=S1)\nT7 = TypeVar(\"T7\", bound=float, default=S2)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T1 = TypeVar(\"T1\", default=int)\n# This should generate an error because default must be a type expression.\nT2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int\nT6 = TypeVar(\"T6\", bound=int, default=S1)\nT7 = TypeVar(\"T7\", bound=float, default=S2)\n# This should generate an error because S3 is not a subtype of int",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T2 = TypeVar(\"T2\", default=3)\nT3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int\nT6 = TypeVar(\"T6\", bound=int, default=S1)\nT7 = TypeVar(\"T7\", bound=float, default=S2)\n# This should generate an error because S3 is not a subtype of int\nT8 = TypeVar(\"T8\", bound=float, default=S3)\nT9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T3 = TypeVar(\"T3\", bound=float, default=int)\n# This should generate an error because default must be a subtype of bound\nT4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int\nT6 = TypeVar(\"T6\", bound=int, default=S1)\nT7 = TypeVar(\"T7\", bound=float, default=S2)\n# This should generate an error because S3 is not a subtype of int\nT8 = TypeVar(\"T8\", bound=float, default=S3)\nT9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])\nT10 = TypeVar(\"T10\", bytes, str, default=str)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T4 = TypeVar(\"T4\", bound=int, default=float)\n# This should generate an error because S1 is not a subtype of int\nT6 = TypeVar(\"T6\", bound=int, default=S1)\nT7 = TypeVar(\"T7\", bound=float, default=S2)\n# This should generate an error because S3 is not a subtype of int\nT8 = TypeVar(\"T8\", bound=float, default=S3)\nT9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])\nT10 = TypeVar(\"T10\", bytes, str, default=str)\n# This should generate an error because str | bytes isn't one of the constrained types\nT11 = TypeVar(\"T11\", bytes, str, default=str | bytes)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T6 = TypeVar(\"T6\", bound=int, default=S1)\nT7 = TypeVar(\"T7\", bound=float, default=S2)\n# This should generate an error because S3 is not a subtype of int\nT8 = TypeVar(\"T8\", bound=float, default=S3)\nT9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])\nT10 = TypeVar(\"T10\", bytes, str, default=str)\n# This should generate an error because str | bytes isn't one of the constrained types\nT11 = TypeVar(\"T11\", bytes, str, default=str | bytes)\n# This should generate an error because S1 isn't one of the constrained types\nT12 = TypeVar(\"T12\", bytes, str, default=S1)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T7 = TypeVar(\"T7\", bound=float, default=S2)\n# This should generate an error because S3 is not a subtype of int\nT8 = TypeVar(\"T8\", bound=float, default=S3)\nT9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])\nT10 = TypeVar(\"T10\", bytes, str, default=str)\n# This should generate an error because str | bytes isn't one of the constrained types\nT11 = TypeVar(\"T11\", bytes, str, default=str | bytes)\n# This should generate an error because S1 isn't one of the constrained types\nT12 = TypeVar(\"T12\", bytes, str, default=S1)\nTs1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T8 = TypeVar(\"T8\", bound=float, default=S3)\nT9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])\nT10 = TypeVar(\"T10\", bytes, str, default=str)\n# This should generate an error because str | bytes isn't one of the constrained types\nT11 = TypeVar(\"T11\", bytes, str, default=str | bytes)\n# This should generate an error because S1 isn't one of the constrained types\nT12 = TypeVar(\"T12\", bytes, str, default=S1)\nTs1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])\n# This should generate an error because default must be unpacked tuple\nTs2 = TypeVarTuple(\"Ts2\", default=tuple[int])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T9",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T9 = TypeVar(\"T9\", bound=list[Any], default=list[S1])\nT10 = TypeVar(\"T10\", bytes, str, default=str)\n# This should generate an error because str | bytes isn't one of the constrained types\nT11 = TypeVar(\"T11\", bytes, str, default=str | bytes)\n# This should generate an error because S1 isn't one of the constrained types\nT12 = TypeVar(\"T12\", bytes, str, default=S1)\nTs1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])\n# This should generate an error because default must be unpacked tuple\nTs2 = TypeVarTuple(\"Ts2\", default=tuple[int])\n# This should generate an error because default must be unpacked tuple",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T10",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T10 = TypeVar(\"T10\", bytes, str, default=str)\n# This should generate an error because str | bytes isn't one of the constrained types\nT11 = TypeVar(\"T11\", bytes, str, default=str | bytes)\n# This should generate an error because S1 isn't one of the constrained types\nT12 = TypeVar(\"T12\", bytes, str, default=S1)\nTs1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])\n# This should generate an error because default must be unpacked tuple\nTs2 = TypeVarTuple(\"Ts2\", default=tuple[int])\n# This should generate an error because default must be unpacked tuple\nTs3 = TypeVarTuple(\"Ts3\", default=int)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T11",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T11 = TypeVar(\"T11\", bytes, str, default=str | bytes)\n# This should generate an error because S1 isn't one of the constrained types\nT12 = TypeVar(\"T12\", bytes, str, default=S1)\nTs1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])\n# This should generate an error because default must be unpacked tuple\nTs2 = TypeVarTuple(\"Ts2\", default=tuple[int])\n# This should generate an error because default must be unpacked tuple\nTs3 = TypeVarTuple(\"Ts3\", default=int)\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[Ts0])\n# This should generate an error because default must be unpacked",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "T12",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "T12 = TypeVar(\"T12\", bytes, str, default=S1)\nTs1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])\n# This should generate an error because default must be unpacked tuple\nTs2 = TypeVarTuple(\"Ts2\", default=tuple[int])\n# This should generate an error because default must be unpacked tuple\nTs3 = TypeVarTuple(\"Ts3\", default=int)\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[Ts0])\n# This should generate an error because default must be unpacked\nTs5 = TypeVarTuple(\"Ts5\", default=Ts0)\nTs6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts1 = TypeVarTuple(\"Ts1\", default=Unpack[tuple[int]])\n# This should generate an error because default must be unpacked tuple\nTs2 = TypeVarTuple(\"Ts2\", default=tuple[int])\n# This should generate an error because default must be unpacked tuple\nTs3 = TypeVarTuple(\"Ts3\", default=int)\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[Ts0])\n# This should generate an error because default must be unpacked\nTs5 = TypeVarTuple(\"Ts5\", default=Ts0)\nTs6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])\nTs7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts2 = TypeVarTuple(\"Ts2\", default=tuple[int])\n# This should generate an error because default must be unpacked tuple\nTs3 = TypeVarTuple(\"Ts3\", default=int)\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[Ts0])\n# This should generate an error because default must be unpacked\nTs5 = TypeVarTuple(\"Ts5\", default=Ts0)\nTs6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])\nTs7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])\nP1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts3 = TypeVarTuple(\"Ts3\", default=int)\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[Ts0])\n# This should generate an error because default must be unpacked\nTs5 = TypeVarTuple(\"Ts5\", default=Ts0)\nTs6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])\nTs7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])\nP1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts4 = TypeVarTuple(\"Ts4\", default=Unpack[Ts0])\n# This should generate an error because default must be unpacked\nTs5 = TypeVarTuple(\"Ts5\", default=Ts0)\nTs6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])\nTs7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])\nP1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts5 = TypeVarTuple(\"Ts5\", default=Ts0)\nTs6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])\nTs7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])\nP1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts6 = TypeVarTuple(\"Ts6\", default=Unpack[tuple[int, ...]])\nTs7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])\nP1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "Ts7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "Ts7 = TypeVarTuple(\"Ts7\", default=Unpack[tuple[S1, S2]])\nP1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P1 = ParamSpec(\"P1\", default=())\nP2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P2 = ParamSpec(\"P2\", default=(int, str, None, int | None))\nP3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types\nP8 = ParamSpec(\"P8\", default=(1, int))",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P3 = ParamSpec(\"P3\", default=(int, S1))\nP4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types\nP8 = ParamSpec(\"P8\", default=(1, int))\nP9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P4 = ParamSpec(\"P4\", default=(int, ))\nP5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types\nP8 = ParamSpec(\"P8\", default=(1, int))\nP9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P5 = ParamSpec(\"P5\", default=...)\n# This should generate an error because ParamSpec must be a tuple of types\nP6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types\nP8 = ParamSpec(\"P8\", default=(1, int))\nP9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P6 = ParamSpec(\"P6\", default=int)\n# This should generate an error because ParamSpec must be a tuple of types\nP7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types\nP8 = ParamSpec(\"P8\", default=(1, int))\nP9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P7",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P7 = ParamSpec(\"P7\", default=3)\n# This should generate an error because ParamSpec must be a tuple of types\nP8 = ParamSpec(\"P8\", default=(1, int))\nP9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P8",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P8 = ParamSpec(\"P8\", default=(1, int))\nP9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "P9",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "peekOfCode": "P9 = ParamSpec(\"P9\", default=P0)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault1",
        "documentation": {}
    },
    {
        "label": "ClassA1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "class ClassA1(Generic[T2, T3]):\n    ...\ndef func_a1(a: ClassA1, b: ClassA1[float], c: ClassA1[float, float]):\n    reveal_type(a, expected_text=\"ClassA1[int, str]\")\n    reveal_type(b, expected_text=\"ClassA1[float, str]\")\n    reveal_type(c, expected_text=\"ClassA1[float, float]\")\nclass ClassA2(Generic[T1, T2, T3]):\n    ...\ndef func_a2(a: ClassA2, b: ClassA2[float], c: ClassA2[float, float], d: ClassA2[float, float, float]):\n    reveal_type(a, expected_text=\"ClassA2[Unknown, int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "ClassA2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "class ClassA2(Generic[T1, T2, T3]):\n    ...\ndef func_a2(a: ClassA2, b: ClassA2[float], c: ClassA2[float, float], d: ClassA2[float, float, float]):\n    reveal_type(a, expected_text=\"ClassA2[Unknown, int, str]\")\n    reveal_type(b, expected_text=\"ClassA2[float, int, str]\")\n    reveal_type(c, expected_text=\"ClassA2[float, float, str]\")\n    reveal_type(d, expected_text=\"ClassA2[float, float, float]\")\nP1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "ClassB1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "class ClassB1(Generic[P2, P3]):\n    ...\ndef func_b1(a: ClassB1, b: ClassB1[[float]], c: ClassB1[[float], [float]]):\n    reveal_type(a, expected_text=\"ClassB1[(int, str), (...)]\")\n    reveal_type(b, expected_text=\"ClassB1[(float), (...)]\")\n    reveal_type(c, expected_text=\"ClassB1[(float), (float)]\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "ClassC1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "class ClassC1(Generic[*Ts2]):\n    ...\nclass ClassC2(Generic[T3, *Ts3]):\n    ...\nclass ClassC3(Generic[T3, *Ts4]):\n    ...\ndef func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC1[int, str]\")\n    reveal_type(b, expected_text=\"ClassC1[float]\")\ndef func_c2(a: ClassC2, b: ClassC2[int], c: ClassC2[int, *tuple[()]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "ClassC2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "class ClassC2(Generic[T3, *Ts3]):\n    ...\nclass ClassC3(Generic[T3, *Ts4]):\n    ...\ndef func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC1[int, str]\")\n    reveal_type(b, expected_text=\"ClassC1[float]\")\ndef func_c2(a: ClassC2, b: ClassC2[int], c: ClassC2[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"ClassC2[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"ClassC2[int, *tuple[float, ...]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "ClassC3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "class ClassC3(Generic[T3, *Ts4]):\n    ...\ndef func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC1[int, str]\")\n    reveal_type(b, expected_text=\"ClassC1[float]\")\ndef func_c2(a: ClassC2, b: ClassC2[int], c: ClassC2[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"ClassC2[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"ClassC2[int, *tuple[float, ...]]\")\n    reveal_type(c, expected_text=\"ClassC2[int]\")\ndef func_c3(a: ClassC3, b: ClassC3[int], c: ClassC3[int, *tuple[float]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_a1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "def func_a1(a: ClassA1, b: ClassA1[float], c: ClassA1[float, float]):\n    reveal_type(a, expected_text=\"ClassA1[int, str]\")\n    reveal_type(b, expected_text=\"ClassA1[float, str]\")\n    reveal_type(c, expected_text=\"ClassA1[float, float]\")\nclass ClassA2(Generic[T1, T2, T3]):\n    ...\ndef func_a2(a: ClassA2, b: ClassA2[float], c: ClassA2[float, float], d: ClassA2[float, float, float]):\n    reveal_type(a, expected_text=\"ClassA2[Unknown, int, str]\")\n    reveal_type(b, expected_text=\"ClassA2[float, int, str]\")\n    reveal_type(c, expected_text=\"ClassA2[float, float, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_a2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "def func_a2(a: ClassA2, b: ClassA2[float], c: ClassA2[float, float], d: ClassA2[float, float, float]):\n    reveal_type(a, expected_text=\"ClassA2[Unknown, int, str]\")\n    reveal_type(b, expected_text=\"ClassA2[float, int, str]\")\n    reveal_type(c, expected_text=\"ClassA2[float, float, str]\")\n    reveal_type(d, expected_text=\"ClassA2[float, float, float]\")\nP1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)\nclass ClassB1(Generic[P2, P3]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_b1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "def func_b1(a: ClassB1, b: ClassB1[[float]], c: ClassB1[[float], [float]]):\n    reveal_type(a, expected_text=\"ClassB1[(int, str), (...)]\")\n    reveal_type(b, expected_text=\"ClassB1[(float), (...)]\")\n    reveal_type(c, expected_text=\"ClassB1[(float), (float)]\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nclass ClassC1(Generic[*Ts2]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_c1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "def func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC1[int, str]\")\n    reveal_type(b, expected_text=\"ClassC1[float]\")\ndef func_c2(a: ClassC2, b: ClassC2[int], c: ClassC2[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"ClassC2[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"ClassC2[int, *tuple[float, ...]]\")\n    reveal_type(c, expected_text=\"ClassC2[int]\")\ndef func_c3(a: ClassC3, b: ClassC3[int], c: ClassC3[int, *tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC3[str]\")\n    reveal_type(b, expected_text=\"ClassC3[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_c2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "def func_c2(a: ClassC2, b: ClassC2[int], c: ClassC2[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"ClassC2[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"ClassC2[int, *tuple[float, ...]]\")\n    reveal_type(c, expected_text=\"ClassC2[int]\")\ndef func_c3(a: ClassC3, b: ClassC3[int], c: ClassC3[int, *tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC3[str]\")\n    reveal_type(b, expected_text=\"ClassC3[int]\")\n    reveal_type(c, expected_text=\"ClassC3[int, float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_c3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "def func_c3(a: ClassC3, b: ClassC3[int], c: ClassC3[int, *tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC3[str]\")\n    reveal_type(b, expected_text=\"ClassC3[int]\")\n    reveal_type(c, expected_text=\"ClassC3[int, float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\", default=int)\nT3 = TypeVar(\"T3\", default=str)\nclass ClassA1(Generic[T2, T3]):\n    ...\ndef func_a1(a: ClassA1, b: ClassA1[float], c: ClassA1[float, float]):\n    reveal_type(a, expected_text=\"ClassA1[int, str]\")\n    reveal_type(b, expected_text=\"ClassA1[float, str]\")\n    reveal_type(c, expected_text=\"ClassA1[float, float]\")\nclass ClassA2(Generic[T1, T2, T3]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "T2 = TypeVar(\"T2\", default=int)\nT3 = TypeVar(\"T3\", default=str)\nclass ClassA1(Generic[T2, T3]):\n    ...\ndef func_a1(a: ClassA1, b: ClassA1[float], c: ClassA1[float, float]):\n    reveal_type(a, expected_text=\"ClassA1[int, str]\")\n    reveal_type(b, expected_text=\"ClassA1[float, str]\")\n    reveal_type(c, expected_text=\"ClassA1[float, float]\")\nclass ClassA2(Generic[T1, T2, T3]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "T3 = TypeVar(\"T3\", default=str)\nclass ClassA1(Generic[T2, T3]):\n    ...\ndef func_a1(a: ClassA1, b: ClassA1[float], c: ClassA1[float, float]):\n    reveal_type(a, expected_text=\"ClassA1[int, str]\")\n    reveal_type(b, expected_text=\"ClassA1[float, str]\")\n    reveal_type(c, expected_text=\"ClassA1[float, float]\")\nclass ClassA2(Generic[T1, T2, T3]):\n    ...\ndef func_a2(a: ClassA2, b: ClassA2[float], c: ClassA2[float, float], d: ClassA2[float, float, float]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "P1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)\nclass ClassB1(Generic[P2, P3]):\n    ...\ndef func_b1(a: ClassB1, b: ClassB1[[float]], c: ClassB1[[float], [float]]):\n    reveal_type(a, expected_text=\"ClassB1[(int, str), (...)]\")\n    reveal_type(b, expected_text=\"ClassB1[(float), (...)]\")\n    reveal_type(c, expected_text=\"ClassB1[(float), (float)]\")\nTs1 = TypeVarTuple(\"Ts1\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "P2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)\nclass ClassB1(Generic[P2, P3]):\n    ...\ndef func_b1(a: ClassB1, b: ClassB1[[float]], c: ClassB1[[float], [float]]):\n    reveal_type(a, expected_text=\"ClassB1[(int, str), (...)]\")\n    reveal_type(b, expected_text=\"ClassB1[(float), (...)]\")\n    reveal_type(c, expected_text=\"ClassB1[(float), (float)]\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "P3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "P3 = ParamSpec(\"P3\", default=...)\nclass ClassB1(Generic[P2, P3]):\n    ...\ndef func_b1(a: ClassB1, b: ClassB1[[float]], c: ClassB1[[float], [float]]):\n    reveal_type(a, expected_text=\"ClassB1[(int, str), (...)]\")\n    reveal_type(b, expected_text=\"ClassB1[(float), (...)]\")\n    reveal_type(c, expected_text=\"ClassB1[(float), (float)]\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "Ts1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "Ts1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nclass ClassC1(Generic[*Ts2]):\n    ...\nclass ClassC2(Generic[T3, *Ts3]):\n    ...\nclass ClassC3(Generic[T3, *Ts4]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "Ts2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "Ts2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nclass ClassC1(Generic[*Ts2]):\n    ...\nclass ClassC2(Generic[T3, *Ts3]):\n    ...\nclass ClassC3(Generic[T3, *Ts4]):\n    ...\ndef func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "Ts3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "Ts3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nclass ClassC1(Generic[*Ts2]):\n    ...\nclass ClassC2(Generic[T3, *Ts3]):\n    ...\nclass ClassC3(Generic[T3, *Ts4]):\n    ...\ndef func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC1[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "Ts4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "peekOfCode": "Ts4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nclass ClassC1(Generic[*Ts2]):\n    ...\nclass ClassC2(Generic[T3, *Ts3]):\n    ...\nclass ClassC3(Generic[T3, *Ts4]):\n    ...\ndef func_c1(a: ClassC1, b: ClassC1[*tuple[float]]):\n    reveal_type(a, expected_text=\"ClassC1[int, str]\")\n    reveal_type(b, expected_text=\"ClassC1[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault2",
        "documentation": {}
    },
    {
        "label": "func_a1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "def func_a1(a: TA1, b: TA1[float], c: TA1[float, float]):\n    reveal_type(a, expected_text=\"dict[int, str]\")\n    reveal_type(b, expected_text=\"dict[float, str]\")\n    reveal_type(c, expected_text=\"dict[float, float]\")\nTA2: TypeAlias = dict[T1, T2] | list[T3]\ndef func_a2(a: TA2, b: TA2[float], c: TA2[float, float], d: TA2[float, float, float]):\n    reveal_type(a, expected_text=\"dict[Unknown, int] | list[str]\")\n    reveal_type(b, expected_text=\"dict[float, int] | list[str]\")\n    reveal_type(c, expected_text=\"dict[float, float] | list[str]\")\n    reveal_type(d, expected_text=\"dict[float, float] | list[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "func_a2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "def func_a2(a: TA2, b: TA2[float], c: TA2[float, float], d: TA2[float, float, float]):\n    reveal_type(a, expected_text=\"dict[Unknown, int] | list[str]\")\n    reveal_type(b, expected_text=\"dict[float, int] | list[str]\")\n    reveal_type(c, expected_text=\"dict[float, float] | list[str]\")\n    reveal_type(d, expected_text=\"dict[float, float] | list[float]\")\nP1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)\nTA3: TypeAlias = Callable[P2, Any] | Callable[P3, Any]\ndef func_b1(a: TA3, b: TA3[[float]], c: TA3[[float], [list[float]]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "func_b1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "def func_b1(a: TA3, b: TA3[[float]], c: TA3[[float], [list[float]]]):\n    reveal_type(a, expected_text=\"((int, str) -> Any) | ((...) -> Any)\")\n    reveal_type(b, expected_text=\"((float) -> Any) | ((...) -> Any)\")\n    reveal_type(c, expected_text=\"((float) -> Any) | ((list[float]) -> Any)\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nTA4: TypeAlias = tuple[*Ts2]\nTA5: TypeAlias = tuple[T3, *Ts3]",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "func_c1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "def func_c1(a: TA4, b: TA4[*tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[int, str]\")\n    reveal_type(b, expected_text=\"tuple[float]\")\ndef func_c2(a: TA5, b: TA5[int], c: TA5[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"tuple[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"tuple[int, *tuple[float, ...]]\")\n    reveal_type(c, expected_text=\"tuple[int]\")\ndef func_c3(a: TA6, b: TA6[int], c: TA6[int, *tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[str]\")\n    reveal_type(b, expected_text=\"tuple[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "func_c2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "def func_c2(a: TA5, b: TA5[int], c: TA5[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"tuple[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"tuple[int, *tuple[float, ...]]\")\n    reveal_type(c, expected_text=\"tuple[int]\")\ndef func_c3(a: TA6, b: TA6[int], c: TA6[int, *tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[str]\")\n    reveal_type(b, expected_text=\"tuple[int]\")\n    reveal_type(c, expected_text=\"tuple[int, float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "func_c3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "def func_c3(a: TA6, b: TA6[int], c: TA6[int, *tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[str]\")\n    reveal_type(b, expected_text=\"tuple[int]\")\n    reveal_type(c, expected_text=\"tuple[int, float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\", default=int)\nT3 = TypeVar(\"T3\", default=str)\nTA1: TypeAlias = dict[T2, T3]\ndef func_a1(a: TA1, b: TA1[float], c: TA1[float, float]):\n    reveal_type(a, expected_text=\"dict[int, str]\")\n    reveal_type(b, expected_text=\"dict[float, str]\")\n    reveal_type(c, expected_text=\"dict[float, float]\")\nTA2: TypeAlias = dict[T1, T2] | list[T3]\ndef func_a2(a: TA2, b: TA2[float], c: TA2[float, float], d: TA2[float, float, float]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "T2 = TypeVar(\"T2\", default=int)\nT3 = TypeVar(\"T3\", default=str)\nTA1: TypeAlias = dict[T2, T3]\ndef func_a1(a: TA1, b: TA1[float], c: TA1[float, float]):\n    reveal_type(a, expected_text=\"dict[int, str]\")\n    reveal_type(b, expected_text=\"dict[float, str]\")\n    reveal_type(c, expected_text=\"dict[float, float]\")\nTA2: TypeAlias = dict[T1, T2] | list[T3]\ndef func_a2(a: TA2, b: TA2[float], c: TA2[float, float], d: TA2[float, float, float]):\n    reveal_type(a, expected_text=\"dict[Unknown, int] | list[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "T3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "T3 = TypeVar(\"T3\", default=str)\nTA1: TypeAlias = dict[T2, T3]\ndef func_a1(a: TA1, b: TA1[float], c: TA1[float, float]):\n    reveal_type(a, expected_text=\"dict[int, str]\")\n    reveal_type(b, expected_text=\"dict[float, str]\")\n    reveal_type(c, expected_text=\"dict[float, float]\")\nTA2: TypeAlias = dict[T1, T2] | list[T3]\ndef func_a2(a: TA2, b: TA2[float], c: TA2[float, float], d: TA2[float, float, float]):\n    reveal_type(a, expected_text=\"dict[Unknown, int] | list[str]\")\n    reveal_type(b, expected_text=\"dict[float, int] | list[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "P1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "P1 = ParamSpec(\"P1\")\nP2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)\nTA3: TypeAlias = Callable[P2, Any] | Callable[P3, Any]\ndef func_b1(a: TA3, b: TA3[[float]], c: TA3[[float], [list[float]]]):\n    reveal_type(a, expected_text=\"((int, str) -> Any) | ((...) -> Any)\")\n    reveal_type(b, expected_text=\"((float) -> Any) | ((...) -> Any)\")\n    reveal_type(c, expected_text=\"((float) -> Any) | ((list[float]) -> Any)\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "P2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "P2 = ParamSpec(\"P2\", default=(int, str))\nP3 = ParamSpec(\"P3\", default=...)\nTA3: TypeAlias = Callable[P2, Any] | Callable[P3, Any]\ndef func_b1(a: TA3, b: TA3[[float]], c: TA3[[float], [list[float]]]):\n    reveal_type(a, expected_text=\"((int, str) -> Any) | ((...) -> Any)\")\n    reveal_type(b, expected_text=\"((float) -> Any) | ((...) -> Any)\")\n    reveal_type(c, expected_text=\"((float) -> Any) | ((list[float]) -> Any)\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "P3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "P3 = ParamSpec(\"P3\", default=...)\nTA3: TypeAlias = Callable[P2, Any] | Callable[P3, Any]\ndef func_b1(a: TA3, b: TA3[[float]], c: TA3[[float], [list[float]]]):\n    reveal_type(a, expected_text=\"((int, str) -> Any) | ((...) -> Any)\")\n    reveal_type(b, expected_text=\"((float) -> Any) | ((...) -> Any)\")\n    reveal_type(c, expected_text=\"((float) -> Any) | ((list[float]) -> Any)\")\nTs1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "Ts1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "Ts1 = TypeVarTuple(\"Ts1\")\nTs2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nTA4: TypeAlias = tuple[*Ts2]\nTA5: TypeAlias = tuple[T3, *Ts3]\nTA6: TypeAlias = tuple[T3, *Ts4]\ndef func_c1(a: TA4, b: TA4[*tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[int, str]\")\n    reveal_type(b, expected_text=\"tuple[float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "Ts2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "Ts2 = TypeVarTuple(\"Ts2\", default=Unpack[tuple[int, str]])\nTs3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nTA4: TypeAlias = tuple[*Ts2]\nTA5: TypeAlias = tuple[T3, *Ts3]\nTA6: TypeAlias = tuple[T3, *Ts4]\ndef func_c1(a: TA4, b: TA4[*tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[int, str]\")\n    reveal_type(b, expected_text=\"tuple[float]\")\ndef func_c2(a: TA5, b: TA5[int], c: TA5[int, *tuple[()]]):",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "Ts3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "Ts3 = TypeVarTuple(\"Ts3\", default=Unpack[tuple[float, ...]])\nTs4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nTA4: TypeAlias = tuple[*Ts2]\nTA5: TypeAlias = tuple[T3, *Ts3]\nTA6: TypeAlias = tuple[T3, *Ts4]\ndef func_c1(a: TA4, b: TA4[*tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[int, str]\")\n    reveal_type(b, expected_text=\"tuple[float]\")\ndef func_c2(a: TA5, b: TA5[int], c: TA5[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"tuple[str, *tuple[float, ...]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "Ts4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "description": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "peekOfCode": "Ts4 = TypeVarTuple(\"Ts4\", default=Unpack[tuple[()]])\nTA4: TypeAlias = tuple[*Ts2]\nTA5: TypeAlias = tuple[T3, *Ts3]\nTA6: TypeAlias = tuple[T3, *Ts4]\ndef func_c1(a: TA4, b: TA4[*tuple[float]]):\n    reveal_type(a, expected_text=\"tuple[int, str]\")\n    reveal_type(b, expected_text=\"tuple[float]\")\ndef func_c2(a: TA5, b: TA5[int], c: TA5[int, *tuple[()]]):\n    reveal_type(a, expected_text=\"tuple[str, *tuple[float, ...]]\")\n    reveal_type(b, expected_text=\"tuple[int, *tuple[float, ...]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.typeVarDefault3",
        "documentation": {}
    },
    {
        "label": "fn1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unbound2",
        "description": "packages.pyright-internal.src.tests.samples.unbound2",
        "peekOfCode": "def fn1():\n    aaa: int\n    # This should generate an error because aaa is unbound.\n    return aaa\nfn1()",
        "detail": "packages.pyright-internal.src.tests.samples.unbound2",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unbound3",
        "description": "packages.pyright-internal.src.tests.samples.unbound3",
        "peekOfCode": "def foo(a: bool):\n    if a:\n        b = 3\n    # This should generate an error.\n    c = b\n    # These should not.\n    d = c\n    e = d",
        "detail": "packages.pyright-internal.src.tests.samples.unbound3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unbound4",
        "description": "packages.pyright-internal.src.tests.samples.unbound4",
        "peekOfCode": "def func1():\n    # This should generate an error\n    return a\n# This should not.\nb = func1()\nreveal_type(b, expected_text=\"Unknown\")\ndef func2(val: int):\n    if val < 3:\n        return val\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.unbound4",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unbound4",
        "description": "packages.pyright-internal.src.tests.samples.unbound4",
        "peekOfCode": "def func2(val: int):\n    if val < 3:\n        return val\n    # This should generate an error\n    return a\n# This should not.\nc = func2(36)\nreveal_type(c, expected_text=\"int | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.unbound4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unbound4",
        "description": "packages.pyright-internal.src.tests.samples.unbound4",
        "peekOfCode": "b = func1()\nreveal_type(b, expected_text=\"Unknown\")\ndef func2(val: int):\n    if val < 3:\n        return val\n    # This should generate an error\n    return a\n# This should not.\nc = func2(36)\nreveal_type(c, expected_text=\"int | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.unbound4",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unbound4",
        "description": "packages.pyright-internal.src.tests.samples.unbound4",
        "peekOfCode": "c = func2(36)\nreveal_type(c, expected_text=\"int | Unknown\")",
        "detail": "packages.pyright-internal.src.tests.samples.unbound4",
        "documentation": {}
    },
    {
        "label": "𐌎𐌘𐌟𐌁",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐌎𐌘𐌟𐌁 = 42\n# Egyptian hieroglyphs\n𓃘𓐭𓇀𓅨𓆙 = 2\n# Linear B Ideograms\n𐂂𐃪𐃯 = \"\"\n# Cuneiform\n𒀟𒀕𒀰𒁜𒂐𒄊 = \"\"\n# Old Persian\n𐎠𐏊𐏏 = 3\n# Lydian",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𓃘𓐭𓇀𓅨𓆙",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𓃘𓐭𓇀𓅨𓆙 = 2\n# Linear B Ideograms\n𐂂𐃪𐃯 = \"\"\n# Cuneiform\n𒀟𒀕𒀰𒁜𒂐𒄊 = \"\"\n# Old Persian\n𐎠𐏊𐏏 = 3\n# Lydian\n𐤢𐤷𐤬𐤮 = 4\n# Phoenician",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𐂂𐃪𐃯",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐂂𐃪𐃯 = \"\"\n# Cuneiform\n𒀟𒀕𒀰𒁜𒂐𒄊 = \"\"\n# Old Persian\n𐎠𐏊𐏏 = 3\n# Lydian\n𐤢𐤷𐤬𐤮 = 4\n# Phoenician\n𐤔𐤑𐤇 = 4\n# Nabataean",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𒀟𒀕𒀰𒁜𒂐𒄊",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𒀟𒀕𒀰𒁜𒂐𒄊 = \"\"\n# Old Persian\n𐎠𐏊𐏏 = 3\n# Lydian\n𐤢𐤷𐤬𐤮 = 4\n# Phoenician\n𐤔𐤑𐤇 = 4\n# Nabataean\n𐢖𐢊ﬗ = 0\n# This should generate an error because \"𐢭\" is outside the range of",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𐎠𐏊𐏏",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐎠𐏊𐏏 = 3\n# Lydian\n𐤢𐤷𐤬𐤮 = 4\n# Phoenician\n𐤔𐤑𐤇 = 4\n# Nabataean\n𐢖𐢊ﬗ = 0\n# This should generate an error because \"𐢭\" is outside the range of\n# characters supported by the Python standard.\n𐢭 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𐤢𐤷𐤬𐤮",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐤢𐤷𐤬𐤮 = 4\n# Phoenician\n𐤔𐤑𐤇 = 4\n# Nabataean\n𐢖𐢊ﬗ = 0\n# This should generate an error because \"𐢭\" is outside the range of\n# characters supported by the Python standard.\n𐢭 = 0\n# Other surrogate characters\n𝓐 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𐤔𐤑𐤇",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐤔𐤑𐤇 = 4\n# Nabataean\n𐢖𐢊ﬗ = 0\n# This should generate an error because \"𐢭\" is outside the range of\n# characters supported by the Python standard.\n𐢭 = 0\n# Other surrogate characters\n𝓐 = 3\n𝙰 = 4\n𝚫 = 3",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𐢖𐢊ﬗ",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐢖𐢊ﬗ = 0\n# This should generate an error because \"𐢭\" is outside the range of\n# characters supported by the Python standard.\n𐢭 = 0\n# Other surrogate characters\n𝓐 = 3\n𝙰 = 4\n𝚫 = 3\n𞡏 = 4\n𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𐢭",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𐢭 = 0\n# Other surrogate characters\n𝓐 = 3\n𝙰 = 4\n𝚫 = 3\n𞡏 = 4\n𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𝓐",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𝓐 = 3\n𝙰 = 4\n𝚫 = 3\n𞡏 = 4\n𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𝙰",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𝙰 = 4\n𝚫 = 3\n𞡏 = 4\n𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𝚫",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𝚫 = 3\n𞡏 = 4\n𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𞡏",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𞡏 = 4\n𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "𞥁",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unicode1",
        "description": "packages.pyright-internal.src.tests.samples.unicode1",
        "peekOfCode": "𞥁 = 0",
        "detail": "packages.pyright-internal.src.tests.samples.unicode1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "peekOfCode": "class A:\n    # This should generate an error if reportUninitializedInstanceVariable\n    # is enabled.\n    v1: int\n    v2: int\n    v3 = 2\n    v4: int = 3\n    def __init__(self) -> None:\n        self.v2 = 3\n        super().__init__()",
        "detail": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "peekOfCode": "class B:\n    x: int\nclass C(TypedDict):\n    member1: str\n    member2: str\n# Protocol classes are exempt\nclass D(Protocol):\n    x: str\n    y: str",
        "detail": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "documentation": {}
    },
    {
        "label": "C",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "peekOfCode": "class C(TypedDict):\n    member1: str\n    member2: str\n# Protocol classes are exempt\nclass D(Protocol):\n    x: str\n    y: str",
        "detail": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "documentation": {}
    },
    {
        "label": "D",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "peekOfCode": "class D(Protocol):\n    x: str\n    y: str",
        "detail": "packages.pyright-internal.src.tests.samples.uninitializedVariable1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "class ClassA:\n    class ClassA_A:\n        pass\n    @decorator1\n    class ClassA_B:\n        pass\n    @decorator2\n    class ClassA_C:\n        pass\na_or_str: \"ClassA.ClassA_A | str\"",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "def foo2(a: int | str):\n    if isinstance(a, int):\n        return 1\n    else:\n        return 2\nB = bytes | None | Callable[[], None]\nA = int | str | B\ndef foo3(a: A) -> B:\n    if a == 3 or a is None:\n        return b\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "def foo3(a: A) -> B:\n    if a == 3 or a is None:\n        return b\"\"\n    elif not isinstance(a, (int, str, bytes)):\n        a()\ndef foo4(A: \"int | str\"):\n    return 1\nT = TypeVar(\"T\")\ndef foo5(a: str):\n    def helper(value: T) -> T | None:",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "foo4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "def foo4(A: \"int | str\"):\n    return 1\nT = TypeVar(\"T\")\ndef foo5(a: str):\n    def helper(value: T) -> T | None:\n        ...\n    class Baz(Generic[T]):\n        qux: T | None\n    reveal_type(helper(a), expected_text=\"str | None\")\n    reveal_type(Baz[str].qux, expected_text=\"str | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "foo5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "def foo5(a: str):\n    def helper(value: T) -> T | None:\n        ...\n    class Baz(Generic[T]):\n        qux: T | None\n    reveal_type(helper(a), expected_text=\"str | None\")\n    reveal_type(Baz[str].qux, expected_text=\"str | None\")\nT = TypeVar(\"T\")\nTT = TypeVar(\"TT\", bound=type)\ndef decorator1(value: type[T]) -> type[T]:",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "decorator1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "def decorator1(value: type[T]) -> type[T]:\n    ...\ndef decorator2(value: TT) -> TT:\n    ...\nclass ClassA:\n    class ClassA_A:\n        pass\n    @decorator1\n    class ClassA_B:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "decorator2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "def decorator2(value: TT) -> TT:\n    ...\nclass ClassA:\n    class ClassA_A:\n        pass\n    @decorator1\n    class ClassA_B:\n        pass\n    @decorator2\n    class ClassA_C:",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "B = bytes | None | Callable[[], None]\nA = int | str | B\ndef foo3(a: A) -> B:\n    if a == 3 or a is None:\n        return b\"\"\n    elif not isinstance(a, (int, str, bytes)):\n        a()\ndef foo4(A: \"int | str\"):\n    return 1\nT = TypeVar(\"T\")",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "A = int | str | B\ndef foo3(a: A) -> B:\n    if a == 3 or a is None:\n        return b\"\"\n    elif not isinstance(a, (int, str, bytes)):\n        a()\ndef foo4(A: \"int | str\"):\n    return 1\nT = TypeVar(\"T\")\ndef foo5(a: str):",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "T = TypeVar(\"T\")\ndef foo5(a: str):\n    def helper(value: T) -> T | None:\n        ...\n    class Baz(Generic[T]):\n        qux: T | None\n    reveal_type(helper(a), expected_text=\"str | None\")\n    reveal_type(Baz[str].qux, expected_text=\"str | None\")\nT = TypeVar(\"T\")\nTT = TypeVar(\"TT\", bound=type)",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "T = TypeVar(\"T\")\nTT = TypeVar(\"TT\", bound=type)\ndef decorator1(value: type[T]) -> type[T]:\n    ...\ndef decorator2(value: TT) -> TT:\n    ...\nclass ClassA:\n    class ClassA_A:\n        pass\n    @decorator1",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "TT",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "TT = TypeVar(\"TT\", bound=type)\ndef decorator1(value: type[T]) -> type[T]:\n    ...\ndef decorator2(value: TT) -> TT:\n    ...\nclass ClassA:\n    class ClassA_A:\n        pass\n    @decorator1\n    class ClassA_B:",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "Alias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "Alias1 = None | str\nAlias2 = str | None\n_T = TypeVar(\"_T\")\nAlias3 = _T | str\nAlias4 = str | _T",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "Alias2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "Alias2 = str | None\n_T = TypeVar(\"_T\")\nAlias3 = _T | str\nAlias4 = str | _T",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "_T = TypeVar(\"_T\")\nAlias3 = _T | str\nAlias4 = str | _T",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "Alias3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "Alias3 = _T | str\nAlias4 = str | _T",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "Alias4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions1",
        "description": "packages.pyright-internal.src.tests.samples.unions1",
        "peekOfCode": "Alias4 = str | _T",
        "detail": "packages.pyright-internal.src.tests.samples.unions1",
        "documentation": {}
    },
    {
        "label": "my_class",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions2",
        "description": "packages.pyright-internal.src.tests.samples.unions2",
        "peekOfCode": "class my_class:\n    def __init__(self, v):\n        self._v = v\ndef test_bad_syntax(a: Any, b: Any):\n    r = my_class(a | b)\n    print(r)",
        "detail": "packages.pyright-internal.src.tests.samples.unions2",
        "documentation": {}
    },
    {
        "label": "test_bad_syntax",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions2",
        "description": "packages.pyright-internal.src.tests.samples.unions2",
        "peekOfCode": "def test_bad_syntax(a: Any, b: Any):\n    r = my_class(a | b)\n    print(r)",
        "detail": "packages.pyright-internal.src.tests.samples.unions2",
        "documentation": {}
    },
    {
        "label": "ClassWithNoMeta1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "class ClassWithNoMeta1:\n    pass\nclass ClassWithNoMeta2:\n    pass\nNoMetaUnion = ClassWithNoMeta1 | ClassWithNoMeta2\nreveal_type(\n    NoMetaUnion, expected_text=\"Type[ClassWithNoMeta1] | Type[ClassWithNoMeta2]\"\n)\n_T = TypeVar(\"_T\")\nclass Metaclass1(type):",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "ClassWithNoMeta2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "class ClassWithNoMeta2:\n    pass\nNoMetaUnion = ClassWithNoMeta1 | ClassWithNoMeta2\nreveal_type(\n    NoMetaUnion, expected_text=\"Type[ClassWithNoMeta1] | Type[ClassWithNoMeta2]\"\n)\n_T = TypeVar(\"_T\")\nclass Metaclass1(type):\n    def __or__(cls: _T, other: type) -> _T:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "Metaclass1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "class Metaclass1(type):\n    def __or__(cls: _T, other: type) -> _T:\n        ...\nclass Metaclass2(type):\n    def __ror__(cls: _T, other: type) -> _T:\n        ...\nclass ClassWithMeta1(metaclass=Metaclass1):\n    pass\nclass ClassWithMeta2(metaclass=Metaclass2):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "Metaclass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "class Metaclass2(type):\n    def __ror__(cls: _T, other: type) -> _T:\n        ...\nclass ClassWithMeta1(metaclass=Metaclass1):\n    pass\nclass ClassWithMeta2(metaclass=Metaclass2):\n    pass\ndef requires_class_with_meta1(val: Type[ClassWithMeta1]):\n    pass\nMetaOr1 = ClassWithMeta1 | ClassWithNoMeta1",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "ClassWithMeta1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "class ClassWithMeta1(metaclass=Metaclass1):\n    pass\nclass ClassWithMeta2(metaclass=Metaclass2):\n    pass\ndef requires_class_with_meta1(val: Type[ClassWithMeta1]):\n    pass\nMetaOr1 = ClassWithMeta1 | ClassWithNoMeta1\nrequires_class_with_meta1(MetaOr1)",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "ClassWithMeta2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "class ClassWithMeta2(metaclass=Metaclass2):\n    pass\ndef requires_class_with_meta1(val: Type[ClassWithMeta1]):\n    pass\nMetaOr1 = ClassWithMeta1 | ClassWithNoMeta1\nrequires_class_with_meta1(MetaOr1)",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "requires_class_with_meta1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "def requires_class_with_meta1(val: Type[ClassWithMeta1]):\n    pass\nMetaOr1 = ClassWithMeta1 | ClassWithNoMeta1\nrequires_class_with_meta1(MetaOr1)",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "NoMetaUnion",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "NoMetaUnion = ClassWithNoMeta1 | ClassWithNoMeta2\nreveal_type(\n    NoMetaUnion, expected_text=\"Type[ClassWithNoMeta1] | Type[ClassWithNoMeta2]\"\n)\n_T = TypeVar(\"_T\")\nclass Metaclass1(type):\n    def __or__(cls: _T, other: type) -> _T:\n        ...\nclass Metaclass2(type):\n    def __ror__(cls: _T, other: type) -> _T:",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Metaclass1(type):\n    def __or__(cls: _T, other: type) -> _T:\n        ...\nclass Metaclass2(type):\n    def __ror__(cls: _T, other: type) -> _T:\n        ...\nclass ClassWithMeta1(metaclass=Metaclass1):\n    pass\nclass ClassWithMeta2(metaclass=Metaclass2):",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "MetaOr1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions3",
        "description": "packages.pyright-internal.src.tests.samples.unions3",
        "peekOfCode": "MetaOr1 = ClassWithMeta1 | ClassWithNoMeta1\nrequires_class_with_meta1(MetaOr1)",
        "detail": "packages.pyright-internal.src.tests.samples.unions3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions4",
        "description": "packages.pyright-internal.src.tests.samples.unions4",
        "peekOfCode": "def func1() -> Union:\n    ...\n# This should generate an error.\nvar1: Union",
        "detail": "packages.pyright-internal.src.tests.samples.unions4",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions4",
        "description": "packages.pyright-internal.src.tests.samples.unions4",
        "peekOfCode": "x = Union[int, str]\n# This should generate an error.\ny = Union[int]\nz = Union\n# This should generate an error.\ndef func1() -> Union:\n    ...\n# This should generate an error.\nvar1: Union",
        "detail": "packages.pyright-internal.src.tests.samples.unions4",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions4",
        "description": "packages.pyright-internal.src.tests.samples.unions4",
        "peekOfCode": "y = Union[int]\nz = Union\n# This should generate an error.\ndef func1() -> Union:\n    ...\n# This should generate an error.\nvar1: Union",
        "detail": "packages.pyright-internal.src.tests.samples.unions4",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions4",
        "description": "packages.pyright-internal.src.tests.samples.unions4",
        "peekOfCode": "z = Union\n# This should generate an error.\ndef func1() -> Union:\n    ...\n# This should generate an error.\nvar1: Union",
        "detail": "packages.pyright-internal.src.tests.samples.unions4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions5",
        "description": "packages.pyright-internal.src.tests.samples.unions5",
        "peekOfCode": "class Foo:\n    a: int\nclass Bar:\n    a: int\n# This should generate an error\na1: type[Foo] | type[Bar] = Foo | Bar\nprint(a1.a)\na1()\n# This should generate an error\na2: type[Foo] | type[Bar] = Union[Foo, Bar]",
        "detail": "packages.pyright-internal.src.tests.samples.unions5",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions5",
        "description": "packages.pyright-internal.src.tests.samples.unions5",
        "peekOfCode": "class Bar:\n    a: int\n# This should generate an error\na1: type[Foo] | type[Bar] = Foo | Bar\nprint(a1.a)\na1()\n# This should generate an error\na2: type[Foo] | type[Bar] = Union[Foo, Bar]\nprint(a2.a)\na2()",
        "detail": "packages.pyright-internal.src.tests.samples.unions5",
        "documentation": {}
    },
    {
        "label": "b1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions5",
        "description": "packages.pyright-internal.src.tests.samples.unions5",
        "peekOfCode": "b1 = Foo | Bar\n# This should generate an error\nprint(b1.a)\n# This should generate an error\nb1()\nb2 = Union[Foo, Bar]\n# This should generate an error\nprint(b2.a)\n# This should generate an error\nb2()",
        "detail": "packages.pyright-internal.src.tests.samples.unions5",
        "documentation": {}
    },
    {
        "label": "b2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions5",
        "description": "packages.pyright-internal.src.tests.samples.unions5",
        "peekOfCode": "b2 = Union[Foo, Bar]\n# This should generate an error\nprint(b2.a)\n# This should generate an error\nb2()",
        "detail": "packages.pyright-internal.src.tests.samples.unions5",
        "documentation": {}
    },
    {
        "label": "MyList",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "class MyList(MutableSequence[_T]):\n    @overload\n    def __getitem__(self, __i: SupportsIndex) -> _T:  # type: ignore\n        ...\n    @overload\n    def __getitem__(self, __s: slice) -> MyList[_T]:\n        ...\nclass NestedSequence(Protocol[T_co]):\n    @overload\n    def __getitem__(self, index: int, /) -> T_co | NestedSequence[T_co]:",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "NestedSequence",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "class NestedSequence(Protocol[T_co]):\n    @overload\n    def __getitem__(self, index: int, /) -> T_co | NestedSequence[T_co]:\n        ...\n    @overload\n    def __getitem__(self, index: slice, /) -> NestedSequence[T_co]:\n        ...\ndef func1(b: MyList[int | MyList[int]]):\n    _: NestedSequence[int] = b\ndef func2(c: MyList[MyList[int] | int]):",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "def func1(b: MyList[int | MyList[int]]):\n    _: NestedSequence[int] = b\ndef func2(c: MyList[MyList[int] | int]):\n    _: NestedSequence[int] = c\ndef is_async_callable(\n    obj: Callable[..., _T] | Callable[..., Awaitable[_T]]\n) -> TypeGuard[Callable[..., Awaitable[_T]]]:\n    ...\nasync def func3(fn: Callable[[], _T] | Callable[[], Awaitable[_T]]):\n    if is_async_callable(fn):",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "def func2(c: MyList[MyList[int] | int]):\n    _: NestedSequence[int] = c\ndef is_async_callable(\n    obj: Callable[..., _T] | Callable[..., Awaitable[_T]]\n) -> TypeGuard[Callable[..., Awaitable[_T]]]:\n    ...\nasync def func3(fn: Callable[[], _T] | Callable[[], Awaitable[_T]]):\n    if is_async_callable(fn):\n        return await fn()\nasync def func4(fn: Callable[[], Awaitable[_T]] | Callable[[], _T]):",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "is_async_callable",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "def is_async_callable(\n    obj: Callable[..., _T] | Callable[..., Awaitable[_T]]\n) -> TypeGuard[Callable[..., Awaitable[_T]]]:\n    ...\nasync def func3(fn: Callable[[], _T] | Callable[[], Awaitable[_T]]):\n    if is_async_callable(fn):\n        return await fn()\nasync def func4(fn: Callable[[], Awaitable[_T]] | Callable[[], _T]):\n    if is_async_callable(fn):\n        return await fn()",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "T_co",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "T_co = TypeVar(\"T_co\", covariant=True)\n_T = TypeVar(\"_T\")\nclass MyList(MutableSequence[_T]):\n    @overload\n    def __getitem__(self, __i: SupportsIndex) -> _T:  # type: ignore\n        ...\n    @overload\n    def __getitem__(self, __s: slice) -> MyList[_T]:\n        ...\nclass NestedSequence(Protocol[T_co]):",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unions6",
        "description": "packages.pyright-internal.src.tests.samples.unions6",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass MyList(MutableSequence[_T]):\n    @overload\n    def __getitem__(self, __i: SupportsIndex) -> _T:  # type: ignore\n        ...\n    @overload\n    def __getitem__(self, __s: slice) -> MyList[_T]:\n        ...\nclass NestedSequence(Protocol[T_co]):\n    @overload",
        "detail": "packages.pyright-internal.src.tests.samples.unions6",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryCast1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryCast1",
        "peekOfCode": "def foo(a: int):\n    # This should generate an error if\n    # reportUnnecessaryCast is enabled.\n    b = cast(int, a)\nc: Union[int, str] = \"hello\"\nd = cast(int, c)",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryCast1",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryCast1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryCast1",
        "peekOfCode": "d = cast(int, c)",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryCast1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "def func1(x: str | int):\n    if x in (\"a\",):\n        return\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if x in (b\"a\",):\n        return\ndef func2(x: Literal[1, 2, 3]):\n    if x in (\"4\", 1):\n        return\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "def func2(x: Literal[1, 2, 3]):\n    if x in (\"4\", 1):\n        return\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if x not in (\"4\", \"1\"):\n        pass\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if x in (4, 5):\n        return\ndef func3(x: list[str]):",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "def func3(x: list[str]):\n    if x in ([\"hi\"], [2, 3]):\n        return\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if x not in ([1, 2], [3]):\n        pass\ndef func4(x: list[T1]) -> T1:\n    if 0 not in x:\n        pass\n    return x[0]",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "def func4(x: list[T1]) -> T1:\n    if 0 not in x:\n        pass\n    return x[0]\ndef func5(x: list[T2]) -> T2:\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if 0 not in x:\n        pass\n    return x[0]",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "def func5(x: list[T2]) -> T2:\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if 0 not in x:\n        pass\n    return x[0]",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "T1 = TypeVar(\"T1\")\nT2 = TypeVar(\"T2\", bound=str)\ndef func1(x: str | int):\n    if x in (\"a\",):\n        return\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if x in (b\"a\",):\n        return\ndef func2(x: Literal[1, 2, 3]):\n    if x in (\"4\", 1):",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "peekOfCode": "T2 = TypeVar(\"T2\", bound=str)\ndef func1(x: str | int):\n    if x in (\"a\",):\n        return\n    # This should generate an error if \"reportUnnecessaryContains\" is enabled.\n    if x in (b\"a\",):\n        return\ndef func2(x: Literal[1, 2, 3]):\n    if x in (\"4\", 1):\n        return",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryContains1",
        "documentation": {}
    },
    {
        "label": "CustomClass2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class CustomClass2(CustomClass1):\n    pass\ndef func1(p1: int, p2: Union[int, str]):\n    a = isinstance(p2, str)\n    b = isinstance(p2, (int, float))\n    # This should generate an error because this is always true.\n    c = isinstance(p2, (float, dict, int, str))\n    d = isinstance(p1, float)\n    e = isinstance(p2, (float, dict, int))\n    # This should generate an error because this is always true.",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "SomeTypedDict",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class SomeTypedDict(TypedDict):\n    name: str\ndef func2(p1: SomeTypedDict, p2: Union[int, SomeTypedDict]):\n    a = isinstance(p2, dict)\n    # This should generate an error because it's always true.\n    b = isinstance(p1, dict)\n@runtime_checkable\nclass BaseClass(Protocol):\n    text: ClassVar[str] = \"FOO\"\nclass ClassA:",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "BaseClass",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class BaseClass(Protocol):\n    text: ClassVar[str] = \"FOO\"\nclass ClassA:\n    text: ClassVar[str] = \"BAR\"\nclass ClassB:\n    text: ClassVar[str] = \"BAZ\"\nclass ClassC:\n    pass\ndef func3(obj: BaseClass):\n    if isinstance(obj, (ClassA, ClassB)):",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class ClassA:\n    text: ClassVar[str] = \"BAR\"\nclass ClassB:\n    text: ClassVar[str] = \"BAZ\"\nclass ClassC:\n    pass\ndef func3(obj: BaseClass):\n    if isinstance(obj, (ClassA, ClassB)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\n    if isinstance(obj, (ClassA, ClassB, ClassC)):",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class ClassB:\n    text: ClassVar[str] = \"BAZ\"\nclass ClassC:\n    pass\ndef func3(obj: BaseClass):\n    if isinstance(obj, (ClassA, ClassB)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\n    if isinstance(obj, (ClassA, ClassB, ClassC)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\nclass A:",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "ClassC",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class ClassC:\n    pass\ndef func3(obj: BaseClass):\n    if isinstance(obj, (ClassA, ClassB)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\n    if isinstance(obj, (ClassA, ClassB, ClassC)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\nclass A:\n    pass\nclass B(A):",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class A:\n    pass\nclass B(A):\n    pass\ndef func4(a: A, cls: Type[A]) -> None:\n    isinstance(a, cls)\n    # This should generate an error because it's always true.\n    isinstance(a, A)",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "class B(A):\n    pass\ndef func4(a: A, cls: Type[A]) -> None:\n    isinstance(a, cls)\n    # This should generate an error because it's always true.\n    isinstance(a, A)",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "def func1(p1: int, p2: Union[int, str]):\n    a = isinstance(p2, str)\n    b = isinstance(p2, (int, float))\n    # This should generate an error because this is always true.\n    c = isinstance(p2, (float, dict, int, str))\n    d = isinstance(p1, float)\n    e = isinstance(p2, (float, dict, int))\n    # This should generate an error because this is always true.\n    f = isinstance(p1, int)\n    # This should not generate an error because it's within an assert.",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "def func2(p1: SomeTypedDict, p2: Union[int, SomeTypedDict]):\n    a = isinstance(p2, dict)\n    # This should generate an error because it's always true.\n    b = isinstance(p1, dict)\n@runtime_checkable\nclass BaseClass(Protocol):\n    text: ClassVar[str] = \"FOO\"\nclass ClassA:\n    text: ClassVar[str] = \"BAR\"\nclass ClassB:",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "def func3(obj: BaseClass):\n    if isinstance(obj, (ClassA, ClassB)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\n    if isinstance(obj, (ClassA, ClassB, ClassC)):\n        reveal_type(obj, expected_text=\"ClassA | ClassB\")\nclass A:\n    pass\nclass B(A):\n    pass\ndef func4(a: A, cls: Type[A]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "peekOfCode": "def func4(a: A, cls: Type[A]) -> None:\n    isinstance(a, cls)\n    # This should generate an error because it's always true.\n    isinstance(a, A)",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsInstance1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unnecessaryIsSubclass1",
        "description": "packages.pyright-internal.src.tests.samples.unnecessaryIsSubclass1",
        "peekOfCode": "def foo(p1: Type[int], p2: Union[Type[int], Type[str]]):\n    a = issubclass(p2, str)\n    b = issubclass(p2, (int, float))\n    # This should generate an error because this is always true.\n    c = issubclass(p2, (float, dict, int, str))\n    d = issubclass(p1, float)\n    e = issubclass(p2, (float, dict, int))\n    # This should generate an error because this is always true.\n    f = issubclass(p1, int)\n    # This should not generate an error because it's within an assert.",
        "detail": "packages.pyright-internal.src.tests.samples.unnecessaryIsSubclass1",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "class Foo:\n    ...\nclass Bar:\n    ...\na = [1, \"hello\", 3.4, Foo()]\nb = [*a]\ndef int_only(a: int):\n    ...\nfor c in b:\n    if not isinstance(c, (float, str)):",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "Bar",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "class Bar:\n    ...\na = [1, \"hello\", 3.4, Foo()]\nb = [*a]\ndef int_only(a: int):\n    ...\nfor c in b:\n    if not isinstance(c, (float, str)):\n        # This should generate an error because c can\n        # be an int or foo.",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "int_only",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "def int_only(a: int):\n    ...\nfor c in b:\n    if not isinstance(c, (float, str)):\n        # This should generate an error because c can\n        # be an int or foo.\n        int_only(c)\n        if not isinstance(c, Foo):\n            # This should not generate an error.\n            int_only(c)",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "a = [1, \"hello\", 3.4, Foo()]\nb = [*a]\ndef int_only(a: int):\n    ...\nfor c in b:\n    if not isinstance(c, (float, str)):\n        # This should generate an error because c can\n        # be an int or foo.\n        int_only(c)\n        if not isinstance(c, Foo):",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "b = [*a]\ndef int_only(a: int):\n    ...\nfor c in b:\n    if not isinstance(c, (float, str)):\n        # This should generate an error because c can\n        # be an int or foo.\n        int_only(c)\n        if not isinstance(c, Foo):\n            # This should not generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "x1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "x1 = *(1, 2, 3)\nx2 = 2, *(1, 2, 3)\nx3 = *(1, 2, 3), 2\n[d1, *e1, f1] = [1, 2, 3, 4]\nreveal_type(e1, expected_text=\"list[int]\")\n[*d2, e2, f2] = [1, 2, 3, 4]\nreveal_type(d2, expected_text=\"list[int]\")\n[d3, e3, *f3] = (1, 2, 3, 4)\nreveal_type(f3, expected_text=\"list[int]\")\n[g1, g2, g3] = (1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "x2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "x2 = 2, *(1, 2, 3)\nx3 = *(1, 2, 3), 2\n[d1, *e1, f1] = [1, 2, 3, 4]\nreveal_type(e1, expected_text=\"list[int]\")\n[*d2, e2, f2] = [1, 2, 3, 4]\nreveal_type(d2, expected_text=\"list[int]\")\n[d3, e3, *f3] = (1, 2, 3, 4)\nreveal_type(f3, expected_text=\"list[int]\")\n[g1, g2, g3] = (1, 2, 3)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "x3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack1",
        "description": "packages.pyright-internal.src.tests.samples.unpack1",
        "peekOfCode": "x3 = *(1, 2, 3), 2\n[d1, *e1, f1] = [1, 2, 3, 4]\nreveal_type(e1, expected_text=\"list[int]\")\n[*d2, e2, f2] = [1, 2, 3, 4]\nreveal_type(d2, expected_text=\"list[int]\")\n[d3, e3, *f3] = (1, 2, 3, 4)\nreveal_type(f3, expected_text=\"list[int]\")\n[g1, g2, g3] = (1, 2, 3)\n# This should generate an error.\n[g1, g2, g3, g4] = (1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.unpack1",
        "documentation": {}
    },
    {
        "label": "foo",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack2",
        "description": "packages.pyright-internal.src.tests.samples.unpack2",
        "peekOfCode": "def foo() -> Tuple[int, int, int]:\n    rest = (2, 3)\n    t = 1, *rest\n    return t\ndef foo2() -> Tuple[int, int, int]:\n    rest = (3, 4)\n    t = 1, 2, *rest\n    # This should generate an error\n    return t\ndef foo3() -> Tuple[Any, ...]:",
        "detail": "packages.pyright-internal.src.tests.samples.unpack2",
        "documentation": {}
    },
    {
        "label": "foo2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack2",
        "description": "packages.pyright-internal.src.tests.samples.unpack2",
        "peekOfCode": "def foo2() -> Tuple[int, int, int]:\n    rest = (3, 4)\n    t = 1, 2, *rest\n    # This should generate an error\n    return t\ndef foo3() -> Tuple[Any, ...]:\n    rest = [1, 2, 3]\n    t = 1, 2, 3, *rest\n    requires_list(rest)\n    return t",
        "detail": "packages.pyright-internal.src.tests.samples.unpack2",
        "documentation": {}
    },
    {
        "label": "foo3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack2",
        "description": "packages.pyright-internal.src.tests.samples.unpack2",
        "peekOfCode": "def foo3() -> Tuple[Any, ...]:\n    rest = [1, 2, 3]\n    t = 1, 2, 3, *rest\n    requires_list(rest)\n    return t\ndef requires_list(a: List[int]):\n    return None",
        "detail": "packages.pyright-internal.src.tests.samples.unpack2",
        "documentation": {}
    },
    {
        "label": "requires_list",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack2",
        "description": "packages.pyright-internal.src.tests.samples.unpack2",
        "peekOfCode": "def requires_list(a: List[int]):\n    return None",
        "detail": "packages.pyright-internal.src.tests.samples.unpack2",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack3",
        "description": "packages.pyright-internal.src.tests.samples.unpack3",
        "peekOfCode": "def test1():\n    a = [1, 2, 3]\n    b = (4, *a, 5)\n    return (4, *b, 5)\ndef test2():\n    a = [1, 2, 3]\n    # This should generate an error for versions of Python <3.8\n    return 4, *a, 5",
        "detail": "packages.pyright-internal.src.tests.samples.unpack3",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack3",
        "description": "packages.pyright-internal.src.tests.samples.unpack3",
        "peekOfCode": "def test2():\n    a = [1, 2, 3]\n    # This should generate an error for versions of Python <3.8\n    return 4, *a, 5",
        "detail": "packages.pyright-internal.src.tests.samples.unpack3",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack4",
        "description": "packages.pyright-internal.src.tests.samples.unpack4",
        "peekOfCode": "a = [1, 2]\nb = [\"3\", \"4\"]\n# This should generate an error for versions of Python <3.9\nfor x in *a, *b:\n    print(x)\nc = *a, *b\nprint(c)\n# This should always generate an error.\n*a, *b = (1, 2, )",
        "detail": "packages.pyright-internal.src.tests.samples.unpack4",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack4",
        "description": "packages.pyright-internal.src.tests.samples.unpack4",
        "peekOfCode": "b = [\"3\", \"4\"]\n# This should generate an error for versions of Python <3.9\nfor x in *a, *b:\n    print(x)\nc = *a, *b\nprint(c)\n# This should always generate an error.\n*a, *b = (1, 2, )",
        "detail": "packages.pyright-internal.src.tests.samples.unpack4",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unpack4",
        "description": "packages.pyright-internal.src.tests.samples.unpack4",
        "peekOfCode": "c = *a, *b\nprint(c)\n# This should always generate an error.\n*a, *b = (1, 2, )",
        "detail": "packages.pyright-internal.src.tests.samples.unpack4",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "class Foo:\n    b: bool\n    @staticmethod\n    def method1():\n        \"\"\"\n        Docstring\n        \"\"\"\n        raise NotImplementedError(\"Not Implemented\")\n    def method2(self, a: int):\n        \"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func1():\n    \"\"\"\n    Docstring\n    \"\"\"\n    raise NotImplementedError()\nclass Foo:\n    b: bool\n    @staticmethod\n    def method1():\n        \"\"\"",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func2():\n    func1()\n    # This should not be marked unreachable because NotImplementedError\n    # is special-cased.\n    return 3\ndef func3(foo: Foo):\n    foo.method1()\n    return 3\ndef func4(foo: Foo):\n    foo.method2(2)",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func3(foo: Foo):\n    foo.method1()\n    return 3\ndef func4(foo: Foo):\n    foo.method2(2)\n    return 3\ndef func5(foo: Foo):\n    foo.method3()\n    return 3\ndef func6(foo: Foo):",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func4(foo: Foo):\n    foo.method2(2)\n    return 3\ndef func5(foo: Foo):\n    foo.method3()\n    return 3\ndef func6(foo: Foo):\n    foo.method4()\n    return 3\ndef func7(foo: Foo):",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func5(foo: Foo):\n    foo.method3()\n    return 3\ndef func6(foo: Foo):\n    foo.method4()\n    return 3\ndef func7(foo: Foo):\n    foo.method5()\n    # This should be marked as unreachable\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func6(foo: Foo):\n    foo.method4()\n    return 3\ndef func7(foo: Foo):\n    foo.method5()\n    # This should be marked as unreachable\n    return 3\ndef func8():\n    raise NameError()\ndef func9():",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func7(foo: Foo):\n    foo.method5()\n    # This should be marked as unreachable\n    return 3\ndef func8():\n    raise NameError()\ndef func9():\n    func8()\n    # This should be marked unreachable.\n    return 3",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func8():\n    raise NameError()\ndef func9():\n    func8()\n    # This should be marked unreachable.\n    return 3\ndef func10():\n    e = OSError()\n    a1 = os.name == \"nt\" and None == e.errno\n    reveal_type(a1, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func9",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func9():\n    func8()\n    # This should be marked unreachable.\n    return 3\ndef func10():\n    e = OSError()\n    a1 = os.name == \"nt\" and None == e.errno\n    reveal_type(a1, expected_text=\"bool\")\n    a2 = True and os.name == \"nt\"\n    reveal_type(a2, expected_text=\"bool\")",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func10",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unreachable1",
        "description": "packages.pyright-internal.src.tests.samples.unreachable1",
        "peekOfCode": "def func10():\n    e = OSError()\n    a1 = os.name == \"nt\" and None == e.errno\n    reveal_type(a1, expected_text=\"bool\")\n    a2 = True and os.name == \"nt\"\n    reveal_type(a2, expected_text=\"bool\")\n    if os.name == \"nt\":\n        # This should be marked unreachable.\n        b = e.errno                            \n    if sys.version_info >= (4, 0):",
        "detail": "packages.pyright-internal.src.tests.samples.unreachable1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def func1():\n    pass\ndef func2():\n    raise RuntimeError()\ndef func3() -> Any:\n    pass\ndef func4():\n    return 3\ndef func5(a: int) -> Union[int, List[int]]:\n    if a < 0:",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def func2():\n    raise RuntimeError()\ndef func3() -> Any:\n    pass\ndef func4():\n    return 3\ndef func5(a: int) -> Union[int, List[int]]:\n    if a < 0:\n        return 5\n    return [3]",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def func3() -> Any:\n    pass\ndef func4():\n    return 3\ndef func5(a: int) -> Union[int, List[int]]:\n    if a < 0:\n        return 5\n    return [3]\ndef func6() -> Iterable[int]:\n    return []",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def func4():\n    return 3\ndef func5(a: int) -> Union[int, List[int]]:\n    if a < 0:\n        return 5\n    return [3]\ndef func6() -> Iterable[int]:\n    return []\nfunc1()\ndef aaa():",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def func5(a: int) -> Union[int, List[int]]:\n    if a < 0:\n        return 5\n    return [3]\ndef func6() -> Iterable[int]:\n    return []\nfunc1()\ndef aaa():\n    func2()\nfunc3()",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def func6() -> Iterable[int]:\n    return []\nfunc1()\ndef aaa():\n    func2()\nfunc3()\n# This should generate a diagnostic if reportUnusedCallResult is enabled.\nfunc4()\n# This should generate a diagnostic if reportUnusedCallResult is enabled.\nfunc5(3)",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "aaa",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "def aaa():\n    func2()\nfunc3()\n# This should generate a diagnostic if reportUnusedCallResult is enabled.\nfunc4()\n# This should generate a diagnostic if reportUnusedCallResult is enabled.\nfunc5(3)\n# This should generate a diagnostic if reportUnusedCallResult is enabled.\nfunc6()\n_, _ = func5(3), func6()",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "_ = func5(3)\n_ = func5(func4())\nfor _ in func6():\n    pass\nasync def get_string_async() -> str:\n    return \"A string\"\nasync def await_string() -> None:\n    # This should generate a diagnostic if reportUnusedCallResult is enabled.\n    await get_string_async()",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "description": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "peekOfCode": "_ = func5(func4())\nfor _ in func6():\n    pass\nasync def get_string_async() -> str:\n    return \"A string\"\nasync def await_string() -> None:\n    # This should generate a diagnostic if reportUnusedCallResult is enabled.\n    await get_string_async()",
        "detail": "packages.pyright-internal.src.tests.samples.unusedCallResult1",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedExpression1",
        "description": "packages.pyright-internal.src.tests.samples.unusedExpression1",
        "peekOfCode": "t = 1\n# This should generate a diagnostic.\n-4\n# This should generate a diagnostic.\n4j\n# This should generate a diagnostic.\n4j + 4\n# This should generate a diagnostic.\nFalse\n# This should generate a diagnostic.",
        "detail": "packages.pyright-internal.src.tests.samples.unusedExpression1",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.unusedVariable1",
        "description": "packages.pyright-internal.src.tests.samples.unusedVariable1",
        "peekOfCode": "def func1(a: int):\n    x = 4\n    # This should generate an error if reportUnusedVariable is enabled.\n    y = x\n    _z = 4\n    _ = 2\n    __z__ = 5\n    if x + 1:\n        # This should generate an error if reportUnusedVariable is enabled.\n        z = 3",
        "detail": "packages.pyright-internal.src.tests.samples.unusedVariable1",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "peekOfCode": "class ClassA(Generic[_T, Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]) -> None:\n        reveal_type(args, expected_text=\"tuple[*_Xs@ClassA]\")\n    # This should generate an error\n    def func2(self) -> Union[_Xs]:\n        ...\n    def func3(self) -> Tuple[Unpack[_Xs]]:\n        ...\n    # This should generate an error\n    def func4(self) -> Tuple[_Xs]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "documentation": {}
    },
    {
        "label": "ClassB",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "peekOfCode": "class ClassB(Generic[_Xs]):\n    ...\n# This should generate an error.\nx: List[_Xs] = []\n# This should generate an error.\ny: _Xs = ()",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_Xs = TypeVarTuple(\"_Xs\")\nclass ClassA(Generic[_T, Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]) -> None:\n        reveal_type(args, expected_text=\"tuple[*_Xs@ClassA]\")\n    # This should generate an error\n    def func2(self) -> Union[_Xs]:\n        ...\n    def func3(self) -> Tuple[Unpack[_Xs]]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\nclass ClassA(Generic[_T, Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]) -> None:\n        reveal_type(args, expected_text=\"tuple[*_Xs@ClassA]\")\n    # This should generate an error\n    def func2(self) -> Union[_Xs]:\n        ...\n    def func3(self) -> Tuple[Unpack[_Xs]]:\n        ...\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar1",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "class Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(\n        self, other: Array[DType, Unpack[Shape]]\n    ) -> Array[DType, Unpack[Shape]]:\n        ...\ndef process_batch_channels(x: Array[Batch, Unpack[Tuple[Any, ...]], Channels]) -> None:\n    ...\ndef expect_variadic_array1(x: Array[Batch, Unpack[Shape]]) -> Union[Unpack[Shape]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "process_batch_channels",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def process_batch_channels(x: Array[Batch, Unpack[Tuple[Any, ...]], Channels]) -> None:\n    ...\ndef expect_variadic_array1(x: Array[Batch, Unpack[Shape]]) -> Union[Unpack[Shape]]:\n    ...\ndef expect_variadic_array2(x: Array[Batch, Unpack[Tuple[Any, ...]]]) -> None:\n    ...\ndef expect_precise_array(x: Array[Batch, Height, Width, Channels]) -> None:\n    ...\ndef func1(x: Array[Batch, Height, Width, Channels]):\n    process_batch_channels(x)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "expect_variadic_array1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def expect_variadic_array1(x: Array[Batch, Unpack[Shape]]) -> Union[Unpack[Shape]]:\n    ...\ndef expect_variadic_array2(x: Array[Batch, Unpack[Tuple[Any, ...]]]) -> None:\n    ...\ndef expect_precise_array(x: Array[Batch, Height, Width, Channels]) -> None:\n    ...\ndef func1(x: Array[Batch, Height, Width, Channels]):\n    process_batch_channels(x)\n    expect_precise_array(x)\ndef func2(y: Array[Batch, Channels]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "expect_variadic_array2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def expect_variadic_array2(x: Array[Batch, Unpack[Tuple[Any, ...]]]) -> None:\n    ...\ndef expect_precise_array(x: Array[Batch, Height, Width, Channels]) -> None:\n    ...\ndef func1(x: Array[Batch, Height, Width, Channels]):\n    process_batch_channels(x)\n    expect_precise_array(x)\ndef func2(y: Array[Batch, Channels]):\n    process_batch_channels(y)\n    # This should generate an error because the type args don't match.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "expect_precise_array",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def expect_precise_array(x: Array[Batch, Height, Width, Channels]) -> None:\n    ...\ndef func1(x: Array[Batch, Height, Width, Channels]):\n    process_batch_channels(x)\n    expect_precise_array(x)\ndef func2(y: Array[Batch, Channels]):\n    process_batch_channels(y)\n    # This should generate an error because the type args don't match.\n    expect_precise_array(y)\ndef func3(z: Array[Batch]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def func1(x: Array[Batch, Height, Width, Channels]):\n    process_batch_channels(x)\n    expect_precise_array(x)\ndef func2(y: Array[Batch, Channels]):\n    process_batch_channels(y)\n    # This should generate an error because the type args don't match.\n    expect_precise_array(y)\ndef func3(z: Array[Batch]):\n    # This should generate an error because Channels is missing\n    process_batch_channels(z)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def func2(y: Array[Batch, Channels]):\n    process_batch_channels(y)\n    # This should generate an error because the type args don't match.\n    expect_precise_array(y)\ndef func3(z: Array[Batch]):\n    # This should generate an error because Channels is missing\n    process_batch_channels(z)\ndef func4(y: Array[Any, Unpack[Tuple[Any, ...]]]):\n    reveal_type(y, expected_text=\"Array[Any, *tuple[Any, ...]]\")\n    expect_variadic_array1(y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def func3(z: Array[Batch]):\n    # This should generate an error because Channels is missing\n    process_batch_channels(z)\ndef func4(y: Array[Any, Unpack[Tuple[Any, ...]]]):\n    reveal_type(y, expected_text=\"Array[Any, *tuple[Any, ...]]\")\n    expect_variadic_array1(y)\n    expect_variadic_array2(y)\n    expect_precise_array(y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "def func4(y: Array[Any, Unpack[Tuple[Any, ...]]]):\n    reveal_type(y, expected_text=\"Array[Any, *tuple[Any, ...]]\")\n    expect_variadic_array1(y)\n    expect_variadic_array2(y)\n    expect_precise_array(y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "DType",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "DType = TypeVar(\"DType\")\nShape = TypeVarTuple(\"Shape\")\nBatch = NewType(\"Batch\", int)\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nChannels = NewType(\"Channels\", int)\nclass Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "Shape = TypeVarTuple(\"Shape\")\nBatch = NewType(\"Batch\", int)\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nChannels = NewType(\"Channels\", int)\nclass Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(\n        self, other: Array[DType, Unpack[Shape]]",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "Batch",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "Batch = NewType(\"Batch\", int)\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nChannels = NewType(\"Channels\", int)\nclass Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(\n        self, other: Array[DType, Unpack[Shape]]\n    ) -> Array[DType, Unpack[Shape]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "Height",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "Height = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nChannels = NewType(\"Channels\", int)\nclass Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(\n        self, other: Array[DType, Unpack[Shape]]\n    ) -> Array[DType, Unpack[Shape]]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "Width",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "Width = NewType(\"Width\", int)\nChannels = NewType(\"Channels\", int)\nclass Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(\n        self, other: Array[DType, Unpack[Shape]]\n    ) -> Array[DType, Unpack[Shape]]:\n        ...\ndef process_batch_channels(x: Array[Batch, Unpack[Tuple[Any, ...]], Channels]) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "Channels",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "peekOfCode": "Channels = NewType(\"Channels\", int)\nclass Array(Generic[DType, Unpack[Shape]]):\n    def __abs__(self) -> Array[DType, Unpack[Shape]]:\n        ...\n    def __add__(\n        self, other: Array[DType, Unpack[Shape]]\n    ) -> Array[DType, Unpack[Shape]]:\n        ...\ndef process_batch_channels(x: Array[Batch, Unpack[Tuple[Any, ...]], Channels]) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar10",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "class Array(Generic[*Shape]):\n    def __init__(self, *shape: *Shape):\n        self.shape = shape\n    def __abs__(self) -> \"Array[*Shape]\":\n        ...\n    def __add__(self, other: \"Array[*Shape]\") -> \"Array[*Shape]\":\n        ...\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nx: Array[Height, Width] = Array(Height(480), Width(640))",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "def func1(a: Tuple[*_Xs], b: Tuple[*_Xs]) -> Union[*_Xs]:\n    ...\ndef func2(a: Tuple[int, *_Xs], b: Tuple[int, *_Xs]) -> Union[*_Xs]:\n    ...\ndef func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)\n    v3 = func2(p2, p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "def func2(a: Tuple[int, *_Xs], b: Tuple[int, *_Xs]) -> Union[*_Xs]:\n    ...\ndef func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)\n    v3 = func2(p2, p2)\n    reveal_type(v3, expected_text=\"str\")\n    v4 = func2((3, \"hi\"), p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "def func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)\n    v3 = func2(p2, p2)\n    reveal_type(v3, expected_text=\"str\")\n    v4 = func2((3, \"hi\"), p2)\n    reveal_type(v4, expected_text=\"str\")\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "def func4(a: int, *args: *_Xs, **kwargs: str) -> Tuple[int, *_Xs]:\n    ...\nc1 = func4(4, 5.4, 6j, b=\"3\", c=\"5\")\nreveal_type(c1, expected_text=\"Tuple[int, float, complex]\")\nc2 = func4(4, b=\"3\", c=\"5\")\nreveal_type(c2, expected_text=\"Tuple[int]\")\n# This should generate an error.\nc3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "Shape = TypeVarTuple(\"Shape\")\nclass Array(Generic[*Shape]):\n    def __init__(self, *shape: *Shape):\n        self.shape = shape\n    def __abs__(self) -> \"Array[*Shape]\":\n        ...\n    def __add__(self, other: \"Array[*Shape]\") -> \"Array[*Shape]\":\n        ...\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "Height",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "Height = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nx: Array[Height, Width] = Array(Height(480), Width(640))\nreveal_type(x.shape, expected_text=\"tuple[Height, Width]\")\nreveal_type(abs(x), expected_text=\"Array[Height, Width]\")\nreveal_type(x + abs(x), expected_text=\"Array[Height, Width]\")\n_Xs = TypeVarTuple(\"_Xs\")\ndef func1(a: Tuple[*_Xs], b: Tuple[*_Xs]) -> Union[*_Xs]:\n    ...\ndef func2(a: Tuple[int, *_Xs], b: Tuple[int, *_Xs]) -> Union[*_Xs]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "Width",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "Width = NewType(\"Width\", int)\nx: Array[Height, Width] = Array(Height(480), Width(640))\nreveal_type(x.shape, expected_text=\"tuple[Height, Width]\")\nreveal_type(abs(x), expected_text=\"Array[Height, Width]\")\nreveal_type(x + abs(x), expected_text=\"Array[Height, Width]\")\n_Xs = TypeVarTuple(\"_Xs\")\ndef func1(a: Tuple[*_Xs], b: Tuple[*_Xs]) -> Union[*_Xs]:\n    ...\ndef func2(a: Tuple[int, *_Xs], b: Tuple[int, *_Xs]) -> Union[*_Xs]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\ndef func1(a: Tuple[*_Xs], b: Tuple[*_Xs]) -> Union[*_Xs]:\n    ...\ndef func2(a: Tuple[int, *_Xs], b: Tuple[int, *_Xs]) -> Union[*_Xs]:\n    ...\ndef func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "c1 = func4(4, 5.4, 6j, b=\"3\", c=\"5\")\nreveal_type(c1, expected_text=\"Tuple[int, float, complex]\")\nc2 = func4(4, b=\"3\", c=\"5\")\nreveal_type(c2, expected_text=\"Tuple[int]\")\n# This should generate an error.\nc3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "c2 = func4(4, b=\"3\", c=\"5\")\nreveal_type(c2, expected_text=\"Tuple[int]\")\n# This should generate an error.\nc3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "c3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "peekOfCode": "c3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar11",
        "documentation": {}
    },
    {
        "label": "CallbackA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "peekOfCode": "class CallbackA(Protocol[*Ts, T]):\n    def __call__(self, *args: *Ts, keyed: T) -> tuple[Unpack[Ts], T]:\n        ...\ndef example(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]:\n    return (a, b, keyed)\na: CallbackA[int, str, bool] = example\nreveal_type(a, expected_text=\"(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "peekOfCode": "def example(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]:\n    return (a, b, keyed)\na: CallbackA[int, str, bool] = example\nreveal_type(a, expected_text=\"(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "peekOfCode": "T = TypeVar(\"T\")\nTs = TypeVarTuple(\"Ts\")\nclass CallbackA(Protocol[*Ts, T]):\n    def __call__(self, *args: *Ts, keyed: T) -> tuple[Unpack[Ts], T]:\n        ...\ndef example(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]:\n    return (a, b, keyed)\na: CallbackA[int, str, bool] = example\nreveal_type(a, expected_text=\"(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "documentation": {}
    },
    {
        "label": "Ts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "peekOfCode": "Ts = TypeVarTuple(\"Ts\")\nclass CallbackA(Protocol[*Ts, T]):\n    def __call__(self, *args: *Ts, keyed: T) -> tuple[Unpack[Ts], T]:\n        ...\ndef example(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]:\n    return (a, b, keyed)\na: CallbackA[int, str, bool] = example\nreveal_type(a, expected_text=\"(a: int, b: str, *, keyed: bool) -> tuple[int, str, bool]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar12",
        "documentation": {}
    },
    {
        "label": "CallbackPosOnly",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "class CallbackPosOnly(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_posonly(fn: CallbackPosOnly[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args)\nclass CallbackKeyed(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_keyed(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args, keyed=True)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "CallbackKeyed",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "class CallbackKeyed(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_keyed(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args, keyed=True)\ndef invoke_keyed_should_fail(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    # This should generate an error because \"keyed\" should\n    # be interpreted as a keyword-only parameter.\n    return fn(*args, True)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "invoke_posonly",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "def invoke_posonly(fn: CallbackPosOnly[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args)\nclass CallbackKeyed(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_keyed(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args, keyed=True)\ndef invoke_keyed_should_fail(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    # This should generate an error because \"keyed\" should\n    # be interpreted as a keyword-only parameter.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "invoke_keyed",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "def invoke_keyed(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args, keyed=True)\ndef invoke_keyed_should_fail(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    # This should generate an error because \"keyed\" should\n    # be interpreted as a keyword-only parameter.\n    return fn(*args, True)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "invoke_keyed_should_fail",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "def invoke_keyed_should_fail(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    # This should generate an error because \"keyed\" should\n    # be interpreted as a keyword-only parameter.\n    return fn(*args, True)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "T = TypeVar(\"T\")\nTs = TypeVarTuple(\"Ts\")\nclass CallbackPosOnly(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_posonly(fn: CallbackPosOnly[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args)\nclass CallbackKeyed(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[Unpack[Ts]]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "Ts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "peekOfCode": "Ts = TypeVarTuple(\"Ts\")\nclass CallbackPosOnly(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_posonly(fn: CallbackPosOnly[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:\n    return fn(*args)\nclass CallbackKeyed(Protocol[Unpack[Ts]]):\n    def __call__(self, *args: *Ts, keyed: bool) -> tuple[Unpack[Ts]]:\n        ...\ndef invoke_keyed(fn: CallbackKeyed[Unpack[Ts]], *args: *Ts) -> tuple[Unpack[Ts]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar13",
        "documentation": {}
    },
    {
        "label": "Foo",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "class Foo:\n    @classmethod\n    def foo(cls, *shape: *Ts) -> tuple[*Ts]:\n        ...\ndef call_with_params2(target: Callable[[*Ts], int]) -> tuple[*Ts]:\n    ...\ndef callback4(a: int, b: str, /) -> int:\n    ...\ndef g(action: Callable[[int, str], int]):\n    v1 = call_with_params2(callback4)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "call_with_params",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def call_with_params(func: Callable[[*Ts], R], *params: *Ts) -> R:\n    # This should generate an error because it's missing a *.\n    func(params)\n    return func(*params)\ndef callback1(*args: int) -> int:\n    ...\ndef callback2(*args: *tuple[int, int]) -> int:\n    ...\ncall_with_params(callback1)\ncall_with_params(callback1, 1, 2, 3)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "callback1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def callback1(*args: int) -> int:\n    ...\ndef callback2(*args: *tuple[int, int]) -> int:\n    ...\ncall_with_params(callback1)\ncall_with_params(callback1, 1, 2, 3)\n# This should generate an error.\ncall_with_params(callback1, \"1\")\n# This should generate an error.\ncall_with_params(callback2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "callback2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def callback2(*args: *tuple[int, int]) -> int:\n    ...\ncall_with_params(callback1)\ncall_with_params(callback1, 1, 2, 3)\n# This should generate an error.\ncall_with_params(callback1, \"1\")\n# This should generate an error.\ncall_with_params(callback2)\ncall_with_params(callback2, 1, 1)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "callback3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def callback3(*args: *tuple[int, *tuple[str, ...], int]) -> int:\n    ...\n# This should generate an error.\ncall_with_params(callback3)\ncall_with_params(callback3, 1, 2)\ncall_with_params(callback3, 1, \"hi\", 2)\ncall_with_params(callback3, 1, \"hi\", \"hi\", 2)\n# This should generate an error.\ncall_with_params(callback3, 1, 1, 2)\nclass Foo:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "call_with_params2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def call_with_params2(target: Callable[[*Ts], int]) -> tuple[*Ts]:\n    ...\ndef callback4(a: int, b: str, /) -> int:\n    ...\ndef g(action: Callable[[int, str], int]):\n    v1 = call_with_params2(callback4)\n    reveal_type(v1, expected_text=\"tuple[int, str]\")\n    v2 = call_with_params2(action)\n    reveal_type(v2, expected_text=\"tuple[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "callback4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def callback4(a: int, b: str, /) -> int:\n    ...\ndef g(action: Callable[[int, str], int]):\n    v1 = call_with_params2(callback4)\n    reveal_type(v1, expected_text=\"tuple[int, str]\")\n    v2 = call_with_params2(action)\n    reveal_type(v2, expected_text=\"tuple[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "def g(action: Callable[[int, str], int]):\n    v1 = call_with_params2(callback4)\n    reveal_type(v1, expected_text=\"tuple[int, str]\")\n    v2 = call_with_params2(action)\n    reveal_type(v2, expected_text=\"tuple[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "Ts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "Ts = TypeVarTuple('Ts')\nR = TypeVar('R')\ndef call_with_params(func: Callable[[*Ts], R], *params: *Ts) -> R:\n    # This should generate an error because it's missing a *.\n    func(params)\n    return func(*params)\ndef callback1(*args: int) -> int:\n    ...\ndef callback2(*args: *tuple[int, int]) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "peekOfCode": "R = TypeVar('R')\ndef call_with_params(func: Callable[[*Ts], R], *params: *Ts) -> R:\n    # This should generate an error because it's missing a *.\n    func(params)\n    return func(*params)\ndef callback1(*args: int) -> int:\n    ...\ndef callback2(*args: *tuple[int, int]) -> int:\n    ...\ncall_with_params(callback1)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar14",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "peekOfCode": "class Array(Generic[Unpack[Shape]]):\n    ...\ndef func0(x: Array[Unpack[Shape]]) -> Array[Unpack[Shape]]:\n    ...\ndef func1(y: Array[int, Unpack[tuple[Any, ...]]]):\n    reveal_type(func0(y), expected_text=\"Array[int, *tuple[Any, ...]]\")\ndef func2(y: Array[Unpack[tuple[int, ...]], int]):\n    reveal_type(func0(y), expected_text=\"Array[*tuple[int, ...], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "documentation": {}
    },
    {
        "label": "func0",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "peekOfCode": "def func0(x: Array[Unpack[Shape]]) -> Array[Unpack[Shape]]:\n    ...\ndef func1(y: Array[int, Unpack[tuple[Any, ...]]]):\n    reveal_type(func0(y), expected_text=\"Array[int, *tuple[Any, ...]]\")\ndef func2(y: Array[Unpack[tuple[int, ...]], int]):\n    reveal_type(func0(y), expected_text=\"Array[*tuple[int, ...], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "peekOfCode": "def func1(y: Array[int, Unpack[tuple[Any, ...]]]):\n    reveal_type(func0(y), expected_text=\"Array[int, *tuple[Any, ...]]\")\ndef func2(y: Array[Unpack[tuple[int, ...]], int]):\n    reveal_type(func0(y), expected_text=\"Array[*tuple[int, ...], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "peekOfCode": "def func2(y: Array[Unpack[tuple[int, ...]], int]):\n    reveal_type(func0(y), expected_text=\"Array[*tuple[int, ...], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "peekOfCode": "Shape = TypeVarTuple(\"Shape\")\nclass Array(Generic[Unpack[Shape]]):\n    ...\ndef func0(x: Array[Unpack[Shape]]) -> Array[Unpack[Shape]]:\n    ...\ndef func1(y: Array[int, Unpack[tuple[Any, ...]]]):\n    reveal_type(func0(y), expected_text=\"Array[int, *tuple[Any, ...]]\")\ndef func2(y: Array[Unpack[tuple[int, ...]], int]):\n    reveal_type(func0(y), expected_text=\"Array[*tuple[int, ...], int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar15",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "peekOfCode": "class Base(Generic[Unpack[T2]]):\n    @classmethod\n    def method1(cls, *args: Unpack[T2]) -> int:\n        ...\n    @staticmethod\n    def method2(*args: Unpack[T2]) -> int:\n        ...\nclass Child(Base[int, str]):\n    ...\nChild.method1(1, \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "documentation": {}
    },
    {
        "label": "Child",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "peekOfCode": "class Child(Base[int, str]):\n    ...\nChild.method1(1, \"\")\nChild.method2(1, \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "documentation": {}
    },
    {
        "label": "T2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "peekOfCode": "T2 = TypeVarTuple(\"T2\")\nclass Base(Generic[Unpack[T2]]):\n    @classmethod\n    def method1(cls, *args: Unpack[T2]) -> int:\n        ...\n    @staticmethod\n    def method2(*args: Unpack[T2]) -> int:\n        ...\nclass Child(Base[int, str]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar16",
        "documentation": {}
    },
    {
        "label": "call0",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def call0(*args: *Ts) -> tuple[*Ts]:\n    ...\ndef call1(*args: *tuple[int, *Ts]) -> tuple[*Ts]:\n    ...\ndef call2(*args: *tuple[*Ts, float]) -> tuple[*Ts]:\n    ...\ndef call3(*args: *tuple[int, *Ts, float]) -> tuple[*Ts]:\n    ...\ndef call4(*args: *tuple[*tuple[int, *tuple[*Ts], float]]) -> tuple[*Ts]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "call1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def call1(*args: *tuple[int, *Ts]) -> tuple[*Ts]:\n    ...\ndef call2(*args: *tuple[*Ts, float]) -> tuple[*Ts]:\n    ...\ndef call3(*args: *tuple[int, *Ts, float]) -> tuple[*Ts]:\n    ...\ndef call4(*args: *tuple[*tuple[int, *tuple[*Ts], float]]) -> tuple[*Ts]:\n    ...\ndef func1(*args: *tuple[int, str]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "call2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def call2(*args: *tuple[*Ts, float]) -> tuple[*Ts]:\n    ...\ndef call3(*args: *tuple[int, *Ts, float]) -> tuple[*Ts]:\n    ...\ndef call4(*args: *tuple[*tuple[int, *tuple[*Ts], float]]) -> tuple[*Ts]:\n    ...\ndef func1(*args: *tuple[int, str]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, str]\")\ndef func2(*args: *tuple[int, ...]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, ...]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "call3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def call3(*args: *tuple[int, *Ts, float]) -> tuple[*Ts]:\n    ...\ndef call4(*args: *tuple[*tuple[int, *tuple[*Ts], float]]) -> tuple[*Ts]:\n    ...\ndef func1(*args: *tuple[int, str]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, str]\")\ndef func2(*args: *tuple[int, ...]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, ...]\")\ndef func3(*args: *tuple[int, *tuple[str, ...], float]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, *tuple[str, ...], float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "call4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def call4(*args: *tuple[*tuple[int, *tuple[*Ts], float]]) -> tuple[*Ts]:\n    ...\ndef func1(*args: *tuple[int, str]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, str]\")\ndef func2(*args: *tuple[int, ...]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, ...]\")\ndef func3(*args: *tuple[int, *tuple[str, ...], float]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, *tuple[str, ...], float]\")\ndef func4(*args: *Ts) -> tuple[*Ts]:\n    call0(*args)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def func1(*args: *tuple[int, str]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, str]\")\ndef func2(*args: *tuple[int, ...]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, ...]\")\ndef func3(*args: *tuple[int, *tuple[str, ...], float]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, *tuple[str, ...], float]\")\ndef func4(*args: *Ts) -> tuple[*Ts]:\n    call0(*args)\n    return args\ndef func5(x: int, y: str, z: float):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def func2(*args: *tuple[int, ...]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, ...]\")\ndef func3(*args: *tuple[int, *tuple[str, ...], float]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, *tuple[str, ...], float]\")\ndef func4(*args: *Ts) -> tuple[*Ts]:\n    call0(*args)\n    return args\ndef func5(x: int, y: str, z: float):\n    v1 = call1(*(x, y, z))\n    reveal_type(v1, expected_text=\"tuple[str, float]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def func3(*args: *tuple[int, *tuple[str, ...], float]):\n    reveal_type(call0(*args), expected_text=\"tuple[int, *tuple[str, ...], float]\")\ndef func4(*args: *Ts) -> tuple[*Ts]:\n    call0(*args)\n    return args\ndef func5(x: int, y: str, z: float):\n    v1 = call1(*(x, y, z))\n    reveal_type(v1, expected_text=\"tuple[str, float]\")\n    v2 = call2(*(x, y, z))\n    reveal_type(v2, expected_text=\"tuple[int, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def func4(*args: *Ts) -> tuple[*Ts]:\n    call0(*args)\n    return args\ndef func5(x: int, y: str, z: float):\n    v1 = call1(*(x, y, z))\n    reveal_type(v1, expected_text=\"tuple[str, float]\")\n    v2 = call2(*(x, y, z))\n    reveal_type(v2, expected_text=\"tuple[int, str]\")\n    v3 = call3(*(x, y, z))\n    reveal_type(v3, expected_text=\"tuple[str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def func5(x: int, y: str, z: float):\n    v1 = call1(*(x, y, z))\n    reveal_type(v1, expected_text=\"tuple[str, float]\")\n    v2 = call2(*(x, y, z))\n    reveal_type(v2, expected_text=\"tuple[int, str]\")\n    v3 = call3(*(x, y, z))\n    reveal_type(v3, expected_text=\"tuple[str]\")\n    v4 = call4(*(x, *(y, z)))\n    reveal_type(v4, expected_text=\"tuple[str]\")\ndef func6(*args: *tuple[int, *tuple[None, ...], float]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "def func6(*args: *tuple[int, *tuple[None, ...], float]):\n    reveal_type(call2(*args), expected_text=\"tuple[int, *tuple[None, ...]]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "Ts",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "peekOfCode": "Ts = TypeVarTuple(\"Ts\")\ndef call0(*args: *Ts) -> tuple[*Ts]:\n    ...\ndef call1(*args: *tuple[int, *Ts]) -> tuple[*Ts]:\n    ...\ndef call2(*args: *tuple[*Ts, float]) -> tuple[*Ts]:\n    ...\ndef call3(*args: *tuple[int, *Ts, float]) -> tuple[*Ts]:\n    ...\ndef call4(*args: *tuple[*tuple[int, *tuple[*Ts], float]]) -> tuple[*Ts]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar17",
        "documentation": {}
    },
    {
        "label": "ClassA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "peekOfCode": "class ClassA(Generic[_T, Unpack[_Xs]]):\n    def __init__(self, *shape: Unpack[_Xs]):\n        self.x: Tuple[Unpack[_Xs]] = shape\n        # This should generate an error\n        self.y: _Xs = shape\n    def func1(self) -> Union[Unpack[_Xs]]:\n        ...\n    # This should generate an error\n    def func2(self) -> Tuple[Unpack[_T]]:\n        ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "peekOfCode": "class Array(Generic[Unpack[_Xs]]):\n    ...\n# This should generate two errors because _Xs must be unpacked.\ndef func0(value: Array[_Xs]) -> Tuple[complex, _Xs, str]:\n    ...\n# def func1(value: Array[*_Xs]) -> Tuple[complex, *_Xs, str]:\n#     ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "documentation": {}
    },
    {
        "label": "func0",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "peekOfCode": "def func0(value: Array[_Xs]) -> Tuple[complex, _Xs, str]:\n    ...\n# def func1(value: Array[*_Xs]) -> Tuple[complex, *_Xs, str]:\n#     ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_Xs = TypeVarTuple(\"_Xs\")\nclass ClassA(Generic[_T, Unpack[_Xs]]):\n    def __init__(self, *shape: Unpack[_Xs]):\n        self.x: Tuple[Unpack[_Xs]] = shape\n        # This should generate an error\n        self.y: _Xs = shape\n    def func1(self) -> Union[Unpack[_Xs]]:\n        ...\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\nclass ClassA(Generic[_T, Unpack[_Xs]]):\n    def __init__(self, *shape: Unpack[_Xs]):\n        self.x: Tuple[Unpack[_Xs]] = shape\n        # This should generate an error\n        self.y: _Xs = shape\n    def func1(self) -> Union[Unpack[_Xs]]:\n        ...\n    # This should generate an error\n    def func2(self) -> Tuple[Unpack[_T]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar2",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "class Array(Generic[Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]) -> None:\n        self.x: tuple[Unpack[_Xs]] = args\n        reveal_type(args, expected_text=\"tuple[*_Xs@Array]\")\n    # This should generate an error because _Xs is not unpacked.\n    def foo(self, *args: _Xs) -> None:\n        ...\ndef linearize(value: Array[Unpack[_Xs]]) -> Sequence[Union[Unpack[_Xs]]]:\n    reveal_type(value, expected_text=\"Array[*_Xs@linearize]\")\n    return []",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "ArrayIntStr",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "class ArrayIntStr(Array[int, str, _T]):\n    def __init__(self, val: _T) -> None:\n        pass\nv1 = ArrayIntStr(3)\nv2: Array[int, str, int] = v1\n# This should generate an error.\nv3: Array[int, str, str] = v1\n# This should generate an error.\nv4: Array[int, str, int, int] = v1\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "linearize",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "def linearize(value: Array[Unpack[_Xs]]) -> Sequence[Union[Unpack[_Xs]]]:\n    reveal_type(value, expected_text=\"Array[*_Xs@linearize]\")\n    return []\ndef array_to_tuple(value: Array[Unpack[_Xs]]) -> tuple[complex, Unpack[_Xs]]:\n    ...\ndef func1(x: Array[int, str, str, float], y: Array[()]):\n    reveal_type(x, expected_text=\"Array[int, str, str, float]\")\n    reveal_type(y, expected_text=\"Array[*tuple[()]]\")\n    a1 = Array(3, 3.5, \"b\")\n    reveal_type(a1, expected_text=\"Array[int, float, str]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "array_to_tuple",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "def array_to_tuple(value: Array[Unpack[_Xs]]) -> tuple[complex, Unpack[_Xs]]:\n    ...\ndef func1(x: Array[int, str, str, float], y: Array[()]):\n    reveal_type(x, expected_text=\"Array[int, str, str, float]\")\n    reveal_type(y, expected_text=\"Array[*tuple[()]]\")\n    a1 = Array(3, 3.5, \"b\")\n    reveal_type(a1, expected_text=\"Array[int, float, str]\")\n    a2 = linearize(a1)\n    reveal_type(a2, expected_text=\"Sequence[int | float | str]\")\n    b1 = Array()",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "def func1(x: Array[int, str, str, float], y: Array[()]):\n    reveal_type(x, expected_text=\"Array[int, str, str, float]\")\n    reveal_type(y, expected_text=\"Array[*tuple[()]]\")\n    a1 = Array(3, 3.5, \"b\")\n    reveal_type(a1, expected_text=\"Array[int, float, str]\")\n    a2 = linearize(a1)\n    reveal_type(a2, expected_text=\"Sequence[int | float | str]\")\n    b1 = Array()\n    reveal_type(b1, expected_text=\"Array[*tuple[()]]\")\n    b2 = linearize(b1)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "def test1(p1: tuple[str, int], p2: list[str]):\n    v6 = Array(*p1)\n    reveal_type(v6, expected_text=\"Array[str, int]\")\n    v7 = Array(1, *p1, \"\")\n    reveal_type(v7, expected_text=\"Array[int, str, int, str]\")\n    # This should generate an error because open-ended\n    # tuple types should not be allowed.\n    v8 = Array(*p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_Xs = TypeVarTuple(\"_Xs\")\nclass Array(Generic[Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]) -> None:\n        self.x: tuple[Unpack[_Xs]] = args\n        reveal_type(args, expected_text=\"tuple[*_Xs@Array]\")\n    # This should generate an error because _Xs is not unpacked.\n    def foo(self, *args: _Xs) -> None:\n        ...\ndef linearize(value: Array[Unpack[_Xs]]) -> Sequence[Union[Unpack[_Xs]]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\nclass Array(Generic[Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]) -> None:\n        self.x: tuple[Unpack[_Xs]] = args\n        reveal_type(args, expected_text=\"tuple[*_Xs@Array]\")\n    # This should generate an error because _Xs is not unpacked.\n    def foo(self, *args: _Xs) -> None:\n        ...\ndef linearize(value: Array[Unpack[_Xs]]) -> Sequence[Union[Unpack[_Xs]]]:\n    reveal_type(value, expected_text=\"Array[*_Xs@linearize]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "peekOfCode": "v1 = ArrayIntStr(3)\nv2: Array[int, str, int] = v1\n# This should generate an error.\nv3: Array[int, str, str] = v1\n# This should generate an error.\nv4: Array[int, str, int, int] = v1\n# This should generate an error.\nv5: Array[int, str] = v1\ndef test1(p1: tuple[str, int], p2: list[str]):\n    v6 = Array(*p1)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar3",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "class Array(Generic[Unpack[Shape]]):\n    def __init__(self, *shape: Unpack[Shape]):\n        self.shape = shape\n    def __abs__(self) -> \"Array[Unpack[Shape]]\":\n        ...\n    def __add__(self, other: \"Array[Unpack[Shape]]\") -> \"Array[Unpack[Shape]]\":\n        ...\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nx: Array[Height, Width] = Array(Height(480), Width(640))",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "def func1(a: Tuple[Unpack[_Xs]], b: Tuple[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(a: Tuple[int, Unpack[_Xs]], b: Tuple[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)\n    v3 = func2(p2, p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "def func2(a: Tuple[int, Unpack[_Xs]], b: Tuple[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)\n    v3 = func2(p2, p2)\n    reveal_type(v3, expected_text=\"str\")\n    v4 = func2((3, \"hi\"), p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "def func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)\n    v3 = func2(p2, p2)\n    reveal_type(v3, expected_text=\"str\")\n    v4 = func2((3, \"hi\"), p2)\n    reveal_type(v4, expected_text=\"str\")\n    # This should generate an error",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "def func4(a: int, *args: Unpack[_Xs], **kwargs: str) -> Tuple[int, Unpack[_Xs]]:\n    ...\nc1 = func4(4, 5.4, 6j, b=\"3\", c=\"5\")\nreveal_type(c1, expected_text=\"Tuple[int, float, complex]\")\nc2 = func4(4, b=\"3\", c=\"5\")\nreveal_type(c2, expected_text=\"Tuple[int]\")\n# This should generate an error.\nc3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "Shape = TypeVarTuple(\"Shape\")\nclass Array(Generic[Unpack[Shape]]):\n    def __init__(self, *shape: Unpack[Shape]):\n        self.shape = shape\n    def __abs__(self) -> \"Array[Unpack[Shape]]\":\n        ...\n    def __add__(self, other: \"Array[Unpack[Shape]]\") -> \"Array[Unpack[Shape]]\":\n        ...\nHeight = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "Height",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "Height = NewType(\"Height\", int)\nWidth = NewType(\"Width\", int)\nx: Array[Height, Width] = Array(Height(480), Width(640))\nreveal_type(x.shape, expected_text=\"tuple[Height, Width]\")\nreveal_type(abs(x), expected_text=\"Array[Height, Width]\")\nreveal_type(x + abs(x), expected_text=\"Array[Height, Width]\")\n_Xs = TypeVarTuple(\"_Xs\")\ndef func1(a: Tuple[Unpack[_Xs]], b: Tuple[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(a: Tuple[int, Unpack[_Xs]], b: Tuple[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "Width",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "Width = NewType(\"Width\", int)\nx: Array[Height, Width] = Array(Height(480), Width(640))\nreveal_type(x.shape, expected_text=\"tuple[Height, Width]\")\nreveal_type(abs(x), expected_text=\"Array[Height, Width]\")\nreveal_type(x + abs(x), expected_text=\"Array[Height, Width]\")\n_Xs = TypeVarTuple(\"_Xs\")\ndef func1(a: Tuple[Unpack[_Xs]], b: Tuple[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(a: Tuple[int, Unpack[_Xs]], b: Tuple[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\ndef func1(a: Tuple[Unpack[_Xs]], b: Tuple[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(a: Tuple[int, Unpack[_Xs]], b: Tuple[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func3(p1: Tuple[int], p2: Tuple[int, str]):\n    # This should generate an error\n    v1 = func1(p1, p2)\n    # This should generate an error\n    v2 = func2(p1, p2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "c1 = func4(4, 5.4, 6j, b=\"3\", c=\"5\")\nreveal_type(c1, expected_text=\"Tuple[int, float, complex]\")\nc2 = func4(4, b=\"3\", c=\"5\")\nreveal_type(c2, expected_text=\"Tuple[int]\")\n# This should generate an error.\nc3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "c2 = func4(4, b=\"3\", c=\"5\")\nreveal_type(c2, expected_text=\"Tuple[int]\")\n# This should generate an error.\nc3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "c3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "peekOfCode": "c3 = func4(b=\"3\", c=\"5\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar4",
        "documentation": {}
    },
    {
        "label": "CallbackA",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "class CallbackA(Protocol[Unpack[_Xs]]):\n    def __call__(self, a: int, *args: Unpack[_Xs]) -> Any:\n        ...\ndef func3(func: CallbackA[Unpack[_Xs]]) -> Callable[[Unpack[_Xs]], int]:\n    ...\nd1 = func3(callback1)\nreveal_type(d1, expected_text=\"() -> int\")\n# This should generate an error.\nd2 = func3(callback2)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def func1(func: Callable[[int, Unpack[_Xs]], Any]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef func2(func: Callable[[Unpack[_Xs]], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback1(a: int) -> int:\n    ...\ndef callback2(a: str) -> int:\n    ...\ndef callback3(a: str) -> None:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def func2(func: Callable[[Unpack[_Xs]], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback1(a: int) -> int:\n    ...\ndef callback2(a: str) -> int:\n    ...\ndef callback3(a: str) -> None:\n    ...\ndef callback4(a: int, b: complex, c: str) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback1(a: int) -> int:\n    ...\ndef callback2(a: str) -> int:\n    ...\ndef callback3(a: str) -> None:\n    ...\ndef callback4(a: int, b: complex, c: str) -> int:\n    ...\ndef callback5(a: int, *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback2(a: str) -> int:\n    ...\ndef callback3(a: str) -> None:\n    ...\ndef callback4(a: int, b: complex, c: str) -> int:\n    ...\ndef callback5(a: int, *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef callback6(a: int, *args: Any) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback3(a: str) -> None:\n    ...\ndef callback4(a: int, b: complex, c: str) -> int:\n    ...\ndef callback5(a: int, *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef callback6(a: int, *args: Any) -> int:\n    ...\ndef callback7(a: int, b: str, c: str, d: str, *args: Any) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback4(a: int, b: complex, c: str) -> int:\n    ...\ndef callback5(a: int, *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef callback6(a: int, *args: Any) -> int:\n    ...\ndef callback7(a: int, b: str, c: str, d: str, *args: Any) -> int:\n    ...\nc1 = func1(callback1)\nreveal_type(c1, expected_text=\"() -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback5(a: int, *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef callback6(a: int, *args: Any) -> int:\n    ...\ndef callback7(a: int, b: str, c: str, d: str, *args: Any) -> int:\n    ...\nc1 = func1(callback1)\nreveal_type(c1, expected_text=\"() -> int\")\nc1_1 = c1()\nreveal_type(c1_1, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback6(a: int, *args: Any) -> int:\n    ...\ndef callback7(a: int, b: str, c: str, d: str, *args: Any) -> int:\n    ...\nc1 = func1(callback1)\nreveal_type(c1, expected_text=\"() -> int\")\nc1_1 = c1()\nreveal_type(c1_1, expected_text=\"int\")\n# This should generate an error.\nc2 = func1(callback2)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback7(a: int, b: str, c: str, d: str, *args: Any) -> int:\n    ...\nc1 = func1(callback1)\nreveal_type(c1, expected_text=\"() -> int\")\nc1_1 = c1()\nreveal_type(c1_1, expected_text=\"int\")\n# This should generate an error.\nc2 = func1(callback2)\n# This should generate an error.\nc3 = func2(callback3)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def func3(func: CallbackA[Unpack[_Xs]]) -> Callable[[Unpack[_Xs]], int]:\n    ...\nd1 = func3(callback1)\nreveal_type(d1, expected_text=\"() -> int\")\n# This should generate an error.\nd2 = func3(callback2)\n# This should generate an error.\nd3 = func3(callback3)\nd4 = func3(callback4)\nreveal_type(d4, expected_text=\"(complex, str) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def func4(func: Callable[[Unpack[_Xs], int], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback8(a: int, b: str, c: complex, d: int) -> int:\n    ...\nd5_1 = func4(callback1)\nreveal_type(d5_1, expected_text=\"() -> int\")\n# This should generate an error.\nd5_2 = func4(callback4)\nd5_3 = func4(callback8)\nreveal_type(d5_3, expected_text=\"(int, str, complex) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "callback8",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def callback8(a: int, b: str, c: complex, d: int) -> int:\n    ...\nd5_1 = func4(callback1)\nreveal_type(d5_1, expected_text=\"() -> int\")\n# This should generate an error.\nd5_2 = func4(callback4)\nd5_3 = func4(callback8)\nreveal_type(d5_3, expected_text=\"(int, str, complex) -> int\")\ndef func5(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    pass",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def func5(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    pass\ndef func6(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    func5(x, y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "def func6(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    func5(x, y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\ndef func1(func: Callable[[int, Unpack[_Xs]], Any]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef func2(func: Callable[[Unpack[_Xs]], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback1(a: int) -> int:\n    ...\ndef callback2(a: str) -> int:\n    ...\ndef callback3(a: str) -> None:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c1 = func1(callback1)\nreveal_type(c1, expected_text=\"() -> int\")\nc1_1 = c1()\nreveal_type(c1_1, expected_text=\"int\")\n# This should generate an error.\nc2 = func1(callback2)\n# This should generate an error.\nc3 = func2(callback3)\nc4 = func1(callback4)\nreveal_type(c4, expected_text=\"(complex, str) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c1_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c1_1 = c1()\nreveal_type(c1_1, expected_text=\"int\")\n# This should generate an error.\nc2 = func1(callback2)\n# This should generate an error.\nc3 = func2(callback3)\nc4 = func1(callback4)\nreveal_type(c4, expected_text=\"(complex, str) -> int\")\nc4_1 = c4(3j, \"hi\")\nreveal_type(c4_1, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c2 = func1(callback2)\n# This should generate an error.\nc3 = func2(callback3)\nc4 = func1(callback4)\nreveal_type(c4, expected_text=\"(complex, str) -> int\")\nc4_1 = c4(3j, \"hi\")\nreveal_type(c4_1, expected_text=\"int\")\n# This should generate an error.\nc4_2 = c4(3j)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c3 = func2(callback3)\nc4 = func1(callback4)\nreveal_type(c4, expected_text=\"(complex, str) -> int\")\nc4_1 = c4(3j, \"hi\")\nreveal_type(c4_1, expected_text=\"int\")\n# This should generate an error.\nc4_2 = c4(3j)\n# This should generate an error.\nc4_3 = c4(3j, \"hi\", 4)\nc5 = func1(callback5)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c4 = func1(callback4)\nreveal_type(c4, expected_text=\"(complex, str) -> int\")\nc4_1 = c4(3j, \"hi\")\nreveal_type(c4_1, expected_text=\"int\")\n# This should generate an error.\nc4_2 = c4(3j)\n# This should generate an error.\nc4_3 = c4(3j, \"hi\", 4)\nc5 = func1(callback5)\nreveal_type(c5, expected_text=\"(*_Xs@callback5) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c4_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c4_1 = c4(3j, \"hi\")\nreveal_type(c4_1, expected_text=\"int\")\n# This should generate an error.\nc4_2 = c4(3j)\n# This should generate an error.\nc4_3 = c4(3j, \"hi\", 4)\nc5 = func1(callback5)\nreveal_type(c5, expected_text=\"(*_Xs@callback5) -> int\")\nc6_1 = func1(callback6)\nreveal_type(c6_1, expected_text=\"(*Any) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c4_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c4_2 = c4(3j)\n# This should generate an error.\nc4_3 = c4(3j, \"hi\", 4)\nc5 = func1(callback5)\nreveal_type(c5, expected_text=\"(*_Xs@callback5) -> int\")\nc6_1 = func1(callback6)\nreveal_type(c6_1, expected_text=\"(*Any) -> int\")\nc6_2 = func2(callback6)\nreveal_type(c6_2, expected_text=\"(int, *Any) -> int\")\nc7_1 = func1(callback7)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c4_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c4_3 = c4(3j, \"hi\", 4)\nc5 = func1(callback5)\nreveal_type(c5, expected_text=\"(*_Xs@callback5) -> int\")\nc6_1 = func1(callback6)\nreveal_type(c6_1, expected_text=\"(*Any) -> int\")\nc6_2 = func2(callback6)\nreveal_type(c6_2, expected_text=\"(int, *Any) -> int\")\nc7_1 = func1(callback7)\nreveal_type(c7_1, expected_text=\"(str, str, str, *Any) -> int\")\nc7_2 = func2(callback7)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c5 = func1(callback5)\nreveal_type(c5, expected_text=\"(*_Xs@callback5) -> int\")\nc6_1 = func1(callback6)\nreveal_type(c6_1, expected_text=\"(*Any) -> int\")\nc6_2 = func2(callback6)\nreveal_type(c6_2, expected_text=\"(int, *Any) -> int\")\nc7_1 = func1(callback7)\nreveal_type(c7_1, expected_text=\"(str, str, str, *Any) -> int\")\nc7_2 = func2(callback7)\nreveal_type(c7_2, expected_text=\"(int, str, str, str, *Any) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c6_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c6_1 = func1(callback6)\nreveal_type(c6_1, expected_text=\"(*Any) -> int\")\nc6_2 = func2(callback6)\nreveal_type(c6_2, expected_text=\"(int, *Any) -> int\")\nc7_1 = func1(callback7)\nreveal_type(c7_1, expected_text=\"(str, str, str, *Any) -> int\")\nc7_2 = func2(callback7)\nreveal_type(c7_2, expected_text=\"(int, str, str, str, *Any) -> int\")\nclass CallbackA(Protocol[Unpack[_Xs]]):\n    def __call__(self, a: int, *args: Unpack[_Xs]) -> Any:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c6_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c6_2 = func2(callback6)\nreveal_type(c6_2, expected_text=\"(int, *Any) -> int\")\nc7_1 = func1(callback7)\nreveal_type(c7_1, expected_text=\"(str, str, str, *Any) -> int\")\nc7_2 = func2(callback7)\nreveal_type(c7_2, expected_text=\"(int, str, str, str, *Any) -> int\")\nclass CallbackA(Protocol[Unpack[_Xs]]):\n    def __call__(self, a: int, *args: Unpack[_Xs]) -> Any:\n        ...\ndef func3(func: CallbackA[Unpack[_Xs]]) -> Callable[[Unpack[_Xs]], int]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c7_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c7_1 = func1(callback7)\nreveal_type(c7_1, expected_text=\"(str, str, str, *Any) -> int\")\nc7_2 = func2(callback7)\nreveal_type(c7_2, expected_text=\"(int, str, str, str, *Any) -> int\")\nclass CallbackA(Protocol[Unpack[_Xs]]):\n    def __call__(self, a: int, *args: Unpack[_Xs]) -> Any:\n        ...\ndef func3(func: CallbackA[Unpack[_Xs]]) -> Callable[[Unpack[_Xs]], int]:\n    ...\nd1 = func3(callback1)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "c7_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "c7_2 = func2(callback7)\nreveal_type(c7_2, expected_text=\"(int, str, str, str, *Any) -> int\")\nclass CallbackA(Protocol[Unpack[_Xs]]):\n    def __call__(self, a: int, *args: Unpack[_Xs]) -> Any:\n        ...\ndef func3(func: CallbackA[Unpack[_Xs]]) -> Callable[[Unpack[_Xs]], int]:\n    ...\nd1 = func3(callback1)\nreveal_type(d1, expected_text=\"() -> int\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d1 = func3(callback1)\nreveal_type(d1, expected_text=\"() -> int\")\n# This should generate an error.\nd2 = func3(callback2)\n# This should generate an error.\nd3 = func3(callback3)\nd4 = func3(callback4)\nreveal_type(d4, expected_text=\"(complex, str) -> int\")\nd4_1 = d4(3j, \"hi\")\nreveal_type(d4_1, expected_text=\"int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d2 = func3(callback2)\n# This should generate an error.\nd3 = func3(callback3)\nd4 = func3(callback4)\nreveal_type(d4, expected_text=\"(complex, str) -> int\")\nd4_1 = d4(3j, \"hi\")\nreveal_type(d4_1, expected_text=\"int\")\n# This should generate an error.\nd4_2 = d4(3j)\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d3 = func3(callback3)\nd4 = func3(callback4)\nreveal_type(d4, expected_text=\"(complex, str) -> int\")\nd4_1 = d4(3j, \"hi\")\nreveal_type(d4_1, expected_text=\"int\")\n# This should generate an error.\nd4_2 = d4(3j)\n# This should generate an error.\nd4_3 = d4(3j, \"hi\", 4)\ndef func4(func: Callable[[Unpack[_Xs], int], int]) -> Callable[[Unpack[_Xs]], int]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d4 = func3(callback4)\nreveal_type(d4, expected_text=\"(complex, str) -> int\")\nd4_1 = d4(3j, \"hi\")\nreveal_type(d4_1, expected_text=\"int\")\n# This should generate an error.\nd4_2 = d4(3j)\n# This should generate an error.\nd4_3 = d4(3j, \"hi\", 4)\ndef func4(func: Callable[[Unpack[_Xs], int], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d4_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d4_1 = d4(3j, \"hi\")\nreveal_type(d4_1, expected_text=\"int\")\n# This should generate an error.\nd4_2 = d4(3j)\n# This should generate an error.\nd4_3 = d4(3j, \"hi\", 4)\ndef func4(func: Callable[[Unpack[_Xs], int], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback8(a: int, b: str, c: complex, d: int) -> int:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d4_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d4_2 = d4(3j)\n# This should generate an error.\nd4_3 = d4(3j, \"hi\", 4)\ndef func4(func: Callable[[Unpack[_Xs], int], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback8(a: int, b: str, c: complex, d: int) -> int:\n    ...\nd5_1 = func4(callback1)\nreveal_type(d5_1, expected_text=\"() -> int\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d4_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d4_3 = d4(3j, \"hi\", 4)\ndef func4(func: Callable[[Unpack[_Xs], int], int]) -> Callable[[Unpack[_Xs]], int]:\n    ...\ndef callback8(a: int, b: str, c: complex, d: int) -> int:\n    ...\nd5_1 = func4(callback1)\nreveal_type(d5_1, expected_text=\"() -> int\")\n# This should generate an error.\nd5_2 = func4(callback4)\nd5_3 = func4(callback8)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d5_1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d5_1 = func4(callback1)\nreveal_type(d5_1, expected_text=\"() -> int\")\n# This should generate an error.\nd5_2 = func4(callback4)\nd5_3 = func4(callback8)\nreveal_type(d5_3, expected_text=\"(int, str, complex) -> int\")\ndef func5(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    pass\ndef func6(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    func5(x, y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d5_2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d5_2 = func4(callback4)\nd5_3 = func4(callback8)\nreveal_type(d5_3, expected_text=\"(int, str, complex) -> int\")\ndef func5(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    pass\ndef func6(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    func5(x, y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "d5_3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "peekOfCode": "d5_3 = func4(callback8)\nreveal_type(d5_3, expected_text=\"(int, str, complex) -> int\")\ndef func5(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    pass\ndef func6(x: Callable[[Unpack[_Xs]], None], y: tuple[Unpack[_Xs]]):\n    func5(x, y)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar5",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "class Array(Generic[Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]):\n        ...\nAlias1 = Array[Unpack[_Xs]]\n# This should generate an error\nAlias2 = Array[_Xs]\n# This should generate an error\nAlias3 = Array[_T, int, _Xs]\n# This should generate an error if reportMissingTypeArgument is enabled.\nx1: Optional[Alias1] = None",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "def func1(a: Alias4[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\nz1 = func1(Array(3, 4, \"hi\", 3j))\nreveal_type(z1, expected_text=\"int | str | complex\")\n# This should generate an error.\nz2 = func1(Array(3, 4.3, \"hi\", 3j))\nz3 = func1(Array(3.5, 4))\nreveal_type(z3, expected_text=\"float\")\nAlias6 = Tuple[int, Unpack[_Xs]]\n# The type annotation for y will generate an error if",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "def func2(x: Alias6[float, bool], y: Alias6, z: Alias6[()]):\n    reveal_type(x, expected_text=\"Tuple[int, float, bool]\")\n    reveal_type(y, expected_text=\"Tuple[int, Unknown]\")\n    reveal_type(z, expected_text=\"Tuple[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\n_T = TypeVar(\"_T\")\nclass Array(Generic[Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]):\n        ...\nAlias1 = Array[Unpack[_Xs]]\n# This should generate an error\nAlias2 = Array[_Xs]\n# This should generate an error\nAlias3 = Array[_T, int, _Xs]",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "_T = TypeVar(\"_T\")\nclass Array(Generic[Unpack[_Xs]]):\n    def __init__(self, *args: Unpack[_Xs]):\n        ...\nAlias1 = Array[Unpack[_Xs]]\n# This should generate an error\nAlias2 = Array[_Xs]\n# This should generate an error\nAlias3 = Array[_T, int, _Xs]\n# This should generate an error if reportMissingTypeArgument is enabled.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Alias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "Alias1 = Array[Unpack[_Xs]]\n# This should generate an error\nAlias2 = Array[_Xs]\n# This should generate an error\nAlias3 = Array[_T, int, _Xs]\n# This should generate an error if reportMissingTypeArgument is enabled.\nx1: Optional[Alias1] = None\nx2: Alias1[int] = Array(3)\n# This should generate an error.\nx3: Alias1[int, str] = Array(3)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Alias2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "Alias2 = Array[_Xs]\n# This should generate an error\nAlias3 = Array[_T, int, _Xs]\n# This should generate an error if reportMissingTypeArgument is enabled.\nx1: Optional[Alias1] = None\nx2: Alias1[int] = Array(3)\n# This should generate an error.\nx3: Alias1[int, str] = Array(3)\nx4: Alias1[int, Dict[str, str]] = Array(3, {})\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Alias3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "Alias3 = Array[_T, int, _Xs]\n# This should generate an error if reportMissingTypeArgument is enabled.\nx1: Optional[Alias1] = None\nx2: Alias1[int] = Array(3)\n# This should generate an error.\nx3: Alias1[int, str] = Array(3)\nx4: Alias1[int, Dict[str, str]] = Array(3, {})\n# This should generate an error.\nx5: Alias1[()] = Array(3)\nx6 = Alias1[int, int, str](3, 4, \"\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "x6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "x6 = Alias1[int, int, str](3, 4, \"\")\nx7: Alias1[int, float, str] = Array(3, 4, \"\")\nAlias4 = Array[_T, int, Unpack[_Xs]]\nAlias5 = Array[Unpack[_Xs]]\ny1: Alias4[float, str, str] = Array(3.4, 2, \"hi\", \"hi\")\n# This should generate an error.\ny2: Alias4[float, str, str] = Array(\"3.4\", 2, \"hi\", \"hi\")\ny3 = Alias4[float, str, str](3, 2, \"hi\", \"hi\")\ndef func1(a: Alias4[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Alias4",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "Alias4 = Array[_T, int, Unpack[_Xs]]\nAlias5 = Array[Unpack[_Xs]]\ny1: Alias4[float, str, str] = Array(3.4, 2, \"hi\", \"hi\")\n# This should generate an error.\ny2: Alias4[float, str, str] = Array(\"3.4\", 2, \"hi\", \"hi\")\ny3 = Alias4[float, str, str](3, 2, \"hi\", \"hi\")\ndef func1(a: Alias4[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\nz1 = func1(Array(3, 4, \"hi\", 3j))\nreveal_type(z1, expected_text=\"int | str | complex\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Alias5",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "Alias5 = Array[Unpack[_Xs]]\ny1: Alias4[float, str, str] = Array(3.4, 2, \"hi\", \"hi\")\n# This should generate an error.\ny2: Alias4[float, str, str] = Array(\"3.4\", 2, \"hi\", \"hi\")\ny3 = Alias4[float, str, str](3, 2, \"hi\", \"hi\")\ndef func1(a: Alias4[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\nz1 = func1(Array(3, 4, \"hi\", 3j))\nreveal_type(z1, expected_text=\"int | str | complex\")\n# This should generate an error.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "y3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "y3 = Alias4[float, str, str](3, 2, \"hi\", \"hi\")\ndef func1(a: Alias4[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\nz1 = func1(Array(3, 4, \"hi\", 3j))\nreveal_type(z1, expected_text=\"int | str | complex\")\n# This should generate an error.\nz2 = func1(Array(3, 4.3, \"hi\", 3j))\nz3 = func1(Array(3.5, 4))\nreveal_type(z3, expected_text=\"float\")\nAlias6 = Tuple[int, Unpack[_Xs]]",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "z1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "z1 = func1(Array(3, 4, \"hi\", 3j))\nreveal_type(z1, expected_text=\"int | str | complex\")\n# This should generate an error.\nz2 = func1(Array(3, 4.3, \"hi\", 3j))\nz3 = func1(Array(3.5, 4))\nreveal_type(z3, expected_text=\"float\")\nAlias6 = Tuple[int, Unpack[_Xs]]\n# The type annotation for y will generate an error if\n# reportMissingTypeArgument is enabled.\ndef func2(x: Alias6[float, bool], y: Alias6, z: Alias6[()]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "z2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "z2 = func1(Array(3, 4.3, \"hi\", 3j))\nz3 = func1(Array(3.5, 4))\nreveal_type(z3, expected_text=\"float\")\nAlias6 = Tuple[int, Unpack[_Xs]]\n# The type annotation for y will generate an error if\n# reportMissingTypeArgument is enabled.\ndef func2(x: Alias6[float, bool], y: Alias6, z: Alias6[()]):\n    reveal_type(x, expected_text=\"Tuple[int, float, bool]\")\n    reveal_type(y, expected_text=\"Tuple[int, Unknown]\")\n    reveal_type(z, expected_text=\"Tuple[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "z3",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "z3 = func1(Array(3.5, 4))\nreveal_type(z3, expected_text=\"float\")\nAlias6 = Tuple[int, Unpack[_Xs]]\n# The type annotation for y will generate an error if\n# reportMissingTypeArgument is enabled.\ndef func2(x: Alias6[float, bool], y: Alias6, z: Alias6[()]):\n    reveal_type(x, expected_text=\"Tuple[int, float, bool]\")\n    reveal_type(y, expected_text=\"Tuple[int, Unknown]\")\n    reveal_type(z, expected_text=\"Tuple[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Alias6",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "peekOfCode": "Alias6 = Tuple[int, Unpack[_Xs]]\n# The type annotation for y will generate an error if\n# reportMissingTypeArgument is enabled.\ndef func2(x: Alias6[float, bool], y: Alias6, z: Alias6[()]):\n    reveal_type(x, expected_text=\"Tuple[int, float, bool]\")\n    reveal_type(y, expected_text=\"Tuple[int, Unknown]\")\n    reveal_type(z, expected_text=\"Tuple[int]\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar6",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "class Class1(Generic[Unpack[_Ys], Unpack[_Xs]]):\n    ...\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class2(Dict[Tuple[Unpack[_Ys]], Tuple[Unpack[_Xs]]]):\n    ...\nclass Class3(Dict[Tuple[Unpack[_Ys]], _T1]):\n    ...\nclass Class4(Dict[_T1, Tuple[Unpack[_Ys]]], Generic[Unpack[_Ys], _T1]):\n    ...\nclass Class5(Dict[Tuple[Unpack[_Ys]], _T1], Generic[_T1, Unpack[_Ys]]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "class Class2(Dict[Tuple[Unpack[_Ys]], Tuple[Unpack[_Xs]]]):\n    ...\nclass Class3(Dict[Tuple[Unpack[_Ys]], _T1]):\n    ...\nclass Class4(Dict[_T1, Tuple[Unpack[_Ys]]], Generic[Unpack[_Ys], _T1]):\n    ...\nclass Class5(Dict[Tuple[Unpack[_Ys]], _T1], Generic[_T1, Unpack[_Ys]]):\n    def func1(self, a: Tuple[Unpack[_Ys], int]):\n        pass\n    # This should generate an error because Tuple cannot contain multiple",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "class Class3(Dict[Tuple[Unpack[_Ys]], _T1]):\n    ...\nclass Class4(Dict[_T1, Tuple[Unpack[_Ys]]], Generic[Unpack[_Ys], _T1]):\n    ...\nclass Class5(Dict[Tuple[Unpack[_Ys]], _T1], Generic[_T1, Unpack[_Ys]]):\n    def func1(self, a: Tuple[Unpack[_Ys], int]):\n        pass\n    # This should generate an error because Tuple cannot contain multiple\n    # TypeVarTuples.\n    def func2(self, *args: Unpack[_Xs]) -> Tuple[Unpack[_Ys], Unpack[_Xs]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "Class4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "class Class4(Dict[_T1, Tuple[Unpack[_Ys]]], Generic[Unpack[_Ys], _T1]):\n    ...\nclass Class5(Dict[Tuple[Unpack[_Ys]], _T1], Generic[_T1, Unpack[_Ys]]):\n    def func1(self, a: Tuple[Unpack[_Ys], int]):\n        pass\n    # This should generate an error because Tuple cannot contain multiple\n    # TypeVarTuples.\n    def func2(self, *args: Unpack[_Xs]) -> Tuple[Unpack[_Ys], Unpack[_Xs]]:\n        ...\n    def func3(self) -> Union[Unpack[_Ys], int]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "Class5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "class Class5(Dict[Tuple[Unpack[_Ys]], _T1], Generic[_T1, Unpack[_Ys]]):\n    def func1(self, a: Tuple[Unpack[_Ys], int]):\n        pass\n    # This should generate an error because Tuple cannot contain multiple\n    # TypeVarTuples.\n    def func2(self, *args: Unpack[_Xs]) -> Tuple[Unpack[_Ys], Unpack[_Xs]]:\n        ...\n    def func3(self) -> Union[Unpack[_Ys], int]:\n        return 3\n    def func4(self, *args: Unpack[_Xs]) -> Union[int, Unpack[_Ys], Unpack[_Xs]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\n_Ys = TypeVarTuple(\"_Ys\")\n_T1 = TypeVar(\"_T1\")\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class1(Generic[Unpack[_Ys], Unpack[_Xs]]):\n    ...\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class2(Dict[Tuple[Unpack[_Ys]], Tuple[Unpack[_Xs]]]):\n    ...\nclass Class3(Dict[Tuple[Unpack[_Ys]], _T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "_Ys",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "_Ys = TypeVarTuple(\"_Ys\")\n_T1 = TypeVar(\"_T1\")\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class1(Generic[Unpack[_Ys], Unpack[_Xs]]):\n    ...\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class2(Dict[Tuple[Unpack[_Ys]], Tuple[Unpack[_Xs]]]):\n    ...\nclass Class3(Dict[Tuple[Unpack[_Ys]], _T1]):\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class1(Generic[Unpack[_Ys], Unpack[_Xs]]):\n    ...\n# This should generate an error because only one TypeVarTuple is allowed.\nclass Class2(Dict[Tuple[Unpack[_Ys]], Tuple[Unpack[_Xs]]]):\n    ...\nclass Class3(Dict[Tuple[Unpack[_Ys]], _T1]):\n    ...\nclass Class4(Dict[_T1, Tuple[Unpack[_Ys]]], Generic[Unpack[_Ys], _T1]):",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "Alias1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "Alias1 = Union[Tuple[int, Unpack[_Xs]], _T1]\n# This should generate an error because at most one TypeVarTuple is allowed.\nAlias2 = Union[Tuple[int, Unpack[_Xs]], Tuple[Unpack[_Ys]]]",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "Alias2",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "peekOfCode": "Alias2 = Union[Tuple[int, Unpack[_Xs]], Tuple[Unpack[_Ys]]]",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar7",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func1(x: Union[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(x: Union[Unpack[_Xs], Unpack[_Ys]]) -> Union[Unpack[_Xs], Unpack[_Ys]]:\n    ...\ndef func3(x: Union[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\ndef func5(x: Union[Unpack[_Xs]], *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func2(x: Union[Unpack[_Xs], Unpack[_Ys]]) -> Union[Unpack[_Xs], Unpack[_Ys]]:\n    ...\ndef func3(x: Union[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\ndef func5(x: Union[Unpack[_Xs]], *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func6(*args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "func3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func3(x: Union[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\ndef func5(x: Union[Unpack[_Xs]], *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func6(*args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func7(a: List[Union[Unpack[_Xs]]]) -> Union[Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "func4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\ndef func5(x: Union[Unpack[_Xs]], *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func6(*args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func7(a: List[Union[Unpack[_Xs]]]) -> Union[Unpack[_Xs]]:\n    ...\ndef test1(a: int, b: str, c: List[int], d: Union[complex, str]):\n    v1_1 = func1(a)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "func5",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func5(x: Union[Unpack[_Xs]], *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func6(*args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func7(a: List[Union[Unpack[_Xs]]]) -> Union[Unpack[_Xs]]:\n    ...\ndef test1(a: int, b: str, c: List[int], d: Union[complex, str]):\n    v1_1 = func1(a)\n    reveal_type(v1_1, expected_text=\"int\")\n    v1_2 = func1(d)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "func6",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func6(*args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:\n    ...\ndef func7(a: List[Union[Unpack[_Xs]]]) -> Union[Unpack[_Xs]]:\n    ...\ndef test1(a: int, b: str, c: List[int], d: Union[complex, str]):\n    v1_1 = func1(a)\n    reveal_type(v1_1, expected_text=\"int\")\n    v1_2 = func1(d)\n    reveal_type(v1_2, expected_text=\"complex | str\")\n    # ---------",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "func7",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def func7(a: List[Union[Unpack[_Xs]]]) -> Union[Unpack[_Xs]]:\n    ...\ndef test1(a: int, b: str, c: List[int], d: Union[complex, str]):\n    v1_1 = func1(a)\n    reveal_type(v1_1, expected_text=\"int\")\n    v1_2 = func1(d)\n    reveal_type(v1_2, expected_text=\"complex | str\")\n    # ---------\n    # This behavior isn't defined by PEP 646, but neither\n    # did PEP 484 define the behavior for multiple (non-",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "def test1(a: int, b: str, c: List[int], d: Union[complex, str]):\n    v1_1 = func1(a)\n    reveal_type(v1_1, expected_text=\"int\")\n    v1_2 = func1(d)\n    reveal_type(v1_2, expected_text=\"complex | str\")\n    # ---------\n    # This behavior isn't defined by PEP 646, but neither\n    # did PEP 484 define the behavior for multiple (non-\n    # variadic) TypeVar matching within a Union. So behavior\n    # is likely to vary between type checkers here.",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "_T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "_T = TypeVar(\"_T\")\n_Xs = TypeVarTuple(\"_Xs\")\n_Ys = TypeVarTuple(\"_Ys\")\ndef func1(x: Union[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(x: Union[Unpack[_Xs], Unpack[_Ys]]) -> Union[Unpack[_Xs], Unpack[_Ys]]:\n    ...\ndef func3(x: Union[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "_Xs",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "_Xs = TypeVarTuple(\"_Xs\")\n_Ys = TypeVarTuple(\"_Ys\")\ndef func1(x: Union[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(x: Union[Unpack[_Xs], Unpack[_Ys]]) -> Union[Unpack[_Xs], Unpack[_Ys]]:\n    ...\ndef func3(x: Union[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "_Ys",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "peekOfCode": "_Ys = TypeVarTuple(\"_Ys\")\ndef func1(x: Union[Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func2(x: Union[Unpack[_Xs], Unpack[_Ys]]) -> Union[Unpack[_Xs], Unpack[_Ys]]:\n    ...\ndef func3(x: Union[int, Unpack[_Xs]]) -> Union[Unpack[_Xs]]:\n    ...\ndef func4(x: Union[_T, Unpack[_Xs]]) -> Union[_T, Unpack[_Xs]]:\n    ...\ndef func5(x: Union[Unpack[_Xs]], *args: Unpack[_Xs]) -> Union[Unpack[_Xs]]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar8",
        "documentation": {}
    },
    {
        "label": "Call",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "class Call(Generic[Unpack[P]]):\n    def __init__(self, *args: Unpack[P]) -> None:\n        self.args = args\nclass Return(Generic[T]):\n    def __init__(self, /, result: T) -> None:\n        self.result = result\nTailRec = Call[Unpack[P]] | Return[T]\ndef tail_rec(\n    fn: Callable[[Unpack[P]], TailRec[Unpack[P], T]]\n) -> Callable[[Unpack[P]], T]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "Return",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "class Return(Generic[T]):\n    def __init__(self, /, result: T) -> None:\n        self.result = result\nTailRec = Call[Unpack[P]] | Return[T]\ndef tail_rec(\n    fn: Callable[[Unpack[P]], TailRec[Unpack[P], T]]\n) -> Callable[[Unpack[P]], T]:\n    ...\n@tail_rec\ndef factorial(n: int, acc: int) -> TailRec[int, int, int]:",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "tail_rec",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "def tail_rec(\n    fn: Callable[[Unpack[P]], TailRec[Unpack[P], T]]\n) -> Callable[[Unpack[P]], T]:\n    ...\n@tail_rec\ndef factorial(n: int, acc: int) -> TailRec[int, int, int]:\n    if n <= 0:\n        return Return(acc)\n    return Call(n - 1, acc * n)\nreveal_type(factorial, expected_text=\"(int, int) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "def factorial(n: int, acc: int) -> TailRec[int, int, int]:\n    if n <= 0:\n        return Return(acc)\n    return Call(n - 1, acc * n)\nreveal_type(factorial, expected_text=\"(int, int) -> int\")",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "P",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "P = TypeVarTuple(\"P\")\nT = TypeVar(\"T\", covariant=True)\nclass Call(Generic[Unpack[P]]):\n    def __init__(self, *args: Unpack[P]) -> None:\n        self.args = args\nclass Return(Generic[T]):\n    def __init__(self, /, result: T) -> None:\n        self.result = result\nTailRec = Call[Unpack[P]] | Return[T]\ndef tail_rec(",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "T = TypeVar(\"T\", covariant=True)\nclass Call(Generic[Unpack[P]]):\n    def __init__(self, *args: Unpack[P]) -> None:\n        self.args = args\nclass Return(Generic[T]):\n    def __init__(self, /, result: T) -> None:\n        self.result = result\nTailRec = Call[Unpack[P]] | Return[T]\ndef tail_rec(\n    fn: Callable[[Unpack[P]], TailRec[Unpack[P], T]]",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "TailRec",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "description": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "peekOfCode": "TailRec = Call[Unpack[P]] | Return[T]\ndef tail_rec(\n    fn: Callable[[Unpack[P]], TailRec[Unpack[P], T]]\n) -> Callable[[Unpack[P]], T]:\n    ...\n@tail_rec\ndef factorial(n: int, acc: int) -> TailRec[int, int, int]:\n    if n <= 0:\n        return Return(acc)\n    return Call(n - 1, acc * n)",
        "detail": "packages.pyright-internal.src.tests.samples.variadicTypeVar9",
        "documentation": {}
    },
    {
        "label": "Class1",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "class Class1(object):\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True\nclass Class2(object):\n    def __enter__(self):",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "class Class2(object):\n    def __enter__(self):\n        return 1\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "class Class3(object):\n    def __enter__(self: _T1) -> _T1:\n        return self\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "Class4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "class Class4:\n    async def __aenter__(self: _T1) -> _T1:\n        return self\n    def __aexit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "Class5",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "class Class5(Generic[_T1]):\n    async def __aenter__(self) -> Self:\n        return self\n    async def __aexit__(self, *args: Any) -> None:\n        return None\nclass Class6(Class5[int]):\n    ...\nasync def do():\n    async with Class6() as f:\n        reveal_type(f, expected_text=\"Class6\")",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "Class6",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "class Class6(Class5[int]):\n    ...\nasync def do():\n    async with Class6() as f:\n        reveal_type(f, expected_text=\"Class6\")",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "requires_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "def requires_int(val: int):\n    pass\ndef requires_class3(val: Class3):\n    pass\ndef test1():\n    a1 = Class1()\n    # This should generate an error because Class1\n    # does not implement an __enter__\n    with a1 as foo:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "requires_class3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "def requires_class3(val: Class3):\n    pass\ndef test1():\n    a1 = Class1()\n    # This should generate an error because Class1\n    # does not implement an __enter__\n    with a1 as foo:\n        pass\n    a2 = Class2()\n    with a2 as foo:",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "def test1():\n    a1 = Class1()\n    # This should generate an error because Class1\n    # does not implement an __enter__\n    with a1 as foo:\n        pass\n    a2 = Class2()\n    with a2 as foo:\n        requires_int(foo)\n    a3 = Class3()",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.with1",
        "description": "packages.pyright-internal.src.tests.samples.with1",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass Class1(object):\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True\nclass Class2(object):",
        "detail": "packages.pyright-internal.src.tests.samples.with1",
        "documentation": {}
    },
    {
        "label": "Class2",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "class Class2(object):\n    def __enter__(self):\n        return 1\nclass Class3(object):\n    def __enter__(self: _T1) -> _T1:\n        return self\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "Class3",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "class Class3(object):\n    def __enter__(self: _T1) -> _T1:\n        return self\n    def __exit__(\n        self,\n        t: Optional[type] = None,\n        exc: Optional[BaseException] = None,\n        tb: Optional[Any] = None,\n    ) -> bool:\n        return True",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "Class4",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "class Class4:\n    async def __aenter__(self: _T1) -> _T1:\n        return self\nasync def test2():\n    a1 = Class4()\n    # This should generate an error because __aexit__\n    # needs to be used with async with.\n    async with a1 as foo:\n        pass",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "requires_int",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "def requires_int(val: int):\n    pass\ndef requires_class3(val: Class3):\n    pass\ndef test1():\n    a2 = Class2()\n    a3 = Class3()\n    # This should generate an error because\n    # the __exit__ method is missing.\n    with a2 as foo:",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "requires_class3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "def requires_class3(val: Class3):\n    pass\ndef test1():\n    a2 = Class2()\n    a3 = Class3()\n    # This should generate an error because\n    # the __exit__ method is missing.\n    with a2 as foo:\n        requires_int(foo)\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "def test1():\n    a2 = Class2()\n    a3 = Class3()\n    # This should generate an error because\n    # the __exit__ method is missing.\n    with a2 as foo:\n        requires_int(foo)\n    # This should generate an error because\n    # the __exit__ method is missing.\n    with a2 as foo2, a3 as foo3:",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "_T1",
        "kind": 5,
        "importPath": "packages.pyright-internal.src.tests.samples.with2",
        "description": "packages.pyright-internal.src.tests.samples.with2",
        "peekOfCode": "_T1 = TypeVar(\"_T1\")\nclass Class2(object):\n    def __enter__(self):\n        return 1\nclass Class3(object):\n    def __enter__(self: _T1) -> _T1:\n        return self\n    def __exit__(\n        self,\n        t: Optional[type] = None,",
        "detail": "packages.pyright-internal.src.tests.samples.with2",
        "documentation": {}
    },
    {
        "label": "CMFactory",
        "kind": 6,
        "importPath": "packages.pyright-internal.src.tests.samples.with3",
        "description": "packages.pyright-internal.src.tests.samples.with3",
        "peekOfCode": "class CMFactory:\n    def get_cm(self) -> suppress:\n        return suppress()\ndef test4() -> None:\n    some_dict = dict()\n    with CMFactory().get_cm():\n        print(some_dict[\"missing_key\"])\n    # This should generate an error because the\n    # code is reachable.\n    return 1",
        "detail": "packages.pyright-internal.src.tests.samples.with3",
        "documentation": {}
    },
    {
        "label": "test1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with3",
        "description": "packages.pyright-internal.src.tests.samples.with3",
        "peekOfCode": "def test1() -> None:\n    class A:\n        b: str\n    x = b\"\"\n    a = A()\n    with memoryview(x), suppress(AttributeError):\n        if a.b:\n            raise RuntimeError()\n        return\n    # This should generate an error because",
        "detail": "packages.pyright-internal.src.tests.samples.with3",
        "documentation": {}
    },
    {
        "label": "test2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with3",
        "description": "packages.pyright-internal.src.tests.samples.with3",
        "peekOfCode": "def test2() -> None:\n    some_dict = dict()\n    with suppress(KeyError):\n        print(some_dict[\"missing_key\"])\n    # This should generate an error because the\n    # code is reachable.\n    return 1\ndef test3(cm: suppress) -> None:\n    some_dict = dict()\n    with cm:",
        "detail": "packages.pyright-internal.src.tests.samples.with3",
        "documentation": {}
    },
    {
        "label": "test3",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with3",
        "description": "packages.pyright-internal.src.tests.samples.with3",
        "peekOfCode": "def test3(cm: suppress) -> None:\n    some_dict = dict()\n    with cm:\n        print(some_dict[\"missing_key\"])\n    # This should generate an error because the\n    # code is reachable.\n    return 1\nclass CMFactory:\n    def get_cm(self) -> suppress:\n        return suppress()",
        "detail": "packages.pyright-internal.src.tests.samples.with3",
        "documentation": {}
    },
    {
        "label": "test4",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with3",
        "description": "packages.pyright-internal.src.tests.samples.with3",
        "peekOfCode": "def test4() -> None:\n    some_dict = dict()\n    with CMFactory().get_cm():\n        print(some_dict[\"missing_key\"])\n    # This should generate an error because the\n    # code is reachable.\n    return 1",
        "detail": "packages.pyright-internal.src.tests.samples.with3",
        "documentation": {}
    },
    {
        "label": "create_context",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with5",
        "description": "packages.pyright-internal.src.tests.samples.with5",
        "peekOfCode": "def create_context() -> ContextManager[str]:\n    ...\ndef possible_exception() -> None:\n    ...\ndef func1():\n    x: Optional[str] = None\n    ctx: Optional[str] = None\n    try:\n        with create_context() as ctx:\n            x = \"0\"",
        "detail": "packages.pyright-internal.src.tests.samples.with5",
        "documentation": {}
    },
    {
        "label": "possible_exception",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with5",
        "description": "packages.pyright-internal.src.tests.samples.with5",
        "peekOfCode": "def possible_exception() -> None:\n    ...\ndef func1():\n    x: Optional[str] = None\n    ctx: Optional[str] = None\n    try:\n        with create_context() as ctx:\n            x = \"0\"\n            possible_exception()\n    except Exception:",
        "detail": "packages.pyright-internal.src.tests.samples.with5",
        "documentation": {}
    },
    {
        "label": "func1",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with5",
        "description": "packages.pyright-internal.src.tests.samples.with5",
        "peekOfCode": "def func1():\n    x: Optional[str] = None\n    ctx: Optional[str] = None\n    try:\n        with create_context() as ctx:\n            x = \"0\"\n            possible_exception()\n    except Exception:\n        reveal_type(x, expected_text=\"Literal['0'] | None\")\n        reveal_type(ctx, expected_text=\"str | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.with5",
        "documentation": {}
    },
    {
        "label": "func2",
        "kind": 2,
        "importPath": "packages.pyright-internal.src.tests.samples.with5",
        "description": "packages.pyright-internal.src.tests.samples.with5",
        "peekOfCode": "def func2():\n    ctx: Optional[str] = None\n    try:\n        with create_context() as ctx:\n            possible_exception()\n            return\n    except Exception:\n        reveal_type(ctx, expected_text=\"str | None\")",
        "detail": "packages.pyright-internal.src.tests.samples.with5",
        "documentation": {}
    }
]